// DO NOT EDIT. This file is generated

#include "../Precompiled.h"
#include "../AngelScript/APITemplates.h"

#include "../AngelScript/GeneratedIncludes.h"
#include "../AngelScript/GeneratedClassMembers.h"
#include "../AngelScript/Manual.h"

namespace Urho3D
{

void FakeAddRef(void* ptr);
void FakeReleaseRef(void* ptr);

// class AbstractFile | File: ../IO/AbstractFile.h
void CollectMembers_AbstractFile(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Deserializer(methods);
    CollectMembers_Serializer(methods);

    Remove(methods, "virtual const String& Deserializer::GetName() const");

    // virtual void AbstractFile::SetName(const String& name)
    methods.Push(RegisterObjectMethodArgs("virtual void AbstractFile::SetName(const String& name)", "void SetName(const String&in)", AS_METHODPR(AbstractFile, SetName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual void AbstractFile::SetName(const String& name)", "void set_name(const String&in)", AS_METHODPR(AbstractFile, SetName, (const String&), void), AS_CALL_THISCALL));

    // const String& AbstractFile::GetName() const override
    methods.Push(RegisterObjectMethodArgs("const String& AbstractFile::GetName() const override", "const String& GetName() const", AS_METHODPR(AbstractFile, GetName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& AbstractFile::GetName() const override", "const String& get_name() const", AS_METHODPR(AbstractFile, GetName, () const, const String&), AS_CALL_THISCALL));
}

// class AllContentOctreeQuery | File: ../Graphics/OctreeQuery.h
void CollectMembers_AllContentOctreeQuery(Vector<RegisterObjectMethodArgs>& methods)
{
    // void AllContentOctreeQuery::TestDrawables(Drawable** start, Drawable** end, bool inside) override
    // Error: type "Drawable**" can not automatically bind

    // Intersection AllContentOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override
    methods.Push(RegisterObjectMethodArgs("Intersection AllContentOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override", "Intersection TestOctant(const BoundingBox&in, bool)", AS_METHODPR(AllContentOctreeQuery, TestOctant, (const BoundingBox&, bool), Intersection), AS_CALL_THISCALL));
}

// struct AllocatorBlock | File: ../Container/Allocator.h
void CollectMembers_AllocatorBlock(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct AllocatorNode | File: ../Container/Allocator.h
void CollectMembers_AllocatorNode(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Animatable | File: ../Scene/Animatable.h
void CollectMembers_Animatable(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Serializable(methods);

    Remove(methods, "virtual bool Serializable::LoadJSON(const JSONValue& source)");
    Remove(methods, "virtual bool Serializable::LoadXML(const XMLElement& source)");
    Remove(methods, "virtual bool Serializable::SaveJSON(JSONValue& dest) const");
    Remove(methods, "virtual bool Serializable::SaveXML(XMLElement& dest) const");

    // bool Animatable::LoadXML(const XMLElement& source) override
    methods.Push(RegisterObjectMethodArgs("bool Animatable::LoadXML(const XMLElement& source) override", "bool LoadXML(const XMLElement&in)", AS_METHODPR(Animatable, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool Animatable::SaveXML(XMLElement& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Animatable::SaveXML(XMLElement& dest) const override", "bool SaveXML(XMLElement&) const", AS_METHODPR(Animatable, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // bool Animatable::LoadJSON(const JSONValue& source) override
    methods.Push(RegisterObjectMethodArgs("bool Animatable::LoadJSON(const JSONValue& source) override", "bool LoadJSON(const JSONValue&in)", AS_METHODPR(Animatable, LoadJSON, (const JSONValue&), bool), AS_CALL_THISCALL));

    // bool Animatable::SaveJSON(JSONValue& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Animatable::SaveJSON(JSONValue& dest) const override", "bool SaveJSON(JSONValue&) const", AS_METHODPR(Animatable, SaveJSON, (JSONValue&) const, bool), AS_CALL_THISCALL));

    // void Animatable::SetAnimationEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetAnimationEnabled(bool enable)", "void SetAnimationEnabled(bool)", AS_METHODPR(Animatable, SetAnimationEnabled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetAnimationEnabled(bool enable)", "void set_animationEnabled(bool)", AS_METHODPR(Animatable, SetAnimationEnabled, (bool), void), AS_CALL_THISCALL));

    // void Animatable::SetAnimationTime(float time)
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetAnimationTime(float time)", "void SetAnimationTime(float)", AS_METHODPR(Animatable, SetAnimationTime, (float), void), AS_CALL_THISCALL));

    // void Animatable::SetObjectAnimation(ObjectAnimation* objectAnimation)
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetObjectAnimation(ObjectAnimation* objectAnimation)", "void SetObjectAnimation(ObjectAnimation@+)", AS_METHODPR(Animatable, SetObjectAnimation, (ObjectAnimation*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetObjectAnimation(ObjectAnimation* objectAnimation)", "void set_objectAnimation(ObjectAnimation@+)", AS_METHODPR(Animatable, SetObjectAnimation, (ObjectAnimation*), void), AS_CALL_THISCALL));

    // void Animatable::SetAttributeAnimation(const String& name, ValueAnimation* attributeAnimation, WrapMode wrapMode=WM_LOOP, float speed=1.0f)
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetAttributeAnimation(const String& name, ValueAnimation* attributeAnimation, WrapMode wrapMode=WM_LOOP, float speed=1.0f)", "void SetAttributeAnimation(const String&in, ValueAnimation@+, WrapMode = WM_LOOP, float = 1.0f)", AS_METHODPR(Animatable, SetAttributeAnimation, (const String&, ValueAnimation*, WrapMode, float), void), AS_CALL_THISCALL));

    // void Animatable::SetAttributeAnimationWrapMode(const String& name, WrapMode wrapMode)
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetAttributeAnimationWrapMode(const String& name, WrapMode wrapMode)", "void SetAttributeAnimationWrapMode(const String&in, WrapMode)", AS_METHODPR(Animatable, SetAttributeAnimationWrapMode, (const String&, WrapMode), void), AS_CALL_THISCALL));

    // void Animatable::SetAttributeAnimationSpeed(const String& name, float speed)
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetAttributeAnimationSpeed(const String& name, float speed)", "void SetAttributeAnimationSpeed(const String&in, float)", AS_METHODPR(Animatable, SetAttributeAnimationSpeed, (const String&, float), void), AS_CALL_THISCALL));

    // void Animatable::SetAttributeAnimationTime(const String& name, float time)
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetAttributeAnimationTime(const String& name, float time)", "void SetAttributeAnimationTime(const String&in, float)", AS_METHODPR(Animatable, SetAttributeAnimationTime, (const String&, float), void), AS_CALL_THISCALL));

    // void Animatable::RemoveObjectAnimation()
    methods.Push(RegisterObjectMethodArgs("void Animatable::RemoveObjectAnimation()", "void RemoveObjectAnimation()", AS_METHODPR(Animatable, RemoveObjectAnimation, (), void), AS_CALL_THISCALL));

    // void Animatable::RemoveAttributeAnimation(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Animatable::RemoveAttributeAnimation(const String& name)", "void RemoveAttributeAnimation(const String&in)", AS_METHODPR(Animatable, RemoveAttributeAnimation, (const String&), void), AS_CALL_THISCALL));

    // bool Animatable::GetAnimationEnabled() const
    methods.Push(RegisterObjectMethodArgs("bool Animatable::GetAnimationEnabled() const", "bool GetAnimationEnabled() const", AS_METHODPR(Animatable, GetAnimationEnabled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Animatable::GetAnimationEnabled() const", "bool get_animationEnabled() const", AS_METHODPR(Animatable, GetAnimationEnabled, () const, bool), AS_CALL_THISCALL));

    // ObjectAnimation* Animatable::GetObjectAnimation() const
    methods.Push(RegisterObjectMethodArgs("ObjectAnimation* Animatable::GetObjectAnimation() const", "ObjectAnimation@+ GetObjectAnimation() const", AS_METHODPR(Animatable, GetObjectAnimation, () const, ObjectAnimation*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ObjectAnimation* Animatable::GetObjectAnimation() const", "ObjectAnimation@+ get_objectAnimation() const", AS_METHODPR(Animatable, GetObjectAnimation, () const, ObjectAnimation*), AS_CALL_THISCALL));

    // ValueAnimation* Animatable::GetAttributeAnimation(const String& name) const
    methods.Push(RegisterObjectMethodArgs("ValueAnimation* Animatable::GetAttributeAnimation(const String& name) const", "ValueAnimation@+ GetAttributeAnimation(const String&in) const", AS_METHODPR(Animatable, GetAttributeAnimation, (const String&) const, ValueAnimation*), AS_CALL_THISCALL));

    // WrapMode Animatable::GetAttributeAnimationWrapMode(const String& name) const
    methods.Push(RegisterObjectMethodArgs("WrapMode Animatable::GetAttributeAnimationWrapMode(const String& name) const", "WrapMode GetAttributeAnimationWrapMode(const String&in) const", AS_METHODPR(Animatable, GetAttributeAnimationWrapMode, (const String&) const, WrapMode), AS_CALL_THISCALL));

    // float Animatable::GetAttributeAnimationSpeed(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float Animatable::GetAttributeAnimationSpeed(const String& name) const", "float GetAttributeAnimationSpeed(const String&in) const", AS_METHODPR(Animatable, GetAttributeAnimationSpeed, (const String&) const, float), AS_CALL_THISCALL));

    // float Animatable::GetAttributeAnimationTime(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float Animatable::GetAttributeAnimationTime(const String& name) const", "float GetAttributeAnimationTime(const String&in) const", AS_METHODPR(Animatable, GetAttributeAnimationTime, (const String&) const, float), AS_CALL_THISCALL));

    // void Animatable::SetObjectAnimationAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Animatable::SetObjectAnimationAttr(const ResourceRef& value)", "void SetObjectAnimationAttr(const ResourceRef&in)", AS_METHODPR(Animatable, SetObjectAnimationAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef Animatable::GetObjectAnimationAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Animatable::GetObjectAnimationAttr() const", "ResourceRef GetObjectAnimationAttr() const", AS_METHODPR(Animatable, GetObjectAnimationAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

// const Vector<SharedPtr<AnimationState>>& AnimatedModel::GetAnimationStates() const
// const Vector<SharedPtr<AnimationState>>& AnimatedModel::GetAnimationStates() const | File: ../Graphics/AnimatedModel.h
static CScriptArray* AnimatedModel_GetAnimationStates_void(AnimatedModel* ptr)
{
    const Vector<SharedPtr<AnimationState>>& result = ptr->GetAnimationStates();
    return VectorToHandleArray(result, "Array<AnimationState@>");
}


// const Vector<SharedPtr<VertexBuffer>>& AnimatedModel::GetMorphVertexBuffers() const
// const Vector<SharedPtr<VertexBuffer>>& AnimatedModel::GetMorphVertexBuffers() const | File: ../Graphics/AnimatedModel.h
static CScriptArray* AnimatedModel_GetMorphVertexBuffers_void(AnimatedModel* ptr)
{
    const Vector<SharedPtr<VertexBuffer>>& result = ptr->GetMorphVertexBuffers();
    return VectorToHandleArray(result, "Array<VertexBuffer@>");
}


// class AnimatedModel | File: ../Graphics/AnimatedModel.h
void CollectMembers_AnimatedModel(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_StaticModel(methods);

    Remove(methods, "ResourceRef StaticModel::GetModelAttr() const");
    Remove(methods, "bool Animatable::LoadJSON(const JSONValue& source) override");
    Remove(methods, "bool Animatable::LoadXML(const XMLElement& source) override");
    Remove(methods, "static void StaticModel::RegisterObject(Context* context)");
    Remove(methods, "virtual UpdateGeometryType Drawable::GetUpdateGeometryType()");
    Remove(methods, "virtual bool Serializable::Load(Deserializer& source)");
    Remove(methods, "virtual void Drawable::Update(const FrameInfo& frame)");
    Remove(methods, "virtual void Drawable::UpdateGeometry(const FrameInfo& frame)");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");
    Remove(methods, "virtual void StaticModel::SetModel(Model* model)");
    Remove(methods, "void Drawable::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override");
    Remove(methods, "void StaticModel::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override");
    Remove(methods, "void StaticModel::SetModelAttr(const ResourceRef& value)");
    Remove(methods, "void StaticModel::UpdateBatches(const FrameInfo& frame) override");

    // VariantVector AnimatedModel::GetAnimationStatesAttr() const
    // Error: type "VariantVector" can not automatically bind

    // VariantVector AnimatedModel::GetBonesEnabledAttr() const
    // Error: type "VariantVector" can not automatically bind

    // const Vector<PODVector<unsigned>>& AnimatedModel::GetGeometryBoneMappings() const
    // Error: type "const Vector<PODVector<unsigned>>&" can not automatically bind

    // const Vector<PODVector<Matrix3x4>>& AnimatedModel::GetGeometrySkinMatrices() const
    // Error: type "const Vector<PODVector<Matrix3x4>>&" can not automatically bind

    // const Vector<ModelMorph>& AnimatedModel::GetMorphs() const
    // Error: type "const Vector<ModelMorph>&" can not automatically bind

    // const PODVector<unsigned char>& AnimatedModel::GetMorphsAttr() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void AnimatedModel::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void AnimatedModel::SetAnimationStatesAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void AnimatedModel::SetBonesEnabledAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void AnimatedModel::SetMorphsAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // bool AnimatedModel::Load(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool AnimatedModel::Load(Deserializer& source) override", "bool Load(Deserializer&)", AS_METHODPR(AnimatedModel, Load, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool AnimatedModel::LoadXML(const XMLElement& source) override
    methods.Push(RegisterObjectMethodArgs("bool AnimatedModel::LoadXML(const XMLElement& source) override", "bool LoadXML(const XMLElement&in)", AS_METHODPR(AnimatedModel, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool AnimatedModel::LoadJSON(const JSONValue& source) override
    methods.Push(RegisterObjectMethodArgs("bool AnimatedModel::LoadJSON(const JSONValue& source) override", "bool LoadJSON(const JSONValue&in)", AS_METHODPR(AnimatedModel, LoadJSON, (const JSONValue&), bool), AS_CALL_THISCALL));

    // void AnimatedModel::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(AnimatedModel, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void AnimatedModel::Update(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::Update(const FrameInfo& frame) override", "void Update(const FrameInfo&in)", AS_METHODPR(AnimatedModel, Update, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void AnimatedModel::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(AnimatedModel, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void AnimatedModel::UpdateGeometry(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::UpdateGeometry(const FrameInfo& frame) override", "void UpdateGeometry(const FrameInfo&in)", AS_METHODPR(AnimatedModel, UpdateGeometry, (const FrameInfo&), void), AS_CALL_THISCALL));

    // UpdateGeometryType AnimatedModel::GetUpdateGeometryType() override
    methods.Push(RegisterObjectMethodArgs("UpdateGeometryType AnimatedModel::GetUpdateGeometryType() override", "UpdateGeometryType GetUpdateGeometryType()", AS_METHODPR(AnimatedModel, GetUpdateGeometryType, (), UpdateGeometryType), AS_CALL_THISCALL));

    // void AnimatedModel::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(AnimatedModel, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void AnimatedModel::SetModel(Model* model, bool createBones=true)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetModel(Model* model, bool createBones=true)", "void SetModel(Model@+, bool = true)", AS_METHODPR(AnimatedModel, SetModel, (Model*, bool), void), AS_CALL_THISCALL));

    // AnimationState* AnimatedModel::AddAnimationState(Animation* animation)
    methods.Push(RegisterObjectMethodArgs("AnimationState* AnimatedModel::AddAnimationState(Animation* animation)", "AnimationState@+ AddAnimationState(Animation@+)", AS_METHODPR(AnimatedModel, AddAnimationState, (Animation*), AnimationState*), AS_CALL_THISCALL));

    // void AnimatedModel::RemoveAnimationState(Animation* animation)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::RemoveAnimationState(Animation* animation)", "void RemoveAnimationState(Animation@+)", AS_METHODPR(AnimatedModel, RemoveAnimationState, (Animation*), void), AS_CALL_THISCALL));

    // void AnimatedModel::RemoveAnimationState(const String& animationName)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::RemoveAnimationState(const String& animationName)", "void RemoveAnimationState(const String&in)", AS_METHODPR(AnimatedModel, RemoveAnimationState, (const String&), void), AS_CALL_THISCALL));

    // void AnimatedModel::RemoveAnimationState(StringHash animationNameHash)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::RemoveAnimationState(StringHash animationNameHash)", "void RemoveAnimationState(StringHash)", AS_METHODPR(AnimatedModel, RemoveAnimationState, (StringHash), void), AS_CALL_THISCALL));

    // void AnimatedModel::RemoveAnimationState(AnimationState* state)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::RemoveAnimationState(AnimationState* state)", "void RemoveAnimationState(AnimationState@+)", AS_METHODPR(AnimatedModel, RemoveAnimationState, (AnimationState*), void), AS_CALL_THISCALL));

    // void AnimatedModel::RemoveAnimationState(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::RemoveAnimationState(unsigned index)", "void RemoveAnimationState(uint)", AS_METHODPR(AnimatedModel, RemoveAnimationState, (unsigned), void), AS_CALL_THISCALL));

    // void AnimatedModel::RemoveAllAnimationStates()
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::RemoveAllAnimationStates()", "void RemoveAllAnimationStates()", AS_METHODPR(AnimatedModel, RemoveAllAnimationStates, (), void), AS_CALL_THISCALL));

    // void AnimatedModel::SetAnimationLodBias(float bias)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetAnimationLodBias(float bias)", "void SetAnimationLodBias(float)", AS_METHODPR(AnimatedModel, SetAnimationLodBias, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetAnimationLodBias(float bias)", "void set_animationLodBias(float)", AS_METHODPR(AnimatedModel, SetAnimationLodBias, (float), void), AS_CALL_THISCALL));

    // void AnimatedModel::SetUpdateInvisible(bool enable)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetUpdateInvisible(bool enable)", "void SetUpdateInvisible(bool)", AS_METHODPR(AnimatedModel, SetUpdateInvisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetUpdateInvisible(bool enable)", "void set_updateInvisible(bool)", AS_METHODPR(AnimatedModel, SetUpdateInvisible, (bool), void), AS_CALL_THISCALL));

    // void AnimatedModel::SetMorphWeight(unsigned index, float weight)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetMorphWeight(unsigned index, float weight)", "void SetMorphWeight(uint, float)", AS_METHODPR(AnimatedModel, SetMorphWeight, (unsigned, float), void), AS_CALL_THISCALL));

    // void AnimatedModel::SetMorphWeight(const String& name, float weight)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetMorphWeight(const String& name, float weight)", "void SetMorphWeight(const String&in, float)", AS_METHODPR(AnimatedModel, SetMorphWeight, (const String&, float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetMorphWeight(const String& name, float weight)", "void set_morphWeights(const String&in, float)", AS_METHODPR(AnimatedModel, SetMorphWeight, (const String&, float), void), AS_CALL_THISCALL));

    // void AnimatedModel::SetMorphWeight(StringHash nameHash, float weight)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetMorphWeight(StringHash nameHash, float weight)", "void SetMorphWeight(StringHash, float)", AS_METHODPR(AnimatedModel, SetMorphWeight, (StringHash, float), void), AS_CALL_THISCALL));

    // void AnimatedModel::ResetMorphWeights()
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::ResetMorphWeights()", "void ResetMorphWeights()", AS_METHODPR(AnimatedModel, ResetMorphWeights, (), void), AS_CALL_THISCALL));

    // void AnimatedModel::ApplyAnimation()
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::ApplyAnimation()", "void ApplyAnimation()", AS_METHODPR(AnimatedModel, ApplyAnimation, (), void), AS_CALL_THISCALL));

    // Skeleton& AnimatedModel::GetSkeleton()
    methods.Push(RegisterObjectMethodArgs("Skeleton& AnimatedModel::GetSkeleton()", "Skeleton& GetSkeleton()", AS_METHODPR(AnimatedModel, GetSkeleton, (), Skeleton&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Skeleton& AnimatedModel::GetSkeleton()", "Skeleton& get_skeleton()", AS_METHODPR(AnimatedModel, GetSkeleton, (), Skeleton&), AS_CALL_THISCALL));

    // const Vector<SharedPtr<AnimationState>>& AnimatedModel::GetAnimationStates() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<AnimationState>>& AnimatedModel::GetAnimationStates() const", "Array<AnimationState@>@ GetAnimationStates() const", AS_FUNCTION_OBJFIRST(AnimatedModel_GetAnimationStates_void), AS_CALL_CDECL_OBJFIRST));

    // unsigned AnimatedModel::GetNumAnimationStates() const
    methods.Push(RegisterObjectMethodArgs("unsigned AnimatedModel::GetNumAnimationStates() const", "uint GetNumAnimationStates() const", AS_METHODPR(AnimatedModel, GetNumAnimationStates, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned AnimatedModel::GetNumAnimationStates() const", "uint get_numAnimationStates() const", AS_METHODPR(AnimatedModel, GetNumAnimationStates, () const, unsigned), AS_CALL_THISCALL));

    // AnimationState* AnimatedModel::GetAnimationState(Animation* animation) const
    methods.Push(RegisterObjectMethodArgs("AnimationState* AnimatedModel::GetAnimationState(Animation* animation) const", "AnimationState@+ GetAnimationState(Animation@+) const", AS_METHODPR(AnimatedModel, GetAnimationState, (Animation*) const, AnimationState*), AS_CALL_THISCALL));

    // AnimationState* AnimatedModel::GetAnimationState(const String& animationName) const
    methods.Push(RegisterObjectMethodArgs("AnimationState* AnimatedModel::GetAnimationState(const String& animationName) const", "AnimationState@+ GetAnimationState(const String&in) const", AS_METHODPR(AnimatedModel, GetAnimationState, (const String&) const, AnimationState*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("AnimationState* AnimatedModel::GetAnimationState(const String& animationName) const", "AnimationState@+ get_animationStates(const String&in) const", AS_METHODPR(AnimatedModel, GetAnimationState, (const String&) const, AnimationState*), AS_CALL_THISCALL));

    // AnimationState* AnimatedModel::GetAnimationState(StringHash animationNameHash) const
    methods.Push(RegisterObjectMethodArgs("AnimationState* AnimatedModel::GetAnimationState(StringHash animationNameHash) const", "AnimationState@+ GetAnimationState(StringHash) const", AS_METHODPR(AnimatedModel, GetAnimationState, (StringHash) const, AnimationState*), AS_CALL_THISCALL));

    // AnimationState* AnimatedModel::GetAnimationState(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("AnimationState* AnimatedModel::GetAnimationState(unsigned index) const", "AnimationState@+ GetAnimationState(uint) const", AS_METHODPR(AnimatedModel, GetAnimationState, (unsigned) const, AnimationState*), AS_CALL_THISCALL));

    // float AnimatedModel::GetAnimationLodBias() const
    methods.Push(RegisterObjectMethodArgs("float AnimatedModel::GetAnimationLodBias() const", "float GetAnimationLodBias() const", AS_METHODPR(AnimatedModel, GetAnimationLodBias, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float AnimatedModel::GetAnimationLodBias() const", "float get_animationLodBias() const", AS_METHODPR(AnimatedModel, GetAnimationLodBias, () const, float), AS_CALL_THISCALL));

    // bool AnimatedModel::GetUpdateInvisible() const
    methods.Push(RegisterObjectMethodArgs("bool AnimatedModel::GetUpdateInvisible() const", "bool GetUpdateInvisible() const", AS_METHODPR(AnimatedModel, GetUpdateInvisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool AnimatedModel::GetUpdateInvisible() const", "bool get_updateInvisible() const", AS_METHODPR(AnimatedModel, GetUpdateInvisible, () const, bool), AS_CALL_THISCALL));

    // const Vector<SharedPtr<VertexBuffer>>& AnimatedModel::GetMorphVertexBuffers() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<VertexBuffer>>& AnimatedModel::GetMorphVertexBuffers() const", "Array<VertexBuffer@>@ GetMorphVertexBuffers() const", AS_FUNCTION_OBJFIRST(AnimatedModel_GetMorphVertexBuffers_void), AS_CALL_CDECL_OBJFIRST));

    // unsigned AnimatedModel::GetNumMorphs() const
    methods.Push(RegisterObjectMethodArgs("unsigned AnimatedModel::GetNumMorphs() const", "uint GetNumMorphs() const", AS_METHODPR(AnimatedModel, GetNumMorphs, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned AnimatedModel::GetNumMorphs() const", "uint get_numMorphs() const", AS_METHODPR(AnimatedModel, GetNumMorphs, () const, unsigned), AS_CALL_THISCALL));

    // float AnimatedModel::GetMorphWeight(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("float AnimatedModel::GetMorphWeight(unsigned index) const", "float GetMorphWeight(uint) const", AS_METHODPR(AnimatedModel, GetMorphWeight, (unsigned) const, float), AS_CALL_THISCALL));

    // float AnimatedModel::GetMorphWeight(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimatedModel::GetMorphWeight(const String& name) const", "float GetMorphWeight(const String&in) const", AS_METHODPR(AnimatedModel, GetMorphWeight, (const String&) const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float AnimatedModel::GetMorphWeight(const String& name) const", "float get_morphWeights(const String&in) const", AS_METHODPR(AnimatedModel, GetMorphWeight, (const String&) const, float), AS_CALL_THISCALL));

    // float AnimatedModel::GetMorphWeight(StringHash nameHash) const
    methods.Push(RegisterObjectMethodArgs("float AnimatedModel::GetMorphWeight(StringHash nameHash) const", "float GetMorphWeight(StringHash) const", AS_METHODPR(AnimatedModel, GetMorphWeight, (StringHash) const, float), AS_CALL_THISCALL));

    // bool AnimatedModel::IsMaster() const
    methods.Push(RegisterObjectMethodArgs("bool AnimatedModel::IsMaster() const", "bool IsMaster() const", AS_METHODPR(AnimatedModel, IsMaster, () const, bool), AS_CALL_THISCALL));

    // void AnimatedModel::SetModelAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::SetModelAttr(const ResourceRef& value)", "void SetModelAttr(const ResourceRef&in)", AS_METHODPR(AnimatedModel, SetModelAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef AnimatedModel::GetModelAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef AnimatedModel::GetModelAttr() const", "ResourceRef GetModelAttr() const", AS_METHODPR(AnimatedModel, GetModelAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void AnimatedModel::UpdateBoneBoundingBox()
    methods.Push(RegisterObjectMethodArgs("void AnimatedModel::UpdateBoneBoundingBox()", "void UpdateBoneBoundingBox()", AS_METHODPR(AnimatedModel, UpdateBoneBoundingBox, (), void), AS_CALL_THISCALL));
}

// SharedPtr<Animation> Animation::Clone(const String& cloneName=String::EMPTY) const
// SharedPtr<Animation> Animation::Clone(const String& cloneName=String::EMPTY) const | File: ../Graphics/Animation.h
static Animation* Animation_Clone_String(Animation* ptr, const String& cloneName)
{
    SharedPtr<Animation> result = ptr->Clone(cloneName);
    return result.Detach();
}


// class Animation | File: ../Graphics/Animation.h
void CollectMembers_Animation(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ResourceWithMetadata(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // const HashMap<StringHash, AnimationTrack>& Animation::GetTracks() const
    // Error: type "const HashMap<StringHash, AnimationTrack>&" can not automatically bind

    // AnimationTriggerPoint* Animation::GetTrigger(unsigned index)
    // Error: type "AnimationTriggerPoint*" can not automatically bind

    // const Vector<AnimationTriggerPoint>& Animation::GetTriggers() const
    // Error: type "const Vector<AnimationTriggerPoint>&" can not automatically bind

    // bool Animation::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Animation::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Animation, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Animation::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Animation::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(Animation, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // void Animation::SetAnimationName(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Animation::SetAnimationName(const String& name)", "void SetAnimationName(const String&in)", AS_METHODPR(Animation, SetAnimationName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Animation::SetAnimationName(const String& name)", "void set_animationName(const String&in)", AS_METHODPR(Animation, SetAnimationName, (const String&), void), AS_CALL_THISCALL));

    // void Animation::SetLength(float length)
    methods.Push(RegisterObjectMethodArgs("void Animation::SetLength(float length)", "void SetLength(float)", AS_METHODPR(Animation, SetLength, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Animation::SetLength(float length)", "void set_length(float)", AS_METHODPR(Animation, SetLength, (float), void), AS_CALL_THISCALL));

    // AnimationTrack* Animation::CreateTrack(const String& name)
    methods.Push(RegisterObjectMethodArgs("AnimationTrack* Animation::CreateTrack(const String& name)", "AnimationTrack@+ CreateTrack(const String&in)", AS_METHODPR(Animation, CreateTrack, (const String&), AnimationTrack*), AS_CALL_THISCALL));

    // bool Animation::RemoveTrack(const String& name)
    methods.Push(RegisterObjectMethodArgs("bool Animation::RemoveTrack(const String& name)", "bool RemoveTrack(const String&in)", AS_METHODPR(Animation, RemoveTrack, (const String&), bool), AS_CALL_THISCALL));

    // void Animation::RemoveAllTracks()
    methods.Push(RegisterObjectMethodArgs("void Animation::RemoveAllTracks()", "void RemoveAllTracks()", AS_METHODPR(Animation, RemoveAllTracks, (), void), AS_CALL_THISCALL));

    // void Animation::SetTrigger(unsigned index, const AnimationTriggerPoint& trigger)
    methods.Push(RegisterObjectMethodArgs("void Animation::SetTrigger(unsigned index, const AnimationTriggerPoint& trigger)", "void SetTrigger(uint, const AnimationTriggerPoint&in)", AS_METHODPR(Animation, SetTrigger, (unsigned, const AnimationTriggerPoint&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Animation::SetTrigger(unsigned index, const AnimationTriggerPoint& trigger)", "void set_triggers(uint, const AnimationTriggerPoint&in)", AS_METHODPR(Animation, SetTrigger, (unsigned, const AnimationTriggerPoint&), void), AS_CALL_THISCALL));

    // void Animation::AddTrigger(const AnimationTriggerPoint& trigger)
    methods.Push(RegisterObjectMethodArgs("void Animation::AddTrigger(const AnimationTriggerPoint& trigger)", "void AddTrigger(const AnimationTriggerPoint&in)", AS_METHODPR(Animation, AddTrigger, (const AnimationTriggerPoint&), void), AS_CALL_THISCALL));

    // void Animation::AddTrigger(float time, bool timeIsNormalized, const Variant& data)
    methods.Push(RegisterObjectMethodArgs("void Animation::AddTrigger(float time, bool timeIsNormalized, const Variant& data)", "void AddTrigger(float, bool, const Variant&in)", AS_METHODPR(Animation, AddTrigger, (float, bool, const Variant&), void), AS_CALL_THISCALL));

    // void Animation::RemoveTrigger(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void Animation::RemoveTrigger(unsigned index)", "void RemoveTrigger(uint)", AS_METHODPR(Animation, RemoveTrigger, (unsigned), void), AS_CALL_THISCALL));

    // void Animation::RemoveAllTriggers()
    methods.Push(RegisterObjectMethodArgs("void Animation::RemoveAllTriggers()", "void RemoveAllTriggers()", AS_METHODPR(Animation, RemoveAllTriggers, (), void), AS_CALL_THISCALL));

    // void Animation::SetNumTriggers(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void Animation::SetNumTriggers(unsigned num)", "void SetNumTriggers(uint)", AS_METHODPR(Animation, SetNumTriggers, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Animation::SetNumTriggers(unsigned num)", "void set_numTriggers(uint)", AS_METHODPR(Animation, SetNumTriggers, (unsigned), void), AS_CALL_THISCALL));

    // SharedPtr<Animation> Animation::Clone(const String& cloneName=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Animation> Animation::Clone(const String& cloneName=String::EMPTY) const", "Animation@+ Clone(const String&in = String::EMPTY) const", AS_FUNCTION_OBJFIRST(Animation_Clone_String), AS_CALL_CDECL_OBJFIRST));

    // const String& Animation::GetAnimationName() const
    methods.Push(RegisterObjectMethodArgs("const String& Animation::GetAnimationName() const", "const String& GetAnimationName() const", AS_METHODPR(Animation, GetAnimationName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Animation::GetAnimationName() const", "const String& get_animationName() const", AS_METHODPR(Animation, GetAnimationName, () const, const String&), AS_CALL_THISCALL));

    // StringHash Animation::GetAnimationNameHash() const
    methods.Push(RegisterObjectMethodArgs("StringHash Animation::GetAnimationNameHash() const", "StringHash GetAnimationNameHash() const", AS_METHODPR(Animation, GetAnimationNameHash, () const, StringHash), AS_CALL_THISCALL));

    // float Animation::GetLength() const
    methods.Push(RegisterObjectMethodArgs("float Animation::GetLength() const", "float GetLength() const", AS_METHODPR(Animation, GetLength, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Animation::GetLength() const", "float get_length() const", AS_METHODPR(Animation, GetLength, () const, float), AS_CALL_THISCALL));

    // unsigned Animation::GetNumTracks() const
    methods.Push(RegisterObjectMethodArgs("unsigned Animation::GetNumTracks() const", "uint GetNumTracks() const", AS_METHODPR(Animation, GetNumTracks, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Animation::GetNumTracks() const", "uint get_numTracks() const", AS_METHODPR(Animation, GetNumTracks, () const, unsigned), AS_CALL_THISCALL));

    // AnimationTrack* Animation::GetTrack(unsigned index)
    methods.Push(RegisterObjectMethodArgs("AnimationTrack* Animation::GetTrack(unsigned index)", "AnimationTrack@+ GetTrack(uint)", AS_METHODPR(Animation, GetTrack, (unsigned), AnimationTrack*), AS_CALL_THISCALL));

    // AnimationTrack* Animation::GetTrack(const String& name)
    methods.Push(RegisterObjectMethodArgs("AnimationTrack* Animation::GetTrack(const String& name)", "AnimationTrack@+ GetTrack(const String&in)", AS_METHODPR(Animation, GetTrack, (const String&), AnimationTrack*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("AnimationTrack* Animation::GetTrack(const String& name)", "AnimationTrack@+ get_tracks(const String&in)", AS_METHODPR(Animation, GetTrack, (const String&), AnimationTrack*), AS_CALL_THISCALL));

    // AnimationTrack* Animation::GetTrack(StringHash nameHash)
    methods.Push(RegisterObjectMethodArgs("AnimationTrack* Animation::GetTrack(StringHash nameHash)", "AnimationTrack@+ GetTrack(StringHash)", AS_METHODPR(Animation, GetTrack, (StringHash), AnimationTrack*), AS_CALL_THISCALL));

    // unsigned Animation::GetNumTriggers() const
    methods.Push(RegisterObjectMethodArgs("unsigned Animation::GetNumTriggers() const", "uint GetNumTriggers() const", AS_METHODPR(Animation, GetNumTriggers, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Animation::GetNumTriggers() const", "uint get_numTriggers() const", AS_METHODPR(Animation, GetNumTriggers, () const, unsigned), AS_CALL_THISCALL));
}

// struct AnimationControl | File: ../Graphics/AnimationController.h
void CollectMembers_AnimationControl(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class AnimationController | File: ../Graphics/AnimationController.h
void CollectMembers_AnimationController(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::OnSetEnabled()");

    // const Vector<AnimationControl>& AnimationController::GetAnimations() const
    // Error: type "const Vector<AnimationControl>&" can not automatically bind

    // VariantVector AnimationController::GetAnimationsAttr() const
    // Error: type "VariantVector" can not automatically bind

    // const PODVector<unsigned char>& AnimationController::GetNetAnimationsAttr() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // VariantVector AnimationController::GetNodeAnimationStatesAttr() const
    // Error: type "VariantVector" can not automatically bind

    // void AnimationController::SetAnimationsAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void AnimationController::SetNetAnimationsAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void AnimationController::SetNodeAnimationStatesAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void AnimationController::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void AnimationController::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(AnimationController, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // virtual void AnimationController::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("virtual void AnimationController::Update(float timeStep)", "void Update(float)", AS_METHODPR(AnimationController, Update, (float), void), AS_CALL_THISCALL));

    // bool AnimationController::Play(const String& name, unsigned char layer, bool looped, float fadeInTime=0.0f)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::Play(const String& name, unsigned char layer, bool looped, float fadeInTime=0.0f)", "bool Play(const String&in, uint8, bool, float = 0.0f)", AS_METHODPR(AnimationController, Play, (const String&, unsigned char, bool, float), bool), AS_CALL_THISCALL));

    // bool AnimationController::PlayExclusive(const String& name, unsigned char layer, bool looped, float fadeTime=0.0f)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::PlayExclusive(const String& name, unsigned char layer, bool looped, float fadeTime=0.0f)", "bool PlayExclusive(const String&in, uint8, bool, float = 0.0f)", AS_METHODPR(AnimationController, PlayExclusive, (const String&, unsigned char, bool, float), bool), AS_CALL_THISCALL));

    // bool AnimationController::Stop(const String& name, float fadeOutTime=0.0f)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::Stop(const String& name, float fadeOutTime=0.0f)", "bool Stop(const String&in, float = 0.0f)", AS_METHODPR(AnimationController, Stop, (const String&, float), bool), AS_CALL_THISCALL));

    // void AnimationController::StopLayer(unsigned char layer, float fadeOutTime=0.0f)
    methods.Push(RegisterObjectMethodArgs("void AnimationController::StopLayer(unsigned char layer, float fadeOutTime=0.0f)", "void StopLayer(uint8, float = 0.0f)", AS_METHODPR(AnimationController, StopLayer, (unsigned char, float), void), AS_CALL_THISCALL));

    // void AnimationController::StopAll(float fadeOutTime=0.0f)
    methods.Push(RegisterObjectMethodArgs("void AnimationController::StopAll(float fadeOutTime=0.0f)", "void StopAll(float = 0.0f)", AS_METHODPR(AnimationController, StopAll, (float), void), AS_CALL_THISCALL));

    // bool AnimationController::Fade(const String& name, float targetWeight, float fadeTime)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::Fade(const String& name, float targetWeight, float fadeTime)", "bool Fade(const String&in, float, float)", AS_METHODPR(AnimationController, Fade, (const String&, float, float), bool), AS_CALL_THISCALL));

    // bool AnimationController::FadeOthers(const String& name, float targetWeight, float fadeTime)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::FadeOthers(const String& name, float targetWeight, float fadeTime)", "bool FadeOthers(const String&in, float, float)", AS_METHODPR(AnimationController, FadeOthers, (const String&, float, float), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetLayer(const String& name, unsigned char layer)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetLayer(const String& name, unsigned char layer)", "bool SetLayer(const String&in, uint8)", AS_METHODPR(AnimationController, SetLayer, (const String&, unsigned char), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetStartBone(const String& name, const String& startBoneName)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetStartBone(const String& name, const String& startBoneName)", "bool SetStartBone(const String&in, const String&in)", AS_METHODPR(AnimationController, SetStartBone, (const String&, const String&), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetTime(const String& name, float time)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetTime(const String& name, float time)", "bool SetTime(const String&in, float)", AS_METHODPR(AnimationController, SetTime, (const String&, float), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetWeight(const String& name, float weight)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetWeight(const String& name, float weight)", "bool SetWeight(const String&in, float)", AS_METHODPR(AnimationController, SetWeight, (const String&, float), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetLooped(const String& name, bool enable)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetLooped(const String& name, bool enable)", "bool SetLooped(const String&in, bool)", AS_METHODPR(AnimationController, SetLooped, (const String&, bool), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetSpeed(const String& name, float speed)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetSpeed(const String& name, float speed)", "bool SetSpeed(const String&in, float)", AS_METHODPR(AnimationController, SetSpeed, (const String&, float), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetAutoFade(const String& name, float fadeOutTime)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetAutoFade(const String& name, float fadeOutTime)", "bool SetAutoFade(const String&in, float)", AS_METHODPR(AnimationController, SetAutoFade, (const String&, float), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetRemoveOnCompletion(const String& name, bool removeOnCompletion)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetRemoveOnCompletion(const String& name, bool removeOnCompletion)", "bool SetRemoveOnCompletion(const String&in, bool)", AS_METHODPR(AnimationController, SetRemoveOnCompletion, (const String&, bool), bool), AS_CALL_THISCALL));

    // bool AnimationController::SetBlendMode(const String& name, AnimationBlendMode mode)
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::SetBlendMode(const String& name, AnimationBlendMode mode)", "bool SetBlendMode(const String&in, AnimationBlendMode)", AS_METHODPR(AnimationController, SetBlendMode, (const String&, AnimationBlendMode), bool), AS_CALL_THISCALL));

    // bool AnimationController::IsPlaying(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::IsPlaying(const String& name) const", "bool IsPlaying(const String&in) const", AS_METHODPR(AnimationController, IsPlaying, (const String&) const, bool), AS_CALL_THISCALL));

    // bool AnimationController::IsPlaying(unsigned char layer) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::IsPlaying(unsigned char layer) const", "bool IsPlaying(uint8) const", AS_METHODPR(AnimationController, IsPlaying, (unsigned char) const, bool), AS_CALL_THISCALL));

    // bool AnimationController::IsFadingIn(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::IsFadingIn(const String& name) const", "bool IsFadingIn(const String&in) const", AS_METHODPR(AnimationController, IsFadingIn, (const String&) const, bool), AS_CALL_THISCALL));

    // bool AnimationController::IsFadingOut(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::IsFadingOut(const String& name) const", "bool IsFadingOut(const String&in) const", AS_METHODPR(AnimationController, IsFadingOut, (const String&) const, bool), AS_CALL_THISCALL));

    // bool AnimationController::IsAtEnd(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::IsAtEnd(const String& name) const", "bool IsAtEnd(const String&in) const", AS_METHODPR(AnimationController, IsAtEnd, (const String&) const, bool), AS_CALL_THISCALL));

    // unsigned char AnimationController::GetLayer(const String& name) const
    methods.Push(RegisterObjectMethodArgs("unsigned char AnimationController::GetLayer(const String& name) const", "uint8 GetLayer(const String&in) const", AS_METHODPR(AnimationController, GetLayer, (const String&) const, unsigned char), AS_CALL_THISCALL));

    // Bone* AnimationController::GetStartBone(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Bone* AnimationController::GetStartBone(const String& name) const", "Bone@+ GetStartBone(const String&in) const", AS_METHODPR(AnimationController, GetStartBone, (const String&) const, Bone*), AS_CALL_THISCALL));

    // const String& AnimationController::GetStartBoneName(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const String& AnimationController::GetStartBoneName(const String& name) const", "const String& GetStartBoneName(const String&in) const", AS_METHODPR(AnimationController, GetStartBoneName, (const String&) const, const String&), AS_CALL_THISCALL));

    // float AnimationController::GetTime(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimationController::GetTime(const String& name) const", "float GetTime(const String&in) const", AS_METHODPR(AnimationController, GetTime, (const String&) const, float), AS_CALL_THISCALL));

    // float AnimationController::GetWeight(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimationController::GetWeight(const String& name) const", "float GetWeight(const String&in) const", AS_METHODPR(AnimationController, GetWeight, (const String&) const, float), AS_CALL_THISCALL));

    // bool AnimationController::IsLooped(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::IsLooped(const String& name) const", "bool IsLooped(const String&in) const", AS_METHODPR(AnimationController, IsLooped, (const String&) const, bool), AS_CALL_THISCALL));

    // AnimationBlendMode AnimationController::GetBlendMode(const String& name) const
    methods.Push(RegisterObjectMethodArgs("AnimationBlendMode AnimationController::GetBlendMode(const String& name) const", "AnimationBlendMode GetBlendMode(const String&in) const", AS_METHODPR(AnimationController, GetBlendMode, (const String&) const, AnimationBlendMode), AS_CALL_THISCALL));

    // float AnimationController::GetLength(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimationController::GetLength(const String& name) const", "float GetLength(const String&in) const", AS_METHODPR(AnimationController, GetLength, (const String&) const, float), AS_CALL_THISCALL));

    // float AnimationController::GetSpeed(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimationController::GetSpeed(const String& name) const", "float GetSpeed(const String&in) const", AS_METHODPR(AnimationController, GetSpeed, (const String&) const, float), AS_CALL_THISCALL));

    // float AnimationController::GetFadeTarget(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimationController::GetFadeTarget(const String& name) const", "float GetFadeTarget(const String&in) const", AS_METHODPR(AnimationController, GetFadeTarget, (const String&) const, float), AS_CALL_THISCALL));

    // float AnimationController::GetFadeTime(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimationController::GetFadeTime(const String& name) const", "float GetFadeTime(const String&in) const", AS_METHODPR(AnimationController, GetFadeTime, (const String&) const, float), AS_CALL_THISCALL));

    // float AnimationController::GetAutoFade(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimationController::GetAutoFade(const String& name) const", "float GetAutoFade(const String&in) const", AS_METHODPR(AnimationController, GetAutoFade, (const String&) const, float), AS_CALL_THISCALL));

    // bool AnimationController::GetRemoveOnCompletion(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationController::GetRemoveOnCompletion(const String& name) const", "bool GetRemoveOnCompletion(const String&in) const", AS_METHODPR(AnimationController, GetRemoveOnCompletion, (const String&) const, bool), AS_CALL_THISCALL));

    // AnimationState* AnimationController::GetAnimationState(const String& name) const
    methods.Push(RegisterObjectMethodArgs("AnimationState* AnimationController::GetAnimationState(const String& name) const", "AnimationState@+ GetAnimationState(const String&in) const", AS_METHODPR(AnimationController, GetAnimationState, (const String&) const, AnimationState*), AS_CALL_THISCALL));

    // AnimationState* AnimationController::GetAnimationState(StringHash nameHash) const
    methods.Push(RegisterObjectMethodArgs("AnimationState* AnimationController::GetAnimationState(StringHash nameHash) const", "AnimationState@+ GetAnimationState(StringHash) const", AS_METHODPR(AnimationController, GetAnimationState, (StringHash) const, AnimationState*), AS_CALL_THISCALL));
}

// struct AnimationKeyFrame | File: ../Graphics/Animation.h
void CollectMembers_AnimationKeyFrame(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class AnimationState | File: ../Graphics/AnimationState.h
void CollectMembers_AnimationState(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // void AnimationState::SetStartBone(Bone* startBone)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetStartBone(Bone* startBone)", "void SetStartBone(Bone@+)", AS_METHODPR(AnimationState, SetStartBone, (Bone*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetStartBone(Bone* startBone)", "void set_startBone(Bone@+)", AS_METHODPR(AnimationState, SetStartBone, (Bone*), void), AS_CALL_THISCALL));

    // void AnimationState::SetLooped(bool looped)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetLooped(bool looped)", "void SetLooped(bool)", AS_METHODPR(AnimationState, SetLooped, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetLooped(bool looped)", "void set_looped(bool)", AS_METHODPR(AnimationState, SetLooped, (bool), void), AS_CALL_THISCALL));

    // void AnimationState::SetWeight(float weight)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetWeight(float weight)", "void SetWeight(float)", AS_METHODPR(AnimationState, SetWeight, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetWeight(float weight)", "void set_weight(float)", AS_METHODPR(AnimationState, SetWeight, (float), void), AS_CALL_THISCALL));

    // void AnimationState::SetBlendMode(AnimationBlendMode mode)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetBlendMode(AnimationBlendMode mode)", "void SetBlendMode(AnimationBlendMode)", AS_METHODPR(AnimationState, SetBlendMode, (AnimationBlendMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetBlendMode(AnimationBlendMode mode)", "void set_blendMode(AnimationBlendMode)", AS_METHODPR(AnimationState, SetBlendMode, (AnimationBlendMode), void), AS_CALL_THISCALL));

    // void AnimationState::SetTime(float time)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetTime(float time)", "void SetTime(float)", AS_METHODPR(AnimationState, SetTime, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetTime(float time)", "void set_time(float)", AS_METHODPR(AnimationState, SetTime, (float), void), AS_CALL_THISCALL));

    // void AnimationState::SetBoneWeight(unsigned index, float weight, bool recursive=false)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetBoneWeight(unsigned index, float weight, bool recursive=false)", "void SetBoneWeight(uint, float, bool = false)", AS_METHODPR(AnimationState, SetBoneWeight, (unsigned, float, bool), void), AS_CALL_THISCALL));

    // void AnimationState::SetBoneWeight(const String& name, float weight, bool recursive=false)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetBoneWeight(const String& name, float weight, bool recursive=false)", "void SetBoneWeight(const String&in, float, bool = false)", AS_METHODPR(AnimationState, SetBoneWeight, (const String&, float, bool), void), AS_CALL_THISCALL));

    // void AnimationState::SetBoneWeight(StringHash nameHash, float weight, bool recursive=false)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetBoneWeight(StringHash nameHash, float weight, bool recursive=false)", "void SetBoneWeight(StringHash, float, bool = false)", AS_METHODPR(AnimationState, SetBoneWeight, (StringHash, float, bool), void), AS_CALL_THISCALL));

    // void AnimationState::AddWeight(float delta)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::AddWeight(float delta)", "void AddWeight(float)", AS_METHODPR(AnimationState, AddWeight, (float), void), AS_CALL_THISCALL));

    // void AnimationState::AddTime(float delta)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::AddTime(float delta)", "void AddTime(float)", AS_METHODPR(AnimationState, AddTime, (float), void), AS_CALL_THISCALL));

    // void AnimationState::SetLayer(unsigned char layer)
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetLayer(unsigned char layer)", "void SetLayer(uint8)", AS_METHODPR(AnimationState, SetLayer, (unsigned char), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimationState::SetLayer(unsigned char layer)", "void set_layer(uint8)", AS_METHODPR(AnimationState, SetLayer, (unsigned char), void), AS_CALL_THISCALL));

    // Animation* AnimationState::GetAnimation() const
    methods.Push(RegisterObjectMethodArgs("Animation* AnimationState::GetAnimation() const", "Animation@+ GetAnimation() const", AS_METHODPR(AnimationState, GetAnimation, () const, Animation*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Animation* AnimationState::GetAnimation() const", "Animation@+ get_animation() const", AS_METHODPR(AnimationState, GetAnimation, () const, Animation*), AS_CALL_THISCALL));

    // AnimatedModel* AnimationState::GetModel() const
    methods.Push(RegisterObjectMethodArgs("AnimatedModel* AnimationState::GetModel() const", "AnimatedModel@+ GetModel() const", AS_METHODPR(AnimationState, GetModel, () const, AnimatedModel*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("AnimatedModel* AnimationState::GetModel() const", "AnimatedModel@+ get_model() const", AS_METHODPR(AnimationState, GetModel, () const, AnimatedModel*), AS_CALL_THISCALL));

    // Node* AnimationState::GetNode() const
    methods.Push(RegisterObjectMethodArgs("Node* AnimationState::GetNode() const", "Node@+ GetNode() const", AS_METHODPR(AnimationState, GetNode, () const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* AnimationState::GetNode() const", "Node@+ get_node() const", AS_METHODPR(AnimationState, GetNode, () const, Node*), AS_CALL_THISCALL));

    // Bone* AnimationState::GetStartBone() const
    methods.Push(RegisterObjectMethodArgs("Bone* AnimationState::GetStartBone() const", "Bone@+ GetStartBone() const", AS_METHODPR(AnimationState, GetStartBone, () const, Bone*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Bone* AnimationState::GetStartBone() const", "Bone@+ get_startBone() const", AS_METHODPR(AnimationState, GetStartBone, () const, Bone*), AS_CALL_THISCALL));

    // float AnimationState::GetBoneWeight(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetBoneWeight(unsigned index) const", "float GetBoneWeight(uint) const", AS_METHODPR(AnimationState, GetBoneWeight, (unsigned) const, float), AS_CALL_THISCALL));

    // float AnimationState::GetBoneWeight(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetBoneWeight(const String& name) const", "float GetBoneWeight(const String&in) const", AS_METHODPR(AnimationState, GetBoneWeight, (const String&) const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetBoneWeight(const String& name) const", "float get_boneWeights(const String&in) const", AS_METHODPR(AnimationState, GetBoneWeight, (const String&) const, float), AS_CALL_THISCALL));

    // float AnimationState::GetBoneWeight(StringHash nameHash) const
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetBoneWeight(StringHash nameHash) const", "float GetBoneWeight(StringHash) const", AS_METHODPR(AnimationState, GetBoneWeight, (StringHash) const, float), AS_CALL_THISCALL));

    // unsigned AnimationState::GetTrackIndex(Node* node) const
    methods.Push(RegisterObjectMethodArgs("unsigned AnimationState::GetTrackIndex(Node* node) const", "uint GetTrackIndex(Node@+) const", AS_METHODPR(AnimationState, GetTrackIndex, (Node*) const, unsigned), AS_CALL_THISCALL));

    // unsigned AnimationState::GetTrackIndex(const String& name) const
    methods.Push(RegisterObjectMethodArgs("unsigned AnimationState::GetTrackIndex(const String& name) const", "uint GetTrackIndex(const String&in) const", AS_METHODPR(AnimationState, GetTrackIndex, (const String&) const, unsigned), AS_CALL_THISCALL));

    // unsigned AnimationState::GetTrackIndex(StringHash nameHash) const
    methods.Push(RegisterObjectMethodArgs("unsigned AnimationState::GetTrackIndex(StringHash nameHash) const", "uint GetTrackIndex(StringHash) const", AS_METHODPR(AnimationState, GetTrackIndex, (StringHash) const, unsigned), AS_CALL_THISCALL));

    // bool AnimationState::IsEnabled() const
    methods.Push(RegisterObjectMethodArgs("bool AnimationState::IsEnabled() const", "bool IsEnabled() const", AS_METHODPR(AnimationState, IsEnabled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool AnimationState::IsEnabled() const", "bool get_enabled() const", AS_METHODPR(AnimationState, IsEnabled, () const, bool), AS_CALL_THISCALL));

    // bool AnimationState::IsLooped() const
    methods.Push(RegisterObjectMethodArgs("bool AnimationState::IsLooped() const", "bool IsLooped() const", AS_METHODPR(AnimationState, IsLooped, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool AnimationState::IsLooped() const", "bool get_looped() const", AS_METHODPR(AnimationState, IsLooped, () const, bool), AS_CALL_THISCALL));

    // float AnimationState::GetWeight() const
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetWeight() const", "float GetWeight() const", AS_METHODPR(AnimationState, GetWeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetWeight() const", "float get_weight() const", AS_METHODPR(AnimationState, GetWeight, () const, float), AS_CALL_THISCALL));

    // AnimationBlendMode AnimationState::GetBlendMode() const
    methods.Push(RegisterObjectMethodArgs("AnimationBlendMode AnimationState::GetBlendMode() const", "AnimationBlendMode GetBlendMode() const", AS_METHODPR(AnimationState, GetBlendMode, () const, AnimationBlendMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("AnimationBlendMode AnimationState::GetBlendMode() const", "AnimationBlendMode get_blendMode() const", AS_METHODPR(AnimationState, GetBlendMode, () const, AnimationBlendMode), AS_CALL_THISCALL));

    // float AnimationState::GetTime() const
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetTime() const", "float GetTime() const", AS_METHODPR(AnimationState, GetTime, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetTime() const", "float get_time() const", AS_METHODPR(AnimationState, GetTime, () const, float), AS_CALL_THISCALL));

    // float AnimationState::GetLength() const
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetLength() const", "float GetLength() const", AS_METHODPR(AnimationState, GetLength, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float AnimationState::GetLength() const", "float get_length() const", AS_METHODPR(AnimationState, GetLength, () const, float), AS_CALL_THISCALL));

    // unsigned char AnimationState::GetLayer() const
    methods.Push(RegisterObjectMethodArgs("unsigned char AnimationState::GetLayer() const", "uint8 GetLayer() const", AS_METHODPR(AnimationState, GetLayer, () const, unsigned char), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned char AnimationState::GetLayer() const", "uint8 get_layer() const", AS_METHODPR(AnimationState, GetLayer, () const, unsigned char), AS_CALL_THISCALL));

    // void AnimationState::Apply()
    methods.Push(RegisterObjectMethodArgs("void AnimationState::Apply()", "void Apply()", AS_METHODPR(AnimationState, Apply, (), void), AS_CALL_THISCALL));
}

// struct AnimationStateTrack | File: ../Graphics/AnimationState.h
void CollectMembers_AnimationStateTrack(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct AnimationTrack | File: ../Graphics/Animation.h
void CollectMembers_AnimationTrack(Vector<RegisterObjectMethodArgs>& methods)
{
    // AnimationKeyFrame* AnimationTrack::GetKeyFrame(unsigned index)
    // Error: type "AnimationKeyFrame*" can not automatically bind

    // void AnimationTrack::SetKeyFrame(unsigned index, const AnimationKeyFrame& keyFrame)
    methods.Push(RegisterObjectMethodArgs("void AnimationTrack::SetKeyFrame(unsigned index, const AnimationKeyFrame& keyFrame)", "void SetKeyFrame(uint, const AnimationKeyFrame&in)", AS_METHODPR(AnimationTrack, SetKeyFrame, (unsigned, const AnimationKeyFrame&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimationTrack::SetKeyFrame(unsigned index, const AnimationKeyFrame& keyFrame)", "void set_keyFrames(uint, const AnimationKeyFrame&in)", AS_METHODPR(AnimationTrack, SetKeyFrame, (unsigned, const AnimationKeyFrame&), void), AS_CALL_THISCALL));

    // void AnimationTrack::AddKeyFrame(const AnimationKeyFrame& keyFrame)
    methods.Push(RegisterObjectMethodArgs("void AnimationTrack::AddKeyFrame(const AnimationKeyFrame& keyFrame)", "void AddKeyFrame(const AnimationKeyFrame&in)", AS_METHODPR(AnimationTrack, AddKeyFrame, (const AnimationKeyFrame&), void), AS_CALL_THISCALL));

    // void AnimationTrack::InsertKeyFrame(unsigned index, const AnimationKeyFrame& keyFrame)
    methods.Push(RegisterObjectMethodArgs("void AnimationTrack::InsertKeyFrame(unsigned index, const AnimationKeyFrame& keyFrame)", "void InsertKeyFrame(uint, const AnimationKeyFrame&in)", AS_METHODPR(AnimationTrack, InsertKeyFrame, (unsigned, const AnimationKeyFrame&), void), AS_CALL_THISCALL));

    // void AnimationTrack::RemoveKeyFrame(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void AnimationTrack::RemoveKeyFrame(unsigned index)", "void RemoveKeyFrame(uint)", AS_METHODPR(AnimationTrack, RemoveKeyFrame, (unsigned), void), AS_CALL_THISCALL));

    // void AnimationTrack::RemoveAllKeyFrames()
    methods.Push(RegisterObjectMethodArgs("void AnimationTrack::RemoveAllKeyFrames()", "void RemoveAllKeyFrames()", AS_METHODPR(AnimationTrack, RemoveAllKeyFrames, (), void), AS_CALL_THISCALL));

    // unsigned AnimationTrack::GetNumKeyFrames() const
    methods.Push(RegisterObjectMethodArgs("unsigned AnimationTrack::GetNumKeyFrames() const", "uint GetNumKeyFrames() const", AS_METHODPR(AnimationTrack, GetNumKeyFrames, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned AnimationTrack::GetNumKeyFrames() const", "uint get_numKeyFrames() const", AS_METHODPR(AnimationTrack, GetNumKeyFrames, () const, unsigned), AS_CALL_THISCALL));

    // bool AnimationTrack::GetKeyFrameIndex(float time, unsigned& index) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationTrack::GetKeyFrameIndex(float time, unsigned& index) const", "bool GetKeyFrameIndex(float, uint&) const", AS_METHODPR(AnimationTrack, GetKeyFrameIndex, (float, unsigned&) const, bool), AS_CALL_THISCALL));
}

// struct AnimationTriggerPoint | File: ../Graphics/Animation.h
void CollectMembers_AnimationTriggerPoint(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class AreaAllocator | File: ../Math/AreaAllocator.h
void CollectMembers_AreaAllocator(Vector<RegisterObjectMethodArgs>& methods)
{
    // void AreaAllocator::Reset(int width, int height, int maxWidth=0, int maxHeight=0, bool fastMode=true)
    methods.Push(RegisterObjectMethodArgs("void AreaAllocator::Reset(int width, int height, int maxWidth=0, int maxHeight=0, bool fastMode=true)", "void Reset(int, int, int = 0, int = 0, bool = true)", AS_METHODPR(AreaAllocator, Reset, (int, int, int, int, bool), void), AS_CALL_THISCALL));

    // bool AreaAllocator::Allocate(int width, int height, int& x, int& y)
    methods.Push(RegisterObjectMethodArgs("bool AreaAllocator::Allocate(int width, int height, int& x, int& y)", "bool Allocate(int, int, int&, int&)", AS_METHODPR(AreaAllocator, Allocate, (int, int, int&, int&), bool), AS_CALL_THISCALL));

    // int AreaAllocator::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int AreaAllocator::GetWidth() const", "int GetWidth() const", AS_METHODPR(AreaAllocator, GetWidth, () const, int), AS_CALL_THISCALL));

    // int AreaAllocator::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int AreaAllocator::GetHeight() const", "int GetHeight() const", AS_METHODPR(AreaAllocator, GetHeight, () const, int), AS_CALL_THISCALL));

    // bool AreaAllocator::GetFastMode() const
    methods.Push(RegisterObjectMethodArgs("bool AreaAllocator::GetFastMode() const", "bool GetFastMode() const", AS_METHODPR(AreaAllocator, GetFastMode, () const, bool), AS_CALL_THISCALL));
}

// struct AsyncProgress | File: ../Scene/Scene.h
void CollectMembers_AsyncProgress(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class AttributeAccessor | File: ../Core/Attribute.h
void CollectMembers_AttributeAccessor(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // virtual void AttributeAccessor::Get(const Serializable* ptr, Variant& dest) const =0
    methods.Push(RegisterObjectMethodArgs("virtual void AttributeAccessor::Get(const Serializable* ptr, Variant& dest) const =0", "void Get(Serializable@+, Variant&) const", AS_METHODPR(AttributeAccessor, Get, (const Serializable*, Variant&) const, void), AS_CALL_THISCALL));

    // virtual void AttributeAccessor::Set(Serializable* ptr, const Variant& src)=0
    methods.Push(RegisterObjectMethodArgs("virtual void AttributeAccessor::Set(Serializable* ptr, const Variant& src)=0", "void Set(Serializable@+, const Variant&in)", AS_METHODPR(AttributeAccessor, Set, (Serializable*, const Variant&), void), AS_CALL_THISCALL));
}

// class AttributeAnimationInfo | File: ../Scene/Animatable.h
void CollectMembers_AttributeAnimationInfo(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ValueAnimationInfo(methods);

    // const AttributeInfo& AttributeAnimationInfo::GetAttributeInfo() const
    methods.Push(RegisterObjectMethodArgs("const AttributeInfo& AttributeAnimationInfo::GetAttributeInfo() const", "const AttributeInfo& GetAttributeInfo() const", AS_METHODPR(AttributeAnimationInfo, GetAttributeInfo, () const, const AttributeInfo&), AS_CALL_THISCALL));
}

// struct AttributeHandle | File: ../Core/Attribute.h
void CollectMembers_AttributeHandle(Vector<RegisterObjectMethodArgs>& methods)
{
    // AttributeHandle& AttributeHandle::SetMetadata(StringHash key, const Variant& value)
    // Error: type "AttributeHandle" can not automatically bind bacause have @nobind mark
}

// struct AttributeInfo | File: ../Core/Attribute.h
void CollectMembers_AttributeInfo(Vector<RegisterObjectMethodArgs>& methods)
{
    // const Variant& AttributeInfo::GetMetadata(const StringHash& key) const
    methods.Push(RegisterObjectMethodArgs("const Variant& AttributeInfo::GetMetadata(const StringHash& key) const", "const Variant& GetMetadata(const StringHash&in) const", AS_METHODPR(AttributeInfo, GetMetadata, (const StringHash&) const, const Variant&), AS_CALL_THISCALL));
}

// const PODVector<SoundSource*>& Audio::GetSoundSources() const
// const PODVector<SoundSource*>& Audio::GetSoundSources() const | File: ../Audio/Audio.h
static CScriptArray* Audio_GetSoundSources_void(Audio* ptr)
{
    const PODVector<SoundSource*>& result = ptr->GetSoundSources();
    return VectorToHandleArray(result, "Array<SoundSource@>");
}


// class Audio | File: ../Audio/Audio.h
void CollectMembers_Audio(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Audio::MixOutput(void* dest, unsigned samples)
    // Error: type "void*" can not automatically bind

    // bool Audio::SetMode(int bufferLengthMSec, int mixRate, bool stereo, bool interpolation=true)
    methods.Push(RegisterObjectMethodArgs("bool Audio::SetMode(int bufferLengthMSec, int mixRate, bool stereo, bool interpolation=true)", "bool SetMode(int, int, bool, bool = true)", AS_METHODPR(Audio, SetMode, (int, int, bool, bool), bool), AS_CALL_THISCALL));

    // void Audio::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void Audio::Update(float timeStep)", "void Update(float)", AS_METHODPR(Audio, Update, (float), void), AS_CALL_THISCALL));

    // bool Audio::Play()
    methods.Push(RegisterObjectMethodArgs("bool Audio::Play()", "bool Play()", AS_METHODPR(Audio, Play, (), bool), AS_CALL_THISCALL));

    // void Audio::Stop()
    methods.Push(RegisterObjectMethodArgs("void Audio::Stop()", "void Stop()", AS_METHODPR(Audio, Stop, (), void), AS_CALL_THISCALL));

    // void Audio::SetMasterGain(const String& type, float gain)
    methods.Push(RegisterObjectMethodArgs("void Audio::SetMasterGain(const String& type, float gain)", "void SetMasterGain(const String&in, float)", AS_METHODPR(Audio, SetMasterGain, (const String&, float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Audio::SetMasterGain(const String& type, float gain)", "void set_masterGain(const String&in, float)", AS_METHODPR(Audio, SetMasterGain, (const String&, float), void), AS_CALL_THISCALL));

    // void Audio::PauseSoundType(const String& type)
    methods.Push(RegisterObjectMethodArgs("void Audio::PauseSoundType(const String& type)", "void PauseSoundType(const String&in)", AS_METHODPR(Audio, PauseSoundType, (const String&), void), AS_CALL_THISCALL));

    // void Audio::ResumeSoundType(const String& type)
    methods.Push(RegisterObjectMethodArgs("void Audio::ResumeSoundType(const String& type)", "void ResumeSoundType(const String&in)", AS_METHODPR(Audio, ResumeSoundType, (const String&), void), AS_CALL_THISCALL));

    // void Audio::ResumeAll()
    methods.Push(RegisterObjectMethodArgs("void Audio::ResumeAll()", "void ResumeAll()", AS_METHODPR(Audio, ResumeAll, (), void), AS_CALL_THISCALL));

    // void Audio::SetListener(SoundListener* listener)
    methods.Push(RegisterObjectMethodArgs("void Audio::SetListener(SoundListener* listener)", "void SetListener(SoundListener@+)", AS_METHODPR(Audio, SetListener, (SoundListener*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Audio::SetListener(SoundListener* listener)", "void set_listener(SoundListener@+)", AS_METHODPR(Audio, SetListener, (SoundListener*), void), AS_CALL_THISCALL));

    // void Audio::StopSound(Sound* sound)
    methods.Push(RegisterObjectMethodArgs("void Audio::StopSound(Sound* sound)", "void StopSound(Sound@+)", AS_METHODPR(Audio, StopSound, (Sound*), void), AS_CALL_THISCALL));

    // unsigned Audio::GetSampleSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned Audio::GetSampleSize() const", "uint GetSampleSize() const", AS_METHODPR(Audio, GetSampleSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Audio::GetSampleSize() const", "uint get_sampleSize() const", AS_METHODPR(Audio, GetSampleSize, () const, unsigned), AS_CALL_THISCALL));

    // int Audio::GetMixRate() const
    methods.Push(RegisterObjectMethodArgs("int Audio::GetMixRate() const", "int GetMixRate() const", AS_METHODPR(Audio, GetMixRate, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Audio::GetMixRate() const", "int get_mixRate() const", AS_METHODPR(Audio, GetMixRate, () const, int), AS_CALL_THISCALL));

    // bool Audio::GetInterpolation() const
    methods.Push(RegisterObjectMethodArgs("bool Audio::GetInterpolation() const", "bool GetInterpolation() const", AS_METHODPR(Audio, GetInterpolation, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Audio::GetInterpolation() const", "bool get_interpolation() const", AS_METHODPR(Audio, GetInterpolation, () const, bool), AS_CALL_THISCALL));

    // bool Audio::IsStereo() const
    methods.Push(RegisterObjectMethodArgs("bool Audio::IsStereo() const", "bool IsStereo() const", AS_METHODPR(Audio, IsStereo, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Audio::IsStereo() const", "bool get_stereo() const", AS_METHODPR(Audio, IsStereo, () const, bool), AS_CALL_THISCALL));

    // bool Audio::IsPlaying() const
    methods.Push(RegisterObjectMethodArgs("bool Audio::IsPlaying() const", "bool IsPlaying() const", AS_METHODPR(Audio, IsPlaying, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Audio::IsPlaying() const", "bool get_playing() const", AS_METHODPR(Audio, IsPlaying, () const, bool), AS_CALL_THISCALL));

    // bool Audio::IsInitialized() const
    methods.Push(RegisterObjectMethodArgs("bool Audio::IsInitialized() const", "bool IsInitialized() const", AS_METHODPR(Audio, IsInitialized, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Audio::IsInitialized() const", "bool get_initialized() const", AS_METHODPR(Audio, IsInitialized, () const, bool), AS_CALL_THISCALL));

    // float Audio::GetMasterGain(const String& type) const
    methods.Push(RegisterObjectMethodArgs("float Audio::GetMasterGain(const String& type) const", "float GetMasterGain(const String&in) const", AS_METHODPR(Audio, GetMasterGain, (const String&) const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Audio::GetMasterGain(const String& type) const", "float get_masterGain(const String&in) const", AS_METHODPR(Audio, GetMasterGain, (const String&) const, float), AS_CALL_THISCALL));

    // bool Audio::IsSoundTypePaused(const String& type) const
    methods.Push(RegisterObjectMethodArgs("bool Audio::IsSoundTypePaused(const String& type) const", "bool IsSoundTypePaused(const String&in) const", AS_METHODPR(Audio, IsSoundTypePaused, (const String&) const, bool), AS_CALL_THISCALL));

    // SoundListener* Audio::GetListener() const
    methods.Push(RegisterObjectMethodArgs("SoundListener* Audio::GetListener() const", "SoundListener@+ GetListener() const", AS_METHODPR(Audio, GetListener, () const, SoundListener*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("SoundListener* Audio::GetListener() const", "SoundListener@+ get_listener() const", AS_METHODPR(Audio, GetListener, () const, SoundListener*), AS_CALL_THISCALL));

    // const PODVector<SoundSource*>& Audio::GetSoundSources() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<SoundSource*>& Audio::GetSoundSources() const", "Array<SoundSource@>@ GetSoundSources() const", AS_FUNCTION_OBJFIRST(Audio_GetSoundSources_void), AS_CALL_CDECL_OBJFIRST));

    // bool Audio::HasMasterGain(const String& type) const
    methods.Push(RegisterObjectMethodArgs("bool Audio::HasMasterGain(const String& type) const", "bool HasMasterGain(const String&in) const", AS_METHODPR(Audio, HasMasterGain, (const String&) const, bool), AS_CALL_THISCALL));

    // void Audio::AddSoundSource(SoundSource* soundSource)
    methods.Push(RegisterObjectMethodArgs("void Audio::AddSoundSource(SoundSource* soundSource)", "void AddSoundSource(SoundSource@+)", AS_METHODPR(Audio, AddSoundSource, (SoundSource*), void), AS_CALL_THISCALL));

    // void Audio::RemoveSoundSource(SoundSource* soundSource)
    methods.Push(RegisterObjectMethodArgs("void Audio::RemoveSoundSource(SoundSource* soundSource)", "void RemoveSoundSource(SoundSource@+)", AS_METHODPR(Audio, RemoveSoundSource, (SoundSource*), void), AS_CALL_THISCALL));

    // Mutex& Audio::GetMutex()
    methods.Push(RegisterObjectMethodArgs("Mutex& Audio::GetMutex()", "Mutex& GetMutex()", AS_METHODPR(Audio, GetMutex, (), Mutex&), AS_CALL_THISCALL));

    // float Audio::GetSoundSourceMasterGain(StringHash typeHash) const
    methods.Push(RegisterObjectMethodArgs("float Audio::GetSoundSourceMasterGain(StringHash typeHash) const", "float GetSoundSourceMasterGain(StringHash) const", AS_METHODPR(Audio, GetSoundSourceMasterGain, (StringHash) const, float), AS_CALL_THISCALL));
}

// class AutoProfileBlock | File: ../Core/Profiler.h
void CollectMembers_AutoProfileBlock(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct BackgroundLoadItem | File: ../Resource/BackgroundLoader.h
void CollectMembers_BackgroundLoadItem(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class BackgroundLoader | File: ../Resource/BackgroundLoader.h
void CollectMembers_BackgroundLoader(Vector<RegisterObjectMethodArgs>& methods)
{
    // void BackgroundLoader::ThreadFunction() override
    methods.Push(RegisterObjectMethodArgs("void BackgroundLoader::ThreadFunction() override", "void ThreadFunction()", AS_METHODPR(BackgroundLoader, ThreadFunction, (), void), AS_CALL_THISCALL));

    // bool BackgroundLoader::QueueResource(StringHash type, const String& name, bool sendEventOnFailure, Resource* caller)
    methods.Push(RegisterObjectMethodArgs("bool BackgroundLoader::QueueResource(StringHash type, const String& name, bool sendEventOnFailure, Resource* caller)", "bool QueueResource(StringHash, const String&in, bool, Resource@+)", AS_METHODPR(BackgroundLoader, QueueResource, (StringHash, const String&, bool, Resource*), bool), AS_CALL_THISCALL));

    // void BackgroundLoader::WaitForResource(StringHash type, StringHash nameHash)
    methods.Push(RegisterObjectMethodArgs("void BackgroundLoader::WaitForResource(StringHash type, StringHash nameHash)", "void WaitForResource(StringHash, StringHash)", AS_METHODPR(BackgroundLoader, WaitForResource, (StringHash, StringHash), void), AS_CALL_THISCALL));

    // void BackgroundLoader::FinishResources(int maxMs)
    methods.Push(RegisterObjectMethodArgs("void BackgroundLoader::FinishResources(int maxMs)", "void FinishResources(int)", AS_METHODPR(BackgroundLoader, FinishResources, (int), void), AS_CALL_THISCALL));

    // unsigned BackgroundLoader::GetNumQueuedResources() const
    methods.Push(RegisterObjectMethodArgs("unsigned BackgroundLoader::GetNumQueuedResources() const", "uint GetNumQueuedResources() const", AS_METHODPR(BackgroundLoader, GetNumQueuedResources, () const, unsigned), AS_CALL_THISCALL));
}

// struct Batch | File: ../Graphics/Batch.h
void CollectMembers_Batch(Vector<RegisterObjectMethodArgs>& methods)
{
    // void Batch::CalculateSortKey()
    methods.Push(RegisterObjectMethodArgs("void Batch::CalculateSortKey()", "void CalculateSortKey()", AS_METHODPR(Batch, CalculateSortKey, (), void), AS_CALL_THISCALL));

    // void Batch::Prepare(View* view, Camera* camera, bool setModelTransform, bool allowDepthWrite) const
    methods.Push(RegisterObjectMethodArgs("void Batch::Prepare(View* view, Camera* camera, bool setModelTransform, bool allowDepthWrite) const", "void Prepare(View@+, Camera@+, bool, bool) const", AS_METHODPR(Batch, Prepare, (View*, Camera*, bool, bool) const, void), AS_CALL_THISCALL));

    // void Batch::Draw(View* view, Camera* camera, bool allowDepthWrite) const
    methods.Push(RegisterObjectMethodArgs("void Batch::Draw(View* view, Camera* camera, bool allowDepthWrite) const", "void Draw(View@+, Camera@+, bool) const", AS_METHODPR(Batch, Draw, (View*, Camera*, bool) const, void), AS_CALL_THISCALL));
}

// struct BatchGroup | File: ../Graphics/Batch.h
void CollectMembers_BatchGroup(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Batch(methods);

    Remove(methods, "void Batch::Draw(View* view, Camera* camera, bool allowDepthWrite) const");

    // void BatchGroup::SetInstancingData(void* lockedData, unsigned stride, unsigned& freeIndex)
    // Error: type "void*" can not automatically bind

    // void BatchGroup::AddTransforms(const Batch& batch)
    methods.Push(RegisterObjectMethodArgs("void BatchGroup::AddTransforms(const Batch& batch)", "void AddTransforms(const Batch&in)", AS_METHODPR(BatchGroup, AddTransforms, (const Batch&), void), AS_CALL_THISCALL));

    // void BatchGroup::Draw(View* view, Camera* camera, bool allowDepthWrite) const
    methods.Push(RegisterObjectMethodArgs("void BatchGroup::Draw(View* view, Camera* camera, bool allowDepthWrite) const", "void Draw(View@+, Camera@+, bool) const", AS_METHODPR(BatchGroup, Draw, (View*, Camera*, bool) const, void), AS_CALL_THISCALL));
}

// struct BatchGroupKey | File: ../Graphics/Batch.h
void CollectMembers_BatchGroupKey(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool BatchGroupKey::operator!=(const BatchGroupKey& rhs) const
    // Only operator== is needed

    // bool BatchGroupKey::operator==(const BatchGroupKey& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool BatchGroupKey::operator==(const BatchGroupKey& rhs) const", "bool opEquals(const BatchGroupKey&in) const", AS_METHODPR(BatchGroupKey, operator==, (const BatchGroupKey&) const, bool), AS_CALL_THISCALL));

    // unsigned BatchGroupKey::ToHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned BatchGroupKey::ToHash() const", "uint ToHash() const", AS_METHODPR(BatchGroupKey, ToHash, () const, unsigned), AS_CALL_THISCALL));
}

// struct BatchQueue | File: ../Graphics/Batch.h
void CollectMembers_BatchQueue(Vector<RegisterObjectMethodArgs>& methods)
{
    // void BatchQueue::SetInstancingData(void* lockedData, unsigned stride, unsigned& freeIndex)
    // Error: type "void*" can not automatically bind

    // void BatchQueue::SortFrontToBack2Pass(PODVector<Batch*>& batches)
    // Error: type "PODVector<Batch*>&" can not automatically bind

    // void BatchQueue::Clear(int maxSortedInstances)
    methods.Push(RegisterObjectMethodArgs("void BatchQueue::Clear(int maxSortedInstances)", "void Clear(int)", AS_METHODPR(BatchQueue, Clear, (int), void), AS_CALL_THISCALL));

    // void BatchQueue::SortBackToFront()
    methods.Push(RegisterObjectMethodArgs("void BatchQueue::SortBackToFront()", "void SortBackToFront()", AS_METHODPR(BatchQueue, SortBackToFront, (), void), AS_CALL_THISCALL));

    // void BatchQueue::SortFrontToBack()
    methods.Push(RegisterObjectMethodArgs("void BatchQueue::SortFrontToBack()", "void SortFrontToBack()", AS_METHODPR(BatchQueue, SortFrontToBack, (), void), AS_CALL_THISCALL));

    // void BatchQueue::Draw(View* view, Camera* camera, bool markToStencil, bool usingLightOptimization, bool allowDepthWrite) const
    methods.Push(RegisterObjectMethodArgs("void BatchQueue::Draw(View* view, Camera* camera, bool markToStencil, bool usingLightOptimization, bool allowDepthWrite) const", "void Draw(View@+, Camera@+, bool, bool, bool) const", AS_METHODPR(BatchQueue, Draw, (View*, Camera*, bool, bool, bool) const, void), AS_CALL_THISCALL));

    // unsigned BatchQueue::GetNumInstances() const
    methods.Push(RegisterObjectMethodArgs("unsigned BatchQueue::GetNumInstances() const", "uint GetNumInstances() const", AS_METHODPR(BatchQueue, GetNumInstances, () const, unsigned), AS_CALL_THISCALL));

    // bool BatchQueue::IsEmpty() const
    methods.Push(RegisterObjectMethodArgs("bool BatchQueue::IsEmpty() const", "bool IsEmpty() const", AS_METHODPR(BatchQueue, IsEmpty, () const, bool), AS_CALL_THISCALL));
}

// struct BiasParameters | File: ../Graphics/Light.h
void CollectMembers_BiasParameters(Vector<RegisterObjectMethodArgs>& methods)
{
    // void BiasParameters::Validate()
    methods.Push(RegisterObjectMethodArgs("void BiasParameters::Validate()", "void Validate()", AS_METHODPR(BiasParameters, Validate, (), void), AS_CALL_THISCALL));
}

// struct Billboard | File: ../Graphics/BillboardSet.h
void CollectMembers_Billboard(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class BillboardSet | File: ../Graphics/BillboardSet.h
void CollectMembers_BillboardSet(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual UpdateGeometryType Drawable::GetUpdateGeometryType()");
    Remove(methods, "virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)");
    Remove(methods, "virtual void Drawable::UpdateBatches(const FrameInfo& frame)");
    Remove(methods, "virtual void Drawable::UpdateGeometry(const FrameInfo& frame)");

    // PODVector<Billboard>& BillboardSet::GetBillboards()
    // Error: type "PODVector<Billboard>&" can not automatically bind

    // VariantVector BillboardSet::GetBillboardsAttr() const
    // Error: type "VariantVector" can not automatically bind

    // const PODVector<unsigned char>& BillboardSet::GetNetBillboardsAttr() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void BillboardSet::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void BillboardSet::SetBillboardsAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void BillboardSet::SetNetBillboardsAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void BillboardSet::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(BillboardSet, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void BillboardSet::UpdateGeometry(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::UpdateGeometry(const FrameInfo& frame) override", "void UpdateGeometry(const FrameInfo&in)", AS_METHODPR(BillboardSet, UpdateGeometry, (const FrameInfo&), void), AS_CALL_THISCALL));

    // UpdateGeometryType BillboardSet::GetUpdateGeometryType() override
    methods.Push(RegisterObjectMethodArgs("UpdateGeometryType BillboardSet::GetUpdateGeometryType() override", "UpdateGeometryType GetUpdateGeometryType()", AS_METHODPR(BillboardSet, GetUpdateGeometryType, (), UpdateGeometryType), AS_CALL_THISCALL));

    // void BillboardSet::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(BillboardSet, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(BillboardSet, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // void BillboardSet::SetNumBillboards(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetNumBillboards(unsigned num)", "void SetNumBillboards(uint)", AS_METHODPR(BillboardSet, SetNumBillboards, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetNumBillboards(unsigned num)", "void set_numBillboards(uint)", AS_METHODPR(BillboardSet, SetNumBillboards, (unsigned), void), AS_CALL_THISCALL));

    // void BillboardSet::SetRelative(bool enable)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetRelative(bool enable)", "void SetRelative(bool)", AS_METHODPR(BillboardSet, SetRelative, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetRelative(bool enable)", "void set_relative(bool)", AS_METHODPR(BillboardSet, SetRelative, (bool), void), AS_CALL_THISCALL));

    // void BillboardSet::SetScaled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetScaled(bool enable)", "void SetScaled(bool)", AS_METHODPR(BillboardSet, SetScaled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetScaled(bool enable)", "void set_scaled(bool)", AS_METHODPR(BillboardSet, SetScaled, (bool), void), AS_CALL_THISCALL));

    // void BillboardSet::SetSorted(bool enable)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetSorted(bool enable)", "void SetSorted(bool)", AS_METHODPR(BillboardSet, SetSorted, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetSorted(bool enable)", "void set_sorted(bool)", AS_METHODPR(BillboardSet, SetSorted, (bool), void), AS_CALL_THISCALL));

    // void BillboardSet::SetFixedScreenSize(bool enable)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetFixedScreenSize(bool enable)", "void SetFixedScreenSize(bool)", AS_METHODPR(BillboardSet, SetFixedScreenSize, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetFixedScreenSize(bool enable)", "void set_fixedScreenSize(bool)", AS_METHODPR(BillboardSet, SetFixedScreenSize, (bool), void), AS_CALL_THISCALL));

    // void BillboardSet::SetFaceCameraMode(FaceCameraMode mode)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetFaceCameraMode(FaceCameraMode mode)", "void SetFaceCameraMode(FaceCameraMode)", AS_METHODPR(BillboardSet, SetFaceCameraMode, (FaceCameraMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetFaceCameraMode(FaceCameraMode mode)", "void set_faceCameraMode(FaceCameraMode)", AS_METHODPR(BillboardSet, SetFaceCameraMode, (FaceCameraMode), void), AS_CALL_THISCALL));

    // void BillboardSet::SetMinAngle(float angle)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetMinAngle(float angle)", "void SetMinAngle(float)", AS_METHODPR(BillboardSet, SetMinAngle, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetMinAngle(float angle)", "void set_minAngle(float)", AS_METHODPR(BillboardSet, SetMinAngle, (float), void), AS_CALL_THISCALL));

    // void BillboardSet::SetAnimationLodBias(float bias)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetAnimationLodBias(float bias)", "void SetAnimationLodBias(float)", AS_METHODPR(BillboardSet, SetAnimationLodBias, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetAnimationLodBias(float bias)", "void set_animationLodBias(float)", AS_METHODPR(BillboardSet, SetAnimationLodBias, (float), void), AS_CALL_THISCALL));

    // void BillboardSet::Commit()
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::Commit()", "void Commit()", AS_METHODPR(BillboardSet, Commit, (), void), AS_CALL_THISCALL));

    // Material* BillboardSet::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* BillboardSet::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(BillboardSet, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* BillboardSet::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(BillboardSet, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // unsigned BillboardSet::GetNumBillboards() const
    methods.Push(RegisterObjectMethodArgs("unsigned BillboardSet::GetNumBillboards() const", "uint GetNumBillboards() const", AS_METHODPR(BillboardSet, GetNumBillboards, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned BillboardSet::GetNumBillboards() const", "uint get_numBillboards() const", AS_METHODPR(BillboardSet, GetNumBillboards, () const, unsigned), AS_CALL_THISCALL));

    // Billboard* BillboardSet::GetBillboard(unsigned index)
    methods.Push(RegisterObjectMethodArgs("Billboard* BillboardSet::GetBillboard(unsigned index)", "Billboard@+ GetBillboard(uint)", AS_METHODPR(BillboardSet, GetBillboard, (unsigned), Billboard*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Billboard* BillboardSet::GetBillboard(unsigned index)", "Billboard@+ get_billboards(uint)", AS_METHODPR(BillboardSet, GetBillboard, (unsigned), Billboard*), AS_CALL_THISCALL));

    // bool BillboardSet::IsRelative() const
    methods.Push(RegisterObjectMethodArgs("bool BillboardSet::IsRelative() const", "bool IsRelative() const", AS_METHODPR(BillboardSet, IsRelative, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool BillboardSet::IsRelative() const", "bool get_relative() const", AS_METHODPR(BillboardSet, IsRelative, () const, bool), AS_CALL_THISCALL));

    // bool BillboardSet::IsScaled() const
    methods.Push(RegisterObjectMethodArgs("bool BillboardSet::IsScaled() const", "bool IsScaled() const", AS_METHODPR(BillboardSet, IsScaled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool BillboardSet::IsScaled() const", "bool get_scaled() const", AS_METHODPR(BillboardSet, IsScaled, () const, bool), AS_CALL_THISCALL));

    // bool BillboardSet::IsSorted() const
    methods.Push(RegisterObjectMethodArgs("bool BillboardSet::IsSorted() const", "bool IsSorted() const", AS_METHODPR(BillboardSet, IsSorted, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool BillboardSet::IsSorted() const", "bool get_sorted() const", AS_METHODPR(BillboardSet, IsSorted, () const, bool), AS_CALL_THISCALL));

    // bool BillboardSet::IsFixedScreenSize() const
    methods.Push(RegisterObjectMethodArgs("bool BillboardSet::IsFixedScreenSize() const", "bool IsFixedScreenSize() const", AS_METHODPR(BillboardSet, IsFixedScreenSize, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool BillboardSet::IsFixedScreenSize() const", "bool get_fixedScreenSize() const", AS_METHODPR(BillboardSet, IsFixedScreenSize, () const, bool), AS_CALL_THISCALL));

    // FaceCameraMode BillboardSet::GetFaceCameraMode() const
    methods.Push(RegisterObjectMethodArgs("FaceCameraMode BillboardSet::GetFaceCameraMode() const", "FaceCameraMode GetFaceCameraMode() const", AS_METHODPR(BillboardSet, GetFaceCameraMode, () const, FaceCameraMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FaceCameraMode BillboardSet::GetFaceCameraMode() const", "FaceCameraMode get_faceCameraMode() const", AS_METHODPR(BillboardSet, GetFaceCameraMode, () const, FaceCameraMode), AS_CALL_THISCALL));

    // float BillboardSet::GetMinAngle() const
    methods.Push(RegisterObjectMethodArgs("float BillboardSet::GetMinAngle() const", "float GetMinAngle() const", AS_METHODPR(BillboardSet, GetMinAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float BillboardSet::GetMinAngle() const", "float get_minAngle() const", AS_METHODPR(BillboardSet, GetMinAngle, () const, float), AS_CALL_THISCALL));

    // float BillboardSet::GetAnimationLodBias() const
    methods.Push(RegisterObjectMethodArgs("float BillboardSet::GetAnimationLodBias() const", "float GetAnimationLodBias() const", AS_METHODPR(BillboardSet, GetAnimationLodBias, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float BillboardSet::GetAnimationLodBias() const", "float get_animationLodBias() const", AS_METHODPR(BillboardSet, GetAnimationLodBias, () const, float), AS_CALL_THISCALL));

    // void BillboardSet::SetMaterialAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void BillboardSet::SetMaterialAttr(const ResourceRef& value)", "void SetMaterialAttr(const ResourceRef&in)", AS_METHODPR(BillboardSet, SetMaterialAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef BillboardSet::GetMaterialAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef BillboardSet::GetMaterialAttr() const", "ResourceRef GetMaterialAttr() const", AS_METHODPR(BillboardSet, GetMaterialAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

// struct Bone | File: ../Graphics/Skeleton.h
void CollectMembers_Bone(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class BorderImage | File: ../UI/BorderImage.h
void CollectMembers_BorderImage(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_UIElement(methods);

    Remove(methods, "static void UIElement::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor)");

    // void BorderImage::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void BorderImage::SetTexture(Texture* texture)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetTexture(Texture* texture)", "void SetTexture(Texture@+)", AS_METHODPR(BorderImage, SetTexture, (Texture*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetTexture(Texture* texture)", "void set_texture(Texture@+)", AS_METHODPR(BorderImage, SetTexture, (Texture*), void), AS_CALL_THISCALL));

    // void BorderImage::SetImageRect(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetImageRect(const IntRect& rect)", "void SetImageRect(const IntRect&in)", AS_METHODPR(BorderImage, SetImageRect, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetImageRect(const IntRect& rect)", "void set_imageRect(const IntRect&in)", AS_METHODPR(BorderImage, SetImageRect, (const IntRect&), void), AS_CALL_THISCALL));

    // void BorderImage::SetFullImageRect()
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetFullImageRect()", "void SetFullImageRect()", AS_METHODPR(BorderImage, SetFullImageRect, (), void), AS_CALL_THISCALL));

    // void BorderImage::SetBorder(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetBorder(const IntRect& rect)", "void SetBorder(const IntRect&in)", AS_METHODPR(BorderImage, SetBorder, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetBorder(const IntRect& rect)", "void set_border(const IntRect&in)", AS_METHODPR(BorderImage, SetBorder, (const IntRect&), void), AS_CALL_THISCALL));

    // void BorderImage::SetImageBorder(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetImageBorder(const IntRect& rect)", "void SetImageBorder(const IntRect&in)", AS_METHODPR(BorderImage, SetImageBorder, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetImageBorder(const IntRect& rect)", "void set_imageBorder(const IntRect&in)", AS_METHODPR(BorderImage, SetImageBorder, (const IntRect&), void), AS_CALL_THISCALL));

    // void BorderImage::SetHoverOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetHoverOffset(const IntVector2& offset)", "void SetHoverOffset(const IntVector2&in)", AS_METHODPR(BorderImage, SetHoverOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetHoverOffset(const IntVector2& offset)", "void set_hoverOffset(const IntVector2&in)", AS_METHODPR(BorderImage, SetHoverOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void BorderImage::SetHoverOffset(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetHoverOffset(int x, int y)", "void SetHoverOffset(int, int)", AS_METHODPR(BorderImage, SetHoverOffset, (int, int), void), AS_CALL_THISCALL));

    // void BorderImage::SetDisabledOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetDisabledOffset(const IntVector2& offset)", "void SetDisabledOffset(const IntVector2&in)", AS_METHODPR(BorderImage, SetDisabledOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetDisabledOffset(const IntVector2& offset)", "void set_disabledOffset(const IntVector2&in)", AS_METHODPR(BorderImage, SetDisabledOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void BorderImage::SetDisabledOffset(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetDisabledOffset(int x, int y)", "void SetDisabledOffset(int, int)", AS_METHODPR(BorderImage, SetDisabledOffset, (int, int), void), AS_CALL_THISCALL));

    // void BorderImage::SetBlendMode(BlendMode mode)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetBlendMode(BlendMode mode)", "void SetBlendMode(BlendMode)", AS_METHODPR(BorderImage, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetBlendMode(BlendMode mode)", "void set_blendMode(BlendMode)", AS_METHODPR(BorderImage, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));

    // void BorderImage::SetTiled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetTiled(bool enable)", "void SetTiled(bool)", AS_METHODPR(BorderImage, SetTiled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetTiled(bool enable)", "void set_tiled(bool)", AS_METHODPR(BorderImage, SetTiled, (bool), void), AS_CALL_THISCALL));

    // void BorderImage::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(BorderImage, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(BorderImage, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // Texture* BorderImage::GetTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture* BorderImage::GetTexture() const", "Texture@+ GetTexture() const", AS_METHODPR(BorderImage, GetTexture, () const, Texture*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture* BorderImage::GetTexture() const", "Texture@+ get_texture() const", AS_METHODPR(BorderImage, GetTexture, () const, Texture*), AS_CALL_THISCALL));

    // const IntRect& BorderImage::GetImageRect() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& BorderImage::GetImageRect() const", "const IntRect& GetImageRect() const", AS_METHODPR(BorderImage, GetImageRect, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& BorderImage::GetImageRect() const", "const IntRect& get_imageRect() const", AS_METHODPR(BorderImage, GetImageRect, () const, const IntRect&), AS_CALL_THISCALL));

    // const IntRect& BorderImage::GetBorder() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& BorderImage::GetBorder() const", "const IntRect& GetBorder() const", AS_METHODPR(BorderImage, GetBorder, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& BorderImage::GetBorder() const", "const IntRect& get_border() const", AS_METHODPR(BorderImage, GetBorder, () const, const IntRect&), AS_CALL_THISCALL));

    // const IntRect& BorderImage::GetImageBorder() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& BorderImage::GetImageBorder() const", "const IntRect& GetImageBorder() const", AS_METHODPR(BorderImage, GetImageBorder, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& BorderImage::GetImageBorder() const", "const IntRect& get_imageBorder() const", AS_METHODPR(BorderImage, GetImageBorder, () const, const IntRect&), AS_CALL_THISCALL));

    // const IntVector2& BorderImage::GetHoverOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& BorderImage::GetHoverOffset() const", "const IntVector2& GetHoverOffset() const", AS_METHODPR(BorderImage, GetHoverOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& BorderImage::GetHoverOffset() const", "const IntVector2& get_hoverOffset() const", AS_METHODPR(BorderImage, GetHoverOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // const IntVector2& BorderImage::GetDisabledOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& BorderImage::GetDisabledOffset() const", "const IntVector2& GetDisabledOffset() const", AS_METHODPR(BorderImage, GetDisabledOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& BorderImage::GetDisabledOffset() const", "const IntVector2& get_disabledOffset() const", AS_METHODPR(BorderImage, GetDisabledOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // BlendMode BorderImage::GetBlendMode() const
    methods.Push(RegisterObjectMethodArgs("BlendMode BorderImage::GetBlendMode() const", "BlendMode GetBlendMode() const", AS_METHODPR(BorderImage, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BlendMode BorderImage::GetBlendMode() const", "BlendMode get_blendMode() const", AS_METHODPR(BorderImage, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));

    // bool BorderImage::IsTiled() const
    methods.Push(RegisterObjectMethodArgs("bool BorderImage::IsTiled() const", "bool IsTiled() const", AS_METHODPR(BorderImage, IsTiled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool BorderImage::IsTiled() const", "bool get_tiled() const", AS_METHODPR(BorderImage, IsTiled, () const, bool), AS_CALL_THISCALL));

    // Material* BorderImage::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* BorderImage::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(BorderImage, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* BorderImage::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(BorderImage, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // void BorderImage::SetTextureAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetTextureAttr(const ResourceRef& value)", "void SetTextureAttr(const ResourceRef&in)", AS_METHODPR(BorderImage, SetTextureAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef BorderImage::GetTextureAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef BorderImage::GetTextureAttr() const", "ResourceRef GetTextureAttr() const", AS_METHODPR(BorderImage, GetTextureAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void BorderImage::SetMaterialAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void BorderImage::SetMaterialAttr(const ResourceRef& value)", "void SetMaterialAttr(const ResourceRef&in)", AS_METHODPR(BorderImage, SetMaterialAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef BorderImage::GetMaterialAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef BorderImage::GetMaterialAttr() const", "ResourceRef GetMaterialAttr() const", AS_METHODPR(BorderImage, GetMaterialAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

// class BoundingBox | File: ../Math/BoundingBox.h
void CollectMembers_BoundingBox(Vector<RegisterObjectMethodArgs>& methods)
{
    // void BoundingBox::Define(const Vector3* vertices, unsigned count)
    // Error: type "const Vector3*" can not automatically bind

    // void BoundingBox::Merge(const Vector3* vertices, unsigned count)
    // Error: type "const Vector3*" can not automatically bind

    // bool BoundingBox::operator!=(const BoundingBox& rhs) const
    // Only operator== is needed

    // BoundingBox& BoundingBox::operator=(const BoundingBox& rhs) noexcept
    methods.Push(RegisterObjectMethodArgs("BoundingBox& BoundingBox::operator=(const BoundingBox& rhs) noexcept", "BoundingBox& opAssign(const BoundingBox&in)", AS_METHODPR(BoundingBox, operator=, (const BoundingBox&), BoundingBox&), AS_CALL_THISCALL));

    // BoundingBox& BoundingBox::operator=(const Rect& rhs) noexcept
    methods.Push(RegisterObjectMethodArgs("BoundingBox& BoundingBox::operator=(const Rect& rhs) noexcept", "BoundingBox& opAssign(const Rect&in)", AS_METHODPR(BoundingBox, operator=, (const Rect&), BoundingBox&), AS_CALL_THISCALL));

    // bool BoundingBox::operator==(const BoundingBox& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool BoundingBox::operator==(const BoundingBox& rhs) const", "bool opEquals(const BoundingBox&in) const", AS_METHODPR(BoundingBox, operator==, (const BoundingBox&) const, bool), AS_CALL_THISCALL));

    // void BoundingBox::Define(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Define(const BoundingBox& box)", "void Define(const BoundingBox&in)", AS_METHODPR(BoundingBox, Define, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void BoundingBox::Define(const Rect& rect)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Define(const Rect& rect)", "void Define(const Rect&in)", AS_METHODPR(BoundingBox, Define, (const Rect&), void), AS_CALL_THISCALL));

    // void BoundingBox::Define(const Vector3& min, const Vector3& max)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Define(const Vector3& min, const Vector3& max)", "void Define(const Vector3&in, const Vector3&in)", AS_METHODPR(BoundingBox, Define, (const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void BoundingBox::Define(float min, float max)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Define(float min, float max)", "void Define(float, float)", AS_METHODPR(BoundingBox, Define, (float, float), void), AS_CALL_THISCALL));

    // void BoundingBox::Define(const Vector3& point)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Define(const Vector3& point)", "void Define(const Vector3&in)", AS_METHODPR(BoundingBox, Define, (const Vector3&), void), AS_CALL_THISCALL));

    // void BoundingBox::Merge(const Vector3& point)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Merge(const Vector3& point)", "void Merge(const Vector3&in)", AS_METHODPR(BoundingBox, Merge, (const Vector3&), void), AS_CALL_THISCALL));

    // void BoundingBox::Merge(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Merge(const BoundingBox& box)", "void Merge(const BoundingBox&in)", AS_METHODPR(BoundingBox, Merge, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void BoundingBox::Define(const Frustum& frustum)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Define(const Frustum& frustum)", "void Define(const Frustum&in)", AS_METHODPR(BoundingBox, Define, (const Frustum&), void), AS_CALL_THISCALL));

    // void BoundingBox::Define(const Polyhedron& poly)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Define(const Polyhedron& poly)", "void Define(const Polyhedron&in)", AS_METHODPR(BoundingBox, Define, (const Polyhedron&), void), AS_CALL_THISCALL));

    // void BoundingBox::Define(const Sphere& sphere)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Define(const Sphere& sphere)", "void Define(const Sphere&in)", AS_METHODPR(BoundingBox, Define, (const Sphere&), void), AS_CALL_THISCALL));

    // void BoundingBox::Merge(const Frustum& frustum)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Merge(const Frustum& frustum)", "void Merge(const Frustum&in)", AS_METHODPR(BoundingBox, Merge, (const Frustum&), void), AS_CALL_THISCALL));

    // void BoundingBox::Merge(const Polyhedron& poly)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Merge(const Polyhedron& poly)", "void Merge(const Polyhedron&in)", AS_METHODPR(BoundingBox, Merge, (const Polyhedron&), void), AS_CALL_THISCALL));

    // void BoundingBox::Merge(const Sphere& sphere)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Merge(const Sphere& sphere)", "void Merge(const Sphere&in)", AS_METHODPR(BoundingBox, Merge, (const Sphere&), void), AS_CALL_THISCALL));

    // void BoundingBox::Clip(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Clip(const BoundingBox& box)", "void Clip(const BoundingBox&in)", AS_METHODPR(BoundingBox, Clip, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void BoundingBox::Transform(const Matrix3& transform)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Transform(const Matrix3& transform)", "void Transform(const Matrix3&in)", AS_METHODPR(BoundingBox, Transform, (const Matrix3&), void), AS_CALL_THISCALL));

    // void BoundingBox::Transform(const Matrix3x4& transform)
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Transform(const Matrix3x4& transform)", "void Transform(const Matrix3x4&in)", AS_METHODPR(BoundingBox, Transform, (const Matrix3x4&), void), AS_CALL_THISCALL));

    // void BoundingBox::Clear()
    methods.Push(RegisterObjectMethodArgs("void BoundingBox::Clear()", "void Clear()", AS_METHODPR(BoundingBox, Clear, (), void), AS_CALL_THISCALL));

    // bool BoundingBox::Defined() const
    methods.Push(RegisterObjectMethodArgs("bool BoundingBox::Defined() const", "bool Defined() const", AS_METHODPR(BoundingBox, Defined, () const, bool), AS_CALL_THISCALL));

    // Vector3 BoundingBox::Center() const
    methods.Push(RegisterObjectMethodArgs("Vector3 BoundingBox::Center() const", "Vector3 Center() const", AS_METHODPR(BoundingBox, Center, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 BoundingBox::Center() const", "Vector3 get_center() const", AS_METHODPR(BoundingBox, Center, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 BoundingBox::Size() const
    methods.Push(RegisterObjectMethodArgs("Vector3 BoundingBox::Size() const", "Vector3 Size() const", AS_METHODPR(BoundingBox, Size, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 BoundingBox::Size() const", "Vector3 get_size() const", AS_METHODPR(BoundingBox, Size, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 BoundingBox::HalfSize() const
    methods.Push(RegisterObjectMethodArgs("Vector3 BoundingBox::HalfSize() const", "Vector3 HalfSize() const", AS_METHODPR(BoundingBox, HalfSize, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 BoundingBox::HalfSize() const", "Vector3 get_halfSize() const", AS_METHODPR(BoundingBox, HalfSize, () const, Vector3), AS_CALL_THISCALL));

    // BoundingBox BoundingBox::Transformed(const Matrix3& transform) const
    methods.Push(RegisterObjectMethodArgs("BoundingBox BoundingBox::Transformed(const Matrix3& transform) const", "BoundingBox Transformed(const Matrix3&in) const", AS_METHODPR(BoundingBox, Transformed, (const Matrix3&) const, BoundingBox), AS_CALL_THISCALL));

    // BoundingBox BoundingBox::Transformed(const Matrix3x4& transform) const
    methods.Push(RegisterObjectMethodArgs("BoundingBox BoundingBox::Transformed(const Matrix3x4& transform) const", "BoundingBox Transformed(const Matrix3x4&in) const", AS_METHODPR(BoundingBox, Transformed, (const Matrix3x4&) const, BoundingBox), AS_CALL_THISCALL));

    // Rect BoundingBox::Projected(const Matrix4& projection) const
    methods.Push(RegisterObjectMethodArgs("Rect BoundingBox::Projected(const Matrix4& projection) const", "Rect Projected(const Matrix4&in) const", AS_METHODPR(BoundingBox, Projected, (const Matrix4&) const, Rect), AS_CALL_THISCALL));

    // float BoundingBox::DistanceToPoint(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("float BoundingBox::DistanceToPoint(const Vector3& point) const", "float DistanceToPoint(const Vector3&in) const", AS_METHODPR(BoundingBox, DistanceToPoint, (const Vector3&) const, float), AS_CALL_THISCALL));

    // Intersection BoundingBox::IsInside(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("Intersection BoundingBox::IsInside(const Vector3& point) const", "Intersection IsInside(const Vector3&in) const", AS_METHODPR(BoundingBox, IsInside, (const Vector3&) const, Intersection), AS_CALL_THISCALL));

    // Intersection BoundingBox::IsInside(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("Intersection BoundingBox::IsInside(const BoundingBox& box) const", "Intersection IsInside(const BoundingBox&in) const", AS_METHODPR(BoundingBox, IsInside, (const BoundingBox&) const, Intersection), AS_CALL_THISCALL));

    // Intersection BoundingBox::IsInsideFast(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("Intersection BoundingBox::IsInsideFast(const BoundingBox& box) const", "Intersection IsInsideFast(const BoundingBox&in) const", AS_METHODPR(BoundingBox, IsInsideFast, (const BoundingBox&) const, Intersection), AS_CALL_THISCALL));

    // Intersection BoundingBox::IsInside(const Sphere& sphere) const
    methods.Push(RegisterObjectMethodArgs("Intersection BoundingBox::IsInside(const Sphere& sphere) const", "Intersection IsInside(const Sphere&in) const", AS_METHODPR(BoundingBox, IsInside, (const Sphere&) const, Intersection), AS_CALL_THISCALL));

    // Intersection BoundingBox::IsInsideFast(const Sphere& sphere) const
    methods.Push(RegisterObjectMethodArgs("Intersection BoundingBox::IsInsideFast(const Sphere& sphere) const", "Intersection IsInsideFast(const Sphere&in) const", AS_METHODPR(BoundingBox, IsInsideFast, (const Sphere&) const, Intersection), AS_CALL_THISCALL));

    // String BoundingBox::ToString() const
    methods.Push(RegisterObjectMethodArgs("String BoundingBox::ToString() const", "String ToString() const", AS_METHODPR(BoundingBox, ToString, () const, String), AS_CALL_THISCALL));
}

// class BoxOctreeQuery | File: ../Graphics/OctreeQuery.h
void CollectMembers_BoxOctreeQuery(Vector<RegisterObjectMethodArgs>& methods)
{
    // void BoxOctreeQuery::TestDrawables(Drawable** start, Drawable** end, bool inside) override
    // Error: type "Drawable**" can not automatically bind

    // Intersection BoxOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override
    methods.Push(RegisterObjectMethodArgs("Intersection BoxOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override", "Intersection TestOctant(const BoundingBox&in, bool)", AS_METHODPR(BoxOctreeQuery, TestOctant, (const BoundingBox&, bool), Intersection), AS_CALL_THISCALL));
}

// class BufferedSoundStream | File: ../Audio/BufferedSoundStream.h
void CollectMembers_BufferedSoundStream(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_SoundStream(methods);

    Remove(methods, "virtual unsigned SoundStream::GetData(signed char* dest, unsigned numBytes)=0");

    // void BufferedSoundStream::AddData(const SharedArrayPtr<signed char>& data, unsigned numBytes)
    // Error: type "const SharedArrayPtr<signed char>&" can not automatically bind

    // void BufferedSoundStream::AddData(const SharedArrayPtr<signed short>& data, unsigned numBytes)
    // Error: type "const SharedArrayPtr<signed short>&" can not automatically bind

    // void BufferedSoundStream::AddData(void* data, unsigned numBytes)
    // Error: type "void*" can not automatically bind

    // unsigned BufferedSoundStream::GetData(signed char* dest, unsigned numBytes) override
    // Error: type "signed char*" can not automatically bind

    // void BufferedSoundStream::Clear()
    methods.Push(RegisterObjectMethodArgs("void BufferedSoundStream::Clear()", "void Clear()", AS_METHODPR(BufferedSoundStream, Clear, (), void), AS_CALL_THISCALL));

    // unsigned BufferedSoundStream::GetBufferNumBytes() const
    methods.Push(RegisterObjectMethodArgs("unsigned BufferedSoundStream::GetBufferNumBytes() const", "uint GetBufferNumBytes() const", AS_METHODPR(BufferedSoundStream, GetBufferNumBytes, () const, unsigned), AS_CALL_THISCALL));

    // float BufferedSoundStream::GetBufferLength() const
    methods.Push(RegisterObjectMethodArgs("float BufferedSoundStream::GetBufferLength() const", "float GetBufferLength() const", AS_METHODPR(BufferedSoundStream, GetBufferLength, () const, float), AS_CALL_THISCALL));
}

// class Button | File: ../UI/Button.h
void CollectMembers_Button(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BorderImage(methods);

    Remove(methods, "static void BorderImage::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnClickEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor, UIElement* beginElement)");
    Remove(methods, "virtual void UIElement::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers)");
    Remove(methods, "virtual void UIElement::Update(float timeStep)");
    Remove(methods, "void BorderImage::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override");

    // void Button::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void Button::Update(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void Button::Update(float timeStep) override", "void Update(float)", AS_METHODPR(Button, Update, (float), void), AS_CALL_THISCALL));

    // void Button::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Button::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnClickBegin(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Button, OnClickBegin, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Button::OnClickEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor, UIElement* beginElement) override
    methods.Push(RegisterObjectMethodArgs("void Button::OnClickEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor, UIElement* beginElement) override", "void OnClickEnd(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+, UIElement@+)", AS_METHODPR(Button, OnClickEnd, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*, UIElement*), void), AS_CALL_THISCALL));

    // void Button::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Button::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnDragMove(const IntVector2&in, const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Button, OnDragMove, (const IntVector2&, const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Button::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override
    methods.Push(RegisterObjectMethodArgs("void Button::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override", "void OnKey(Key, MouseButtonFlags, QualifierFlags)", AS_METHODPR(Button, OnKey, (Key, MouseButtonFlags, QualifierFlags), void), AS_CALL_THISCALL));

    // void Button::SetPressedOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Button::SetPressedOffset(const IntVector2& offset)", "void SetPressedOffset(const IntVector2&in)", AS_METHODPR(Button, SetPressedOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Button::SetPressedOffset(const IntVector2& offset)", "void set_pressedOffset(const IntVector2&in)", AS_METHODPR(Button, SetPressedOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Button::SetPressedOffset(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void Button::SetPressedOffset(int x, int y)", "void SetPressedOffset(int, int)", AS_METHODPR(Button, SetPressedOffset, (int, int), void), AS_CALL_THISCALL));

    // void Button::SetPressedChildOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Button::SetPressedChildOffset(const IntVector2& offset)", "void SetPressedChildOffset(const IntVector2&in)", AS_METHODPR(Button, SetPressedChildOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Button::SetPressedChildOffset(const IntVector2& offset)", "void set_pressedChildOffset(const IntVector2&in)", AS_METHODPR(Button, SetPressedChildOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Button::SetPressedChildOffset(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void Button::SetPressedChildOffset(int x, int y)", "void SetPressedChildOffset(int, int)", AS_METHODPR(Button, SetPressedChildOffset, (int, int), void), AS_CALL_THISCALL));

    // void Button::SetRepeat(float delay, float rate)
    methods.Push(RegisterObjectMethodArgs("void Button::SetRepeat(float delay, float rate)", "void SetRepeat(float, float)", AS_METHODPR(Button, SetRepeat, (float, float), void), AS_CALL_THISCALL));

    // void Button::SetRepeatDelay(float delay)
    methods.Push(RegisterObjectMethodArgs("void Button::SetRepeatDelay(float delay)", "void SetRepeatDelay(float)", AS_METHODPR(Button, SetRepeatDelay, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Button::SetRepeatDelay(float delay)", "void set_repeatDelay(float)", AS_METHODPR(Button, SetRepeatDelay, (float), void), AS_CALL_THISCALL));

    // void Button::SetRepeatRate(float rate)
    methods.Push(RegisterObjectMethodArgs("void Button::SetRepeatRate(float rate)", "void SetRepeatRate(float)", AS_METHODPR(Button, SetRepeatRate, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Button::SetRepeatRate(float rate)", "void set_repeatRate(float)", AS_METHODPR(Button, SetRepeatRate, (float), void), AS_CALL_THISCALL));

    // const IntVector2& Button::GetPressedOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Button::GetPressedOffset() const", "const IntVector2& GetPressedOffset() const", AS_METHODPR(Button, GetPressedOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Button::GetPressedOffset() const", "const IntVector2& get_pressedOffset() const", AS_METHODPR(Button, GetPressedOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // const IntVector2& Button::GetPressedChildOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Button::GetPressedChildOffset() const", "const IntVector2& GetPressedChildOffset() const", AS_METHODPR(Button, GetPressedChildOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Button::GetPressedChildOffset() const", "const IntVector2& get_pressedChildOffset() const", AS_METHODPR(Button, GetPressedChildOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // float Button::GetRepeatDelay() const
    methods.Push(RegisterObjectMethodArgs("float Button::GetRepeatDelay() const", "float GetRepeatDelay() const", AS_METHODPR(Button, GetRepeatDelay, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Button::GetRepeatDelay() const", "float get_repeatDelay() const", AS_METHODPR(Button, GetRepeatDelay, () const, float), AS_CALL_THISCALL));

    // float Button::GetRepeatRate() const
    methods.Push(RegisterObjectMethodArgs("float Button::GetRepeatRate() const", "float GetRepeatRate() const", AS_METHODPR(Button, GetRepeatRate, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Button::GetRepeatRate() const", "float get_repeatRate() const", AS_METHODPR(Button, GetRepeatRate, () const, float), AS_CALL_THISCALL));

    // bool Button::IsPressed() const
    methods.Push(RegisterObjectMethodArgs("bool Button::IsPressed() const", "bool IsPressed() const", AS_METHODPR(Button, IsPressed, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Button::IsPressed() const", "bool get_pressed() const", AS_METHODPR(Button, IsPressed, () const, bool), AS_CALL_THISCALL));
}

// class Camera | File: ../Graphics/Camera.h
void CollectMembers_Camera(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // void Camera::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void Camera::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Camera, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void Camera::SetNearClip(float nearClip)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetNearClip(float nearClip)", "void SetNearClip(float)", AS_METHODPR(Camera, SetNearClip, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetNearClip(float nearClip)", "void set_nearClip(float)", AS_METHODPR(Camera, SetNearClip, (float), void), AS_CALL_THISCALL));

    // void Camera::SetFarClip(float farClip)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetFarClip(float farClip)", "void SetFarClip(float)", AS_METHODPR(Camera, SetFarClip, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetFarClip(float farClip)", "void set_farClip(float)", AS_METHODPR(Camera, SetFarClip, (float), void), AS_CALL_THISCALL));

    // void Camera::SetFov(float fov)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetFov(float fov)", "void SetFov(float)", AS_METHODPR(Camera, SetFov, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetFov(float fov)", "void set_fov(float)", AS_METHODPR(Camera, SetFov, (float), void), AS_CALL_THISCALL));

    // void Camera::SetOrthoSize(float orthoSize)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetOrthoSize(float orthoSize)", "void SetOrthoSize(float)", AS_METHODPR(Camera, SetOrthoSize, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetOrthoSize(float orthoSize)", "void set_orthoSize(float)", AS_METHODPR(Camera, SetOrthoSize, (float), void), AS_CALL_THISCALL));

    // void Camera::SetOrthoSize(const Vector2& orthoSize)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetOrthoSize(const Vector2& orthoSize)", "void SetOrthoSize(const Vector2&in)", AS_METHODPR(Camera, SetOrthoSize, (const Vector2&), void), AS_CALL_THISCALL));

    // void Camera::SetAspectRatio(float aspectRatio)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetAspectRatio(float aspectRatio)", "void SetAspectRatio(float)", AS_METHODPR(Camera, SetAspectRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetAspectRatio(float aspectRatio)", "void set_aspectRatio(float)", AS_METHODPR(Camera, SetAspectRatio, (float), void), AS_CALL_THISCALL));

    // void Camera::SetFillMode(FillMode mode)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetFillMode(FillMode mode)", "void SetFillMode(FillMode)", AS_METHODPR(Camera, SetFillMode, (FillMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetFillMode(FillMode mode)", "void set_fillMode(FillMode)", AS_METHODPR(Camera, SetFillMode, (FillMode), void), AS_CALL_THISCALL));

    // void Camera::SetZoom(float zoom)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetZoom(float zoom)", "void SetZoom(float)", AS_METHODPR(Camera, SetZoom, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetZoom(float zoom)", "void set_zoom(float)", AS_METHODPR(Camera, SetZoom, (float), void), AS_CALL_THISCALL));

    // void Camera::SetLodBias(float bias)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetLodBias(float bias)", "void SetLodBias(float)", AS_METHODPR(Camera, SetLodBias, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetLodBias(float bias)", "void set_lodBias(float)", AS_METHODPR(Camera, SetLodBias, (float), void), AS_CALL_THISCALL));

    // void Camera::SetViewMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetViewMask(unsigned mask)", "void SetViewMask(uint)", AS_METHODPR(Camera, SetViewMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetViewMask(unsigned mask)", "void set_viewMask(uint)", AS_METHODPR(Camera, SetViewMask, (unsigned), void), AS_CALL_THISCALL));

    // void Camera::SetViewOverrideFlags(ViewOverrideFlags flags)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetViewOverrideFlags(ViewOverrideFlags flags)", "void SetViewOverrideFlags(ViewOverrideFlags)", AS_METHODPR(Camera, SetViewOverrideFlags, (ViewOverrideFlags), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetViewOverrideFlags(ViewOverrideFlags flags)", "void set_viewOverrideFlags(ViewOverrideFlags)", AS_METHODPR(Camera, SetViewOverrideFlags, (ViewOverrideFlags), void), AS_CALL_THISCALL));

    // void Camera::SetOrthographic(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetOrthographic(bool enable)", "void SetOrthographic(bool)", AS_METHODPR(Camera, SetOrthographic, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetOrthographic(bool enable)", "void set_orthographic(bool)", AS_METHODPR(Camera, SetOrthographic, (bool), void), AS_CALL_THISCALL));

    // void Camera::SetAutoAspectRatio(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetAutoAspectRatio(bool enable)", "void SetAutoAspectRatio(bool)", AS_METHODPR(Camera, SetAutoAspectRatio, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetAutoAspectRatio(bool enable)", "void set_autoAspectRatio(bool)", AS_METHODPR(Camera, SetAutoAspectRatio, (bool), void), AS_CALL_THISCALL));

    // void Camera::SetProjectionOffset(const Vector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetProjectionOffset(const Vector2& offset)", "void SetProjectionOffset(const Vector2&in)", AS_METHODPR(Camera, SetProjectionOffset, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetProjectionOffset(const Vector2& offset)", "void set_projectionOffset(const Vector2&in)", AS_METHODPR(Camera, SetProjectionOffset, (const Vector2&), void), AS_CALL_THISCALL));

    // void Camera::SetUseReflection(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetUseReflection(bool enable)", "void SetUseReflection(bool)", AS_METHODPR(Camera, SetUseReflection, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetUseReflection(bool enable)", "void set_useReflection(bool)", AS_METHODPR(Camera, SetUseReflection, (bool), void), AS_CALL_THISCALL));

    // void Camera::SetReflectionPlane(const Plane& plane)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetReflectionPlane(const Plane& plane)", "void SetReflectionPlane(const Plane&in)", AS_METHODPR(Camera, SetReflectionPlane, (const Plane&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetReflectionPlane(const Plane& plane)", "void set_reflectionPlane(const Plane&in)", AS_METHODPR(Camera, SetReflectionPlane, (const Plane&), void), AS_CALL_THISCALL));

    // void Camera::SetUseClipping(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetUseClipping(bool enable)", "void SetUseClipping(bool)", AS_METHODPR(Camera, SetUseClipping, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetUseClipping(bool enable)", "void set_useClipping(bool)", AS_METHODPR(Camera, SetUseClipping, (bool), void), AS_CALL_THISCALL));

    // void Camera::SetClipPlane(const Plane& plane)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetClipPlane(const Plane& plane)", "void SetClipPlane(const Plane&in)", AS_METHODPR(Camera, SetClipPlane, (const Plane&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetClipPlane(const Plane& plane)", "void set_clipPlane(const Plane&in)", AS_METHODPR(Camera, SetClipPlane, (const Plane&), void), AS_CALL_THISCALL));

    // void Camera::SetFlipVertical(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetFlipVertical(bool enable)", "void SetFlipVertical(bool)", AS_METHODPR(Camera, SetFlipVertical, (bool), void), AS_CALL_THISCALL));

    // void Camera::SetProjection(const Matrix4& projection)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetProjection(const Matrix4& projection)", "void SetProjection(const Matrix4&in)", AS_METHODPR(Camera, SetProjection, (const Matrix4&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Camera::SetProjection(const Matrix4& projection)", "void set_projection(const Matrix4&in)", AS_METHODPR(Camera, SetProjection, (const Matrix4&), void), AS_CALL_THISCALL));

    // float Camera::GetFarClip() const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetFarClip() const", "float GetFarClip() const", AS_METHODPR(Camera, GetFarClip, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Camera::GetFarClip() const", "float get_farClip() const", AS_METHODPR(Camera, GetFarClip, () const, float), AS_CALL_THISCALL));

    // float Camera::GetNearClip() const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetNearClip() const", "float GetNearClip() const", AS_METHODPR(Camera, GetNearClip, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Camera::GetNearClip() const", "float get_nearClip() const", AS_METHODPR(Camera, GetNearClip, () const, float), AS_CALL_THISCALL));

    // float Camera::GetFov() const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetFov() const", "float GetFov() const", AS_METHODPR(Camera, GetFov, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Camera::GetFov() const", "float get_fov() const", AS_METHODPR(Camera, GetFov, () const, float), AS_CALL_THISCALL));

    // float Camera::GetOrthoSize() const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetOrthoSize() const", "float GetOrthoSize() const", AS_METHODPR(Camera, GetOrthoSize, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Camera::GetOrthoSize() const", "float get_orthoSize() const", AS_METHODPR(Camera, GetOrthoSize, () const, float), AS_CALL_THISCALL));

    // float Camera::GetAspectRatio() const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetAspectRatio() const", "float GetAspectRatio() const", AS_METHODPR(Camera, GetAspectRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Camera::GetAspectRatio() const", "float get_aspectRatio() const", AS_METHODPR(Camera, GetAspectRatio, () const, float), AS_CALL_THISCALL));

    // float Camera::GetZoom() const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetZoom() const", "float GetZoom() const", AS_METHODPR(Camera, GetZoom, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Camera::GetZoom() const", "float get_zoom() const", AS_METHODPR(Camera, GetZoom, () const, float), AS_CALL_THISCALL));

    // float Camera::GetLodBias() const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetLodBias() const", "float GetLodBias() const", AS_METHODPR(Camera, GetLodBias, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Camera::GetLodBias() const", "float get_lodBias() const", AS_METHODPR(Camera, GetLodBias, () const, float), AS_CALL_THISCALL));

    // unsigned Camera::GetViewMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Camera::GetViewMask() const", "uint GetViewMask() const", AS_METHODPR(Camera, GetViewMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Camera::GetViewMask() const", "uint get_viewMask() const", AS_METHODPR(Camera, GetViewMask, () const, unsigned), AS_CALL_THISCALL));

    // ViewOverrideFlags Camera::GetViewOverrideFlags() const
    methods.Push(RegisterObjectMethodArgs("ViewOverrideFlags Camera::GetViewOverrideFlags() const", "ViewOverrideFlags GetViewOverrideFlags() const", AS_METHODPR(Camera, GetViewOverrideFlags, () const, ViewOverrideFlags), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ViewOverrideFlags Camera::GetViewOverrideFlags() const", "ViewOverrideFlags get_viewOverrideFlags() const", AS_METHODPR(Camera, GetViewOverrideFlags, () const, ViewOverrideFlags), AS_CALL_THISCALL));

    // FillMode Camera::GetFillMode() const
    methods.Push(RegisterObjectMethodArgs("FillMode Camera::GetFillMode() const", "FillMode GetFillMode() const", AS_METHODPR(Camera, GetFillMode, () const, FillMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FillMode Camera::GetFillMode() const", "FillMode get_fillMode() const", AS_METHODPR(Camera, GetFillMode, () const, FillMode), AS_CALL_THISCALL));

    // bool Camera::IsOrthographic() const
    methods.Push(RegisterObjectMethodArgs("bool Camera::IsOrthographic() const", "bool IsOrthographic() const", AS_METHODPR(Camera, IsOrthographic, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Camera::IsOrthographic() const", "bool get_orthographic() const", AS_METHODPR(Camera, IsOrthographic, () const, bool), AS_CALL_THISCALL));

    // bool Camera::GetAutoAspectRatio() const
    methods.Push(RegisterObjectMethodArgs("bool Camera::GetAutoAspectRatio() const", "bool GetAutoAspectRatio() const", AS_METHODPR(Camera, GetAutoAspectRatio, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Camera::GetAutoAspectRatio() const", "bool get_autoAspectRatio() const", AS_METHODPR(Camera, GetAutoAspectRatio, () const, bool), AS_CALL_THISCALL));

    // const Frustum& Camera::GetFrustum() const
    methods.Push(RegisterObjectMethodArgs("const Frustum& Camera::GetFrustum() const", "const Frustum& GetFrustum() const", AS_METHODPR(Camera, GetFrustum, () const, const Frustum&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Frustum& Camera::GetFrustum() const", "const Frustum& get_frustum() const", AS_METHODPR(Camera, GetFrustum, () const, const Frustum&), AS_CALL_THISCALL));

    // Matrix4 Camera::GetProjection() const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Camera::GetProjection() const", "Matrix4 GetProjection() const", AS_METHODPR(Camera, GetProjection, () const, Matrix4), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Matrix4 Camera::GetProjection() const", "Matrix4 get_projection() const", AS_METHODPR(Camera, GetProjection, () const, Matrix4), AS_CALL_THISCALL));

    // Matrix4 Camera::GetGPUProjection() const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Camera::GetGPUProjection() const", "Matrix4 GetGPUProjection() const", AS_METHODPR(Camera, GetGPUProjection, () const, Matrix4), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Matrix4 Camera::GetGPUProjection() const", "Matrix4 get_gPUProjection() const", AS_METHODPR(Camera, GetGPUProjection, () const, Matrix4), AS_CALL_THISCALL));

    // const Matrix3x4& Camera::GetView() const
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Camera::GetView() const", "const Matrix3x4& GetView() const", AS_METHODPR(Camera, GetView, () const, const Matrix3x4&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Camera::GetView() const", "const Matrix3x4& get_view() const", AS_METHODPR(Camera, GetView, () const, const Matrix3x4&), AS_CALL_THISCALL));

    // void Camera::GetFrustumSize(Vector3& near, Vector3& far) const
    methods.Push(RegisterObjectMethodArgs("void Camera::GetFrustumSize(Vector3& near, Vector3& far) const", "void GetFrustumSize(Vector3&, Vector3&) const", AS_METHODPR(Camera, GetFrustumSize, (Vector3&, Vector3&) const, void), AS_CALL_THISCALL));

    // float Camera::GetHalfViewSize() const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetHalfViewSize() const", "float GetHalfViewSize() const", AS_METHODPR(Camera, GetHalfViewSize, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Camera::GetHalfViewSize() const", "float get_halfViewSize() const", AS_METHODPR(Camera, GetHalfViewSize, () const, float), AS_CALL_THISCALL));

    // Frustum Camera::GetSplitFrustum(float nearClip, float farClip) const
    methods.Push(RegisterObjectMethodArgs("Frustum Camera::GetSplitFrustum(float nearClip, float farClip) const", "Frustum GetSplitFrustum(float, float) const", AS_METHODPR(Camera, GetSplitFrustum, (float, float) const, Frustum), AS_CALL_THISCALL));

    // Frustum Camera::GetViewSpaceFrustum() const
    methods.Push(RegisterObjectMethodArgs("Frustum Camera::GetViewSpaceFrustum() const", "Frustum GetViewSpaceFrustum() const", AS_METHODPR(Camera, GetViewSpaceFrustum, () const, Frustum), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Frustum Camera::GetViewSpaceFrustum() const", "Frustum get_viewSpaceFrustum() const", AS_METHODPR(Camera, GetViewSpaceFrustum, () const, Frustum), AS_CALL_THISCALL));

    // Frustum Camera::GetViewSpaceSplitFrustum(float nearClip, float farClip) const
    methods.Push(RegisterObjectMethodArgs("Frustum Camera::GetViewSpaceSplitFrustum(float nearClip, float farClip) const", "Frustum GetViewSpaceSplitFrustum(float, float) const", AS_METHODPR(Camera, GetViewSpaceSplitFrustum, (float, float) const, Frustum), AS_CALL_THISCALL));

    // Ray Camera::GetScreenRay(float x, float y) const
    methods.Push(RegisterObjectMethodArgs("Ray Camera::GetScreenRay(float x, float y) const", "Ray GetScreenRay(float, float) const", AS_METHODPR(Camera, GetScreenRay, (float, float) const, Ray), AS_CALL_THISCALL));

    // Vector2 Camera::WorldToScreenPoint(const Vector3& worldPos) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Camera::WorldToScreenPoint(const Vector3& worldPos) const", "Vector2 WorldToScreenPoint(const Vector3&in) const", AS_METHODPR(Camera, WorldToScreenPoint, (const Vector3&) const, Vector2), AS_CALL_THISCALL));

    // Vector3 Camera::ScreenToWorldPoint(const Vector3& screenPos) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Camera::ScreenToWorldPoint(const Vector3& screenPos) const", "Vector3 ScreenToWorldPoint(const Vector3&in) const", AS_METHODPR(Camera, ScreenToWorldPoint, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // const Vector2& Camera::GetProjectionOffset() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& Camera::GetProjectionOffset() const", "const Vector2& GetProjectionOffset() const", AS_METHODPR(Camera, GetProjectionOffset, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& Camera::GetProjectionOffset() const", "const Vector2& get_projectionOffset() const", AS_METHODPR(Camera, GetProjectionOffset, () const, const Vector2&), AS_CALL_THISCALL));

    // bool Camera::GetUseReflection() const
    methods.Push(RegisterObjectMethodArgs("bool Camera::GetUseReflection() const", "bool GetUseReflection() const", AS_METHODPR(Camera, GetUseReflection, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Camera::GetUseReflection() const", "bool get_useReflection() const", AS_METHODPR(Camera, GetUseReflection, () const, bool), AS_CALL_THISCALL));

    // const Plane& Camera::GetReflectionPlane() const
    methods.Push(RegisterObjectMethodArgs("const Plane& Camera::GetReflectionPlane() const", "const Plane& GetReflectionPlane() const", AS_METHODPR(Camera, GetReflectionPlane, () const, const Plane&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Plane& Camera::GetReflectionPlane() const", "const Plane& get_reflectionPlane() const", AS_METHODPR(Camera, GetReflectionPlane, () const, const Plane&), AS_CALL_THISCALL));

    // bool Camera::GetUseClipping() const
    methods.Push(RegisterObjectMethodArgs("bool Camera::GetUseClipping() const", "bool GetUseClipping() const", AS_METHODPR(Camera, GetUseClipping, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Camera::GetUseClipping() const", "bool get_useClipping() const", AS_METHODPR(Camera, GetUseClipping, () const, bool), AS_CALL_THISCALL));

    // const Plane& Camera::GetClipPlane() const
    methods.Push(RegisterObjectMethodArgs("const Plane& Camera::GetClipPlane() const", "const Plane& GetClipPlane() const", AS_METHODPR(Camera, GetClipPlane, () const, const Plane&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Plane& Camera::GetClipPlane() const", "const Plane& get_clipPlane() const", AS_METHODPR(Camera, GetClipPlane, () const, const Plane&), AS_CALL_THISCALL));

    // bool Camera::GetFlipVertical() const
    methods.Push(RegisterObjectMethodArgs("bool Camera::GetFlipVertical() const", "bool GetFlipVertical() const", AS_METHODPR(Camera, GetFlipVertical, () const, bool), AS_CALL_THISCALL));

    // bool Camera::GetReverseCulling() const
    methods.Push(RegisterObjectMethodArgs("bool Camera::GetReverseCulling() const", "bool GetReverseCulling() const", AS_METHODPR(Camera, GetReverseCulling, () const, bool), AS_CALL_THISCALL));

    // float Camera::GetDistance(const Vector3& worldPos) const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetDistance(const Vector3& worldPos) const", "float GetDistance(const Vector3&in) const", AS_METHODPR(Camera, GetDistance, (const Vector3&) const, float), AS_CALL_THISCALL));

    // float Camera::GetDistanceSquared(const Vector3& worldPos) const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetDistanceSquared(const Vector3& worldPos) const", "float GetDistanceSquared(const Vector3&in) const", AS_METHODPR(Camera, GetDistanceSquared, (const Vector3&) const, float), AS_CALL_THISCALL));

    // float Camera::GetLodDistance(float distance, float scale, float bias) const
    methods.Push(RegisterObjectMethodArgs("float Camera::GetLodDistance(float distance, float scale, float bias) const", "float GetLodDistance(float, float, float) const", AS_METHODPR(Camera, GetLodDistance, (float, float, float) const, float), AS_CALL_THISCALL));

    // Quaternion Camera::GetFaceCameraRotation(const Vector3& position, const Quaternion& rotation, FaceCameraMode mode, float minAngle=0.0f)
    methods.Push(RegisterObjectMethodArgs("Quaternion Camera::GetFaceCameraRotation(const Vector3& position, const Quaternion& rotation, FaceCameraMode mode, float minAngle=0.0f)", "Quaternion GetFaceCameraRotation(const Vector3&in, const Quaternion&in, FaceCameraMode, float = 0.0f)", AS_METHODPR(Camera, GetFaceCameraRotation, (const Vector3&, const Quaternion&, FaceCameraMode, float), Quaternion), AS_CALL_THISCALL));

    // Matrix3x4 Camera::GetEffectiveWorldTransform() const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Camera::GetEffectiveWorldTransform() const", "Matrix3x4 GetEffectiveWorldTransform() const", AS_METHODPR(Camera, GetEffectiveWorldTransform, () const, Matrix3x4), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Camera::GetEffectiveWorldTransform() const", "Matrix3x4 get_effectiveWorldTransform() const", AS_METHODPR(Camera, GetEffectiveWorldTransform, () const, Matrix3x4), AS_CALL_THISCALL));

    // bool Camera::IsProjectionValid() const
    methods.Push(RegisterObjectMethodArgs("bool Camera::IsProjectionValid() const", "bool IsProjectionValid() const", AS_METHODPR(Camera, IsProjectionValid, () const, bool), AS_CALL_THISCALL));

    // void Camera::SetAspectRatioInternal(float aspectRatio)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetAspectRatioInternal(float aspectRatio)", "void SetAspectRatioInternal(float)", AS_METHODPR(Camera, SetAspectRatioInternal, (float), void), AS_CALL_THISCALL));

    // void Camera::SetOrthoSizeAttr(float orthoSize)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetOrthoSizeAttr(float orthoSize)", "void SetOrthoSizeAttr(float)", AS_METHODPR(Camera, SetOrthoSizeAttr, (float), void), AS_CALL_THISCALL));

    // void Camera::SetReflectionPlaneAttr(const Vector4& value)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetReflectionPlaneAttr(const Vector4& value)", "void SetReflectionPlaneAttr(const Vector4&in)", AS_METHODPR(Camera, SetReflectionPlaneAttr, (const Vector4&), void), AS_CALL_THISCALL));

    // Vector4 Camera::GetReflectionPlaneAttr() const
    methods.Push(RegisterObjectMethodArgs("Vector4 Camera::GetReflectionPlaneAttr() const", "Vector4 GetReflectionPlaneAttr() const", AS_METHODPR(Camera, GetReflectionPlaneAttr, () const, Vector4), AS_CALL_THISCALL));

    // void Camera::SetClipPlaneAttr(const Vector4& value)
    methods.Push(RegisterObjectMethodArgs("void Camera::SetClipPlaneAttr(const Vector4& value)", "void SetClipPlaneAttr(const Vector4&in)", AS_METHODPR(Camera, SetClipPlaneAttr, (const Vector4&), void), AS_CALL_THISCALL));

    // Vector4 Camera::GetClipPlaneAttr() const
    methods.Push(RegisterObjectMethodArgs("Vector4 Camera::GetClipPlaneAttr() const", "Vector4 GetClipPlaneAttr() const", AS_METHODPR(Camera, GetClipPlaneAttr, () const, Vector4), AS_CALL_THISCALL));
}

// struct CascadeParameters | File: ../Graphics/Light.h
void CollectMembers_CascadeParameters(Vector<RegisterObjectMethodArgs>& methods)
{
    // void CascadeParameters::Validate()
    methods.Push(RegisterObjectMethodArgs("void CascadeParameters::Validate()", "void Validate()", AS_METHODPR(CascadeParameters, Validate, (), void), AS_CALL_THISCALL));

    // float CascadeParameters::GetShadowRange() const
    methods.Push(RegisterObjectMethodArgs("float CascadeParameters::GetShadowRange() const", "float GetShadowRange() const", AS_METHODPR(CascadeParameters, GetShadowRange, () const, float), AS_CALL_THISCALL));
}

// struct CharLocation | File: ../UI/Text.h
void CollectMembers_CharLocation(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class CheckBox | File: ../UI/CheckBox.h
void CollectMembers_CheckBox(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BorderImage(methods);

    Remove(methods, "static void BorderImage::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers)");
    Remove(methods, "void BorderImage::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override");

    // void CheckBox::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void CheckBox::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void CheckBox::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnClickBegin(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(CheckBox, OnClickBegin, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void CheckBox::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override
    methods.Push(RegisterObjectMethodArgs("void CheckBox::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override", "void OnKey(Key, MouseButtonFlags, QualifierFlags)", AS_METHODPR(CheckBox, OnKey, (Key, MouseButtonFlags, QualifierFlags), void), AS_CALL_THISCALL));

    // void CheckBox::SetChecked(bool enable)
    methods.Push(RegisterObjectMethodArgs("void CheckBox::SetChecked(bool enable)", "void SetChecked(bool)", AS_METHODPR(CheckBox, SetChecked, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CheckBox::SetChecked(bool enable)", "void set_checked(bool)", AS_METHODPR(CheckBox, SetChecked, (bool), void), AS_CALL_THISCALL));

    // void CheckBox::SetCheckedOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void CheckBox::SetCheckedOffset(const IntVector2& offset)", "void SetCheckedOffset(const IntVector2&in)", AS_METHODPR(CheckBox, SetCheckedOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CheckBox::SetCheckedOffset(const IntVector2& offset)", "void set_checkedOffset(const IntVector2&in)", AS_METHODPR(CheckBox, SetCheckedOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void CheckBox::SetCheckedOffset(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void CheckBox::SetCheckedOffset(int x, int y)", "void SetCheckedOffset(int, int)", AS_METHODPR(CheckBox, SetCheckedOffset, (int, int), void), AS_CALL_THISCALL));

    // bool CheckBox::IsChecked() const
    methods.Push(RegisterObjectMethodArgs("bool CheckBox::IsChecked() const", "bool IsChecked() const", AS_METHODPR(CheckBox, IsChecked, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CheckBox::IsChecked() const", "bool get_checked() const", AS_METHODPR(CheckBox, IsChecked, () const, bool), AS_CALL_THISCALL));

    // const IntVector2& CheckBox::GetCheckedOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& CheckBox::GetCheckedOffset() const", "const IntVector2& GetCheckedOffset() const", AS_METHODPR(CheckBox, GetCheckedOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& CheckBox::GetCheckedOffset() const", "const IntVector2& get_checkedOffset() const", AS_METHODPR(CheckBox, GetCheckedOffset, () const, const IntVector2&), AS_CALL_THISCALL));
}

// class Color | File: ../Math/Color.h
void CollectMembers_Color(Vector<RegisterObjectMethodArgs>& methods)
{
    // void Color::Bounds(float* min, float* max, bool clipped=false) const
    // Error: type "float*" can not automatically bind

    // const float* Color::Data() const
    // Error: type "const float*" can not automatically bind

    // void Color::FromUIntMask(unsigned color, const ChannelMask& mask)
    // Error: type "const ChannelMask&" can not automatically bind

    // unsigned Color::ToUIntMask(const ChannelMask& mask) const
    // Error: type "const ChannelMask&" can not automatically bind

    // bool Color::operator!=(const Color& rhs) const
    // Only operator== is needed

    // Color& Color::operator=(const Color& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Color& Color::operator=(const Color& rhs) noexcept=default", "Color& opAssign(const Color&in)", AS_METHODPR(Color, operator=, (const Color&), Color&), AS_CALL_THISCALL));

    // bool Color::operator==(const Color& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Color::operator==(const Color& rhs) const", "bool opEquals(const Color&in) const", AS_METHODPR(Color, operator==, (const Color&) const, bool), AS_CALL_THISCALL));

    // Color Color::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Color Color::operator*(float rhs) const", "Color opMul(float) const", AS_METHODPR(Color, operator*, (float) const, Color), AS_CALL_THISCALL));

    // Color Color::operator+(const Color& rhs) const
    methods.Push(RegisterObjectMethodArgs("Color Color::operator+(const Color& rhs) const", "Color opAdd(const Color&in) const", AS_METHODPR(Color, operator+, (const Color&) const, Color), AS_CALL_THISCALL));

    // Color Color::operator-() const
    methods.Push(RegisterObjectMethodArgs("Color Color::operator-() const", "Color opNeg() const", AS_METHODPR(Color, operator-, () const, Color), AS_CALL_THISCALL));

    // Color Color::operator-(const Color& rhs) const
    methods.Push(RegisterObjectMethodArgs("Color Color::operator-(const Color& rhs) const", "Color opSub(const Color&in) const", AS_METHODPR(Color, operator-, (const Color&) const, Color), AS_CALL_THISCALL));

    // Color& Color::operator+=(const Color& rhs)
    methods.Push(RegisterObjectMethodArgs("Color& Color::operator+=(const Color& rhs)", "Color& opAddAssign(const Color&in)", AS_METHODPR(Color, operator+=, (const Color&), Color&), AS_CALL_THISCALL));

    // unsigned Color::ToUInt() const
    methods.Push(RegisterObjectMethodArgs("unsigned Color::ToUInt() const", "uint ToUInt() const", AS_METHODPR(Color, ToUInt, () const, unsigned), AS_CALL_THISCALL));

    // Vector3 Color::ToHSL() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Color::ToHSL() const", "Vector3 ToHSL() const", AS_METHODPR(Color, ToHSL, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Color::ToHSV() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Color::ToHSV() const", "Vector3 ToHSV() const", AS_METHODPR(Color, ToHSV, () const, Vector3), AS_CALL_THISCALL));

    // void Color::FromUInt(unsigned color)
    methods.Push(RegisterObjectMethodArgs("void Color::FromUInt(unsigned color)", "void FromUInt(uint)", AS_METHODPR(Color, FromUInt, (unsigned), void), AS_CALL_THISCALL));

    // void Color::FromHSL(float h, float s, float l, float a=1.0f)
    methods.Push(RegisterObjectMethodArgs("void Color::FromHSL(float h, float s, float l, float a=1.0f)", "void FromHSL(float, float, float, float = 1.0f)", AS_METHODPR(Color, FromHSL, (float, float, float, float), void), AS_CALL_THISCALL));

    // void Color::FromHSV(float h, float s, float v, float a=1.0f)
    methods.Push(RegisterObjectMethodArgs("void Color::FromHSV(float h, float s, float v, float a=1.0f)", "void FromHSV(float, float, float, float = 1.0f)", AS_METHODPR(Color, FromHSV, (float, float, float, float), void), AS_CALL_THISCALL));

    // Vector3 Color::ToVector3() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Color::ToVector3() const", "Vector3 ToVector3() const", AS_METHODPR(Color, ToVector3, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Color::ToVector3() const", "Vector3 get_rgb() const", AS_METHODPR(Color, ToVector3, () const, Vector3), AS_CALL_THISCALL));

    // Vector4 Color::ToVector4() const
    methods.Push(RegisterObjectMethodArgs("Vector4 Color::ToVector4() const", "Vector4 ToVector4() const", AS_METHODPR(Color, ToVector4, () const, Vector4), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector4 Color::ToVector4() const", "Vector4 get_rgba() const", AS_METHODPR(Color, ToVector4, () const, Vector4), AS_CALL_THISCALL));

    // float Color::SumRGB() const
    methods.Push(RegisterObjectMethodArgs("float Color::SumRGB() const", "float SumRGB() const", AS_METHODPR(Color, SumRGB, () const, float), AS_CALL_THISCALL));

    // float Color::Average() const
    methods.Push(RegisterObjectMethodArgs("float Color::Average() const", "float Average() const", AS_METHODPR(Color, Average, () const, float), AS_CALL_THISCALL));

    // float Color::Luma() const
    methods.Push(RegisterObjectMethodArgs("float Color::Luma() const", "float Luma() const", AS_METHODPR(Color, Luma, () const, float), AS_CALL_THISCALL));

    // float Color::Chroma() const
    methods.Push(RegisterObjectMethodArgs("float Color::Chroma() const", "float Chroma() const", AS_METHODPR(Color, Chroma, () const, float), AS_CALL_THISCALL));

    // float Color::Hue() const
    methods.Push(RegisterObjectMethodArgs("float Color::Hue() const", "float Hue() const", AS_METHODPR(Color, Hue, () const, float), AS_CALL_THISCALL));

    // float Color::SaturationHSL() const
    methods.Push(RegisterObjectMethodArgs("float Color::SaturationHSL() const", "float SaturationHSL() const", AS_METHODPR(Color, SaturationHSL, () const, float), AS_CALL_THISCALL));

    // float Color::SaturationHSV() const
    methods.Push(RegisterObjectMethodArgs("float Color::SaturationHSV() const", "float SaturationHSV() const", AS_METHODPR(Color, SaturationHSV, () const, float), AS_CALL_THISCALL));

    // float Color::Value() const
    methods.Push(RegisterObjectMethodArgs("float Color::Value() const", "float Value() const", AS_METHODPR(Color, Value, () const, float), AS_CALL_THISCALL));

    // Color Color::GammaToLinear() const
    methods.Push(RegisterObjectMethodArgs("Color Color::GammaToLinear() const", "Color GammaToLinear() const", AS_METHODPR(Color, GammaToLinear, () const, Color), AS_CALL_THISCALL));

    // Color Color::LinearToGamma() const
    methods.Push(RegisterObjectMethodArgs("Color Color::LinearToGamma() const", "Color LinearToGamma() const", AS_METHODPR(Color, LinearToGamma, () const, Color), AS_CALL_THISCALL));

    // float Color::Lightness() const
    methods.Push(RegisterObjectMethodArgs("float Color::Lightness() const", "float Lightness() const", AS_METHODPR(Color, Lightness, () const, float), AS_CALL_THISCALL));

    // float Color::MaxRGB() const
    methods.Push(RegisterObjectMethodArgs("float Color::MaxRGB() const", "float MaxRGB() const", AS_METHODPR(Color, MaxRGB, () const, float), AS_CALL_THISCALL));

    // float Color::MinRGB() const
    methods.Push(RegisterObjectMethodArgs("float Color::MinRGB() const", "float MinRGB() const", AS_METHODPR(Color, MinRGB, () const, float), AS_CALL_THISCALL));

    // float Color::Range() const
    methods.Push(RegisterObjectMethodArgs("float Color::Range() const", "float Range() const", AS_METHODPR(Color, Range, () const, float), AS_CALL_THISCALL));

    // void Color::Clip(bool clipAlpha=false)
    methods.Push(RegisterObjectMethodArgs("void Color::Clip(bool clipAlpha=false)", "void Clip(bool = false)", AS_METHODPR(Color, Clip, (bool), void), AS_CALL_THISCALL));

    // void Color::Invert(bool invertAlpha=false)
    methods.Push(RegisterObjectMethodArgs("void Color::Invert(bool invertAlpha=false)", "void Invert(bool = false)", AS_METHODPR(Color, Invert, (bool), void), AS_CALL_THISCALL));

    // Color Color::Lerp(const Color& rhs, float t) const
    methods.Push(RegisterObjectMethodArgs("Color Color::Lerp(const Color& rhs, float t) const", "Color Lerp(const Color&in, float) const", AS_METHODPR(Color, Lerp, (const Color&, float) const, Color), AS_CALL_THISCALL));

    // Color Color::Abs() const
    methods.Push(RegisterObjectMethodArgs("Color Color::Abs() const", "Color Abs() const", AS_METHODPR(Color, Abs, () const, Color), AS_CALL_THISCALL));

    // bool Color::Equals(const Color& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Color::Equals(const Color& rhs) const", "bool Equals(const Color&in) const", AS_METHODPR(Color, Equals, (const Color&) const, bool), AS_CALL_THISCALL));

    // String Color::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Color::ToString() const", "String ToString() const", AS_METHODPR(Color, ToString, () const, String), AS_CALL_THISCALL));

    // unsigned Color::ToUIntArgb() const
    methods.Push(RegisterObjectMethodArgs("unsigned Color::ToUIntArgb() const", "uint ToUIntArgb() const", AS_METHODPR(Color, ToUIntArgb, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Color::ToHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned Color::ToHash() const", "uint ToHash() const", AS_METHODPR(Color, ToHash, () const, unsigned), AS_CALL_THISCALL));
}

// struct ColorFrame | File: ../Graphics/ParticleEffect.h
void CollectMembers_ColorFrame(Vector<RegisterObjectMethodArgs>& methods)
{
    // Color ColorFrame::Interpolate(const ColorFrame& next, float time) const
    methods.Push(RegisterObjectMethodArgs("Color ColorFrame::Interpolate(const ColorFrame& next, float time) const", "Color Interpolate(const ColorFrame&in, float) const", AS_METHODPR(ColorFrame, Interpolate, (const ColorFrame&, float) const, Color), AS_CALL_THISCALL));
}

// class Component | File: ../Scene/Component.h
void CollectMembers_Component(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Animatable(methods);

    Remove(methods, "bool Animatable::SaveJSON(JSONValue& dest) const override");
    Remove(methods, "bool Animatable::SaveXML(XMLElement& dest) const override");
    Remove(methods, "virtual bool Serializable::Save(Serializer& dest) const");
    Remove(methods, "virtual void Serializable::MarkNetworkUpdate()");

    // void Component::AddReplicationState(ComponentReplicationState* state)
    // Error: type "ComponentReplicationState*" can not automatically bind

    // void Component::GetComponents(PODVector<Component*>& dest, StringHash type) const
    // Error: type "PODVector<Component*>&" can not automatically bind

    // virtual void Component::GetDependencyNodes(PODVector<Node*>& dest)
    // Error: type "PODVector<Node*>&" can not automatically bind

    // virtual void Component::OnSetEnabled()
    methods.Push(RegisterObjectMethodArgs("virtual void Component::OnSetEnabled()", "void OnSetEnabled()", AS_METHODPR(Component, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // bool Component::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Component::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(Component, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool Component::SaveXML(XMLElement& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Component::SaveXML(XMLElement& dest) const override", "bool SaveXML(XMLElement&) const", AS_METHODPR(Component, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // bool Component::SaveJSON(JSONValue& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Component::SaveJSON(JSONValue& dest) const override", "bool SaveJSON(JSONValue&) const", AS_METHODPR(Component, SaveJSON, (JSONValue&) const, bool), AS_CALL_THISCALL));

    // void Component::MarkNetworkUpdate() override
    methods.Push(RegisterObjectMethodArgs("void Component::MarkNetworkUpdate() override", "void MarkNetworkUpdate()", AS_METHODPR(Component, MarkNetworkUpdate, (), void), AS_CALL_THISCALL));

    // virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)
    methods.Push(RegisterObjectMethodArgs("virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Component, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void Component::SetEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Component::SetEnabled(bool enable)", "void SetEnabled(bool)", AS_METHODPR(Component, SetEnabled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Component::SetEnabled(bool enable)", "void set_enabled(bool)", AS_METHODPR(Component, SetEnabled, (bool), void), AS_CALL_THISCALL));

    // void Component::Remove()
    methods.Push(RegisterObjectMethodArgs("void Component::Remove()", "void Remove()", AS_METHODPR(Component, Remove, (), void), AS_CALL_THISCALL));

    // unsigned Component::GetID() const
    methods.Push(RegisterObjectMethodArgs("unsigned Component::GetID() const", "uint GetID() const", AS_METHODPR(Component, GetID, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Component::GetID() const", "uint get_id() const", AS_METHODPR(Component, GetID, () const, unsigned), AS_CALL_THISCALL));

    // bool Component::IsReplicated() const
    methods.Push(RegisterObjectMethodArgs("bool Component::IsReplicated() const", "bool IsReplicated() const", AS_METHODPR(Component, IsReplicated, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Component::IsReplicated() const", "bool get_replicated() const", AS_METHODPR(Component, IsReplicated, () const, bool), AS_CALL_THISCALL));

    // Node* Component::GetNode() const
    methods.Push(RegisterObjectMethodArgs("Node* Component::GetNode() const", "Node@+ GetNode() const", AS_METHODPR(Component, GetNode, () const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* Component::GetNode() const", "Node@+ get_node() const", AS_METHODPR(Component, GetNode, () const, Node*), AS_CALL_THISCALL));

    // Scene* Component::GetScene() const
    methods.Push(RegisterObjectMethodArgs("Scene* Component::GetScene() const", "Scene@+ GetScene() const", AS_METHODPR(Component, GetScene, () const, Scene*), AS_CALL_THISCALL));

    // bool Component::IsEnabled() const
    methods.Push(RegisterObjectMethodArgs("bool Component::IsEnabled() const", "bool IsEnabled() const", AS_METHODPR(Component, IsEnabled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Component::IsEnabled() const", "bool get_enabled() const", AS_METHODPR(Component, IsEnabled, () const, bool), AS_CALL_THISCALL));

    // bool Component::IsEnabledEffective() const
    methods.Push(RegisterObjectMethodArgs("bool Component::IsEnabledEffective() const", "bool IsEnabledEffective() const", AS_METHODPR(Component, IsEnabledEffective, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Component::IsEnabledEffective() const", "bool get_enabledEffective() const", AS_METHODPR(Component, IsEnabledEffective, () const, bool), AS_CALL_THISCALL));

    // Component* Component::GetComponent(StringHash type) const
    methods.Push(RegisterObjectMethodArgs("Component* Component::GetComponent(StringHash type) const", "Component@+ GetComponent(StringHash) const", AS_METHODPR(Component, GetComponent, (StringHash) const, Component*), AS_CALL_THISCALL));

    // void Component::PrepareNetworkUpdate()
    methods.Push(RegisterObjectMethodArgs("void Component::PrepareNetworkUpdate()", "void PrepareNetworkUpdate()", AS_METHODPR(Component, PrepareNetworkUpdate, (), void), AS_CALL_THISCALL));
}

// struct ComponentReplicationState | File: ../Scene/ReplicationState.h
void CollectMembers_ComponentReplicationState(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ReplicationState(methods);
}

// struct CompressedLevel | File: ../Resource/Image.h
void CollectMembers_CompressedLevel(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool CompressedLevel::Decompress(unsigned char* dest) const
    // Error: type "unsigned char*" can not automatically bind
}

// class Condition | File: ../Core/Condition.h
void CollectMembers_Condition(Vector<RegisterObjectMethodArgs>& methods)
{
    // void Condition::Set()
    methods.Push(RegisterObjectMethodArgs("void Condition::Set()", "void Set()", AS_METHODPR(Condition, Set, (), void), AS_CALL_THISCALL));

    // void Condition::Wait()
    methods.Push(RegisterObjectMethodArgs("void Condition::Wait()", "void Wait()", AS_METHODPR(Condition, Wait, (), void), AS_CALL_THISCALL));
}

// class Console | File: ../Engine/Console.h
void CollectMembers_Console(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Console::SetDefaultStyle(XMLFile* style)
    methods.Push(RegisterObjectMethodArgs("void Console::SetDefaultStyle(XMLFile* style)", "void SetDefaultStyle(XMLFile@+)", AS_METHODPR(Console, SetDefaultStyle, (XMLFile*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Console::SetDefaultStyle(XMLFile* style)", "void set_defaultStyle(XMLFile@+)", AS_METHODPR(Console, SetDefaultStyle, (XMLFile*), void), AS_CALL_THISCALL));

    // void Console::SetVisible(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Console::SetVisible(bool enable)", "void SetVisible(bool)", AS_METHODPR(Console, SetVisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Console::SetVisible(bool enable)", "void set_visible(bool)", AS_METHODPR(Console, SetVisible, (bool), void), AS_CALL_THISCALL));

    // void Console::Toggle()
    methods.Push(RegisterObjectMethodArgs("void Console::Toggle()", "void Toggle()", AS_METHODPR(Console, Toggle, (), void), AS_CALL_THISCALL));

    // void Console::SetAutoVisibleOnError(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Console::SetAutoVisibleOnError(bool enable)", "void SetAutoVisibleOnError(bool)", AS_METHODPR(Console, SetAutoVisibleOnError, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Console::SetAutoVisibleOnError(bool enable)", "void set_autoVisibleOnError(bool)", AS_METHODPR(Console, SetAutoVisibleOnError, (bool), void), AS_CALL_THISCALL));

    // void Console::SetCommandInterpreter(const String& interpreter)
    methods.Push(RegisterObjectMethodArgs("void Console::SetCommandInterpreter(const String& interpreter)", "void SetCommandInterpreter(const String&in)", AS_METHODPR(Console, SetCommandInterpreter, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Console::SetCommandInterpreter(const String& interpreter)", "void set_commandInterpreter(const String&in)", AS_METHODPR(Console, SetCommandInterpreter, (const String&), void), AS_CALL_THISCALL));

    // void Console::SetNumBufferedRows(unsigned rows)
    methods.Push(RegisterObjectMethodArgs("void Console::SetNumBufferedRows(unsigned rows)", "void SetNumBufferedRows(uint)", AS_METHODPR(Console, SetNumBufferedRows, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Console::SetNumBufferedRows(unsigned rows)", "void set_numBufferedRows(uint)", AS_METHODPR(Console, SetNumBufferedRows, (unsigned), void), AS_CALL_THISCALL));

    // void Console::SetNumRows(unsigned rows)
    methods.Push(RegisterObjectMethodArgs("void Console::SetNumRows(unsigned rows)", "void SetNumRows(uint)", AS_METHODPR(Console, SetNumRows, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Console::SetNumRows(unsigned rows)", "void set_numRows(uint)", AS_METHODPR(Console, SetNumRows, (unsigned), void), AS_CALL_THISCALL));

    // void Console::SetNumHistoryRows(unsigned rows)
    methods.Push(RegisterObjectMethodArgs("void Console::SetNumHistoryRows(unsigned rows)", "void SetNumHistoryRows(uint)", AS_METHODPR(Console, SetNumHistoryRows, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Console::SetNumHistoryRows(unsigned rows)", "void set_numHistoryRows(uint)", AS_METHODPR(Console, SetNumHistoryRows, (unsigned), void), AS_CALL_THISCALL));

    // void Console::SetFocusOnShow(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Console::SetFocusOnShow(bool enable)", "void SetFocusOnShow(bool)", AS_METHODPR(Console, SetFocusOnShow, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Console::SetFocusOnShow(bool enable)", "void set_focusOnShow(bool)", AS_METHODPR(Console, SetFocusOnShow, (bool), void), AS_CALL_THISCALL));

    // void Console::AddAutoComplete(const String& option)
    methods.Push(RegisterObjectMethodArgs("void Console::AddAutoComplete(const String& option)", "void AddAutoComplete(const String&in)", AS_METHODPR(Console, AddAutoComplete, (const String&), void), AS_CALL_THISCALL));

    // void Console::RemoveAutoComplete(const String& option)
    methods.Push(RegisterObjectMethodArgs("void Console::RemoveAutoComplete(const String& option)", "void RemoveAutoComplete(const String&in)", AS_METHODPR(Console, RemoveAutoComplete, (const String&), void), AS_CALL_THISCALL));

    // void Console::UpdateElements()
    methods.Push(RegisterObjectMethodArgs("void Console::UpdateElements()", "void UpdateElements()", AS_METHODPR(Console, UpdateElements, (), void), AS_CALL_THISCALL));

    // XMLFile* Console::GetDefaultStyle() const
    methods.Push(RegisterObjectMethodArgs("XMLFile* Console::GetDefaultStyle() const", "XMLFile@+ GetDefaultStyle() const", AS_METHODPR(Console, GetDefaultStyle, () const, XMLFile*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("XMLFile* Console::GetDefaultStyle() const", "XMLFile@+ get_defaultStyle() const", AS_METHODPR(Console, GetDefaultStyle, () const, XMLFile*), AS_CALL_THISCALL));

    // BorderImage* Console::GetBackground() const
    methods.Push(RegisterObjectMethodArgs("BorderImage* Console::GetBackground() const", "BorderImage@+ GetBackground() const", AS_METHODPR(Console, GetBackground, () const, BorderImage*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BorderImage* Console::GetBackground() const", "BorderImage@+ get_background() const", AS_METHODPR(Console, GetBackground, () const, BorderImage*), AS_CALL_THISCALL));

    // LineEdit* Console::GetLineEdit() const
    methods.Push(RegisterObjectMethodArgs("LineEdit* Console::GetLineEdit() const", "LineEdit@+ GetLineEdit() const", AS_METHODPR(Console, GetLineEdit, () const, LineEdit*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("LineEdit* Console::GetLineEdit() const", "LineEdit@+ get_lineEdit() const", AS_METHODPR(Console, GetLineEdit, () const, LineEdit*), AS_CALL_THISCALL));

    // Button* Console::GetCloseButton() const
    methods.Push(RegisterObjectMethodArgs("Button* Console::GetCloseButton() const", "Button@+ GetCloseButton() const", AS_METHODPR(Console, GetCloseButton, () const, Button*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Button* Console::GetCloseButton() const", "Button@+ get_closeButton() const", AS_METHODPR(Console, GetCloseButton, () const, Button*), AS_CALL_THISCALL));

    // bool Console::IsVisible() const
    methods.Push(RegisterObjectMethodArgs("bool Console::IsVisible() const", "bool IsVisible() const", AS_METHODPR(Console, IsVisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Console::IsVisible() const", "bool get_visible() const", AS_METHODPR(Console, IsVisible, () const, bool), AS_CALL_THISCALL));

    // bool Console::IsAutoVisibleOnError() const
    methods.Push(RegisterObjectMethodArgs("bool Console::IsAutoVisibleOnError() const", "bool IsAutoVisibleOnError() const", AS_METHODPR(Console, IsAutoVisibleOnError, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Console::IsAutoVisibleOnError() const", "bool get_autoVisibleOnError() const", AS_METHODPR(Console, IsAutoVisibleOnError, () const, bool), AS_CALL_THISCALL));

    // const String& Console::GetCommandInterpreter() const
    methods.Push(RegisterObjectMethodArgs("const String& Console::GetCommandInterpreter() const", "const String& GetCommandInterpreter() const", AS_METHODPR(Console, GetCommandInterpreter, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Console::GetCommandInterpreter() const", "const String& get_commandInterpreter() const", AS_METHODPR(Console, GetCommandInterpreter, () const, const String&), AS_CALL_THISCALL));

    // unsigned Console::GetNumBufferedRows() const
    methods.Push(RegisterObjectMethodArgs("unsigned Console::GetNumBufferedRows() const", "uint GetNumBufferedRows() const", AS_METHODPR(Console, GetNumBufferedRows, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Console::GetNumBufferedRows() const", "uint get_numBufferedRows() const", AS_METHODPR(Console, GetNumBufferedRows, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Console::GetNumRows() const
    methods.Push(RegisterObjectMethodArgs("unsigned Console::GetNumRows() const", "uint GetNumRows() const", AS_METHODPR(Console, GetNumRows, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Console::GetNumRows() const", "uint get_numRows() const", AS_METHODPR(Console, GetNumRows, () const, unsigned), AS_CALL_THISCALL));

    // void Console::CopySelectedRows() const
    methods.Push(RegisterObjectMethodArgs("void Console::CopySelectedRows() const", "void CopySelectedRows() const", AS_METHODPR(Console, CopySelectedRows, () const, void), AS_CALL_THISCALL));

    // unsigned Console::GetNumHistoryRows() const
    methods.Push(RegisterObjectMethodArgs("unsigned Console::GetNumHistoryRows() const", "uint GetNumHistoryRows() const", AS_METHODPR(Console, GetNumHistoryRows, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Console::GetNumHistoryRows() const", "uint get_numHistoryRows() const", AS_METHODPR(Console, GetNumHistoryRows, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Console::GetHistoryPosition() const
    methods.Push(RegisterObjectMethodArgs("unsigned Console::GetHistoryPosition() const", "uint GetHistoryPosition() const", AS_METHODPR(Console, GetHistoryPosition, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Console::GetHistoryPosition() const", "uint get_historyPosition() const", AS_METHODPR(Console, GetHistoryPosition, () const, unsigned), AS_CALL_THISCALL));

    // const String& Console::GetHistoryRow(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const String& Console::GetHistoryRow(unsigned index) const", "const String& GetHistoryRow(uint) const", AS_METHODPR(Console, GetHistoryRow, (unsigned) const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Console::GetHistoryRow(unsigned index) const", "const String& get_historyRow(uint) const", AS_METHODPR(Console, GetHistoryRow, (unsigned) const, const String&), AS_CALL_THISCALL));

    // bool Console::GetFocusOnShow() const
    methods.Push(RegisterObjectMethodArgs("bool Console::GetFocusOnShow() const", "bool GetFocusOnShow() const", AS_METHODPR(Console, GetFocusOnShow, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Console::GetFocusOnShow() const", "bool get_focusOnShow() const", AS_METHODPR(Console, GetFocusOnShow, () const, bool), AS_CALL_THISCALL));
}

// class ConstantBuffer | File: ../Graphics/ConstantBuffer.h
void CollectMembers_ConstantBuffer(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);
    CollectMembers_GPUObject(methods);

    Remove(methods, "virtual void GPUObject::OnDeviceReset()");
    Remove(methods, "virtual void GPUObject::Release()");

    // void ConstantBuffer::SetParameter(unsigned offset, unsigned size, const void* data)
    // Error: type "const void*" can not automatically bind

    // void ConstantBuffer::SetVector3ArrayParameter(unsigned offset, unsigned rows, const void* data)
    // Error: type "const void*" can not automatically bind

    // void ConstantBuffer::OnDeviceReset() override
    methods.Push(RegisterObjectMethodArgs("void ConstantBuffer::OnDeviceReset() override", "void OnDeviceReset()", AS_METHODPR(ConstantBuffer, OnDeviceReset, (), void), AS_CALL_THISCALL));

    // void ConstantBuffer::Release() override
    methods.Push(RegisterObjectMethodArgs("void ConstantBuffer::Release() override", "void Release()", AS_METHODPR(ConstantBuffer, Release, (), void), AS_CALL_THISCALL));

    // bool ConstantBuffer::SetSize(unsigned size)
    methods.Push(RegisterObjectMethodArgs("bool ConstantBuffer::SetSize(unsigned size)", "bool SetSize(uint)", AS_METHODPR(ConstantBuffer, SetSize, (unsigned), bool), AS_CALL_THISCALL));

    // void ConstantBuffer::Apply()
    methods.Push(RegisterObjectMethodArgs("void ConstantBuffer::Apply()", "void Apply()", AS_METHODPR(ConstantBuffer, Apply, (), void), AS_CALL_THISCALL));

    // unsigned ConstantBuffer::GetSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned ConstantBuffer::GetSize() const", "uint GetSize() const", AS_METHODPR(ConstantBuffer, GetSize, () const, unsigned), AS_CALL_THISCALL));

    // bool ConstantBuffer::IsDirty() const
    methods.Push(RegisterObjectMethodArgs("bool ConstantBuffer::IsDirty() const", "bool IsDirty() const", AS_METHODPR(ConstantBuffer, IsDirty, () const, bool), AS_CALL_THISCALL));
}

// SharedPtr<Object> Context::CreateObject(StringHash objectType)
// SharedPtr<Object> Context::CreateObject(StringHash objectType) | File: ../Core/Context.h
static Object* Context_CreateObject_StringHash(Context* ptr, StringHash objectType)
{
    SharedPtr<Object> result = ptr->CreateObject(objectType);
    return result.Detach();
}


// class Context | File: ../Core/Context.h
void CollectMembers_Context(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // const HashMap<StringHash, Vector<AttributeInfo>>& Context::GetAllAttributes() const
    // Error: type "const HashMap<StringHash, Vector<AttributeInfo>>&" can not automatically bind

    // AttributeInfo* Context::GetAttribute(StringHash objectType, const char* name)
    // Error: type "const char*" can not automatically bind

    // const Vector<AttributeInfo>* Context::GetAttributes(StringHash type) const
    // Error: type "const Vector<AttributeInfo>*" can not automatically bind

    // EventHandler* Context::GetEventHandler() const
    // Error: type "EventHandler*" can not automatically bind

    // const Vector<AttributeInfo>* Context::GetNetworkAttributes(StringHash type) const
    // Error: type "const Vector<AttributeInfo>*" can not automatically bind

    // const HashMap<String, Vector<StringHash>>& Context::GetObjectCategories() const
    // Error: type "const HashMap<String, Vector<StringHash>>&" can not automatically bind

    // const HashMap<StringHash, SharedPtr<ObjectFactory>>& Context::GetObjectFactories() const
    // Error: type "const HashMap<StringHash, SharedPtr<ObjectFactory>>&" can not automatically bind

    // const HashMap<StringHash, SharedPtr<Object>>& Context::GetSubsystems() const
    // Error: type "const HashMap<StringHash, SharedPtr<Object>>&" can not automatically bind

    // AttributeHandle Context::RegisterAttribute(StringHash objectType, const AttributeInfo& attr)
    // Error: type "AttributeHandle" can not automatically bind bacause have @nobind mark

    // void Context::RegisterFactory(ObjectFactory* factory, const char* category)
    // Error: type "const char*" can not automatically bind

    // void Context::RemoveAttribute(StringHash objectType, const char* name)
    // Error: type "const char*" can not automatically bind

    // void Context::UpdateAttributeDefaultValue(StringHash objectType, const char* name, const Variant& defaultValue)
    // Error: type "const char*" can not automatically bind

    // SharedPtr<Object> Context::CreateObject(StringHash objectType)
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Object> Context::CreateObject(StringHash objectType)", "Object@+ CreateObject(StringHash)", AS_FUNCTION_OBJFIRST(Context_CreateObject_StringHash), AS_CALL_CDECL_OBJFIRST));

    // void Context::RegisterFactory(ObjectFactory* factory)
    methods.Push(RegisterObjectMethodArgs("void Context::RegisterFactory(ObjectFactory* factory)", "void RegisterFactory(ObjectFactory@+)", AS_METHODPR(Context, RegisterFactory, (ObjectFactory*), void), AS_CALL_THISCALL));

    // void Context::RegisterSubsystem(Object* object)
    methods.Push(RegisterObjectMethodArgs("void Context::RegisterSubsystem(Object* object)", "void RegisterSubsystem(Object@+)", AS_METHODPR(Context, RegisterSubsystem, (Object*), void), AS_CALL_THISCALL));

    // void Context::RemoveSubsystem(StringHash objectType)
    methods.Push(RegisterObjectMethodArgs("void Context::RemoveSubsystem(StringHash objectType)", "void RemoveSubsystem(StringHash)", AS_METHODPR(Context, RemoveSubsystem, (StringHash), void), AS_CALL_THISCALL));

    // void Context::RemoveAllAttributes(StringHash objectType)
    methods.Push(RegisterObjectMethodArgs("void Context::RemoveAllAttributes(StringHash objectType)", "void RemoveAllAttributes(StringHash)", AS_METHODPR(Context, RemoveAllAttributes, (StringHash), void), AS_CALL_THISCALL));

    // VariantMap& Context::GetEventDataMap()
    methods.Push(RegisterObjectMethodArgs("VariantMap& Context::GetEventDataMap()", "VariantMap& GetEventDataMap()", AS_METHODPR(Context, GetEventDataMap, (), VariantMap&), AS_CALL_THISCALL));

    // bool Context::RequireSDL(unsigned int sdlFlags)
    methods.Push(RegisterObjectMethodArgs("bool Context::RequireSDL(unsigned int sdlFlags)", "bool RequireSDL(uint)", AS_METHODPR(Context, RequireSDL, (unsigned int), bool), AS_CALL_THISCALL));

    // void Context::ReleaseSDL()
    methods.Push(RegisterObjectMethodArgs("void Context::ReleaseSDL()", "void ReleaseSDL()", AS_METHODPR(Context, ReleaseSDL, (), void), AS_CALL_THISCALL));

    // void Context::CopyBaseAttributes(StringHash baseType, StringHash derivedType)
    methods.Push(RegisterObjectMethodArgs("void Context::CopyBaseAttributes(StringHash baseType, StringHash derivedType)", "void CopyBaseAttributes(StringHash, StringHash)", AS_METHODPR(Context, CopyBaseAttributes, (StringHash, StringHash), void), AS_CALL_THISCALL));

    // Object* Context::GetSubsystem(StringHash type) const
    methods.Push(RegisterObjectMethodArgs("Object* Context::GetSubsystem(StringHash type) const", "Object@+ GetSubsystem(StringHash) const", AS_METHODPR(Context, GetSubsystem, (StringHash) const, Object*), AS_CALL_THISCALL));

    // const Variant& Context::GetGlobalVar(StringHash key) const
    methods.Push(RegisterObjectMethodArgs("const Variant& Context::GetGlobalVar(StringHash key) const", "const Variant& GetGlobalVar(StringHash) const", AS_METHODPR(Context, GetGlobalVar, (StringHash) const, const Variant&), AS_CALL_THISCALL));

    // const VariantMap& Context::GetGlobalVars() const
    methods.Push(RegisterObjectMethodArgs("const VariantMap& Context::GetGlobalVars() const", "const VariantMap& GetGlobalVars() const", AS_METHODPR(Context, GetGlobalVars, () const, const VariantMap&), AS_CALL_THISCALL));

    // void Context::SetGlobalVar(StringHash key, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void Context::SetGlobalVar(StringHash key, const Variant& value)", "void SetGlobalVar(StringHash, const Variant&in)", AS_METHODPR(Context, SetGlobalVar, (StringHash, const Variant&), void), AS_CALL_THISCALL));

    // Object* Context::GetEventSender() const
    methods.Push(RegisterObjectMethodArgs("Object* Context::GetEventSender() const", "Object@+ GetEventSender() const", AS_METHODPR(Context, GetEventSender, () const, Object*), AS_CALL_THISCALL));

    // const String& Context::GetTypeName(StringHash objectType) const
    methods.Push(RegisterObjectMethodArgs("const String& Context::GetTypeName(StringHash objectType) const", "const String& GetTypeName(StringHash) const", AS_METHODPR(Context, GetTypeName, (StringHash) const, const String&), AS_CALL_THISCALL));

    // EventReceiverGroup* Context::GetEventReceivers(Object* sender, StringHash eventType)
    methods.Push(RegisterObjectMethodArgs("EventReceiverGroup* Context::GetEventReceivers(Object* sender, StringHash eventType)", "EventReceiverGroup@+ GetEventReceivers(Object@+, StringHash)", AS_METHODPR(Context, GetEventReceivers, (Object*, StringHash), EventReceiverGroup*), AS_CALL_THISCALL));

    // EventReceiverGroup* Context::GetEventReceivers(StringHash eventType)
    methods.Push(RegisterObjectMethodArgs("EventReceiverGroup* Context::GetEventReceivers(StringHash eventType)", "EventReceiverGroup@+ GetEventReceivers(StringHash)", AS_METHODPR(Context, GetEventReceivers, (StringHash), EventReceiverGroup*), AS_CALL_THISCALL));
}

// class Controls | File: ../Input/Controls.h
void CollectMembers_Controls(Vector<RegisterObjectMethodArgs>& methods)
{
    // void Controls::Reset()
    methods.Push(RegisterObjectMethodArgs("void Controls::Reset()", "void Reset()", AS_METHODPR(Controls, Reset, (), void), AS_CALL_THISCALL));

    // void Controls::Set(unsigned buttons, bool down=true)
    methods.Push(RegisterObjectMethodArgs("void Controls::Set(unsigned buttons, bool down=true)", "void Set(uint, bool = true)", AS_METHODPR(Controls, Set, (unsigned, bool), void), AS_CALL_THISCALL));

    // bool Controls::IsDown(unsigned button) const
    methods.Push(RegisterObjectMethodArgs("bool Controls::IsDown(unsigned button) const", "bool IsDown(uint) const", AS_METHODPR(Controls, IsDown, (unsigned) const, bool), AS_CALL_THISCALL));

    // bool Controls::IsPressed(unsigned button, const Controls& previousControls) const
    methods.Push(RegisterObjectMethodArgs("bool Controls::IsPressed(unsigned button, const Controls& previousControls) const", "bool IsPressed(uint, const Controls&in) const", AS_METHODPR(Controls, IsPressed, (unsigned, const Controls&) const, bool), AS_CALL_THISCALL));
}

// class Cursor | File: ../UI/Cursor.h
void CollectMembers_Cursor(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BorderImage(methods);

    Remove(methods, "static void BorderImage::RegisterObject(Context* context)");
    Remove(methods, "void BorderImage::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override");

    // void Cursor::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // VariantVector Cursor::GetShapesAttr() const
    // Error: type "VariantVector" can not automatically bind

    // void Cursor::SetShapesAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void Cursor::DefineShape(const String& shape, Image* image, const IntRect& imageRect, const IntVector2& hotSpot)
    methods.Push(RegisterObjectMethodArgs("void Cursor::DefineShape(const String& shape, Image* image, const IntRect& imageRect, const IntVector2& hotSpot)", "void DefineShape(const String&in, Image@+, const IntRect&in, const IntVector2&in)", AS_METHODPR(Cursor, DefineShape, (const String&, Image*, const IntRect&, const IntVector2&), void), AS_CALL_THISCALL));

    // void Cursor::DefineShape(CursorShape shape, Image* image, const IntRect& imageRect, const IntVector2& hotSpot)
    methods.Push(RegisterObjectMethodArgs("void Cursor::DefineShape(CursorShape shape, Image* image, const IntRect& imageRect, const IntVector2& hotSpot)", "void DefineShape(CursorShape, Image@+, const IntRect&in, const IntVector2&in)", AS_METHODPR(Cursor, DefineShape, (CursorShape, Image*, const IntRect&, const IntVector2&), void), AS_CALL_THISCALL));

    // void Cursor::SetShape(const String& shape)
    methods.Push(RegisterObjectMethodArgs("void Cursor::SetShape(const String& shape)", "void SetShape(const String&in)", AS_METHODPR(Cursor, SetShape, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Cursor::SetShape(const String& shape)", "void set_shape(const String&in)", AS_METHODPR(Cursor, SetShape, (const String&), void), AS_CALL_THISCALL));

    // void Cursor::SetShape(CursorShape shape)
    methods.Push(RegisterObjectMethodArgs("void Cursor::SetShape(CursorShape shape)", "void SetShape(CursorShape)", AS_METHODPR(Cursor, SetShape, (CursorShape), void), AS_CALL_THISCALL));

    // void Cursor::SetUseSystemShapes(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Cursor::SetUseSystemShapes(bool enable)", "void SetUseSystemShapes(bool)", AS_METHODPR(Cursor, SetUseSystemShapes, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Cursor::SetUseSystemShapes(bool enable)", "void set_useSystemShapes(bool)", AS_METHODPR(Cursor, SetUseSystemShapes, (bool), void), AS_CALL_THISCALL));

    // const String& Cursor::GetShape() const
    methods.Push(RegisterObjectMethodArgs("const String& Cursor::GetShape() const", "const String& GetShape() const", AS_METHODPR(Cursor, GetShape, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Cursor::GetShape() const", "const String& get_shape() const", AS_METHODPR(Cursor, GetShape, () const, const String&), AS_CALL_THISCALL));

    // bool Cursor::GetUseSystemShapes() const
    methods.Push(RegisterObjectMethodArgs("bool Cursor::GetUseSystemShapes() const", "bool GetUseSystemShapes() const", AS_METHODPR(Cursor, GetUseSystemShapes, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Cursor::GetUseSystemShapes() const", "bool get_useSystemShapes() const", AS_METHODPR(Cursor, GetUseSystemShapes, () const, bool), AS_CALL_THISCALL));

    // void Cursor::ApplyOSCursorShape()
    methods.Push(RegisterObjectMethodArgs("void Cursor::ApplyOSCursorShape()", "void ApplyOSCursorShape()", AS_METHODPR(Cursor, ApplyOSCursorShape, (), void), AS_CALL_THISCALL));
}

// struct CursorShapeInfo | File: ../UI/Cursor.h
void CollectMembers_CursorShapeInfo(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class CustomGeometry | File: ../Graphics/CustomGeometry.h
void CollectMembers_CustomGeometry(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual Geometry* Drawable::GetLodGeometry(unsigned batchIndex, unsigned level)");
    Remove(methods, "virtual bool Drawable::DrawOcclusion(OcclusionBuffer* buffer)");
    Remove(methods, "virtual unsigned Drawable::GetNumOccluderTriangles()");
    Remove(methods, "virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)");

    // PODVector<unsigned char> CustomGeometry::GetGeometryDataAttr() const
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // Vector<PODVector<CustomGeometryVertex>>& CustomGeometry::GetVertices()
    // Error: type "Vector<PODVector<CustomGeometryVertex>>&" can not automatically bind

    // void CustomGeometry::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void CustomGeometry::SetGeometryDataAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // Geometry* CustomGeometry::GetLodGeometry(unsigned batchIndex, unsigned level) override
    methods.Push(RegisterObjectMethodArgs("Geometry* CustomGeometry::GetLodGeometry(unsigned batchIndex, unsigned level) override", "Geometry@+ GetLodGeometry(uint, uint)", AS_METHODPR(CustomGeometry, GetLodGeometry, (unsigned, unsigned), Geometry*), AS_CALL_THISCALL));

    // unsigned CustomGeometry::GetNumOccluderTriangles() override
    methods.Push(RegisterObjectMethodArgs("unsigned CustomGeometry::GetNumOccluderTriangles() override", "uint GetNumOccluderTriangles()", AS_METHODPR(CustomGeometry, GetNumOccluderTriangles, (), unsigned), AS_CALL_THISCALL));

    // bool CustomGeometry::DrawOcclusion(OcclusionBuffer* buffer) override
    methods.Push(RegisterObjectMethodArgs("bool CustomGeometry::DrawOcclusion(OcclusionBuffer* buffer) override", "bool DrawOcclusion(OcclusionBuffer@+)", AS_METHODPR(CustomGeometry, DrawOcclusion, (OcclusionBuffer*), bool), AS_CALL_THISCALL));

    // void CustomGeometry::Clear()
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::Clear()", "void Clear()", AS_METHODPR(CustomGeometry, Clear, (), void), AS_CALL_THISCALL));

    // void CustomGeometry::SetNumGeometries(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::SetNumGeometries(unsigned num)", "void SetNumGeometries(uint)", AS_METHODPR(CustomGeometry, SetNumGeometries, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::SetNumGeometries(unsigned num)", "void set_numGeometries(uint)", AS_METHODPR(CustomGeometry, SetNumGeometries, (unsigned), void), AS_CALL_THISCALL));

    // void CustomGeometry::SetDynamic(bool enable)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::SetDynamic(bool enable)", "void SetDynamic(bool)", AS_METHODPR(CustomGeometry, SetDynamic, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::SetDynamic(bool enable)", "void set_dynamic(bool)", AS_METHODPR(CustomGeometry, SetDynamic, (bool), void), AS_CALL_THISCALL));

    // void CustomGeometry::BeginGeometry(unsigned index, PrimitiveType type)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::BeginGeometry(unsigned index, PrimitiveType type)", "void BeginGeometry(uint, PrimitiveType)", AS_METHODPR(CustomGeometry, BeginGeometry, (unsigned, PrimitiveType), void), AS_CALL_THISCALL));

    // void CustomGeometry::DefineVertex(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::DefineVertex(const Vector3& position)", "void DefineVertex(const Vector3&in)", AS_METHODPR(CustomGeometry, DefineVertex, (const Vector3&), void), AS_CALL_THISCALL));

    // void CustomGeometry::DefineNormal(const Vector3& normal)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::DefineNormal(const Vector3& normal)", "void DefineNormal(const Vector3&in)", AS_METHODPR(CustomGeometry, DefineNormal, (const Vector3&), void), AS_CALL_THISCALL));

    // void CustomGeometry::DefineColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::DefineColor(const Color& color)", "void DefineColor(const Color&in)", AS_METHODPR(CustomGeometry, DefineColor, (const Color&), void), AS_CALL_THISCALL));

    // void CustomGeometry::DefineTexCoord(const Vector2& texCoord)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::DefineTexCoord(const Vector2& texCoord)", "void DefineTexCoord(const Vector2&in)", AS_METHODPR(CustomGeometry, DefineTexCoord, (const Vector2&), void), AS_CALL_THISCALL));

    // void CustomGeometry::DefineTangent(const Vector4& tangent)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::DefineTangent(const Vector4& tangent)", "void DefineTangent(const Vector4&in)", AS_METHODPR(CustomGeometry, DefineTangent, (const Vector4&), void), AS_CALL_THISCALL));

    // void CustomGeometry::DefineGeometry(unsigned index, PrimitiveType type, unsigned numVertices, bool hasNormals, bool hasColors, bool hasTexCoords, bool hasTangents)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::DefineGeometry(unsigned index, PrimitiveType type, unsigned numVertices, bool hasNormals, bool hasColors, bool hasTexCoords, bool hasTangents)", "void DefineGeometry(uint, PrimitiveType, uint, bool, bool, bool, bool)", AS_METHODPR(CustomGeometry, DefineGeometry, (unsigned, PrimitiveType, unsigned, bool, bool, bool, bool), void), AS_CALL_THISCALL));

    // void CustomGeometry::Commit()
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::Commit()", "void Commit()", AS_METHODPR(CustomGeometry, Commit, (), void), AS_CALL_THISCALL));

    // void CustomGeometry::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(CustomGeometry, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(CustomGeometry, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // bool CustomGeometry::SetMaterial(unsigned index, Material* material)
    methods.Push(RegisterObjectMethodArgs("bool CustomGeometry::SetMaterial(unsigned index, Material* material)", "bool SetMaterial(uint, Material@+)", AS_METHODPR(CustomGeometry, SetMaterial, (unsigned, Material*), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CustomGeometry::SetMaterial(unsigned index, Material* material)", "bool set_materials(uint, Material@+)", AS_METHODPR(CustomGeometry, SetMaterial, (unsigned, Material*), bool), AS_CALL_THISCALL));

    // unsigned CustomGeometry::GetNumGeometries() const
    methods.Push(RegisterObjectMethodArgs("unsigned CustomGeometry::GetNumGeometries() const", "uint GetNumGeometries() const", AS_METHODPR(CustomGeometry, GetNumGeometries, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CustomGeometry::GetNumGeometries() const", "uint get_numGeometries() const", AS_METHODPR(CustomGeometry, GetNumGeometries, () const, unsigned), AS_CALL_THISCALL));

    // unsigned CustomGeometry::GetNumVertices(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("unsigned CustomGeometry::GetNumVertices(unsigned index) const", "uint GetNumVertices(uint) const", AS_METHODPR(CustomGeometry, GetNumVertices, (unsigned) const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CustomGeometry::GetNumVertices(unsigned index) const", "uint get_numVertices(uint) const", AS_METHODPR(CustomGeometry, GetNumVertices, (unsigned) const, unsigned), AS_CALL_THISCALL));

    // bool CustomGeometry::IsDynamic() const
    methods.Push(RegisterObjectMethodArgs("bool CustomGeometry::IsDynamic() const", "bool IsDynamic() const", AS_METHODPR(CustomGeometry, IsDynamic, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CustomGeometry::IsDynamic() const", "bool get_dynamic() const", AS_METHODPR(CustomGeometry, IsDynamic, () const, bool), AS_CALL_THISCALL));

    // Material* CustomGeometry::GetMaterial(unsigned index=0) const
    methods.Push(RegisterObjectMethodArgs("Material* CustomGeometry::GetMaterial(unsigned index=0) const", "Material@+ GetMaterial(uint = 0) const", AS_METHODPR(CustomGeometry, GetMaterial, (unsigned) const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* CustomGeometry::GetMaterial(unsigned index=0) const", "Material@+ get_materials(uint = 0) const", AS_METHODPR(CustomGeometry, GetMaterial, (unsigned) const, Material*), AS_CALL_THISCALL));

    // CustomGeometryVertex* CustomGeometry::GetVertex(unsigned geometryIndex, unsigned vertexNum)
    methods.Push(RegisterObjectMethodArgs("CustomGeometryVertex* CustomGeometry::GetVertex(unsigned geometryIndex, unsigned vertexNum)", "CustomGeometryVertex@+ GetVertex(uint, uint)", AS_METHODPR(CustomGeometry, GetVertex, (unsigned, unsigned), CustomGeometryVertex*), AS_CALL_THISCALL));

    // void CustomGeometry::SetMaterialsAttr(const ResourceRefList& value)
    methods.Push(RegisterObjectMethodArgs("void CustomGeometry::SetMaterialsAttr(const ResourceRefList& value)", "void SetMaterialsAttr(const ResourceRefList&in)", AS_METHODPR(CustomGeometry, SetMaterialsAttr, (const ResourceRefList&), void), AS_CALL_THISCALL));

    // const ResourceRefList& CustomGeometry::GetMaterialsAttr() const
    methods.Push(RegisterObjectMethodArgs("const ResourceRefList& CustomGeometry::GetMaterialsAttr() const", "const ResourceRefList& GetMaterialsAttr() const", AS_METHODPR(CustomGeometry, GetMaterialsAttr, () const, const ResourceRefList&), AS_CALL_THISCALL));
}

// struct CustomGeometryVertex | File: ../Graphics/CustomGeometry.h
void CollectMembers_CustomGeometryVertex(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class CustomVariantValue | File: ../Core/Variant.h
void CollectMembers_CustomVariantValue(Vector<RegisterObjectMethodArgs>& methods)
{
    // virtual bool CustomVariantValue::Assign(const CustomVariantValue& rhs)
    // Error: type "CustomVariantValue" can not automatically bind bacause have @nobind mark

    // virtual CustomVariantValue* CustomVariantValue::Clone() const
    // Error: type "CustomVariantValue" can not automatically bind bacause have @nobind mark

    // virtual void CustomVariantValue::Clone(void* dest) const
    // Error: type "void*" can not automatically bind

    // virtual bool CustomVariantValue::Compare(const CustomVariantValue& rhs) const
    // Error: type "CustomVariantValue" can not automatically bind bacause have @nobind mark

    // const std::type_info& CustomVariantValue::GetTypeInfo() const
    // Error: type "const std::type_info&" can not automatically bind

    // virtual unsigned CustomVariantValue::GetSize() const
    methods.Push(RegisterObjectMethodArgs("virtual unsigned CustomVariantValue::GetSize() const", "uint GetSize() const", AS_METHODPR(CustomVariantValue, GetSize, () const, unsigned), AS_CALL_THISCALL));

    // virtual bool CustomVariantValue::IsZero() const
    methods.Push(RegisterObjectMethodArgs("virtual bool CustomVariantValue::IsZero() const", "bool IsZero() const", AS_METHODPR(CustomVariantValue, IsZero, () const, bool), AS_CALL_THISCALL));

    // virtual String CustomVariantValue::ToString() const
    methods.Push(RegisterObjectMethodArgs("virtual String CustomVariantValue::ToString() const", "String ToString() const", AS_METHODPR(CustomVariantValue, ToString, () const, String), AS_CALL_THISCALL));
}

// class DebugHud | File: ../Engine/DebugHud.h
void CollectMembers_DebugHud(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void DebugHud::Update()
    methods.Push(RegisterObjectMethodArgs("void DebugHud::Update()", "void Update()", AS_METHODPR(DebugHud, Update, (), void), AS_CALL_THISCALL));

    // void DebugHud::SetDefaultStyle(XMLFile* style)
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetDefaultStyle(XMLFile* style)", "void SetDefaultStyle(XMLFile@+)", AS_METHODPR(DebugHud, SetDefaultStyle, (XMLFile*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetDefaultStyle(XMLFile* style)", "void set_defaultStyle(XMLFile@+)", AS_METHODPR(DebugHud, SetDefaultStyle, (XMLFile*), void), AS_CALL_THISCALL));

    // void DebugHud::SetMode(unsigned mode)
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetMode(unsigned mode)", "void SetMode(uint)", AS_METHODPR(DebugHud, SetMode, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetMode(unsigned mode)", "void set_mode(uint)", AS_METHODPR(DebugHud, SetMode, (unsigned), void), AS_CALL_THISCALL));

    // void DebugHud::SetProfilerMaxDepth(unsigned depth)
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetProfilerMaxDepth(unsigned depth)", "void SetProfilerMaxDepth(uint)", AS_METHODPR(DebugHud, SetProfilerMaxDepth, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetProfilerMaxDepth(unsigned depth)", "void set_profilerMaxDepth(uint)", AS_METHODPR(DebugHud, SetProfilerMaxDepth, (unsigned), void), AS_CALL_THISCALL));

    // void DebugHud::SetProfilerInterval(float interval)
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetProfilerInterval(float interval)", "void SetProfilerInterval(float)", AS_METHODPR(DebugHud, SetProfilerInterval, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetProfilerInterval(float interval)", "void set_profilerInterval(float)", AS_METHODPR(DebugHud, SetProfilerInterval, (float), void), AS_CALL_THISCALL));

    // void DebugHud::SetUseRendererStats(bool enable)
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetUseRendererStats(bool enable)", "void SetUseRendererStats(bool)", AS_METHODPR(DebugHud, SetUseRendererStats, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetUseRendererStats(bool enable)", "void set_useRendererStats(bool)", AS_METHODPR(DebugHud, SetUseRendererStats, (bool), void), AS_CALL_THISCALL));

    // void DebugHud::Toggle(unsigned mode)
    methods.Push(RegisterObjectMethodArgs("void DebugHud::Toggle(unsigned mode)", "void Toggle(uint)", AS_METHODPR(DebugHud, Toggle, (unsigned), void), AS_CALL_THISCALL));

    // void DebugHud::ToggleAll()
    methods.Push(RegisterObjectMethodArgs("void DebugHud::ToggleAll()", "void ToggleAll()", AS_METHODPR(DebugHud, ToggleAll, (), void), AS_CALL_THISCALL));

    // XMLFile* DebugHud::GetDefaultStyle() const
    methods.Push(RegisterObjectMethodArgs("XMLFile* DebugHud::GetDefaultStyle() const", "XMLFile@+ GetDefaultStyle() const", AS_METHODPR(DebugHud, GetDefaultStyle, () const, XMLFile*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("XMLFile* DebugHud::GetDefaultStyle() const", "XMLFile@+ get_defaultStyle() const", AS_METHODPR(DebugHud, GetDefaultStyle, () const, XMLFile*), AS_CALL_THISCALL));

    // Text* DebugHud::GetStatsText() const
    methods.Push(RegisterObjectMethodArgs("Text* DebugHud::GetStatsText() const", "Text@+ GetStatsText() const", AS_METHODPR(DebugHud, GetStatsText, () const, Text*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Text* DebugHud::GetStatsText() const", "Text@+ get_statsText() const", AS_METHODPR(DebugHud, GetStatsText, () const, Text*), AS_CALL_THISCALL));

    // Text* DebugHud::GetModeText() const
    methods.Push(RegisterObjectMethodArgs("Text* DebugHud::GetModeText() const", "Text@+ GetModeText() const", AS_METHODPR(DebugHud, GetModeText, () const, Text*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Text* DebugHud::GetModeText() const", "Text@+ get_modeText() const", AS_METHODPR(DebugHud, GetModeText, () const, Text*), AS_CALL_THISCALL));

    // Text* DebugHud::GetProfilerText() const
    methods.Push(RegisterObjectMethodArgs("Text* DebugHud::GetProfilerText() const", "Text@+ GetProfilerText() const", AS_METHODPR(DebugHud, GetProfilerText, () const, Text*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Text* DebugHud::GetProfilerText() const", "Text@+ get_profilerText() const", AS_METHODPR(DebugHud, GetProfilerText, () const, Text*), AS_CALL_THISCALL));

    // Text* DebugHud::GetMemoryText() const
    methods.Push(RegisterObjectMethodArgs("Text* DebugHud::GetMemoryText() const", "Text@+ GetMemoryText() const", AS_METHODPR(DebugHud, GetMemoryText, () const, Text*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Text* DebugHud::GetMemoryText() const", "Text@+ get_memoryText() const", AS_METHODPR(DebugHud, GetMemoryText, () const, Text*), AS_CALL_THISCALL));

    // unsigned DebugHud::GetMode() const
    methods.Push(RegisterObjectMethodArgs("unsigned DebugHud::GetMode() const", "uint GetMode() const", AS_METHODPR(DebugHud, GetMode, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DebugHud::GetMode() const", "uint get_mode() const", AS_METHODPR(DebugHud, GetMode, () const, unsigned), AS_CALL_THISCALL));

    // unsigned DebugHud::GetProfilerMaxDepth() const
    methods.Push(RegisterObjectMethodArgs("unsigned DebugHud::GetProfilerMaxDepth() const", "uint GetProfilerMaxDepth() const", AS_METHODPR(DebugHud, GetProfilerMaxDepth, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DebugHud::GetProfilerMaxDepth() const", "uint get_profilerMaxDepth() const", AS_METHODPR(DebugHud, GetProfilerMaxDepth, () const, unsigned), AS_CALL_THISCALL));

    // float DebugHud::GetProfilerInterval() const
    methods.Push(RegisterObjectMethodArgs("float DebugHud::GetProfilerInterval() const", "float GetProfilerInterval() const", AS_METHODPR(DebugHud, GetProfilerInterval, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float DebugHud::GetProfilerInterval() const", "float get_profilerInterval() const", AS_METHODPR(DebugHud, GetProfilerInterval, () const, float), AS_CALL_THISCALL));

    // bool DebugHud::GetUseRendererStats() const
    methods.Push(RegisterObjectMethodArgs("bool DebugHud::GetUseRendererStats() const", "bool GetUseRendererStats() const", AS_METHODPR(DebugHud, GetUseRendererStats, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool DebugHud::GetUseRendererStats() const", "bool get_useRendererStats() const", AS_METHODPR(DebugHud, GetUseRendererStats, () const, bool), AS_CALL_THISCALL));

    // void DebugHud::SetAppStats(const String& label, const Variant& stats)
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetAppStats(const String& label, const Variant& stats)", "void SetAppStats(const String&in, const Variant&in)", AS_METHODPR(DebugHud, SetAppStats, (const String&, const Variant&), void), AS_CALL_THISCALL));

    // void DebugHud::SetAppStats(const String& label, const String& stats)
    methods.Push(RegisterObjectMethodArgs("void DebugHud::SetAppStats(const String& label, const String& stats)", "void SetAppStats(const String&in, const String&in)", AS_METHODPR(DebugHud, SetAppStats, (const String&, const String&), void), AS_CALL_THISCALL));

    // bool DebugHud::ResetAppStats(const String& label)
    methods.Push(RegisterObjectMethodArgs("bool DebugHud::ResetAppStats(const String& label)", "bool ResetAppStats(const String&in)", AS_METHODPR(DebugHud, ResetAppStats, (const String&), bool), AS_CALL_THISCALL));

    // void DebugHud::ClearAppStats()
    methods.Push(RegisterObjectMethodArgs("void DebugHud::ClearAppStats()", "void ClearAppStats()", AS_METHODPR(DebugHud, ClearAppStats, (), void), AS_CALL_THISCALL));
}

// struct DebugLine | File: ../Graphics/DebugRenderer.h
void CollectMembers_DebugLine(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class DebugRenderer | File: ../Graphics/DebugRenderer.h
void CollectMembers_DebugRenderer(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");

    // void DebugRenderer::AddTriangleMesh(const void* vertexData, unsigned vertexSize, const void* indexData, unsigned indexSize, unsigned indexStart, unsigned indexCount, const Matrix3x4& transform, const Color& color, bool depthTest=true)
    // Error: type "const void*" can not automatically bind

    // void DebugRenderer::AddTriangleMesh(const void* vertexData, unsigned vertexSize, unsigned vertexStart, const void* indexData, unsigned indexSize, unsigned indexStart, unsigned indexCount, const Matrix3x4& transform, const Color& color, bool depthTest=true)
    // Error: type "const void*" can not automatically bind

    // void DebugRenderer::SetLineAntiAlias(bool enable)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::SetLineAntiAlias(bool enable)", "void SetLineAntiAlias(bool)", AS_METHODPR(DebugRenderer, SetLineAntiAlias, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::SetLineAntiAlias(bool enable)", "void set_lineAntiAlias(bool)", AS_METHODPR(DebugRenderer, SetLineAntiAlias, (bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::SetView(Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::SetView(Camera* camera)", "void SetView(Camera@+)", AS_METHODPR(DebugRenderer, SetView, (Camera*), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddLine(const Vector3& start, const Vector3& end, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddLine(const Vector3& start, const Vector3& end, const Color& color, bool depthTest=true)", "void AddLine(const Vector3&in, const Vector3&in, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddLine, (const Vector3&, const Vector3&, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddLine(const Vector3& start, const Vector3& end, unsigned color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddLine(const Vector3& start, const Vector3& end, unsigned color, bool depthTest=true)", "void AddLine(const Vector3&in, const Vector3&in, uint, bool = true)", AS_METHODPR(DebugRenderer, AddLine, (const Vector3&, const Vector3&, unsigned, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddTriangle(const Vector3& v1, const Vector3& v2, const Vector3& v3, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddTriangle(const Vector3& v1, const Vector3& v2, const Vector3& v3, const Color& color, bool depthTest=true)", "void AddTriangle(const Vector3&in, const Vector3&in, const Vector3&in, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddTriangle, (const Vector3&, const Vector3&, const Vector3&, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddTriangle(const Vector3& v1, const Vector3& v2, const Vector3& v3, unsigned color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddTriangle(const Vector3& v1, const Vector3& v2, const Vector3& v3, unsigned color, bool depthTest=true)", "void AddTriangle(const Vector3&in, const Vector3&in, const Vector3&in, uint, bool = true)", AS_METHODPR(DebugRenderer, AddTriangle, (const Vector3&, const Vector3&, const Vector3&, unsigned, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddPolygon(const Vector3& v1, const Vector3& v2, const Vector3& v3, const Vector3& v4, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddPolygon(const Vector3& v1, const Vector3& v2, const Vector3& v3, const Vector3& v4, const Color& color, bool depthTest=true)", "void AddPolygon(const Vector3&in, const Vector3&in, const Vector3&in, const Vector3&in, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddPolygon, (const Vector3&, const Vector3&, const Vector3&, const Vector3&, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddPolygon(const Vector3& v1, const Vector3& v2, const Vector3& v3, const Vector3& v4, unsigned color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddPolygon(const Vector3& v1, const Vector3& v2, const Vector3& v3, const Vector3& v4, unsigned color, bool depthTest=true)", "void AddPolygon(const Vector3&in, const Vector3&in, const Vector3&in, const Vector3&in, uint, bool = true)", AS_METHODPR(DebugRenderer, AddPolygon, (const Vector3&, const Vector3&, const Vector3&, const Vector3&, unsigned, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddNode(Node* node, float scale=1.0f, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddNode(Node* node, float scale=1.0f, bool depthTest=true)", "void AddNode(Node@+, float = 1.0f, bool = true)", AS_METHODPR(DebugRenderer, AddNode, (Node*, float, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddBoundingBox(const BoundingBox& box, const Color& color, bool depthTest=true, bool solid=false)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddBoundingBox(const BoundingBox& box, const Color& color, bool depthTest=true, bool solid=false)", "void AddBoundingBox(const BoundingBox&in, const Color&in, bool = true, bool = false)", AS_METHODPR(DebugRenderer, AddBoundingBox, (const BoundingBox&, const Color&, bool, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddBoundingBox(const BoundingBox& box, const Matrix3x4& transform, const Color& color, bool depthTest=true, bool solid=false)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddBoundingBox(const BoundingBox& box, const Matrix3x4& transform, const Color& color, bool depthTest=true, bool solid=false)", "void AddBoundingBox(const BoundingBox&in, const Matrix3x4&in, const Color&in, bool = true, bool = false)", AS_METHODPR(DebugRenderer, AddBoundingBox, (const BoundingBox&, const Matrix3x4&, const Color&, bool, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddFrustum(const Frustum& frustum, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddFrustum(const Frustum& frustum, const Color& color, bool depthTest=true)", "void AddFrustum(const Frustum&in, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddFrustum, (const Frustum&, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddPolyhedron(const Polyhedron& poly, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddPolyhedron(const Polyhedron& poly, const Color& color, bool depthTest=true)", "void AddPolyhedron(const Polyhedron&in, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddPolyhedron, (const Polyhedron&, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddSphere(const Sphere& sphere, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddSphere(const Sphere& sphere, const Color& color, bool depthTest=true)", "void AddSphere(const Sphere&in, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddSphere, (const Sphere&, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddSphereSector(const Sphere& sphere, const Quaternion& rotation, float angle, bool drawLines, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddSphereSector(const Sphere& sphere, const Quaternion& rotation, float angle, bool drawLines, const Color& color, bool depthTest=true)", "void AddSphereSector(const Sphere&in, const Quaternion&in, float, bool, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddSphereSector, (const Sphere&, const Quaternion&, float, bool, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddCylinder(const Vector3& position, float radius, float height, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddCylinder(const Vector3& position, float radius, float height, const Color& color, bool depthTest=true)", "void AddCylinder(const Vector3&in, float, float, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddCylinder, (const Vector3&, float, float, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddSkeleton(const Skeleton& skeleton, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddSkeleton(const Skeleton& skeleton, const Color& color, bool depthTest=true)", "void AddSkeleton(const Skeleton&in, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddSkeleton, (const Skeleton&, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddCircle(const Vector3& center, const Vector3& normal, float radius, const Color& color, int steps=64, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddCircle(const Vector3& center, const Vector3& normal, float radius, const Color& color, int steps=64, bool depthTest=true)", "void AddCircle(const Vector3&in, const Vector3&in, float, const Color&in, int = 64, bool = true)", AS_METHODPR(DebugRenderer, AddCircle, (const Vector3&, const Vector3&, float, const Color&, int, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddCross(const Vector3& center, float size, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddCross(const Vector3& center, float size, const Color& color, bool depthTest=true)", "void AddCross(const Vector3&in, float, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddCross, (const Vector3&, float, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::AddQuad(const Vector3& center, float width, float height, const Color& color, bool depthTest=true)
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::AddQuad(const Vector3& center, float width, float height, const Color& color, bool depthTest=true)", "void AddQuad(const Vector3&in, float, float, const Color&in, bool = true)", AS_METHODPR(DebugRenderer, AddQuad, (const Vector3&, float, float, const Color&, bool), void), AS_CALL_THISCALL));

    // void DebugRenderer::Render()
    methods.Push(RegisterObjectMethodArgs("void DebugRenderer::Render()", "void Render()", AS_METHODPR(DebugRenderer, Render, (), void), AS_CALL_THISCALL));

    // bool DebugRenderer::GetLineAntiAlias() const
    methods.Push(RegisterObjectMethodArgs("bool DebugRenderer::GetLineAntiAlias() const", "bool GetLineAntiAlias() const", AS_METHODPR(DebugRenderer, GetLineAntiAlias, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool DebugRenderer::GetLineAntiAlias() const", "bool get_lineAntiAlias() const", AS_METHODPR(DebugRenderer, GetLineAntiAlias, () const, bool), AS_CALL_THISCALL));

    // const Matrix3x4& DebugRenderer::GetView() const
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& DebugRenderer::GetView() const", "const Matrix3x4& GetView() const", AS_METHODPR(DebugRenderer, GetView, () const, const Matrix3x4&), AS_CALL_THISCALL));

    // const Matrix4& DebugRenderer::GetProjection() const
    methods.Push(RegisterObjectMethodArgs("const Matrix4& DebugRenderer::GetProjection() const", "const Matrix4& GetProjection() const", AS_METHODPR(DebugRenderer, GetProjection, () const, const Matrix4&), AS_CALL_THISCALL));

    // const Frustum& DebugRenderer::GetFrustum() const
    methods.Push(RegisterObjectMethodArgs("const Frustum& DebugRenderer::GetFrustum() const", "const Frustum& GetFrustum() const", AS_METHODPR(DebugRenderer, GetFrustum, () const, const Frustum&), AS_CALL_THISCALL));

    // bool DebugRenderer::IsInside(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("bool DebugRenderer::IsInside(const BoundingBox& box) const", "bool IsInside(const BoundingBox&in) const", AS_METHODPR(DebugRenderer, IsInside, (const BoundingBox&) const, bool), AS_CALL_THISCALL));

    // bool DebugRenderer::HasContent() const
    methods.Push(RegisterObjectMethodArgs("bool DebugRenderer::HasContent() const", "bool HasContent() const", AS_METHODPR(DebugRenderer, HasContent, () const, bool), AS_CALL_THISCALL));
}

// struct DebugTriangle | File: ../Graphics/DebugRenderer.h
void CollectMembers_DebugTriangle(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct Decal | File: ../Graphics/DecalSet.h
void CollectMembers_Decal(Vector<RegisterObjectMethodArgs>& methods)
{
    // void Decal::AddVertex(const DecalVertex& vertex)
    methods.Push(RegisterObjectMethodArgs("void Decal::AddVertex(const DecalVertex& vertex)", "void AddVertex(const DecalVertex&in)", AS_METHODPR(Decal, AddVertex, (const DecalVertex&), void), AS_CALL_THISCALL));

    // void Decal::CalculateBoundingBox()
    methods.Push(RegisterObjectMethodArgs("void Decal::CalculateBoundingBox()", "void CalculateBoundingBox()", AS_METHODPR(Decal, CalculateBoundingBox, (), void), AS_CALL_THISCALL));
}

// class DecalSet | File: ../Graphics/DecalSet.h
void CollectMembers_DecalSet(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual UpdateGeometryType Drawable::GetUpdateGeometryType()");
    Remove(methods, "virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)");
    Remove(methods, "virtual void Drawable::UpdateBatches(const FrameInfo& frame)");
    Remove(methods, "virtual void Drawable::UpdateGeometry(const FrameInfo& frame)");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");
    Remove(methods, "void Drawable::OnSetEnabled() override");

    // PODVector<unsigned char> DecalSet::GetDecalsAttr() const
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // void DecalSet::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void DecalSet::SetDecalsAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void DecalSet::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void DecalSet::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(DecalSet, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void DecalSet::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void DecalSet::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(DecalSet, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void DecalSet::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void DecalSet::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(DecalSet, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void DecalSet::UpdateGeometry(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void DecalSet::UpdateGeometry(const FrameInfo& frame) override", "void UpdateGeometry(const FrameInfo&in)", AS_METHODPR(DecalSet, UpdateGeometry, (const FrameInfo&), void), AS_CALL_THISCALL));

    // UpdateGeometryType DecalSet::GetUpdateGeometryType() override
    methods.Push(RegisterObjectMethodArgs("UpdateGeometryType DecalSet::GetUpdateGeometryType() override", "UpdateGeometryType GetUpdateGeometryType()", AS_METHODPR(DecalSet, GetUpdateGeometryType, (), UpdateGeometryType), AS_CALL_THISCALL));

    // void DecalSet::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(DecalSet, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(DecalSet, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // void DecalSet::SetMaxVertices(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetMaxVertices(unsigned num)", "void SetMaxVertices(uint)", AS_METHODPR(DecalSet, SetMaxVertices, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetMaxVertices(unsigned num)", "void set_maxVertices(uint)", AS_METHODPR(DecalSet, SetMaxVertices, (unsigned), void), AS_CALL_THISCALL));

    // void DecalSet::SetMaxIndices(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetMaxIndices(unsigned num)", "void SetMaxIndices(uint)", AS_METHODPR(DecalSet, SetMaxIndices, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetMaxIndices(unsigned num)", "void set_maxIndices(uint)", AS_METHODPR(DecalSet, SetMaxIndices, (unsigned), void), AS_CALL_THISCALL));

    // void DecalSet::SetOptimizeBufferSize(bool enable)
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetOptimizeBufferSize(bool enable)", "void SetOptimizeBufferSize(bool)", AS_METHODPR(DecalSet, SetOptimizeBufferSize, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetOptimizeBufferSize(bool enable)", "void set_optimizeBufferSize(bool)", AS_METHODPR(DecalSet, SetOptimizeBufferSize, (bool), void), AS_CALL_THISCALL));

    // bool DecalSet::AddDecal(Drawable* target, const Vector3& worldPosition, const Quaternion& worldRotation, float size, float aspectRatio, float depth, const Vector2& topLeftUV, const Vector2& bottomRightUV, float timeToLive=0.0f, float normalCutoff=0.1f, unsigned subGeometry=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("bool DecalSet::AddDecal(Drawable* target, const Vector3& worldPosition, const Quaternion& worldRotation, float size, float aspectRatio, float depth, const Vector2& topLeftUV, const Vector2& bottomRightUV, float timeToLive=0.0f, float normalCutoff=0.1f, unsigned subGeometry=M_MAX_UNSIGNED)", "bool AddDecal(Drawable@+, const Vector3&in, const Quaternion&in, float, float, float, const Vector2&in, const Vector2&in, float = 0.0f, float = 0.1f, uint = M_MAX_UNSIGNED)", AS_METHODPR(DecalSet, AddDecal, (Drawable*, const Vector3&, const Quaternion&, float, float, float, const Vector2&, const Vector2&, float, float, unsigned), bool), AS_CALL_THISCALL));

    // void DecalSet::RemoveDecals(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void DecalSet::RemoveDecals(unsigned num)", "void RemoveDecals(uint)", AS_METHODPR(DecalSet, RemoveDecals, (unsigned), void), AS_CALL_THISCALL));

    // void DecalSet::RemoveAllDecals()
    methods.Push(RegisterObjectMethodArgs("void DecalSet::RemoveAllDecals()", "void RemoveAllDecals()", AS_METHODPR(DecalSet, RemoveAllDecals, (), void), AS_CALL_THISCALL));

    // Material* DecalSet::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* DecalSet::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(DecalSet, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* DecalSet::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(DecalSet, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // unsigned DecalSet::GetNumDecals() const
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetNumDecals() const", "uint GetNumDecals() const", AS_METHODPR(DecalSet, GetNumDecals, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetNumDecals() const", "uint get_numDecals() const", AS_METHODPR(DecalSet, GetNumDecals, () const, unsigned), AS_CALL_THISCALL));

    // unsigned DecalSet::GetNumVertices() const
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetNumVertices() const", "uint GetNumVertices() const", AS_METHODPR(DecalSet, GetNumVertices, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetNumVertices() const", "uint get_numVertices() const", AS_METHODPR(DecalSet, GetNumVertices, () const, unsigned), AS_CALL_THISCALL));

    // unsigned DecalSet::GetNumIndices() const
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetNumIndices() const", "uint GetNumIndices() const", AS_METHODPR(DecalSet, GetNumIndices, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetNumIndices() const", "uint get_numIndices() const", AS_METHODPR(DecalSet, GetNumIndices, () const, unsigned), AS_CALL_THISCALL));

    // unsigned DecalSet::GetMaxVertices() const
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetMaxVertices() const", "uint GetMaxVertices() const", AS_METHODPR(DecalSet, GetMaxVertices, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetMaxVertices() const", "uint get_maxVertices() const", AS_METHODPR(DecalSet, GetMaxVertices, () const, unsigned), AS_CALL_THISCALL));

    // unsigned DecalSet::GetMaxIndices() const
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetMaxIndices() const", "uint GetMaxIndices() const", AS_METHODPR(DecalSet, GetMaxIndices, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DecalSet::GetMaxIndices() const", "uint get_maxIndices() const", AS_METHODPR(DecalSet, GetMaxIndices, () const, unsigned), AS_CALL_THISCALL));

    // bool DecalSet::GetOptimizeBufferSize() const
    methods.Push(RegisterObjectMethodArgs("bool DecalSet::GetOptimizeBufferSize() const", "bool GetOptimizeBufferSize() const", AS_METHODPR(DecalSet, GetOptimizeBufferSize, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool DecalSet::GetOptimizeBufferSize() const", "bool get_optimizeBufferSize() const", AS_METHODPR(DecalSet, GetOptimizeBufferSize, () const, bool), AS_CALL_THISCALL));

    // void DecalSet::SetMaterialAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void DecalSet::SetMaterialAttr(const ResourceRef& value)", "void SetMaterialAttr(const ResourceRef&in)", AS_METHODPR(DecalSet, SetMaterialAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef DecalSet::GetMaterialAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef DecalSet::GetMaterialAttr() const", "ResourceRef GetMaterialAttr() const", AS_METHODPR(DecalSet, GetMaterialAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

// struct DecalVertex | File: ../Graphics/DecalSet.h
void CollectMembers_DecalVertex(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct DepthValue | File: ../Graphics/OcclusionBuffer.h
void CollectMembers_DepthValue(Vector<RegisterObjectMethodArgs>& methods)
{
}

// StringVector Deserializer::ReadStringVector()
// StringVector Deserializer::ReadStringVector() | File: ../IO/Deserializer.h
static CScriptArray* Deserializer_ReadStringVector_void(Deserializer* ptr)
{
    StringVector result = ptr->ReadStringVector();
    return VectorToArray<String>(result, "Array<String>");
}


// class Deserializer | File: ../IO/Deserializer.h
void CollectMembers_Deserializer(Vector<RegisterObjectMethodArgs>& methods)
{
    // virtual unsigned Deserializer::Read(void* dest, unsigned size)=0
    // Error: type "void*" can not automatically bind

    // PODVector<unsigned char> Deserializer::ReadBuffer()
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // VariantVector Deserializer::ReadVariantVector()
    // Error: type "VariantVector" can not automatically bind

    // virtual unsigned Deserializer::Seek(unsigned position)=0
    methods.Push(RegisterObjectMethodArgs("virtual unsigned Deserializer::Seek(unsigned position)=0", "uint Seek(uint)", AS_METHODPR(Deserializer, Seek, (unsigned), unsigned), AS_CALL_THISCALL));

    // virtual const String& Deserializer::GetName() const
    methods.Push(RegisterObjectMethodArgs("virtual const String& Deserializer::GetName() const", "const String& GetName() const", AS_METHODPR(Deserializer, GetName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual const String& Deserializer::GetName() const", "const String& get_name() const", AS_METHODPR(Deserializer, GetName, () const, const String&), AS_CALL_THISCALL));

    // virtual unsigned Deserializer::GetChecksum()
    methods.Push(RegisterObjectMethodArgs("virtual unsigned Deserializer::GetChecksum()", "uint GetChecksum()", AS_METHODPR(Deserializer, GetChecksum, (), unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual unsigned Deserializer::GetChecksum()", "uint get_checksum()", AS_METHODPR(Deserializer, GetChecksum, (), unsigned), AS_CALL_THISCALL));

    // virtual bool Deserializer::IsEof() const
    methods.Push(RegisterObjectMethodArgs("virtual bool Deserializer::IsEof() const", "bool IsEof() const", AS_METHODPR(Deserializer, IsEof, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual bool Deserializer::IsEof() const", "bool get_eof() const", AS_METHODPR(Deserializer, IsEof, () const, bool), AS_CALL_THISCALL));

    // unsigned Deserializer::SeekRelative(int delta)
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::SeekRelative(int delta)", "uint SeekRelative(int)", AS_METHODPR(Deserializer, SeekRelative, (int), unsigned), AS_CALL_THISCALL));

    // unsigned Deserializer::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::GetPosition() const", "uint GetPosition() const", AS_METHODPR(Deserializer, GetPosition, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::GetPosition() const", "uint get_position() const", AS_METHODPR(Deserializer, GetPosition, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Deserializer::Tell() const
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::Tell() const", "uint Tell() const", AS_METHODPR(Deserializer, Tell, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Deserializer::GetSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::GetSize() const", "uint GetSize() const", AS_METHODPR(Deserializer, GetSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::GetSize() const", "uint get_size() const", AS_METHODPR(Deserializer, GetSize, () const, unsigned), AS_CALL_THISCALL));

    // long long Deserializer::ReadInt64()
    methods.Push(RegisterObjectMethodArgs("long long Deserializer::ReadInt64()", "int64 ReadInt64()", AS_METHODPR(Deserializer, ReadInt64, (), long long), AS_CALL_THISCALL));

    // int Deserializer::ReadInt()
    methods.Push(RegisterObjectMethodArgs("int Deserializer::ReadInt()", "int ReadInt()", AS_METHODPR(Deserializer, ReadInt, (), int), AS_CALL_THISCALL));

    // short Deserializer::ReadShort()
    methods.Push(RegisterObjectMethodArgs("short Deserializer::ReadShort()", "int16 ReadShort()", AS_METHODPR(Deserializer, ReadShort, (), short), AS_CALL_THISCALL));

    // signed char Deserializer::ReadByte()
    methods.Push(RegisterObjectMethodArgs("signed char Deserializer::ReadByte()", "int8 ReadByte()", AS_METHODPR(Deserializer, ReadByte, (), signed char), AS_CALL_THISCALL));

    // unsigned long long Deserializer::ReadUInt64()
    methods.Push(RegisterObjectMethodArgs("unsigned long long Deserializer::ReadUInt64()", "uint64 ReadUInt64()", AS_METHODPR(Deserializer, ReadUInt64, (), unsigned long long), AS_CALL_THISCALL));

    // unsigned Deserializer::ReadUInt()
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::ReadUInt()", "uint ReadUInt()", AS_METHODPR(Deserializer, ReadUInt, (), unsigned), AS_CALL_THISCALL));

    // unsigned short Deserializer::ReadUShort()
    methods.Push(RegisterObjectMethodArgs("unsigned short Deserializer::ReadUShort()", "uint16 ReadUShort()", AS_METHODPR(Deserializer, ReadUShort, (), unsigned short), AS_CALL_THISCALL));

    // unsigned char Deserializer::ReadUByte()
    methods.Push(RegisterObjectMethodArgs("unsigned char Deserializer::ReadUByte()", "uint8 ReadUByte()", AS_METHODPR(Deserializer, ReadUByte, (), unsigned char), AS_CALL_THISCALL));

    // bool Deserializer::ReadBool()
    methods.Push(RegisterObjectMethodArgs("bool Deserializer::ReadBool()", "bool ReadBool()", AS_METHODPR(Deserializer, ReadBool, (), bool), AS_CALL_THISCALL));

    // float Deserializer::ReadFloat()
    methods.Push(RegisterObjectMethodArgs("float Deserializer::ReadFloat()", "float ReadFloat()", AS_METHODPR(Deserializer, ReadFloat, (), float), AS_CALL_THISCALL));

    // double Deserializer::ReadDouble()
    methods.Push(RegisterObjectMethodArgs("double Deserializer::ReadDouble()", "double ReadDouble()", AS_METHODPR(Deserializer, ReadDouble, (), double), AS_CALL_THISCALL));

    // IntRect Deserializer::ReadIntRect()
    methods.Push(RegisterObjectMethodArgs("IntRect Deserializer::ReadIntRect()", "IntRect ReadIntRect()", AS_METHODPR(Deserializer, ReadIntRect, (), IntRect), AS_CALL_THISCALL));

    // IntVector2 Deserializer::ReadIntVector2()
    methods.Push(RegisterObjectMethodArgs("IntVector2 Deserializer::ReadIntVector2()", "IntVector2 ReadIntVector2()", AS_METHODPR(Deserializer, ReadIntVector2, (), IntVector2), AS_CALL_THISCALL));

    // IntVector3 Deserializer::ReadIntVector3()
    methods.Push(RegisterObjectMethodArgs("IntVector3 Deserializer::ReadIntVector3()", "IntVector3 ReadIntVector3()", AS_METHODPR(Deserializer, ReadIntVector3, (), IntVector3), AS_CALL_THISCALL));

    // Rect Deserializer::ReadRect()
    methods.Push(RegisterObjectMethodArgs("Rect Deserializer::ReadRect()", "Rect ReadRect()", AS_METHODPR(Deserializer, ReadRect, (), Rect), AS_CALL_THISCALL));

    // Vector2 Deserializer::ReadVector2()
    methods.Push(RegisterObjectMethodArgs("Vector2 Deserializer::ReadVector2()", "Vector2 ReadVector2()", AS_METHODPR(Deserializer, ReadVector2, (), Vector2), AS_CALL_THISCALL));

    // Vector3 Deserializer::ReadVector3()
    methods.Push(RegisterObjectMethodArgs("Vector3 Deserializer::ReadVector3()", "Vector3 ReadVector3()", AS_METHODPR(Deserializer, ReadVector3, (), Vector3), AS_CALL_THISCALL));

    // Vector3 Deserializer::ReadPackedVector3(float maxAbsCoord)
    methods.Push(RegisterObjectMethodArgs("Vector3 Deserializer::ReadPackedVector3(float maxAbsCoord)", "Vector3 ReadPackedVector3(float)", AS_METHODPR(Deserializer, ReadPackedVector3, (float), Vector3), AS_CALL_THISCALL));

    // Vector4 Deserializer::ReadVector4()
    methods.Push(RegisterObjectMethodArgs("Vector4 Deserializer::ReadVector4()", "Vector4 ReadVector4()", AS_METHODPR(Deserializer, ReadVector4, (), Vector4), AS_CALL_THISCALL));

    // Quaternion Deserializer::ReadQuaternion()
    methods.Push(RegisterObjectMethodArgs("Quaternion Deserializer::ReadQuaternion()", "Quaternion ReadQuaternion()", AS_METHODPR(Deserializer, ReadQuaternion, (), Quaternion), AS_CALL_THISCALL));

    // Quaternion Deserializer::ReadPackedQuaternion()
    methods.Push(RegisterObjectMethodArgs("Quaternion Deserializer::ReadPackedQuaternion()", "Quaternion ReadPackedQuaternion()", AS_METHODPR(Deserializer, ReadPackedQuaternion, (), Quaternion), AS_CALL_THISCALL));

    // Matrix3 Deserializer::ReadMatrix3()
    methods.Push(RegisterObjectMethodArgs("Matrix3 Deserializer::ReadMatrix3()", "Matrix3 ReadMatrix3()", AS_METHODPR(Deserializer, ReadMatrix3, (), Matrix3), AS_CALL_THISCALL));

    // Matrix3x4 Deserializer::ReadMatrix3x4()
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Deserializer::ReadMatrix3x4()", "Matrix3x4 ReadMatrix3x4()", AS_METHODPR(Deserializer, ReadMatrix3x4, (), Matrix3x4), AS_CALL_THISCALL));

    // Matrix4 Deserializer::ReadMatrix4()
    methods.Push(RegisterObjectMethodArgs("Matrix4 Deserializer::ReadMatrix4()", "Matrix4 ReadMatrix4()", AS_METHODPR(Deserializer, ReadMatrix4, (), Matrix4), AS_CALL_THISCALL));

    // Color Deserializer::ReadColor()
    methods.Push(RegisterObjectMethodArgs("Color Deserializer::ReadColor()", "Color ReadColor()", AS_METHODPR(Deserializer, ReadColor, (), Color), AS_CALL_THISCALL));

    // BoundingBox Deserializer::ReadBoundingBox()
    methods.Push(RegisterObjectMethodArgs("BoundingBox Deserializer::ReadBoundingBox()", "BoundingBox ReadBoundingBox()", AS_METHODPR(Deserializer, ReadBoundingBox, (), BoundingBox), AS_CALL_THISCALL));

    // String Deserializer::ReadString()
    methods.Push(RegisterObjectMethodArgs("String Deserializer::ReadString()", "String ReadString()", AS_METHODPR(Deserializer, ReadString, (), String), AS_CALL_THISCALL));

    // String Deserializer::ReadFileID()
    methods.Push(RegisterObjectMethodArgs("String Deserializer::ReadFileID()", "String ReadFileID()", AS_METHODPR(Deserializer, ReadFileID, (), String), AS_CALL_THISCALL));

    // StringHash Deserializer::ReadStringHash()
    methods.Push(RegisterObjectMethodArgs("StringHash Deserializer::ReadStringHash()", "StringHash ReadStringHash()", AS_METHODPR(Deserializer, ReadStringHash, (), StringHash), AS_CALL_THISCALL));

    // ResourceRef Deserializer::ReadResourceRef()
    methods.Push(RegisterObjectMethodArgs("ResourceRef Deserializer::ReadResourceRef()", "ResourceRef ReadResourceRef()", AS_METHODPR(Deserializer, ReadResourceRef, (), ResourceRef), AS_CALL_THISCALL));

    // ResourceRefList Deserializer::ReadResourceRefList()
    methods.Push(RegisterObjectMethodArgs("ResourceRefList Deserializer::ReadResourceRefList()", "ResourceRefList ReadResourceRefList()", AS_METHODPR(Deserializer, ReadResourceRefList, (), ResourceRefList), AS_CALL_THISCALL));

    // Variant Deserializer::ReadVariant()
    methods.Push(RegisterObjectMethodArgs("Variant Deserializer::ReadVariant()", "Variant ReadVariant()", AS_METHODPR(Deserializer, ReadVariant, (), Variant), AS_CALL_THISCALL));

    // Variant Deserializer::ReadVariant(VariantType type)
    methods.Push(RegisterObjectMethodArgs("Variant Deserializer::ReadVariant(VariantType type)", "Variant ReadVariant(VariantType)", AS_METHODPR(Deserializer, ReadVariant, (VariantType), Variant), AS_CALL_THISCALL));

    // StringVector Deserializer::ReadStringVector()
    methods.Push(RegisterObjectMethodArgs("StringVector Deserializer::ReadStringVector()", "Array<String>@ ReadStringVector()", AS_FUNCTION_OBJFIRST(Deserializer_ReadStringVector_void), AS_CALL_CDECL_OBJFIRST));

    // VariantMap Deserializer::ReadVariantMap()
    methods.Push(RegisterObjectMethodArgs("VariantMap Deserializer::ReadVariantMap()", "VariantMap ReadVariantMap()", AS_METHODPR(Deserializer, ReadVariantMap, (), VariantMap), AS_CALL_THISCALL));

    // unsigned Deserializer::ReadVLE()
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::ReadVLE()", "uint ReadVLE()", AS_METHODPR(Deserializer, ReadVLE, (), unsigned), AS_CALL_THISCALL));

    // unsigned Deserializer::ReadNetID()
    methods.Push(RegisterObjectMethodArgs("unsigned Deserializer::ReadNetID()", "uint ReadNetID()", AS_METHODPR(Deserializer, ReadNetID, (), unsigned), AS_CALL_THISCALL));

    // String Deserializer::ReadLine()
    methods.Push(RegisterObjectMethodArgs("String Deserializer::ReadLine()", "String ReadLine()", AS_METHODPR(Deserializer, ReadLine, (), String), AS_CALL_THISCALL));
}

// struct DirtyBits | File: ../Scene/ReplicationState.h
void CollectMembers_DirtyBits(Vector<RegisterObjectMethodArgs>& methods)
{
    // void DirtyBits::Set(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void DirtyBits::Set(unsigned index)", "void Set(uint)", AS_METHODPR(DirtyBits, Set, (unsigned), void), AS_CALL_THISCALL));

    // void DirtyBits::Clear(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void DirtyBits::Clear(unsigned index)", "void Clear(uint)", AS_METHODPR(DirtyBits, Clear, (unsigned), void), AS_CALL_THISCALL));

    // void DirtyBits::ClearAll()
    methods.Push(RegisterObjectMethodArgs("void DirtyBits::ClearAll()", "void ClearAll()", AS_METHODPR(DirtyBits, ClearAll, (), void), AS_CALL_THISCALL));

    // bool DirtyBits::IsSet(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("bool DirtyBits::IsSet(unsigned index) const", "bool IsSet(uint) const", AS_METHODPR(DirtyBits, IsSet, (unsigned) const, bool), AS_CALL_THISCALL));

    // unsigned DirtyBits::Count() const
    methods.Push(RegisterObjectMethodArgs("unsigned DirtyBits::Count() const", "uint Count() const", AS_METHODPR(DirtyBits, Count, () const, unsigned), AS_CALL_THISCALL));
}

// const PODVector<Light*>& Drawable::GetLights() const
// const PODVector<Light*>& Drawable::GetLights() const | File: ../Graphics/Drawable.h
static CScriptArray* Drawable_GetLights_void(Drawable* ptr)
{
    const PODVector<Light*>& result = ptr->GetLights();
    return VectorToHandleArray(result, "Array<Light@>");
}


// const PODVector<Light*>& Drawable::GetVertexLights() const
// const PODVector<Light*>& Drawable::GetVertexLights() const | File: ../Graphics/Drawable.h
static CScriptArray* Drawable_GetVertexLights_void(Drawable* ptr)
{
    const PODVector<Light*>& result = ptr->GetVertexLights();
    return VectorToHandleArray(result, "Array<Light@>");
}


// class Drawable | File: ../Graphics/Drawable.h
void CollectMembers_Drawable(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Component::OnSetEnabled()");

    // const Vector<SourceBatch>& Drawable::GetBatches() const
    // Error: type "const Vector<SourceBatch>&" can not automatically bind

    // Octant* Drawable::GetOctant() const
    // Error: type "Octant" can not automatically bind bacause have @nobind mark

    // virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void Drawable::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void Drawable::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(Drawable, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // virtual void Drawable::Update(const FrameInfo& frame)
    methods.Push(RegisterObjectMethodArgs("virtual void Drawable::Update(const FrameInfo& frame)", "void Update(const FrameInfo&in)", AS_METHODPR(Drawable, Update, (const FrameInfo&), void), AS_CALL_THISCALL));

    // virtual void Drawable::UpdateBatches(const FrameInfo& frame)
    methods.Push(RegisterObjectMethodArgs("virtual void Drawable::UpdateBatches(const FrameInfo& frame)", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(Drawable, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // virtual void Drawable::UpdateGeometry(const FrameInfo& frame)
    methods.Push(RegisterObjectMethodArgs("virtual void Drawable::UpdateGeometry(const FrameInfo& frame)", "void UpdateGeometry(const FrameInfo&in)", AS_METHODPR(Drawable, UpdateGeometry, (const FrameInfo&), void), AS_CALL_THISCALL));

    // virtual UpdateGeometryType Drawable::GetUpdateGeometryType()
    methods.Push(RegisterObjectMethodArgs("virtual UpdateGeometryType Drawable::GetUpdateGeometryType()", "UpdateGeometryType GetUpdateGeometryType()", AS_METHODPR(Drawable, GetUpdateGeometryType, (), UpdateGeometryType), AS_CALL_THISCALL));

    // virtual Geometry* Drawable::GetLodGeometry(unsigned batchIndex, unsigned level)
    methods.Push(RegisterObjectMethodArgs("virtual Geometry* Drawable::GetLodGeometry(unsigned batchIndex, unsigned level)", "Geometry@+ GetLodGeometry(uint, uint)", AS_METHODPR(Drawable, GetLodGeometry, (unsigned, unsigned), Geometry*), AS_CALL_THISCALL));

    // virtual unsigned Drawable::GetNumOccluderTriangles()
    methods.Push(RegisterObjectMethodArgs("virtual unsigned Drawable::GetNumOccluderTriangles()", "uint GetNumOccluderTriangles()", AS_METHODPR(Drawable, GetNumOccluderTriangles, (), unsigned), AS_CALL_THISCALL));

    // virtual bool Drawable::DrawOcclusion(OcclusionBuffer* buffer)
    methods.Push(RegisterObjectMethodArgs("virtual bool Drawable::DrawOcclusion(OcclusionBuffer* buffer)", "bool DrawOcclusion(OcclusionBuffer@+)", AS_METHODPR(Drawable, DrawOcclusion, (OcclusionBuffer*), bool), AS_CALL_THISCALL));

    // void Drawable::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void Drawable::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Drawable, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void Drawable::SetDrawDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetDrawDistance(float distance)", "void SetDrawDistance(float)", AS_METHODPR(Drawable, SetDrawDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetDrawDistance(float distance)", "void set_drawDistance(float)", AS_METHODPR(Drawable, SetDrawDistance, (float), void), AS_CALL_THISCALL));

    // void Drawable::SetShadowDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetShadowDistance(float distance)", "void SetShadowDistance(float)", AS_METHODPR(Drawable, SetShadowDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetShadowDistance(float distance)", "void set_shadowDistance(float)", AS_METHODPR(Drawable, SetShadowDistance, (float), void), AS_CALL_THISCALL));

    // void Drawable::SetLodBias(float bias)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetLodBias(float bias)", "void SetLodBias(float)", AS_METHODPR(Drawable, SetLodBias, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetLodBias(float bias)", "void set_lodBias(float)", AS_METHODPR(Drawable, SetLodBias, (float), void), AS_CALL_THISCALL));

    // void Drawable::SetViewMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetViewMask(unsigned mask)", "void SetViewMask(uint)", AS_METHODPR(Drawable, SetViewMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetViewMask(unsigned mask)", "void set_viewMask(uint)", AS_METHODPR(Drawable, SetViewMask, (unsigned), void), AS_CALL_THISCALL));

    // void Drawable::SetLightMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetLightMask(unsigned mask)", "void SetLightMask(uint)", AS_METHODPR(Drawable, SetLightMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetLightMask(unsigned mask)", "void set_lightMask(uint)", AS_METHODPR(Drawable, SetLightMask, (unsigned), void), AS_CALL_THISCALL));

    // void Drawable::SetShadowMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetShadowMask(unsigned mask)", "void SetShadowMask(uint)", AS_METHODPR(Drawable, SetShadowMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetShadowMask(unsigned mask)", "void set_shadowMask(uint)", AS_METHODPR(Drawable, SetShadowMask, (unsigned), void), AS_CALL_THISCALL));

    // void Drawable::SetZoneMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetZoneMask(unsigned mask)", "void SetZoneMask(uint)", AS_METHODPR(Drawable, SetZoneMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetZoneMask(unsigned mask)", "void set_zoneMask(uint)", AS_METHODPR(Drawable, SetZoneMask, (unsigned), void), AS_CALL_THISCALL));

    // void Drawable::SetMaxLights(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetMaxLights(unsigned num)", "void SetMaxLights(uint)", AS_METHODPR(Drawable, SetMaxLights, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetMaxLights(unsigned num)", "void set_maxLights(uint)", AS_METHODPR(Drawable, SetMaxLights, (unsigned), void), AS_CALL_THISCALL));

    // void Drawable::SetCastShadows(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetCastShadows(bool enable)", "void SetCastShadows(bool)", AS_METHODPR(Drawable, SetCastShadows, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetCastShadows(bool enable)", "void set_castShadows(bool)", AS_METHODPR(Drawable, SetCastShadows, (bool), void), AS_CALL_THISCALL));

    // void Drawable::SetOccluder(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetOccluder(bool enable)", "void SetOccluder(bool)", AS_METHODPR(Drawable, SetOccluder, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetOccluder(bool enable)", "void set_occluder(bool)", AS_METHODPR(Drawable, SetOccluder, (bool), void), AS_CALL_THISCALL));

    // void Drawable::SetOccludee(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetOccludee(bool enable)", "void SetOccludee(bool)", AS_METHODPR(Drawable, SetOccludee, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetOccludee(bool enable)", "void set_occludee(bool)", AS_METHODPR(Drawable, SetOccludee, (bool), void), AS_CALL_THISCALL));

    // void Drawable::MarkForUpdate()
    methods.Push(RegisterObjectMethodArgs("void Drawable::MarkForUpdate()", "void MarkForUpdate()", AS_METHODPR(Drawable, MarkForUpdate, (), void), AS_CALL_THISCALL));

    // const BoundingBox& Drawable::GetBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Drawable::GetBoundingBox() const", "const BoundingBox& GetBoundingBox() const", AS_METHODPR(Drawable, GetBoundingBox, () const, const BoundingBox&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Drawable::GetBoundingBox() const", "const BoundingBox& get_boundingBox() const", AS_METHODPR(Drawable, GetBoundingBox, () const, const BoundingBox&), AS_CALL_THISCALL));

    // const BoundingBox& Drawable::GetWorldBoundingBox()
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Drawable::GetWorldBoundingBox()", "const BoundingBox& GetWorldBoundingBox()", AS_METHODPR(Drawable, GetWorldBoundingBox, (), const BoundingBox&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Drawable::GetWorldBoundingBox()", "const BoundingBox& get_worldBoundingBox()", AS_METHODPR(Drawable, GetWorldBoundingBox, (), const BoundingBox&), AS_CALL_THISCALL));

    // unsigned char Drawable::GetDrawableFlags() const
    methods.Push(RegisterObjectMethodArgs("unsigned char Drawable::GetDrawableFlags() const", "uint8 GetDrawableFlags() const", AS_METHODPR(Drawable, GetDrawableFlags, () const, unsigned char), AS_CALL_THISCALL));

    // float Drawable::GetDrawDistance() const
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetDrawDistance() const", "float GetDrawDistance() const", AS_METHODPR(Drawable, GetDrawDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetDrawDistance() const", "float get_drawDistance() const", AS_METHODPR(Drawable, GetDrawDistance, () const, float), AS_CALL_THISCALL));

    // float Drawable::GetShadowDistance() const
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetShadowDistance() const", "float GetShadowDistance() const", AS_METHODPR(Drawable, GetShadowDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetShadowDistance() const", "float get_shadowDistance() const", AS_METHODPR(Drawable, GetShadowDistance, () const, float), AS_CALL_THISCALL));

    // float Drawable::GetLodBias() const
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetLodBias() const", "float GetLodBias() const", AS_METHODPR(Drawable, GetLodBias, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetLodBias() const", "float get_lodBias() const", AS_METHODPR(Drawable, GetLodBias, () const, float), AS_CALL_THISCALL));

    // unsigned Drawable::GetViewMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetViewMask() const", "uint GetViewMask() const", AS_METHODPR(Drawable, GetViewMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetViewMask() const", "uint get_viewMask() const", AS_METHODPR(Drawable, GetViewMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Drawable::GetLightMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetLightMask() const", "uint GetLightMask() const", AS_METHODPR(Drawable, GetLightMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetLightMask() const", "uint get_lightMask() const", AS_METHODPR(Drawable, GetLightMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Drawable::GetShadowMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetShadowMask() const", "uint GetShadowMask() const", AS_METHODPR(Drawable, GetShadowMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetShadowMask() const", "uint get_shadowMask() const", AS_METHODPR(Drawable, GetShadowMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Drawable::GetZoneMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetZoneMask() const", "uint GetZoneMask() const", AS_METHODPR(Drawable, GetZoneMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetZoneMask() const", "uint get_zoneMask() const", AS_METHODPR(Drawable, GetZoneMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Drawable::GetMaxLights() const
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetMaxLights() const", "uint GetMaxLights() const", AS_METHODPR(Drawable, GetMaxLights, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Drawable::GetMaxLights() const", "uint get_maxLights() const", AS_METHODPR(Drawable, GetMaxLights, () const, unsigned), AS_CALL_THISCALL));

    // bool Drawable::GetCastShadows() const
    methods.Push(RegisterObjectMethodArgs("bool Drawable::GetCastShadows() const", "bool GetCastShadows() const", AS_METHODPR(Drawable, GetCastShadows, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Drawable::GetCastShadows() const", "bool get_castShadows() const", AS_METHODPR(Drawable, GetCastShadows, () const, bool), AS_CALL_THISCALL));

    // bool Drawable::IsOccluder() const
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsOccluder() const", "bool IsOccluder() const", AS_METHODPR(Drawable, IsOccluder, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsOccluder() const", "bool get_occluder() const", AS_METHODPR(Drawable, IsOccluder, () const, bool), AS_CALL_THISCALL));

    // bool Drawable::IsOccludee() const
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsOccludee() const", "bool IsOccludee() const", AS_METHODPR(Drawable, IsOccludee, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsOccludee() const", "bool get_occludee() const", AS_METHODPR(Drawable, IsOccludee, () const, bool), AS_CALL_THISCALL));

    // bool Drawable::IsInView() const
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsInView() const", "bool IsInView() const", AS_METHODPR(Drawable, IsInView, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsInView() const", "bool get_inView() const", AS_METHODPR(Drawable, IsInView, () const, bool), AS_CALL_THISCALL));

    // bool Drawable::IsInView(Camera* camera) const
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsInView(Camera* camera) const", "bool IsInView(Camera@+) const", AS_METHODPR(Drawable, IsInView, (Camera*) const, bool), AS_CALL_THISCALL));

    // void Drawable::SetZone(Zone* zone, bool temporary=false)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetZone(Zone* zone, bool temporary=false)", "void SetZone(Zone@+, bool = false)", AS_METHODPR(Drawable, SetZone, (Zone*, bool), void), AS_CALL_THISCALL));

    // void Drawable::SetSortValue(float value)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetSortValue(float value)", "void SetSortValue(float)", AS_METHODPR(Drawable, SetSortValue, (float), void), AS_CALL_THISCALL));

    // void Drawable::SetMinMaxZ(float minZ, float maxZ)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetMinMaxZ(float minZ, float maxZ)", "void SetMinMaxZ(float, float)", AS_METHODPR(Drawable, SetMinMaxZ, (float, float), void), AS_CALL_THISCALL));

    // void Drawable::MarkInView(const FrameInfo& frame)
    methods.Push(RegisterObjectMethodArgs("void Drawable::MarkInView(const FrameInfo& frame)", "void MarkInView(const FrameInfo&in)", AS_METHODPR(Drawable, MarkInView, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void Drawable::MarkInView(unsigned frameNumber)
    methods.Push(RegisterObjectMethodArgs("void Drawable::MarkInView(unsigned frameNumber)", "void MarkInView(uint)", AS_METHODPR(Drawable, MarkInView, (unsigned), void), AS_CALL_THISCALL));

    // void Drawable::LimitLights()
    methods.Push(RegisterObjectMethodArgs("void Drawable::LimitLights()", "void LimitLights()", AS_METHODPR(Drawable, LimitLights, (), void), AS_CALL_THISCALL));

    // void Drawable::LimitVertexLights(bool removeConvertedLights)
    methods.Push(RegisterObjectMethodArgs("void Drawable::LimitVertexLights(bool removeConvertedLights)", "void LimitVertexLights(bool)", AS_METHODPR(Drawable, LimitVertexLights, (bool), void), AS_CALL_THISCALL));

    // void Drawable::SetBasePass(unsigned batchIndex)
    methods.Push(RegisterObjectMethodArgs("void Drawable::SetBasePass(unsigned batchIndex)", "void SetBasePass(uint)", AS_METHODPR(Drawable, SetBasePass, (unsigned), void), AS_CALL_THISCALL));

    // Zone* Drawable::GetZone() const
    methods.Push(RegisterObjectMethodArgs("Zone* Drawable::GetZone() const", "Zone@+ GetZone() const", AS_METHODPR(Drawable, GetZone, () const, Zone*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Zone* Drawable::GetZone() const", "Zone@+ get_zone() const", AS_METHODPR(Drawable, GetZone, () const, Zone*), AS_CALL_THISCALL));

    // bool Drawable::IsZoneDirty() const
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsZoneDirty() const", "bool IsZoneDirty() const", AS_METHODPR(Drawable, IsZoneDirty, () const, bool), AS_CALL_THISCALL));

    // float Drawable::GetDistance() const
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetDistance() const", "float GetDistance() const", AS_METHODPR(Drawable, GetDistance, () const, float), AS_CALL_THISCALL));

    // float Drawable::GetLodDistance() const
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetLodDistance() const", "float GetLodDistance() const", AS_METHODPR(Drawable, GetLodDistance, () const, float), AS_CALL_THISCALL));

    // float Drawable::GetSortValue() const
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetSortValue() const", "float GetSortValue() const", AS_METHODPR(Drawable, GetSortValue, () const, float), AS_CALL_THISCALL));

    // bool Drawable::IsInView(const FrameInfo& frame, bool anyCamera=false) const
    methods.Push(RegisterObjectMethodArgs("bool Drawable::IsInView(const FrameInfo& frame, bool anyCamera=false) const", "bool IsInView(const FrameInfo&in, bool = false) const", AS_METHODPR(Drawable, IsInView, (const FrameInfo&, bool) const, bool), AS_CALL_THISCALL));

    // bool Drawable::HasBasePass(unsigned batchIndex) const
    methods.Push(RegisterObjectMethodArgs("bool Drawable::HasBasePass(unsigned batchIndex) const", "bool HasBasePass(uint) const", AS_METHODPR(Drawable, HasBasePass, (unsigned) const, bool), AS_CALL_THISCALL));

    // const PODVector<Light*>& Drawable::GetLights() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Light*>& Drawable::GetLights() const", "Array<Light@>@ GetLights() const", AS_FUNCTION_OBJFIRST(Drawable_GetLights_void), AS_CALL_CDECL_OBJFIRST));

    // const PODVector<Light*>& Drawable::GetVertexLights() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Light*>& Drawable::GetVertexLights() const", "Array<Light@>@ GetVertexLights() const", AS_FUNCTION_OBJFIRST(Drawable_GetVertexLights_void), AS_CALL_CDECL_OBJFIRST));

    // Light* Drawable::GetFirstLight() const
    methods.Push(RegisterObjectMethodArgs("Light* Drawable::GetFirstLight() const", "Light@+ GetFirstLight() const", AS_METHODPR(Drawable, GetFirstLight, () const, Light*), AS_CALL_THISCALL));

    // float Drawable::GetMinZ() const
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetMinZ() const", "float GetMinZ() const", AS_METHODPR(Drawable, GetMinZ, () const, float), AS_CALL_THISCALL));

    // float Drawable::GetMaxZ() const
    methods.Push(RegisterObjectMethodArgs("float Drawable::GetMaxZ() const", "float GetMaxZ() const", AS_METHODPR(Drawable, GetMaxZ, () const, float), AS_CALL_THISCALL));

    // void Drawable::AddLight(Light* light)
    methods.Push(RegisterObjectMethodArgs("void Drawable::AddLight(Light* light)", "void AddLight(Light@+)", AS_METHODPR(Drawable, AddLight, (Light*), void), AS_CALL_THISCALL));

    // void Drawable::AddVertexLight(Light* light)
    methods.Push(RegisterObjectMethodArgs("void Drawable::AddVertexLight(Light* light)", "void AddVertexLight(Light@+)", AS_METHODPR(Drawable, AddVertexLight, (Light*), void), AS_CALL_THISCALL));
}

// PODVector<UIElement*> DropDownList::GetItems() const
// PODVector<UIElement*> DropDownList::GetItems() const | File: ../UI/DropDownList.h
static CScriptArray* DropDownList_GetItems_void(DropDownList* ptr)
{
    PODVector<UIElement*> result = ptr->GetItems();
    return VectorToHandleArray(result, "Array<UIElement@>");
}


// class DropDownList | File: ../UI/DropDownList.h
void CollectMembers_DropDownList(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Menu(methods);

    Remove(methods, "static void Menu::RegisterObject(Context* context)");
    Remove(methods, "virtual void Menu::OnHidePopup()");
    Remove(methods, "virtual void Menu::OnShowPopup()");
    Remove(methods, "virtual void UIElement::OnSetEditable()");
    Remove(methods, "void Button::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override");
    Remove(methods, "void UIElement::ApplyAttributes() override");

    // void DropDownList::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void DropDownList::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void DropDownList::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(DropDownList, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void DropDownList::OnShowPopup() override
    methods.Push(RegisterObjectMethodArgs("void DropDownList::OnShowPopup() override", "void OnShowPopup()", AS_METHODPR(DropDownList, OnShowPopup, (), void), AS_CALL_THISCALL));

    // void DropDownList::OnHidePopup() override
    methods.Push(RegisterObjectMethodArgs("void DropDownList::OnHidePopup() override", "void OnHidePopup()", AS_METHODPR(DropDownList, OnHidePopup, (), void), AS_CALL_THISCALL));

    // void DropDownList::OnSetEditable() override
    methods.Push(RegisterObjectMethodArgs("void DropDownList::OnSetEditable() override", "void OnSetEditable()", AS_METHODPR(DropDownList, OnSetEditable, (), void), AS_CALL_THISCALL));

    // void DropDownList::AddItem(UIElement* item)
    methods.Push(RegisterObjectMethodArgs("void DropDownList::AddItem(UIElement* item)", "void AddItem(UIElement@+)", AS_METHODPR(DropDownList, AddItem, (UIElement*), void), AS_CALL_THISCALL));

    // void DropDownList::InsertItem(unsigned index, UIElement* item)
    methods.Push(RegisterObjectMethodArgs("void DropDownList::InsertItem(unsigned index, UIElement* item)", "void InsertItem(uint, UIElement@+)", AS_METHODPR(DropDownList, InsertItem, (unsigned, UIElement*), void), AS_CALL_THISCALL));

    // void DropDownList::RemoveItem(UIElement* item)
    methods.Push(RegisterObjectMethodArgs("void DropDownList::RemoveItem(UIElement* item)", "void RemoveItem(UIElement@+)", AS_METHODPR(DropDownList, RemoveItem, (UIElement*), void), AS_CALL_THISCALL));

    // void DropDownList::RemoveItem(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void DropDownList::RemoveItem(unsigned index)", "void RemoveItem(uint)", AS_METHODPR(DropDownList, RemoveItem, (unsigned), void), AS_CALL_THISCALL));

    // void DropDownList::RemoveAllItems()
    methods.Push(RegisterObjectMethodArgs("void DropDownList::RemoveAllItems()", "void RemoveAllItems()", AS_METHODPR(DropDownList, RemoveAllItems, (), void), AS_CALL_THISCALL));

    // void DropDownList::SetSelection(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void DropDownList::SetSelection(unsigned index)", "void SetSelection(uint)", AS_METHODPR(DropDownList, SetSelection, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DropDownList::SetSelection(unsigned index)", "void set_selection(uint)", AS_METHODPR(DropDownList, SetSelection, (unsigned), void), AS_CALL_THISCALL));

    // void DropDownList::SetPlaceholderText(const String& text)
    methods.Push(RegisterObjectMethodArgs("void DropDownList::SetPlaceholderText(const String& text)", "void SetPlaceholderText(const String&in)", AS_METHODPR(DropDownList, SetPlaceholderText, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DropDownList::SetPlaceholderText(const String& text)", "void set_placeholderText(const String&in)", AS_METHODPR(DropDownList, SetPlaceholderText, (const String&), void), AS_CALL_THISCALL));

    // void DropDownList::SetResizePopup(bool enable)
    methods.Push(RegisterObjectMethodArgs("void DropDownList::SetResizePopup(bool enable)", "void SetResizePopup(bool)", AS_METHODPR(DropDownList, SetResizePopup, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DropDownList::SetResizePopup(bool enable)", "void set_resizePopup(bool)", AS_METHODPR(DropDownList, SetResizePopup, (bool), void), AS_CALL_THISCALL));

    // unsigned DropDownList::GetNumItems() const
    methods.Push(RegisterObjectMethodArgs("unsigned DropDownList::GetNumItems() const", "uint GetNumItems() const", AS_METHODPR(DropDownList, GetNumItems, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DropDownList::GetNumItems() const", "uint get_numItems() const", AS_METHODPR(DropDownList, GetNumItems, () const, unsigned), AS_CALL_THISCALL));

    // UIElement* DropDownList::GetItem(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("UIElement* DropDownList::GetItem(unsigned index) const", "UIElement@+ GetItem(uint) const", AS_METHODPR(DropDownList, GetItem, (unsigned) const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* DropDownList::GetItem(unsigned index) const", "UIElement@+ get_items(uint) const", AS_METHODPR(DropDownList, GetItem, (unsigned) const, UIElement*), AS_CALL_THISCALL));

    // PODVector<UIElement*> DropDownList::GetItems() const
    methods.Push(RegisterObjectMethodArgs("PODVector<UIElement*> DropDownList::GetItems() const", "Array<UIElement@>@ GetItems() const", AS_FUNCTION_OBJFIRST(DropDownList_GetItems_void), AS_CALL_CDECL_OBJFIRST));

    // unsigned DropDownList::GetSelection() const
    methods.Push(RegisterObjectMethodArgs("unsigned DropDownList::GetSelection() const", "uint GetSelection() const", AS_METHODPR(DropDownList, GetSelection, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DropDownList::GetSelection() const", "uint get_selection() const", AS_METHODPR(DropDownList, GetSelection, () const, unsigned), AS_CALL_THISCALL));

    // UIElement* DropDownList::GetSelectedItem() const
    methods.Push(RegisterObjectMethodArgs("UIElement* DropDownList::GetSelectedItem() const", "UIElement@+ GetSelectedItem() const", AS_METHODPR(DropDownList, GetSelectedItem, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* DropDownList::GetSelectedItem() const", "UIElement@+ get_selectedItem() const", AS_METHODPR(DropDownList, GetSelectedItem, () const, UIElement*), AS_CALL_THISCALL));

    // ListView* DropDownList::GetListView() const
    methods.Push(RegisterObjectMethodArgs("ListView* DropDownList::GetListView() const", "ListView@+ GetListView() const", AS_METHODPR(DropDownList, GetListView, () const, ListView*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ListView* DropDownList::GetListView() const", "ListView@+ get_listView() const", AS_METHODPR(DropDownList, GetListView, () const, ListView*), AS_CALL_THISCALL));

    // UIElement* DropDownList::GetPlaceholder() const
    methods.Push(RegisterObjectMethodArgs("UIElement* DropDownList::GetPlaceholder() const", "UIElement@+ GetPlaceholder() const", AS_METHODPR(DropDownList, GetPlaceholder, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* DropDownList::GetPlaceholder() const", "UIElement@+ get_placeholder() const", AS_METHODPR(DropDownList, GetPlaceholder, () const, UIElement*), AS_CALL_THISCALL));

    // const String& DropDownList::GetPlaceholderText() const
    methods.Push(RegisterObjectMethodArgs("const String& DropDownList::GetPlaceholderText() const", "const String& GetPlaceholderText() const", AS_METHODPR(DropDownList, GetPlaceholderText, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& DropDownList::GetPlaceholderText() const", "const String& get_placeholderText() const", AS_METHODPR(DropDownList, GetPlaceholderText, () const, const String&), AS_CALL_THISCALL));

    // bool DropDownList::GetResizePopup() const
    methods.Push(RegisterObjectMethodArgs("bool DropDownList::GetResizePopup() const", "bool GetResizePopup() const", AS_METHODPR(DropDownList, GetResizePopup, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool DropDownList::GetResizePopup() const", "bool get_resizePopup() const", AS_METHODPR(DropDownList, GetResizePopup, () const, bool), AS_CALL_THISCALL));

    // void DropDownList::SetSelectionAttr(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void DropDownList::SetSelectionAttr(unsigned index)", "void SetSelectionAttr(uint)", AS_METHODPR(DropDownList, SetSelectionAttr, (unsigned), void), AS_CALL_THISCALL));
}

// class Engine | File: ../Engine/Engine.h
void CollectMembers_Engine(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // bool Engine::Initialize(const VariantMap& parameters)
    methods.Push(RegisterObjectMethodArgs("bool Engine::Initialize(const VariantMap& parameters)", "bool Initialize(const VariantMap&in)", AS_METHODPR(Engine, Initialize, (const VariantMap&), bool), AS_CALL_THISCALL));

    // bool Engine::InitializeResourceCache(const VariantMap& parameters, bool removeOld=true)
    methods.Push(RegisterObjectMethodArgs("bool Engine::InitializeResourceCache(const VariantMap& parameters, bool removeOld=true)", "bool InitializeResourceCache(const VariantMap&in, bool = true)", AS_METHODPR(Engine, InitializeResourceCache, (const VariantMap&, bool), bool), AS_CALL_THISCALL));

    // void Engine::RunFrame()
    methods.Push(RegisterObjectMethodArgs("void Engine::RunFrame()", "void RunFrame()", AS_METHODPR(Engine, RunFrame, (), void), AS_CALL_THISCALL));

    // Console* Engine::CreateConsole()
    methods.Push(RegisterObjectMethodArgs("Console* Engine::CreateConsole()", "Console@+ CreateConsole()", AS_METHODPR(Engine, CreateConsole, (), Console*), AS_CALL_THISCALL));

    // DebugHud* Engine::CreateDebugHud()
    methods.Push(RegisterObjectMethodArgs("DebugHud* Engine::CreateDebugHud()", "DebugHud@+ CreateDebugHud()", AS_METHODPR(Engine, CreateDebugHud, (), DebugHud*), AS_CALL_THISCALL));

    // void Engine::SetMinFps(int fps)
    methods.Push(RegisterObjectMethodArgs("void Engine::SetMinFps(int fps)", "void SetMinFps(int)", AS_METHODPR(Engine, SetMinFps, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Engine::SetMinFps(int fps)", "void set_minFps(int)", AS_METHODPR(Engine, SetMinFps, (int), void), AS_CALL_THISCALL));

    // void Engine::SetMaxFps(int fps)
    methods.Push(RegisterObjectMethodArgs("void Engine::SetMaxFps(int fps)", "void SetMaxFps(int)", AS_METHODPR(Engine, SetMaxFps, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Engine::SetMaxFps(int fps)", "void set_maxFps(int)", AS_METHODPR(Engine, SetMaxFps, (int), void), AS_CALL_THISCALL));

    // void Engine::SetMaxInactiveFps(int fps)
    methods.Push(RegisterObjectMethodArgs("void Engine::SetMaxInactiveFps(int fps)", "void SetMaxInactiveFps(int)", AS_METHODPR(Engine, SetMaxInactiveFps, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Engine::SetMaxInactiveFps(int fps)", "void set_maxInactiveFps(int)", AS_METHODPR(Engine, SetMaxInactiveFps, (int), void), AS_CALL_THISCALL));

    // void Engine::SetTimeStepSmoothing(int frames)
    methods.Push(RegisterObjectMethodArgs("void Engine::SetTimeStepSmoothing(int frames)", "void SetTimeStepSmoothing(int)", AS_METHODPR(Engine, SetTimeStepSmoothing, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Engine::SetTimeStepSmoothing(int frames)", "void set_timeStepSmoothing(int)", AS_METHODPR(Engine, SetTimeStepSmoothing, (int), void), AS_CALL_THISCALL));

    // void Engine::SetPauseMinimized(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Engine::SetPauseMinimized(bool enable)", "void SetPauseMinimized(bool)", AS_METHODPR(Engine, SetPauseMinimized, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Engine::SetPauseMinimized(bool enable)", "void set_pauseMinimized(bool)", AS_METHODPR(Engine, SetPauseMinimized, (bool), void), AS_CALL_THISCALL));

    // void Engine::SetAutoExit(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Engine::SetAutoExit(bool enable)", "void SetAutoExit(bool)", AS_METHODPR(Engine, SetAutoExit, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Engine::SetAutoExit(bool enable)", "void set_autoExit(bool)", AS_METHODPR(Engine, SetAutoExit, (bool), void), AS_CALL_THISCALL));

    // void Engine::SetNextTimeStep(float seconds)
    methods.Push(RegisterObjectMethodArgs("void Engine::SetNextTimeStep(float seconds)", "void SetNextTimeStep(float)", AS_METHODPR(Engine, SetNextTimeStep, (float), void), AS_CALL_THISCALL));

    // void Engine::Exit()
    methods.Push(RegisterObjectMethodArgs("void Engine::Exit()", "void Exit()", AS_METHODPR(Engine, Exit, (), void), AS_CALL_THISCALL));

    // void Engine::DumpProfiler()
    methods.Push(RegisterObjectMethodArgs("void Engine::DumpProfiler()", "void DumpProfiler()", AS_METHODPR(Engine, DumpProfiler, (), void), AS_CALL_THISCALL));

    // void Engine::DumpResources(bool dumpFileName=false)
    methods.Push(RegisterObjectMethodArgs("void Engine::DumpResources(bool dumpFileName=false)", "void DumpResources(bool = false)", AS_METHODPR(Engine, DumpResources, (bool), void), AS_CALL_THISCALL));

    // void Engine::DumpMemory()
    methods.Push(RegisterObjectMethodArgs("void Engine::DumpMemory()", "void DumpMemory()", AS_METHODPR(Engine, DumpMemory, (), void), AS_CALL_THISCALL));

    // float Engine::GetNextTimeStep() const
    methods.Push(RegisterObjectMethodArgs("float Engine::GetNextTimeStep() const", "float GetNextTimeStep() const", AS_METHODPR(Engine, GetNextTimeStep, () const, float), AS_CALL_THISCALL));

    // int Engine::GetMinFps() const
    methods.Push(RegisterObjectMethodArgs("int Engine::GetMinFps() const", "int GetMinFps() const", AS_METHODPR(Engine, GetMinFps, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Engine::GetMinFps() const", "int get_minFps() const", AS_METHODPR(Engine, GetMinFps, () const, int), AS_CALL_THISCALL));

    // int Engine::GetMaxFps() const
    methods.Push(RegisterObjectMethodArgs("int Engine::GetMaxFps() const", "int GetMaxFps() const", AS_METHODPR(Engine, GetMaxFps, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Engine::GetMaxFps() const", "int get_maxFps() const", AS_METHODPR(Engine, GetMaxFps, () const, int), AS_CALL_THISCALL));

    // int Engine::GetMaxInactiveFps() const
    methods.Push(RegisterObjectMethodArgs("int Engine::GetMaxInactiveFps() const", "int GetMaxInactiveFps() const", AS_METHODPR(Engine, GetMaxInactiveFps, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Engine::GetMaxInactiveFps() const", "int get_maxInactiveFps() const", AS_METHODPR(Engine, GetMaxInactiveFps, () const, int), AS_CALL_THISCALL));

    // int Engine::GetTimeStepSmoothing() const
    methods.Push(RegisterObjectMethodArgs("int Engine::GetTimeStepSmoothing() const", "int GetTimeStepSmoothing() const", AS_METHODPR(Engine, GetTimeStepSmoothing, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Engine::GetTimeStepSmoothing() const", "int get_timeStepSmoothing() const", AS_METHODPR(Engine, GetTimeStepSmoothing, () const, int), AS_CALL_THISCALL));

    // bool Engine::GetPauseMinimized() const
    methods.Push(RegisterObjectMethodArgs("bool Engine::GetPauseMinimized() const", "bool GetPauseMinimized() const", AS_METHODPR(Engine, GetPauseMinimized, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Engine::GetPauseMinimized() const", "bool get_pauseMinimized() const", AS_METHODPR(Engine, GetPauseMinimized, () const, bool), AS_CALL_THISCALL));

    // bool Engine::GetAutoExit() const
    methods.Push(RegisterObjectMethodArgs("bool Engine::GetAutoExit() const", "bool GetAutoExit() const", AS_METHODPR(Engine, GetAutoExit, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Engine::GetAutoExit() const", "bool get_autoExit() const", AS_METHODPR(Engine, GetAutoExit, () const, bool), AS_CALL_THISCALL));

    // bool Engine::IsInitialized() const
    methods.Push(RegisterObjectMethodArgs("bool Engine::IsInitialized() const", "bool IsInitialized() const", AS_METHODPR(Engine, IsInitialized, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Engine::IsInitialized() const", "bool get_initialized() const", AS_METHODPR(Engine, IsInitialized, () const, bool), AS_CALL_THISCALL));

    // bool Engine::IsExiting() const
    methods.Push(RegisterObjectMethodArgs("bool Engine::IsExiting() const", "bool IsExiting() const", AS_METHODPR(Engine, IsExiting, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Engine::IsExiting() const", "bool get_exiting() const", AS_METHODPR(Engine, IsExiting, () const, bool), AS_CALL_THISCALL));

    // bool Engine::IsHeadless() const
    methods.Push(RegisterObjectMethodArgs("bool Engine::IsHeadless() const", "bool IsHeadless() const", AS_METHODPR(Engine, IsHeadless, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Engine::IsHeadless() const", "bool get_headless() const", AS_METHODPR(Engine, IsHeadless, () const, bool), AS_CALL_THISCALL));

    // void Engine::Update()
    methods.Push(RegisterObjectMethodArgs("void Engine::Update()", "void Update()", AS_METHODPR(Engine, Update, (), void), AS_CALL_THISCALL));

    // void Engine::Render()
    methods.Push(RegisterObjectMethodArgs("void Engine::Render()", "void Render()", AS_METHODPR(Engine, Render, (), void), AS_CALL_THISCALL));

    // void Engine::ApplyFrameLimit()
    methods.Push(RegisterObjectMethodArgs("void Engine::ApplyFrameLimit()", "void ApplyFrameLimit()", AS_METHODPR(Engine, ApplyFrameLimit, (), void), AS_CALL_THISCALL));
}

// class EventHandler | File: ../Core/Object.h
void CollectMembers_EventHandler(Vector<RegisterObjectMethodArgs>& methods)
{
    // virtual EventHandler* EventHandler::Clone() const =0
    // Error: type "EventHandler*" can not automatically bind

    // void* EventHandler::GetUserData() const
    // Error: type "void*" can not automatically bind

    // void EventHandler::SetSenderAndEventType(Object* sender, StringHash eventType)
    methods.Push(RegisterObjectMethodArgs("void EventHandler::SetSenderAndEventType(Object* sender, StringHash eventType)", "void SetSenderAndEventType(Object@+, StringHash)", AS_METHODPR(EventHandler, SetSenderAndEventType, (Object*, StringHash), void), AS_CALL_THISCALL));

    // virtual void EventHandler::Invoke(VariantMap& eventData)=0
    methods.Push(RegisterObjectMethodArgs("virtual void EventHandler::Invoke(VariantMap& eventData)=0", "void Invoke(VariantMap&)", AS_METHODPR(EventHandler, Invoke, (VariantMap&), void), AS_CALL_THISCALL));

    // Object* EventHandler::GetReceiver() const
    methods.Push(RegisterObjectMethodArgs("Object* EventHandler::GetReceiver() const", "Object@+ GetReceiver() const", AS_METHODPR(EventHandler, GetReceiver, () const, Object*), AS_CALL_THISCALL));

    // Object* EventHandler::GetSender() const
    methods.Push(RegisterObjectMethodArgs("Object* EventHandler::GetSender() const", "Object@+ GetSender() const", AS_METHODPR(EventHandler, GetSender, () const, Object*), AS_CALL_THISCALL));

    // const StringHash& EventHandler::GetEventType() const
    methods.Push(RegisterObjectMethodArgs("const StringHash& EventHandler::GetEventType() const", "const StringHash& GetEventType() const", AS_METHODPR(EventHandler, GetEventType, () const, const StringHash&), AS_CALL_THISCALL));
}

// class EventHandler11Impl | File: ../Core/Object.h
void CollectMembers_EventHandler11Impl(Vector<RegisterObjectMethodArgs>& methods)
{
    // EventHandler* EventHandler11Impl::Clone() const override
    // Error: type "EventHandler*" can not automatically bind

    // void EventHandler11Impl::Invoke(VariantMap& eventData) override
    methods.Push(RegisterObjectMethodArgs("void EventHandler11Impl::Invoke(VariantMap& eventData) override", "void Invoke(VariantMap&)", AS_METHODPR(EventHandler11Impl, Invoke, (VariantMap&), void), AS_CALL_THISCALL));
}

// class EventProfiler | File: ../Core/EventProfiler.h
void CollectMembers_EventProfiler(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Profiler(methods);

    Remove(methods, "void Profiler::BeginBlock(const char* name)");

    // void EventProfiler::BeginBlock(StringHash eventID)
    methods.Push(RegisterObjectMethodArgs("void EventProfiler::BeginBlock(StringHash eventID)", "void BeginBlock(StringHash)", AS_METHODPR(EventProfiler, BeginBlock, (StringHash), void), AS_CALL_THISCALL));
}

// class EventProfilerBlock | File: ../Core/EventProfiler.h
void CollectMembers_EventProfilerBlock(Vector<RegisterObjectMethodArgs>& methods)
{
    // EventProfilerBlock* EventProfilerBlock::GetChild(StringHash eventID)
    // Error: type "EventProfilerBlock" can not automatically bind bacause have @nobind mark
}

// class EventReceiverGroup | File: ../Core/Context.h
void CollectMembers_EventReceiverGroup(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // void EventReceiverGroup::BeginSendEvent()
    methods.Push(RegisterObjectMethodArgs("void EventReceiverGroup::BeginSendEvent()", "void BeginSendEvent()", AS_METHODPR(EventReceiverGroup, BeginSendEvent, (), void), AS_CALL_THISCALL));

    // void EventReceiverGroup::EndSendEvent()
    methods.Push(RegisterObjectMethodArgs("void EventReceiverGroup::EndSendEvent()", "void EndSendEvent()", AS_METHODPR(EventReceiverGroup, EndSendEvent, (), void), AS_CALL_THISCALL));

    // void EventReceiverGroup::Add(Object* object)
    methods.Push(RegisterObjectMethodArgs("void EventReceiverGroup::Add(Object* object)", "void Add(Object@+)", AS_METHODPR(EventReceiverGroup, Add, (Object*), void), AS_CALL_THISCALL));

    // void EventReceiverGroup::Remove(Object* object)
    methods.Push(RegisterObjectMethodArgs("void EventReceiverGroup::Remove(Object* object)", "void Remove(Object@+)", AS_METHODPR(EventReceiverGroup, Remove, (Object*), void), AS_CALL_THISCALL));
}

// class File | File: ../IO/File.h
void CollectMembers_File(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);
    CollectMembers_AbstractFile(methods);

    Remove(methods, "virtual unsigned Deserializer::GetChecksum()");
    Remove(methods, "virtual unsigned Deserializer::Read(void* dest, unsigned size)=0");
    Remove(methods, "virtual unsigned Deserializer::Seek(unsigned position)=0");
    Remove(methods, "virtual unsigned Serializer::Write(const void* data, unsigned size)=0");

    // void* File::GetHandle() const
    // Error: type "void*" can not automatically bind

    // unsigned File::Read(void* dest, unsigned size) override
    // Error: type "void*" can not automatically bind

    // unsigned File::Write(const void* data, unsigned size) override
    // Error: type "const void*" can not automatically bind

    // unsigned File::Seek(unsigned position) override
    methods.Push(RegisterObjectMethodArgs("unsigned File::Seek(unsigned position) override", "uint Seek(uint)", AS_METHODPR(File, Seek, (unsigned), unsigned), AS_CALL_THISCALL));

    // unsigned File::GetChecksum() override
    methods.Push(RegisterObjectMethodArgs("unsigned File::GetChecksum() override", "uint GetChecksum()", AS_METHODPR(File, GetChecksum, (), unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned File::GetChecksum() override", "uint get_checksum()", AS_METHODPR(File, GetChecksum, (), unsigned), AS_CALL_THISCALL));

    // bool File::Open(const String& fileName, FileMode mode=FILE_READ)
    methods.Push(RegisterObjectMethodArgs("bool File::Open(const String& fileName, FileMode mode=FILE_READ)", "bool Open(const String&in, FileMode = FILE_READ)", AS_METHODPR(File, Open, (const String&, FileMode), bool), AS_CALL_THISCALL));

    // bool File::Open(PackageFile* package, const String& fileName)
    methods.Push(RegisterObjectMethodArgs("bool File::Open(PackageFile* package, const String& fileName)", "bool Open(PackageFile@+, const String&in)", AS_METHODPR(File, Open, (PackageFile*, const String&), bool), AS_CALL_THISCALL));

    // void File::Close()
    methods.Push(RegisterObjectMethodArgs("void File::Close()", "void Close()", AS_METHODPR(File, Close, (), void), AS_CALL_THISCALL));

    // void File::Flush()
    methods.Push(RegisterObjectMethodArgs("void File::Flush()", "void Flush()", AS_METHODPR(File, Flush, (), void), AS_CALL_THISCALL));

    // FileMode File::GetMode() const
    methods.Push(RegisterObjectMethodArgs("FileMode File::GetMode() const", "FileMode GetMode() const", AS_METHODPR(File, GetMode, () const, FileMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FileMode File::GetMode() const", "FileMode get_mode() const", AS_METHODPR(File, GetMode, () const, FileMode), AS_CALL_THISCALL));

    // bool File::IsOpen() const
    methods.Push(RegisterObjectMethodArgs("bool File::IsOpen() const", "bool IsOpen() const", AS_METHODPR(File, IsOpen, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool File::IsOpen() const", "bool get_open() const", AS_METHODPR(File, IsOpen, () const, bool), AS_CALL_THISCALL));

    // bool File::IsPackaged() const
    methods.Push(RegisterObjectMethodArgs("bool File::IsPackaged() const", "bool IsPackaged() const", AS_METHODPR(File, IsPackaged, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool File::IsPackaged() const", "bool get_packaged() const", AS_METHODPR(File, IsPackaged, () const, bool), AS_CALL_THISCALL));
}

// void FileSelector::SetFilters(const Vector<String>& filters, unsigned defaultIndex)
// void FileSelector::SetFilters(const Vector<String>& filters, unsigned defaultIndex) | File: ../UI/FileSelector.h
static void FileSelector_SetFilters_VectorString_unsigned(FileSelector* ptr, CScriptArray* filters_conv, unsigned defaultIndex)
{
    Vector<String> filters = ArrayToVector<String>(filters_conv);
    ptr->SetFilters(filters, defaultIndex);
}


// class FileSelector | File: ../UI/FileSelector.h
void CollectMembers_FileSelector(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void FileSelector::SetDefaultStyle(XMLFile* style)
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetDefaultStyle(XMLFile* style)", "void SetDefaultStyle(XMLFile@+)", AS_METHODPR(FileSelector, SetDefaultStyle, (XMLFile*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetDefaultStyle(XMLFile* style)", "void set_defaultStyle(XMLFile@+)", AS_METHODPR(FileSelector, SetDefaultStyle, (XMLFile*), void), AS_CALL_THISCALL));

    // void FileSelector::SetTitle(const String& text)
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetTitle(const String& text)", "void SetTitle(const String&in)", AS_METHODPR(FileSelector, SetTitle, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetTitle(const String& text)", "void set_title(const String&in)", AS_METHODPR(FileSelector, SetTitle, (const String&), void), AS_CALL_THISCALL));

    // void FileSelector::SetButtonTexts(const String& okText, const String& cancelText)
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetButtonTexts(const String& okText, const String& cancelText)", "void SetButtonTexts(const String&in, const String&in)", AS_METHODPR(FileSelector, SetButtonTexts, (const String&, const String&), void), AS_CALL_THISCALL));

    // void FileSelector::SetPath(const String& path)
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetPath(const String& path)", "void SetPath(const String&in)", AS_METHODPR(FileSelector, SetPath, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetPath(const String& path)", "void set_path(const String&in)", AS_METHODPR(FileSelector, SetPath, (const String&), void), AS_CALL_THISCALL));

    // void FileSelector::SetFileName(const String& fileName)
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetFileName(const String& fileName)", "void SetFileName(const String&in)", AS_METHODPR(FileSelector, SetFileName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetFileName(const String& fileName)", "void set_fileName(const String&in)", AS_METHODPR(FileSelector, SetFileName, (const String&), void), AS_CALL_THISCALL));

    // void FileSelector::SetFilters(const Vector<String>& filters, unsigned defaultIndex)
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetFilters(const Vector<String>& filters, unsigned defaultIndex)", "void SetFilters(Array<String>@+, uint)", AS_FUNCTION_OBJFIRST(FileSelector_SetFilters_VectorString_unsigned), AS_CALL_CDECL_OBJFIRST));

    // void FileSelector::SetDirectoryMode(bool enable)
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetDirectoryMode(bool enable)", "void SetDirectoryMode(bool)", AS_METHODPR(FileSelector, SetDirectoryMode, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void FileSelector::SetDirectoryMode(bool enable)", "void set_directoryMode(bool)", AS_METHODPR(FileSelector, SetDirectoryMode, (bool), void), AS_CALL_THISCALL));

    // void FileSelector::UpdateElements()
    methods.Push(RegisterObjectMethodArgs("void FileSelector::UpdateElements()", "void UpdateElements()", AS_METHODPR(FileSelector, UpdateElements, (), void), AS_CALL_THISCALL));

    // XMLFile* FileSelector::GetDefaultStyle() const
    methods.Push(RegisterObjectMethodArgs("XMLFile* FileSelector::GetDefaultStyle() const", "XMLFile@+ GetDefaultStyle() const", AS_METHODPR(FileSelector, GetDefaultStyle, () const, XMLFile*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("XMLFile* FileSelector::GetDefaultStyle() const", "XMLFile@+ get_defaultStyle() const", AS_METHODPR(FileSelector, GetDefaultStyle, () const, XMLFile*), AS_CALL_THISCALL));

    // Window* FileSelector::GetWindow() const
    methods.Push(RegisterObjectMethodArgs("Window* FileSelector::GetWindow() const", "Window@+ GetWindow() const", AS_METHODPR(FileSelector, GetWindow, () const, Window*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Window* FileSelector::GetWindow() const", "Window@+ get_window() const", AS_METHODPR(FileSelector, GetWindow, () const, Window*), AS_CALL_THISCALL));

    // Text* FileSelector::GetTitleText() const
    methods.Push(RegisterObjectMethodArgs("Text* FileSelector::GetTitleText() const", "Text@+ GetTitleText() const", AS_METHODPR(FileSelector, GetTitleText, () const, Text*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Text* FileSelector::GetTitleText() const", "Text@+ get_titleText() const", AS_METHODPR(FileSelector, GetTitleText, () const, Text*), AS_CALL_THISCALL));

    // ListView* FileSelector::GetFileList() const
    methods.Push(RegisterObjectMethodArgs("ListView* FileSelector::GetFileList() const", "ListView@+ GetFileList() const", AS_METHODPR(FileSelector, GetFileList, () const, ListView*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ListView* FileSelector::GetFileList() const", "ListView@+ get_fileList() const", AS_METHODPR(FileSelector, GetFileList, () const, ListView*), AS_CALL_THISCALL));

    // LineEdit* FileSelector::GetPathEdit() const
    methods.Push(RegisterObjectMethodArgs("LineEdit* FileSelector::GetPathEdit() const", "LineEdit@+ GetPathEdit() const", AS_METHODPR(FileSelector, GetPathEdit, () const, LineEdit*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("LineEdit* FileSelector::GetPathEdit() const", "LineEdit@+ get_pathEdit() const", AS_METHODPR(FileSelector, GetPathEdit, () const, LineEdit*), AS_CALL_THISCALL));

    // LineEdit* FileSelector::GetFileNameEdit() const
    methods.Push(RegisterObjectMethodArgs("LineEdit* FileSelector::GetFileNameEdit() const", "LineEdit@+ GetFileNameEdit() const", AS_METHODPR(FileSelector, GetFileNameEdit, () const, LineEdit*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("LineEdit* FileSelector::GetFileNameEdit() const", "LineEdit@+ get_fileNameEdit() const", AS_METHODPR(FileSelector, GetFileNameEdit, () const, LineEdit*), AS_CALL_THISCALL));

    // DropDownList* FileSelector::GetFilterList() const
    methods.Push(RegisterObjectMethodArgs("DropDownList* FileSelector::GetFilterList() const", "DropDownList@+ GetFilterList() const", AS_METHODPR(FileSelector, GetFilterList, () const, DropDownList*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("DropDownList* FileSelector::GetFilterList() const", "DropDownList@+ get_filterList() const", AS_METHODPR(FileSelector, GetFilterList, () const, DropDownList*), AS_CALL_THISCALL));

    // Button* FileSelector::GetOKButton() const
    methods.Push(RegisterObjectMethodArgs("Button* FileSelector::GetOKButton() const", "Button@+ GetOKButton() const", AS_METHODPR(FileSelector, GetOKButton, () const, Button*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Button* FileSelector::GetOKButton() const", "Button@+ get_okButton() const", AS_METHODPR(FileSelector, GetOKButton, () const, Button*), AS_CALL_THISCALL));

    // Button* FileSelector::GetCancelButton() const
    methods.Push(RegisterObjectMethodArgs("Button* FileSelector::GetCancelButton() const", "Button@+ GetCancelButton() const", AS_METHODPR(FileSelector, GetCancelButton, () const, Button*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Button* FileSelector::GetCancelButton() const", "Button@+ get_cancelButton() const", AS_METHODPR(FileSelector, GetCancelButton, () const, Button*), AS_CALL_THISCALL));

    // Button* FileSelector::GetCloseButton() const
    methods.Push(RegisterObjectMethodArgs("Button* FileSelector::GetCloseButton() const", "Button@+ GetCloseButton() const", AS_METHODPR(FileSelector, GetCloseButton, () const, Button*), AS_CALL_THISCALL));

    // const String& FileSelector::GetTitle() const
    methods.Push(RegisterObjectMethodArgs("const String& FileSelector::GetTitle() const", "const String& GetTitle() const", AS_METHODPR(FileSelector, GetTitle, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& FileSelector::GetTitle() const", "const String& get_title() const", AS_METHODPR(FileSelector, GetTitle, () const, const String&), AS_CALL_THISCALL));

    // const String& FileSelector::GetPath() const
    methods.Push(RegisterObjectMethodArgs("const String& FileSelector::GetPath() const", "const String& GetPath() const", AS_METHODPR(FileSelector, GetPath, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& FileSelector::GetPath() const", "const String& get_path() const", AS_METHODPR(FileSelector, GetPath, () const, const String&), AS_CALL_THISCALL));

    // const String& FileSelector::GetFileName() const
    methods.Push(RegisterObjectMethodArgs("const String& FileSelector::GetFileName() const", "const String& GetFileName() const", AS_METHODPR(FileSelector, GetFileName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& FileSelector::GetFileName() const", "const String& get_fileName() const", AS_METHODPR(FileSelector, GetFileName, () const, const String&), AS_CALL_THISCALL));

    // const String& FileSelector::GetFilter() const
    methods.Push(RegisterObjectMethodArgs("const String& FileSelector::GetFilter() const", "const String& GetFilter() const", AS_METHODPR(FileSelector, GetFilter, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& FileSelector::GetFilter() const", "const String& get_filter() const", AS_METHODPR(FileSelector, GetFilter, () const, const String&), AS_CALL_THISCALL));

    // unsigned FileSelector::GetFilterIndex() const
    methods.Push(RegisterObjectMethodArgs("unsigned FileSelector::GetFilterIndex() const", "uint GetFilterIndex() const", AS_METHODPR(FileSelector, GetFilterIndex, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned FileSelector::GetFilterIndex() const", "uint get_filterIndex() const", AS_METHODPR(FileSelector, GetFilterIndex, () const, unsigned), AS_CALL_THISCALL));

    // bool FileSelector::GetDirectoryMode() const
    methods.Push(RegisterObjectMethodArgs("bool FileSelector::GetDirectoryMode() const", "bool GetDirectoryMode() const", AS_METHODPR(FileSelector, GetDirectoryMode, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool FileSelector::GetDirectoryMode() const", "bool get_directoryMode() const", AS_METHODPR(FileSelector, GetDirectoryMode, () const, bool), AS_CALL_THISCALL));
}

// struct FileSelectorEntry | File: ../UI/FileSelector.h
void CollectMembers_FileSelectorEntry(Vector<RegisterObjectMethodArgs>& methods)
{
}

// int FileSystem::SystemRun(const String& fileName, const Vector<String>& arguments)
// int FileSystem::SystemRun(const String& fileName, const Vector<String>& arguments) | File: ../IO/FileSystem.h
static int FileSystem_SystemRun_String_VectorString(FileSystem* ptr, const String& fileName, CScriptArray* arguments_conv)
{
    Vector<String> arguments = ArrayToVector<String>(arguments_conv);
    int result = ptr->SystemRun(fileName, arguments);
    return result;
}


// unsigned FileSystem::SystemRunAsync(const String& fileName, const Vector<String>& arguments)
// unsigned FileSystem::SystemRunAsync(const String& fileName, const Vector<String>& arguments) | File: ../IO/FileSystem.h
static unsigned FileSystem_SystemRunAsync_String_VectorString(FileSystem* ptr, const String& fileName, CScriptArray* arguments_conv)
{
    Vector<String> arguments = ArrayToVector<String>(arguments_conv);
    unsigned result = ptr->SystemRunAsync(fileName, arguments);
    return result;
}


// class FileSystem | File: ../IO/FileSystem.h
void CollectMembers_FileSystem(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void FileSystem::ScanDir(Vector<String>& result, const String& pathName, const String& filter, unsigned flags, bool recursive) const
    // Error: type "Vector<String>&" can not automatically bind

    // bool FileSystem::SetCurrentDir(const String& pathName)
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::SetCurrentDir(const String& pathName)", "bool SetCurrentDir(const String&in)", AS_METHODPR(FileSystem, SetCurrentDir, (const String&), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::SetCurrentDir(const String& pathName)", "bool set_currentDir(const String&in)", AS_METHODPR(FileSystem, SetCurrentDir, (const String&), bool), AS_CALL_THISCALL));

    // bool FileSystem::CreateDir(const String& pathName)
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::CreateDir(const String& pathName)", "bool CreateDir(const String&in)", AS_METHODPR(FileSystem, CreateDir, (const String&), bool), AS_CALL_THISCALL));

    // void FileSystem::SetExecuteConsoleCommands(bool enable)
    methods.Push(RegisterObjectMethodArgs("void FileSystem::SetExecuteConsoleCommands(bool enable)", "void SetExecuteConsoleCommands(bool)", AS_METHODPR(FileSystem, SetExecuteConsoleCommands, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void FileSystem::SetExecuteConsoleCommands(bool enable)", "void set_executeConsoleCommands(bool)", AS_METHODPR(FileSystem, SetExecuteConsoleCommands, (bool), void), AS_CALL_THISCALL));

    // int FileSystem::SystemCommand(const String& commandLine, bool redirectStdOutToLog=false)
    methods.Push(RegisterObjectMethodArgs("int FileSystem::SystemCommand(const String& commandLine, bool redirectStdOutToLog=false)", "int SystemCommand(const String&in, bool = false)", AS_METHODPR(FileSystem, SystemCommand, (const String&, bool), int), AS_CALL_THISCALL));

    // int FileSystem::SystemRun(const String& fileName, const Vector<String>& arguments)
    methods.Push(RegisterObjectMethodArgs("int FileSystem::SystemRun(const String& fileName, const Vector<String>& arguments)", "int SystemRun(const String&in, Array<String>@+)", AS_FUNCTION_OBJFIRST(FileSystem_SystemRun_String_VectorString), AS_CALL_CDECL_OBJFIRST));

    // unsigned FileSystem::SystemCommandAsync(const String& commandLine)
    methods.Push(RegisterObjectMethodArgs("unsigned FileSystem::SystemCommandAsync(const String& commandLine)", "uint SystemCommandAsync(const String&in)", AS_METHODPR(FileSystem, SystemCommandAsync, (const String&), unsigned), AS_CALL_THISCALL));

    // unsigned FileSystem::SystemRunAsync(const String& fileName, const Vector<String>& arguments)
    methods.Push(RegisterObjectMethodArgs("unsigned FileSystem::SystemRunAsync(const String& fileName, const Vector<String>& arguments)", "uint SystemRunAsync(const String&in, Array<String>@+)", AS_FUNCTION_OBJFIRST(FileSystem_SystemRunAsync_String_VectorString), AS_CALL_CDECL_OBJFIRST));

    // bool FileSystem::SystemOpen(const String& fileName, const String& mode=String::EMPTY)
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::SystemOpen(const String& fileName, const String& mode=String::EMPTY)", "bool SystemOpen(const String&in, const String&in = String::EMPTY)", AS_METHODPR(FileSystem, SystemOpen, (const String&, const String&), bool), AS_CALL_THISCALL));

    // bool FileSystem::Copy(const String& srcFileName, const String& destFileName)
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::Copy(const String& srcFileName, const String& destFileName)", "bool Copy(const String&in, const String&in)", AS_METHODPR(FileSystem, Copy, (const String&, const String&), bool), AS_CALL_THISCALL));

    // bool FileSystem::Rename(const String& srcFileName, const String& destFileName)
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::Rename(const String& srcFileName, const String& destFileName)", "bool Rename(const String&in, const String&in)", AS_METHODPR(FileSystem, Rename, (const String&, const String&), bool), AS_CALL_THISCALL));

    // bool FileSystem::Delete(const String& fileName)
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::Delete(const String& fileName)", "bool Delete(const String&in)", AS_METHODPR(FileSystem, Delete, (const String&), bool), AS_CALL_THISCALL));

    // void FileSystem::RegisterPath(const String& pathName)
    methods.Push(RegisterObjectMethodArgs("void FileSystem::RegisterPath(const String& pathName)", "void RegisterPath(const String&in)", AS_METHODPR(FileSystem, RegisterPath, (const String&), void), AS_CALL_THISCALL));

    // bool FileSystem::SetLastModifiedTime(const String& fileName, unsigned newTime)
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::SetLastModifiedTime(const String& fileName, unsigned newTime)", "bool SetLastModifiedTime(const String&in, uint)", AS_METHODPR(FileSystem, SetLastModifiedTime, (const String&, unsigned), bool), AS_CALL_THISCALL));

    // String FileSystem::GetCurrentDir() const
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetCurrentDir() const", "String GetCurrentDir() const", AS_METHODPR(FileSystem, GetCurrentDir, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetCurrentDir() const", "String get_currentDir() const", AS_METHODPR(FileSystem, GetCurrentDir, () const, String), AS_CALL_THISCALL));

    // bool FileSystem::GetExecuteConsoleCommands() const
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::GetExecuteConsoleCommands() const", "bool GetExecuteConsoleCommands() const", AS_METHODPR(FileSystem, GetExecuteConsoleCommands, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::GetExecuteConsoleCommands() const", "bool get_executeConsoleCommands() const", AS_METHODPR(FileSystem, GetExecuteConsoleCommands, () const, bool), AS_CALL_THISCALL));

    // bool FileSystem::HasRegisteredPaths() const
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::HasRegisteredPaths() const", "bool HasRegisteredPaths() const", AS_METHODPR(FileSystem, HasRegisteredPaths, () const, bool), AS_CALL_THISCALL));

    // bool FileSystem::CheckAccess(const String& pathName) const
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::CheckAccess(const String& pathName) const", "bool CheckAccess(const String&in) const", AS_METHODPR(FileSystem, CheckAccess, (const String&) const, bool), AS_CALL_THISCALL));

    // unsigned FileSystem::GetLastModifiedTime(const String& fileName) const
    methods.Push(RegisterObjectMethodArgs("unsigned FileSystem::GetLastModifiedTime(const String& fileName) const", "uint GetLastModifiedTime(const String&in) const", AS_METHODPR(FileSystem, GetLastModifiedTime, (const String&) const, unsigned), AS_CALL_THISCALL));

    // bool FileSystem::FileExists(const String& fileName) const
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::FileExists(const String& fileName) const", "bool FileExists(const String&in) const", AS_METHODPR(FileSystem, FileExists, (const String&) const, bool), AS_CALL_THISCALL));

    // bool FileSystem::DirExists(const String& pathName) const
    methods.Push(RegisterObjectMethodArgs("bool FileSystem::DirExists(const String& pathName) const", "bool DirExists(const String&in) const", AS_METHODPR(FileSystem, DirExists, (const String&) const, bool), AS_CALL_THISCALL));

    // String FileSystem::GetProgramDir() const
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetProgramDir() const", "String GetProgramDir() const", AS_METHODPR(FileSystem, GetProgramDir, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetProgramDir() const", "String get_programDir() const", AS_METHODPR(FileSystem, GetProgramDir, () const, String), AS_CALL_THISCALL));

    // String FileSystem::GetUserDocumentsDir() const
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetUserDocumentsDir() const", "String GetUserDocumentsDir() const", AS_METHODPR(FileSystem, GetUserDocumentsDir, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetUserDocumentsDir() const", "String get_userDocumentsDir() const", AS_METHODPR(FileSystem, GetUserDocumentsDir, () const, String), AS_CALL_THISCALL));

    // String FileSystem::GetAppPreferencesDir(const String& org, const String& app) const
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetAppPreferencesDir(const String& org, const String& app) const", "String GetAppPreferencesDir(const String&in, const String&in) const", AS_METHODPR(FileSystem, GetAppPreferencesDir, (const String&, const String&) const, String), AS_CALL_THISCALL));

    // String FileSystem::GetTemporaryDir() const
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetTemporaryDir() const", "String GetTemporaryDir() const", AS_METHODPR(FileSystem, GetTemporaryDir, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String FileSystem::GetTemporaryDir() const", "String get_temporaryDir() const", AS_METHODPR(FileSystem, GetTemporaryDir, () const, String), AS_CALL_THISCALL));
}

// class FileWatcher | File: ../IO/FileWatcher.h
void CollectMembers_FileWatcher(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);
    CollectMembers_Thread(methods);

    Remove(methods, "virtual void Thread::ThreadFunction()=0");

    // void FileWatcher::ThreadFunction() override
    methods.Push(RegisterObjectMethodArgs("void FileWatcher::ThreadFunction() override", "void ThreadFunction()", AS_METHODPR(FileWatcher, ThreadFunction, (), void), AS_CALL_THISCALL));

    // bool FileWatcher::StartWatching(const String& pathName, bool watchSubDirs)
    methods.Push(RegisterObjectMethodArgs("bool FileWatcher::StartWatching(const String& pathName, bool watchSubDirs)", "bool StartWatching(const String&in, bool)", AS_METHODPR(FileWatcher, StartWatching, (const String&, bool), bool), AS_CALL_THISCALL));

    // void FileWatcher::StopWatching()
    methods.Push(RegisterObjectMethodArgs("void FileWatcher::StopWatching()", "void StopWatching()", AS_METHODPR(FileWatcher, StopWatching, (), void), AS_CALL_THISCALL));

    // void FileWatcher::SetDelay(float interval)
    methods.Push(RegisterObjectMethodArgs("void FileWatcher::SetDelay(float interval)", "void SetDelay(float)", AS_METHODPR(FileWatcher, SetDelay, (float), void), AS_CALL_THISCALL));

    // void FileWatcher::AddChange(const String& fileName)
    methods.Push(RegisterObjectMethodArgs("void FileWatcher::AddChange(const String& fileName)", "void AddChange(const String&in)", AS_METHODPR(FileWatcher, AddChange, (const String&), void), AS_CALL_THISCALL));

    // bool FileWatcher::GetNextChange(String& dest)
    methods.Push(RegisterObjectMethodArgs("bool FileWatcher::GetNextChange(String& dest)", "bool GetNextChange(String&)", AS_METHODPR(FileWatcher, GetNextChange, (String&), bool), AS_CALL_THISCALL));

    // const String& FileWatcher::GetPath() const
    methods.Push(RegisterObjectMethodArgs("const String& FileWatcher::GetPath() const", "const String& GetPath() const", AS_METHODPR(FileWatcher, GetPath, () const, const String&), AS_CALL_THISCALL));

    // float FileWatcher::GetDelay() const
    methods.Push(RegisterObjectMethodArgs("float FileWatcher::GetDelay() const", "float GetDelay() const", AS_METHODPR(FileWatcher, GetDelay, () const, float), AS_CALL_THISCALL));
}

// struct FocusParameters | File: ../Graphics/Light.h
void CollectMembers_FocusParameters(Vector<RegisterObjectMethodArgs>& methods)
{
    // void FocusParameters::Validate()
    methods.Push(RegisterObjectMethodArgs("void FocusParameters::Validate()", "void Validate()", AS_METHODPR(FocusParameters, Validate, (), void), AS_CALL_THISCALL));
}

// class Font | File: ../UI/Font.h
void CollectMembers_Font(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");

    // bool Font::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Font::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Font, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Font::SaveXML(Serializer& dest, int pointSize, bool usedGlyphs=false, const String& indentation=\"\t\")
    methods.Push(RegisterObjectMethodArgs("bool Font::SaveXML(Serializer& dest, int pointSize, bool usedGlyphs=false, const String& indentation=\"\t\")", "bool SaveXML(Serializer&, int, bool = false, const String&in = \"\t\")", AS_METHODPR(Font, SaveXML, (Serializer&, int, bool, const String&), bool), AS_CALL_THISCALL));

    // void Font::SetAbsoluteGlyphOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Font::SetAbsoluteGlyphOffset(const IntVector2& offset)", "void SetAbsoluteGlyphOffset(const IntVector2&in)", AS_METHODPR(Font, SetAbsoluteGlyphOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Font::SetAbsoluteGlyphOffset(const IntVector2& offset)", "void set_absoluteGlyphOffset(const IntVector2&in)", AS_METHODPR(Font, SetAbsoluteGlyphOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Font::SetScaledGlyphOffset(const Vector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Font::SetScaledGlyphOffset(const Vector2& offset)", "void SetScaledGlyphOffset(const Vector2&in)", AS_METHODPR(Font, SetScaledGlyphOffset, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Font::SetScaledGlyphOffset(const Vector2& offset)", "void set_scaledGlyphOffset(const Vector2&in)", AS_METHODPR(Font, SetScaledGlyphOffset, (const Vector2&), void), AS_CALL_THISCALL));

    // FontFace* Font::GetFace(float pointSize)
    methods.Push(RegisterObjectMethodArgs("FontFace* Font::GetFace(float pointSize)", "FontFace@+ GetFace(float)", AS_METHODPR(Font, GetFace, (float), FontFace*), AS_CALL_THISCALL));

    // FontType Font::GetFontType() const
    methods.Push(RegisterObjectMethodArgs("FontType Font::GetFontType() const", "FontType GetFontType() const", AS_METHODPR(Font, GetFontType, () const, FontType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FontType Font::GetFontType() const", "FontType get_fontType() const", AS_METHODPR(Font, GetFontType, () const, FontType), AS_CALL_THISCALL));

    // bool Font::IsSDFFont() const
    methods.Push(RegisterObjectMethodArgs("bool Font::IsSDFFont() const", "bool IsSDFFont() const", AS_METHODPR(Font, IsSDFFont, () const, bool), AS_CALL_THISCALL));

    // const IntVector2& Font::GetAbsoluteGlyphOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Font::GetAbsoluteGlyphOffset() const", "const IntVector2& GetAbsoluteGlyphOffset() const", AS_METHODPR(Font, GetAbsoluteGlyphOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Font::GetAbsoluteGlyphOffset() const", "const IntVector2& get_absoluteGlyphOffset() const", AS_METHODPR(Font, GetAbsoluteGlyphOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // const Vector2& Font::GetScaledGlyphOffset() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& Font::GetScaledGlyphOffset() const", "const Vector2& GetScaledGlyphOffset() const", AS_METHODPR(Font, GetScaledGlyphOffset, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& Font::GetScaledGlyphOffset() const", "const Vector2& get_scaledGlyphOffset() const", AS_METHODPR(Font, GetScaledGlyphOffset, () const, const Vector2&), AS_CALL_THISCALL));

    // IntVector2 Font::GetTotalGlyphOffset(float pointSize) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Font::GetTotalGlyphOffset(float pointSize) const", "IntVector2 GetTotalGlyphOffset(float) const", AS_METHODPR(Font, GetTotalGlyphOffset, (float) const, IntVector2), AS_CALL_THISCALL));

    // void Font::ReleaseFaces()
    methods.Push(RegisterObjectMethodArgs("void Font::ReleaseFaces()", "void ReleaseFaces()", AS_METHODPR(Font, ReleaseFaces, (), void), AS_CALL_THISCALL));
}

// const Vector<SharedPtr<Texture2D>>& FontFace::GetTextures() const
// const Vector<SharedPtr<Texture2D>>& FontFace::GetTextures() const | File: ../UI/FontFace.h
static CScriptArray* FontFace_GetTextures_void(FontFace* ptr)
{
    const Vector<SharedPtr<Texture2D>>& result = ptr->GetTextures();
    return VectorToHandleArray(result, "Array<Texture2D@>");
}


// class FontFace | File: ../UI/FontFace.h
void CollectMembers_FontFace(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // virtual const FontGlyph* FontFace::GetGlyph(unsigned c)
    // Error: type "const FontGlyph*" can not automatically bind

    // virtual bool FontFace::Load(const unsigned char* fontData, unsigned fontDataSize, float pointSize)=0
    // Error: type "const unsigned char*" can not automatically bind

    // virtual bool FontFace::HasMutableGlyphs() const
    methods.Push(RegisterObjectMethodArgs("virtual bool FontFace::HasMutableGlyphs() const", "bool HasMutableGlyphs() const", AS_METHODPR(FontFace, HasMutableGlyphs, () const, bool), AS_CALL_THISCALL));

    // float FontFace::GetKerning(unsigned c, unsigned d) const
    methods.Push(RegisterObjectMethodArgs("float FontFace::GetKerning(unsigned c, unsigned d) const", "float GetKerning(uint, uint) const", AS_METHODPR(FontFace, GetKerning, (unsigned, unsigned) const, float), AS_CALL_THISCALL));

    // bool FontFace::IsDataLost() const
    methods.Push(RegisterObjectMethodArgs("bool FontFace::IsDataLost() const", "bool IsDataLost() const", AS_METHODPR(FontFace, IsDataLost, () const, bool), AS_CALL_THISCALL));

    // float FontFace::GetPointSize() const
    methods.Push(RegisterObjectMethodArgs("float FontFace::GetPointSize() const", "float GetPointSize() const", AS_METHODPR(FontFace, GetPointSize, () const, float), AS_CALL_THISCALL));

    // float FontFace::GetRowHeight() const
    methods.Push(RegisterObjectMethodArgs("float FontFace::GetRowHeight() const", "float GetRowHeight() const", AS_METHODPR(FontFace, GetRowHeight, () const, float), AS_CALL_THISCALL));

    // const Vector<SharedPtr<Texture2D>>& FontFace::GetTextures() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<Texture2D>>& FontFace::GetTextures() const", "Array<Texture2D@>@ GetTextures() const", AS_FUNCTION_OBJFIRST(FontFace_GetTextures_void), AS_CALL_CDECL_OBJFIRST));
}

// class FontFaceBitmap | File: ../UI/FontFaceBitmap.h
void CollectMembers_FontFaceBitmap(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_FontFace(methods);

    Remove(methods, "virtual bool FontFace::Load(const unsigned char* fontData, unsigned fontDataSize, float pointSize)=0");

    // bool FontFaceBitmap::Load(const unsigned char* fontData, unsigned fontDataSize, float pointSize) override
    // Error: type "const unsigned char*" can not automatically bind

    // bool FontFaceBitmap::Load(FontFace* fontFace, bool usedGlyphs)
    methods.Push(RegisterObjectMethodArgs("bool FontFaceBitmap::Load(FontFace* fontFace, bool usedGlyphs)", "bool Load(FontFace@+, bool)", AS_METHODPR(FontFaceBitmap, Load, (FontFace*, bool), bool), AS_CALL_THISCALL));

    // bool FontFaceBitmap::Save(Serializer& dest, int pointSize, const String& indentation=\"\t\")
    methods.Push(RegisterObjectMethodArgs("bool FontFaceBitmap::Save(Serializer& dest, int pointSize, const String& indentation=\"\t\")", "bool Save(Serializer&, int, const String&in = \"\t\")", AS_METHODPR(FontFaceBitmap, Save, (Serializer&, int, const String&), bool), AS_CALL_THISCALL));
}

// class FontFaceFreeType | File: ../UI/FontFaceFreeType.h
void CollectMembers_FontFaceFreeType(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_FontFace(methods);

    Remove(methods, "virtual bool FontFace::HasMutableGlyphs() const");
    Remove(methods, "virtual bool FontFace::Load(const unsigned char* fontData, unsigned fontDataSize, float pointSize)=0");
    Remove(methods, "virtual const FontGlyph* FontFace::GetGlyph(unsigned c)");

    // const FontGlyph* FontFaceFreeType::GetGlyph(unsigned c) override
    // Error: type "const FontGlyph*" can not automatically bind

    // bool FontFaceFreeType::Load(const unsigned char* fontData, unsigned fontDataSize, float pointSize) override
    // Error: type "const unsigned char*" can not automatically bind

    // bool FontFaceFreeType::HasMutableGlyphs() const override
    methods.Push(RegisterObjectMethodArgs("bool FontFaceFreeType::HasMutableGlyphs() const override", "bool HasMutableGlyphs() const", AS_METHODPR(FontFaceFreeType, HasMutableGlyphs, () const, bool), AS_CALL_THISCALL));
}

// struct FontGlyph | File: ../UI/FontFace.h
void CollectMembers_FontGlyph(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct FrameInfo | File: ../Graphics/Drawable.h
void CollectMembers_FrameInfo(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Frustum | File: ../Math/Frustum.h
void CollectMembers_Frustum(Vector<RegisterObjectMethodArgs>& methods)
{
    // Frustum& Frustum::operator=(const Frustum& rhs) noexcept
    methods.Push(RegisterObjectMethodArgs("Frustum& Frustum::operator=(const Frustum& rhs) noexcept", "Frustum& opAssign(const Frustum&in)", AS_METHODPR(Frustum, operator=, (const Frustum&), Frustum&), AS_CALL_THISCALL));

    // void Frustum::Define(float fov, float aspectRatio, float zoom, float nearZ, float farZ, const Matrix3x4& transform=Matrix3x4::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void Frustum::Define(float fov, float aspectRatio, float zoom, float nearZ, float farZ, const Matrix3x4& transform=Matrix3x4::IDENTITY)", "void Define(float, float, float, float, float, const Matrix3x4&in = Matrix3x4::IDENTITY)", AS_METHODPR(Frustum, Define, (float, float, float, float, float, const Matrix3x4&), void), AS_CALL_THISCALL));

    // void Frustum::Define(const Vector3& near, const Vector3& far, const Matrix3x4& transform=Matrix3x4::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void Frustum::Define(const Vector3& near, const Vector3& far, const Matrix3x4& transform=Matrix3x4::IDENTITY)", "void Define(const Vector3&in, const Vector3&in, const Matrix3x4&in = Matrix3x4::IDENTITY)", AS_METHODPR(Frustum, Define, (const Vector3&, const Vector3&, const Matrix3x4&), void), AS_CALL_THISCALL));

    // void Frustum::Define(const BoundingBox& box, const Matrix3x4& transform=Matrix3x4::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void Frustum::Define(const BoundingBox& box, const Matrix3x4& transform=Matrix3x4::IDENTITY)", "void Define(const BoundingBox&in, const Matrix3x4&in = Matrix3x4::IDENTITY)", AS_METHODPR(Frustum, Define, (const BoundingBox&, const Matrix3x4&), void), AS_CALL_THISCALL));

    // void Frustum::Define(const Matrix4& projection)
    methods.Push(RegisterObjectMethodArgs("void Frustum::Define(const Matrix4& projection)", "void Define(const Matrix4&in)", AS_METHODPR(Frustum, Define, (const Matrix4&), void), AS_CALL_THISCALL));

    // void Frustum::DefineOrtho(float orthoSize, float aspectRatio, float zoom, float nearZ, float farZ, const Matrix3x4& transform=Matrix3x4::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void Frustum::DefineOrtho(float orthoSize, float aspectRatio, float zoom, float nearZ, float farZ, const Matrix3x4& transform=Matrix3x4::IDENTITY)", "void DefineOrtho(float, float, float, float, float, const Matrix3x4&in = Matrix3x4::IDENTITY)", AS_METHODPR(Frustum, DefineOrtho, (float, float, float, float, float, const Matrix3x4&), void), AS_CALL_THISCALL));

    // void Frustum::DefineSplit(const Matrix4& projection, float near, float far)
    methods.Push(RegisterObjectMethodArgs("void Frustum::DefineSplit(const Matrix4& projection, float near, float far)", "void DefineSplit(const Matrix4&in, float, float)", AS_METHODPR(Frustum, DefineSplit, (const Matrix4&, float, float), void), AS_CALL_THISCALL));

    // void Frustum::Transform(const Matrix3& transform)
    methods.Push(RegisterObjectMethodArgs("void Frustum::Transform(const Matrix3& transform)", "void Transform(const Matrix3&in)", AS_METHODPR(Frustum, Transform, (const Matrix3&), void), AS_CALL_THISCALL));

    // void Frustum::Transform(const Matrix3x4& transform)
    methods.Push(RegisterObjectMethodArgs("void Frustum::Transform(const Matrix3x4& transform)", "void Transform(const Matrix3x4&in)", AS_METHODPR(Frustum, Transform, (const Matrix3x4&), void), AS_CALL_THISCALL));

    // Intersection Frustum::IsInside(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("Intersection Frustum::IsInside(const Vector3& point) const", "Intersection IsInside(const Vector3&in) const", AS_METHODPR(Frustum, IsInside, (const Vector3&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Frustum::IsInside(const Sphere& sphere) const
    methods.Push(RegisterObjectMethodArgs("Intersection Frustum::IsInside(const Sphere& sphere) const", "Intersection IsInside(const Sphere&in) const", AS_METHODPR(Frustum, IsInside, (const Sphere&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Frustum::IsInsideFast(const Sphere& sphere) const
    methods.Push(RegisterObjectMethodArgs("Intersection Frustum::IsInsideFast(const Sphere& sphere) const", "Intersection IsInsideFast(const Sphere&in) const", AS_METHODPR(Frustum, IsInsideFast, (const Sphere&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Frustum::IsInside(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("Intersection Frustum::IsInside(const BoundingBox& box) const", "Intersection IsInside(const BoundingBox&in) const", AS_METHODPR(Frustum, IsInside, (const BoundingBox&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Frustum::IsInsideFast(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("Intersection Frustum::IsInsideFast(const BoundingBox& box) const", "Intersection IsInsideFast(const BoundingBox&in) const", AS_METHODPR(Frustum, IsInsideFast, (const BoundingBox&) const, Intersection), AS_CALL_THISCALL));

    // float Frustum::Distance(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("float Frustum::Distance(const Vector3& point) const", "float Distance(const Vector3&in) const", AS_METHODPR(Frustum, Distance, (const Vector3&) const, float), AS_CALL_THISCALL));

    // Frustum Frustum::Transformed(const Matrix3& transform) const
    methods.Push(RegisterObjectMethodArgs("Frustum Frustum::Transformed(const Matrix3& transform) const", "Frustum Transformed(const Matrix3&in) const", AS_METHODPR(Frustum, Transformed, (const Matrix3&) const, Frustum), AS_CALL_THISCALL));

    // Frustum Frustum::Transformed(const Matrix3x4& transform) const
    methods.Push(RegisterObjectMethodArgs("Frustum Frustum::Transformed(const Matrix3x4& transform) const", "Frustum Transformed(const Matrix3x4&in) const", AS_METHODPR(Frustum, Transformed, (const Matrix3x4&) const, Frustum), AS_CALL_THISCALL));

    // Rect Frustum::Projected(const Matrix4& projection) const
    methods.Push(RegisterObjectMethodArgs("Rect Frustum::Projected(const Matrix4& projection) const", "Rect Projected(const Matrix4&in) const", AS_METHODPR(Frustum, Projected, (const Matrix4&) const, Rect), AS_CALL_THISCALL));

    // void Frustum::UpdatePlanes()
    methods.Push(RegisterObjectMethodArgs("void Frustum::UpdatePlanes()", "void UpdatePlanes()", AS_METHODPR(Frustum, UpdatePlanes, (), void), AS_CALL_THISCALL));
}

// class FrustumOctreeQuery | File: ../Graphics/OctreeQuery.h
void CollectMembers_FrustumOctreeQuery(Vector<RegisterObjectMethodArgs>& methods)
{
    // void FrustumOctreeQuery::TestDrawables(Drawable** start, Drawable** end, bool inside) override
    // Error: type "Drawable**" can not automatically bind

    // Intersection FrustumOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override
    methods.Push(RegisterObjectMethodArgs("Intersection FrustumOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override", "Intersection TestOctant(const BoundingBox&in, bool)", AS_METHODPR(FrustumOctreeQuery, TestOctant, (const BoundingBox&, bool), Intersection), AS_CALL_THISCALL));
}

// class GPUObject | File: ../Graphics/GPUObject.h
void CollectMembers_GPUObject(Vector<RegisterObjectMethodArgs>& methods)
{
    // void* GPUObject::GetGPUObject() const
    // Error: type "void*" can not automatically bind

    // virtual void GPUObject::OnDeviceLost()
    methods.Push(RegisterObjectMethodArgs("virtual void GPUObject::OnDeviceLost()", "void OnDeviceLost()", AS_METHODPR(GPUObject, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // virtual void GPUObject::OnDeviceReset()
    methods.Push(RegisterObjectMethodArgs("virtual void GPUObject::OnDeviceReset()", "void OnDeviceReset()", AS_METHODPR(GPUObject, OnDeviceReset, (), void), AS_CALL_THISCALL));

    // virtual void GPUObject::Release()
    methods.Push(RegisterObjectMethodArgs("virtual void GPUObject::Release()", "void Release()", AS_METHODPR(GPUObject, Release, (), void), AS_CALL_THISCALL));

    // void GPUObject::ClearDataLost()
    methods.Push(RegisterObjectMethodArgs("void GPUObject::ClearDataLost()", "void ClearDataLost()", AS_METHODPR(GPUObject, ClearDataLost, (), void), AS_CALL_THISCALL));

    // Graphics* GPUObject::GetGraphics() const
    methods.Push(RegisterObjectMethodArgs("Graphics* GPUObject::GetGraphics() const", "Graphics@+ GetGraphics() const", AS_METHODPR(GPUObject, GetGraphics, () const, Graphics*), AS_CALL_THISCALL));

    // unsigned GPUObject::GetGPUObjectName() const
    methods.Push(RegisterObjectMethodArgs("unsigned GPUObject::GetGPUObjectName() const", "uint GetGPUObjectName() const", AS_METHODPR(GPUObject, GetGPUObjectName, () const, unsigned), AS_CALL_THISCALL));

    // bool GPUObject::IsDataLost() const
    methods.Push(RegisterObjectMethodArgs("bool GPUObject::IsDataLost() const", "bool IsDataLost() const", AS_METHODPR(GPUObject, IsDataLost, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool GPUObject::IsDataLost() const", "bool get_dataLost() const", AS_METHODPR(GPUObject, IsDataLost, () const, bool), AS_CALL_THISCALL));

    // bool GPUObject::HasPendingData() const
    methods.Push(RegisterObjectMethodArgs("bool GPUObject::HasPendingData() const", "bool HasPendingData() const", AS_METHODPR(GPUObject, HasPendingData, () const, bool), AS_CALL_THISCALL));
}

// const Vector<SharedPtr<VertexBuffer>>& Geometry::GetVertexBuffers() const
// const Vector<SharedPtr<VertexBuffer>>& Geometry::GetVertexBuffers() const | File: ../Graphics/Geometry.h
static CScriptArray* Geometry_GetVertexBuffers_void(Geometry* ptr)
{
    const Vector<SharedPtr<VertexBuffer>>& result = ptr->GetVertexBuffers();
    return VectorToHandleArray(result, "Array<VertexBuffer@>");
}


// class Geometry | File: ../Graphics/Geometry.h
void CollectMembers_Geometry(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // float Geometry::GetHitDistance(const Ray& ray, Vector3* outNormal=nullptr, Vector2* outUV=nullptr) const
    // Error: type "Vector3*" can not automatically bind

    // void Geometry::GetRawData(const unsigned char*& vertexData, unsigned& vertexSize, const unsigned char*& indexData, unsigned& indexSize, const PODVector<VertexElement>*& elements) const
    // Error: type "const unsigned char*&" can not automatically bind

    // void Geometry::GetRawDataShared(SharedArrayPtr<unsigned char>& vertexData, unsigned& vertexSize, SharedArrayPtr<unsigned char>& indexData, unsigned& indexSize, const PODVector<VertexElement>*& elements) const
    // Error: type "SharedArrayPtr<unsigned char>&" can not automatically bind

    // void Geometry::SetRawIndexData(const SharedArrayPtr<unsigned char>& data, unsigned indexSize)
    // Error: type "const SharedArrayPtr<unsigned char>&" can not automatically bind

    // void Geometry::SetRawVertexData(const SharedArrayPtr<unsigned char>& data, const PODVector<VertexElement>& elements)
    // Error: type "const SharedArrayPtr<unsigned char>&" can not automatically bind

    // void Geometry::SetRawVertexData(const SharedArrayPtr<unsigned char>& data, unsigned elementMask)
    // Error: type "const SharedArrayPtr<unsigned char>&" can not automatically bind

    // bool Geometry::SetNumVertexBuffers(unsigned num)
    methods.Push(RegisterObjectMethodArgs("bool Geometry::SetNumVertexBuffers(unsigned num)", "bool SetNumVertexBuffers(uint)", AS_METHODPR(Geometry, SetNumVertexBuffers, (unsigned), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Geometry::SetNumVertexBuffers(unsigned num)", "bool set_numVertexBuffers(uint)", AS_METHODPR(Geometry, SetNumVertexBuffers, (unsigned), bool), AS_CALL_THISCALL));

    // bool Geometry::SetVertexBuffer(unsigned index, VertexBuffer* buffer)
    methods.Push(RegisterObjectMethodArgs("bool Geometry::SetVertexBuffer(unsigned index, VertexBuffer* buffer)", "bool SetVertexBuffer(uint, VertexBuffer@+)", AS_METHODPR(Geometry, SetVertexBuffer, (unsigned, VertexBuffer*), bool), AS_CALL_THISCALL));

    // void Geometry::SetIndexBuffer(IndexBuffer* buffer)
    methods.Push(RegisterObjectMethodArgs("void Geometry::SetIndexBuffer(IndexBuffer* buffer)", "void SetIndexBuffer(IndexBuffer@+)", AS_METHODPR(Geometry, SetIndexBuffer, (IndexBuffer*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Geometry::SetIndexBuffer(IndexBuffer* buffer)", "void set_indexBuffer(IndexBuffer@+)", AS_METHODPR(Geometry, SetIndexBuffer, (IndexBuffer*), void), AS_CALL_THISCALL));

    // bool Geometry::SetDrawRange(PrimitiveType type, unsigned indexStart, unsigned indexCount, bool getUsedVertexRange=true)
    methods.Push(RegisterObjectMethodArgs("bool Geometry::SetDrawRange(PrimitiveType type, unsigned indexStart, unsigned indexCount, bool getUsedVertexRange=true)", "bool SetDrawRange(PrimitiveType, uint, uint, bool = true)", AS_METHODPR(Geometry, SetDrawRange, (PrimitiveType, unsigned, unsigned, bool), bool), AS_CALL_THISCALL));

    // bool Geometry::SetDrawRange(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned vertexStart, unsigned vertexCount, bool checkIllegal=true)
    methods.Push(RegisterObjectMethodArgs("bool Geometry::SetDrawRange(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned vertexStart, unsigned vertexCount, bool checkIllegal=true)", "bool SetDrawRange(PrimitiveType, uint, uint, uint, uint, bool = true)", AS_METHODPR(Geometry, SetDrawRange, (PrimitiveType, unsigned, unsigned, unsigned, unsigned, bool), bool), AS_CALL_THISCALL));

    // void Geometry::SetLodDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void Geometry::SetLodDistance(float distance)", "void SetLodDistance(float)", AS_METHODPR(Geometry, SetLodDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Geometry::SetLodDistance(float distance)", "void set_lodDistance(float)", AS_METHODPR(Geometry, SetLodDistance, (float), void), AS_CALL_THISCALL));

    // void Geometry::Draw(Graphics* graphics)
    methods.Push(RegisterObjectMethodArgs("void Geometry::Draw(Graphics* graphics)", "void Draw(Graphics@+)", AS_METHODPR(Geometry, Draw, (Graphics*), void), AS_CALL_THISCALL));

    // const Vector<SharedPtr<VertexBuffer>>& Geometry::GetVertexBuffers() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<VertexBuffer>>& Geometry::GetVertexBuffers() const", "Array<VertexBuffer@>@ GetVertexBuffers() const", AS_FUNCTION_OBJFIRST(Geometry_GetVertexBuffers_void), AS_CALL_CDECL_OBJFIRST));

    // unsigned Geometry::GetNumVertexBuffers() const
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetNumVertexBuffers() const", "uint GetNumVertexBuffers() const", AS_METHODPR(Geometry, GetNumVertexBuffers, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetNumVertexBuffers() const", "uint get_numVertexBuffers() const", AS_METHODPR(Geometry, GetNumVertexBuffers, () const, unsigned), AS_CALL_THISCALL));

    // VertexBuffer* Geometry::GetVertexBuffer(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("VertexBuffer* Geometry::GetVertexBuffer(unsigned index) const", "VertexBuffer@+ GetVertexBuffer(uint) const", AS_METHODPR(Geometry, GetVertexBuffer, (unsigned) const, VertexBuffer*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("VertexBuffer* Geometry::GetVertexBuffer(unsigned index) const", "VertexBuffer@+ get_vertexBuffers(uint) const", AS_METHODPR(Geometry, GetVertexBuffer, (unsigned) const, VertexBuffer*), AS_CALL_THISCALL));

    // IndexBuffer* Geometry::GetIndexBuffer() const
    methods.Push(RegisterObjectMethodArgs("IndexBuffer* Geometry::GetIndexBuffer() const", "IndexBuffer@+ GetIndexBuffer() const", AS_METHODPR(Geometry, GetIndexBuffer, () const, IndexBuffer*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IndexBuffer* Geometry::GetIndexBuffer() const", "IndexBuffer@+ get_indexBuffer() const", AS_METHODPR(Geometry, GetIndexBuffer, () const, IndexBuffer*), AS_CALL_THISCALL));

    // PrimitiveType Geometry::GetPrimitiveType() const
    methods.Push(RegisterObjectMethodArgs("PrimitiveType Geometry::GetPrimitiveType() const", "PrimitiveType GetPrimitiveType() const", AS_METHODPR(Geometry, GetPrimitiveType, () const, PrimitiveType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("PrimitiveType Geometry::GetPrimitiveType() const", "PrimitiveType get_primitiveType() const", AS_METHODPR(Geometry, GetPrimitiveType, () const, PrimitiveType), AS_CALL_THISCALL));

    // unsigned Geometry::GetIndexStart() const
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetIndexStart() const", "uint GetIndexStart() const", AS_METHODPR(Geometry, GetIndexStart, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetIndexStart() const", "uint get_indexStart() const", AS_METHODPR(Geometry, GetIndexStart, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Geometry::GetIndexCount() const
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetIndexCount() const", "uint GetIndexCount() const", AS_METHODPR(Geometry, GetIndexCount, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetIndexCount() const", "uint get_indexCount() const", AS_METHODPR(Geometry, GetIndexCount, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Geometry::GetVertexStart() const
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetVertexStart() const", "uint GetVertexStart() const", AS_METHODPR(Geometry, GetVertexStart, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetVertexStart() const", "uint get_vertexStart() const", AS_METHODPR(Geometry, GetVertexStart, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Geometry::GetVertexCount() const
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetVertexCount() const", "uint GetVertexCount() const", AS_METHODPR(Geometry, GetVertexCount, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Geometry::GetVertexCount() const", "uint get_vertexCount() const", AS_METHODPR(Geometry, GetVertexCount, () const, unsigned), AS_CALL_THISCALL));

    // float Geometry::GetLodDistance() const
    methods.Push(RegisterObjectMethodArgs("float Geometry::GetLodDistance() const", "float GetLodDistance() const", AS_METHODPR(Geometry, GetLodDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Geometry::GetLodDistance() const", "float get_lodDistance() const", AS_METHODPR(Geometry, GetLodDistance, () const, float), AS_CALL_THISCALL));

    // unsigned short Geometry::GetBufferHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned short Geometry::GetBufferHash() const", "uint16 GetBufferHash() const", AS_METHODPR(Geometry, GetBufferHash, () const, unsigned short), AS_CALL_THISCALL));

    // bool Geometry::IsInside(const Ray& ray) const
    methods.Push(RegisterObjectMethodArgs("bool Geometry::IsInside(const Ray& ray) const", "bool IsInside(const Ray&in) const", AS_METHODPR(Geometry, IsInside, (const Ray&) const, bool), AS_CALL_THISCALL));

    // bool Geometry::IsEmpty() const
    methods.Push(RegisterObjectMethodArgs("bool Geometry::IsEmpty() const", "bool IsEmpty() const", AS_METHODPR(Geometry, IsEmpty, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Geometry::IsEmpty() const", "bool get_empty() const", AS_METHODPR(Geometry, IsEmpty, () const, bool), AS_CALL_THISCALL));
}

// struct GeometryDesc | File: ../Graphics/Model.h
void CollectMembers_GeometryDesc(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct GlyphLocation | File: ../UI/Text.h
void CollectMembers_GlyphLocation(Vector<RegisterObjectMethodArgs>& methods)
{
}

// bool Graphics::SetVertexBuffers(const Vector<SharedPtr<VertexBuffer>>& buffers, unsigned instanceOffset=0)
// bool Graphics::SetVertexBuffers(const Vector<SharedPtr<VertexBuffer>>& buffers, unsigned instanceOffset=0) | File: ../Graphics/Graphics.h
static bool Graphics_SetVertexBuffers_VectorSharedPtrVertexBuffer_unsigned(Graphics* ptr, CScriptArray* buffers_conv, unsigned instanceOffset)
{
    Vector<SharedPtr<VertexBuffer>> buffers = HandleArrayToVector<VertexBuffer>(buffers_conv);
    bool result = ptr->SetVertexBuffers(buffers, instanceOffset);
    return result;
}


// PODVector<IntVector3> Graphics::GetResolutions(int monitor) const
// PODVector<IntVector3> Graphics::GetResolutions(int monitor) const | File: ../Graphics/Graphics.h
static CScriptArray* Graphics_GetResolutions_int(Graphics* ptr, int monitor)
{
    PODVector<IntVector3> result = ptr->GetResolutions(monitor);
    return VectorToArray(result, "Array<IntVector3>");
}


// PODVector<int> Graphics::GetMultiSampleLevels() const
// PODVector<int> Graphics::GetMultiSampleLevels() const | File: ../Graphics/Graphics.h
static CScriptArray* Graphics_GetMultiSampleLevels_void(Graphics* ptr)
{
    PODVector<int> result = ptr->GetMultiSampleLevels();
    return VectorToArray(result, "Array<int>");
}


// class Graphics | File: ../Graphics/Graphics.h
void CollectMembers_Graphics(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Graphics::AddGPUObject(GPUObject* object)
    // Error: type "GPUObject*" can not automatically bind

    // void Graphics::FreeScratchBuffer(void* buffer)
    // Error: type "void*" can not automatically bind

    // void* Graphics::GetExternalWindow() const
    // Error: type "void*" can not automatically bind

    // GraphicsImpl* Graphics::GetImpl() const
    // Error: type "GraphicsImpl*" can not automatically bind

    // ShaderVariation* Graphics::GetShader(ShaderType type, const char* name, const char* defines) const
    // Error: type "const char*" can not automatically bind

    // SDL_Window* Graphics::GetWindow() const
    // Error: type "SDL_Window*" can not automatically bind

    // bool Graphics::NeedParameterUpdate(ShaderParameterGroup group, const void* source)
    // Error: type "const void*" can not automatically bind

    // void Graphics::RemoveGPUObject(GPUObject* object)
    // Error: type "GPUObject*" can not automatically bind

    // void* Graphics::ReserveScratchBuffer(unsigned size)
    // Error: type "void*" can not automatically bind

    // void Graphics::SetExternalWindow(void* window)
    // Error: type "void*" can not automatically bind

    // void Graphics::SetShaderParameter(StringHash param, const float* data, unsigned count)
    // Error: type "const float*" can not automatically bind

    // void Graphics::SetWindowTitle(const String& windowTitle)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetWindowTitle(const String& windowTitle)", "void SetWindowTitle(const String&in)", AS_METHODPR(Graphics, SetWindowTitle, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetWindowTitle(const String& windowTitle)", "void set_windowTitle(const String&in)", AS_METHODPR(Graphics, SetWindowTitle, (const String&), void), AS_CALL_THISCALL));

    // void Graphics::SetWindowIcon(Image* windowIcon)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetWindowIcon(Image* windowIcon)", "void SetWindowIcon(Image@+)", AS_METHODPR(Graphics, SetWindowIcon, (Image*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetWindowIcon(Image* windowIcon)", "void set_windowIcon(Image@+)", AS_METHODPR(Graphics, SetWindowIcon, (Image*), void), AS_CALL_THISCALL));

    // void Graphics::SetWindowPosition(const IntVector2& position)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetWindowPosition(const IntVector2& position)", "void SetWindowPosition(const IntVector2&in)", AS_METHODPR(Graphics, SetWindowPosition, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetWindowPosition(const IntVector2& position)", "void set_windowPosition(const IntVector2&in)", AS_METHODPR(Graphics, SetWindowPosition, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Graphics::SetWindowPosition(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetWindowPosition(int x, int y)", "void SetWindowPosition(int, int)", AS_METHODPR(Graphics, SetWindowPosition, (int, int), void), AS_CALL_THISCALL));

    // bool Graphics::SetScreenMode(int width, int height, const ScreenModeParams& params, bool maximize=false)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::SetScreenMode(int width, int height, const ScreenModeParams& params, bool maximize=false)", "bool SetScreenMode(int, int, const ScreenModeParams&in, bool = false)", AS_METHODPR(Graphics, SetScreenMode, (int, int, const ScreenModeParams&, bool), bool), AS_CALL_THISCALL));

    // bool Graphics::SetScreenMode(int width, int height)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::SetScreenMode(int width, int height)", "bool SetScreenMode(int, int)", AS_METHODPR(Graphics, SetScreenMode, (int, int), bool), AS_CALL_THISCALL));

    // bool Graphics::SetWindowModes(const WindowModeParams& windowMode, const WindowModeParams& secondaryWindowMode, bool maximize=false)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::SetWindowModes(const WindowModeParams& windowMode, const WindowModeParams& secondaryWindowMode, bool maximize=false)", "bool SetWindowModes(const WindowModeParams&in, const WindowModeParams&in, bool = false)", AS_METHODPR(Graphics, SetWindowModes, (const WindowModeParams&, const WindowModeParams&, bool), bool), AS_CALL_THISCALL));

    // bool Graphics::SetDefaultWindowModes(int width, int height, const ScreenModeParams& params)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::SetDefaultWindowModes(int width, int height, const ScreenModeParams& params)", "bool SetDefaultWindowModes(int, int, const ScreenModeParams&in)", AS_METHODPR(Graphics, SetDefaultWindowModes, (int, int, const ScreenModeParams&), bool), AS_CALL_THISCALL));

    // bool Graphics::SetMode(int width, int height, bool fullscreen, bool borderless, bool resizable, bool highDPI, bool vsync, bool tripleBuffer, int multiSample, int monitor, int refreshRate)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::SetMode(int width, int height, bool fullscreen, bool borderless, bool resizable, bool highDPI, bool vsync, bool tripleBuffer, int multiSample, int monitor, int refreshRate)", "bool SetMode(int, int, bool, bool, bool, bool, bool, bool, int, int, int)", AS_METHODPR(Graphics, SetMode, (int, int, bool, bool, bool, bool, bool, bool, int, int, int), bool), AS_CALL_THISCALL));

    // bool Graphics::SetMode(int width, int height)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::SetMode(int width, int height)", "bool SetMode(int, int)", AS_METHODPR(Graphics, SetMode, (int, int), bool), AS_CALL_THISCALL));

    // void Graphics::SetSRGB(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetSRGB(bool enable)", "void SetSRGB(bool)", AS_METHODPR(Graphics, SetSRGB, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetSRGB(bool enable)", "void set_sRGB(bool)", AS_METHODPR(Graphics, SetSRGB, (bool), void), AS_CALL_THISCALL));

    // void Graphics::SetDither(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDither(bool enable)", "void SetDither(bool)", AS_METHODPR(Graphics, SetDither, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDither(bool enable)", "void set_dither(bool)", AS_METHODPR(Graphics, SetDither, (bool), void), AS_CALL_THISCALL));

    // void Graphics::SetFlushGPU(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetFlushGPU(bool enable)", "void SetFlushGPU(bool)", AS_METHODPR(Graphics, SetFlushGPU, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetFlushGPU(bool enable)", "void set_flushGPU(bool)", AS_METHODPR(Graphics, SetFlushGPU, (bool), void), AS_CALL_THISCALL));

    // void Graphics::SetForceGL2(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetForceGL2(bool enable)", "void SetForceGL2(bool)", AS_METHODPR(Graphics, SetForceGL2, (bool), void), AS_CALL_THISCALL));

    // void Graphics::SetOrientations(const String& orientations)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetOrientations(const String& orientations)", "void SetOrientations(const String&in)", AS_METHODPR(Graphics, SetOrientations, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetOrientations(const String& orientations)", "void set_orientations(const String&in)", AS_METHODPR(Graphics, SetOrientations, (const String&), void), AS_CALL_THISCALL));

    // bool Graphics::ToggleFullscreen()
    methods.Push(RegisterObjectMethodArgs("bool Graphics::ToggleFullscreen()", "bool ToggleFullscreen()", AS_METHODPR(Graphics, ToggleFullscreen, (), bool), AS_CALL_THISCALL));

    // void Graphics::Close()
    methods.Push(RegisterObjectMethodArgs("void Graphics::Close()", "void Close()", AS_METHODPR(Graphics, Close, (), void), AS_CALL_THISCALL));

    // bool Graphics::TakeScreenShot(Image& destImage)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::TakeScreenShot(Image& destImage)", "bool TakeScreenShot(Image&)", AS_METHODPR(Graphics, TakeScreenShot, (Image&), bool), AS_CALL_THISCALL));

    // bool Graphics::BeginFrame()
    methods.Push(RegisterObjectMethodArgs("bool Graphics::BeginFrame()", "bool BeginFrame()", AS_METHODPR(Graphics, BeginFrame, (), bool), AS_CALL_THISCALL));

    // void Graphics::EndFrame()
    methods.Push(RegisterObjectMethodArgs("void Graphics::EndFrame()", "void EndFrame()", AS_METHODPR(Graphics, EndFrame, (), void), AS_CALL_THISCALL));

    // void Graphics::Clear(ClearTargetFlags flags, const Color& color=Color(0.0f, 0.0f, 0.0f, 0.0f), float depth=1.0f, unsigned stencil=0)
    methods.Push(RegisterObjectMethodArgs("void Graphics::Clear(ClearTargetFlags flags, const Color& color=Color(0.0f, 0.0f, 0.0f, 0.0f), float depth=1.0f, unsigned stencil=0)", "void Clear(ClearTargetFlags, const Color&in = Color(0.0f, 0.0f, 0.0f, 0.0f), float = 1.0f, uint = 0)", AS_METHODPR(Graphics, Clear, (ClearTargetFlags, const Color&, float, unsigned), void), AS_CALL_THISCALL));

    // bool Graphics::ResolveToTexture(Texture2D* destination, const IntRect& viewport)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::ResolveToTexture(Texture2D* destination, const IntRect& viewport)", "bool ResolveToTexture(Texture2D@+, const IntRect&in)", AS_METHODPR(Graphics, ResolveToTexture, (Texture2D*, const IntRect&), bool), AS_CALL_THISCALL));

    // bool Graphics::ResolveToTexture(Texture2D* texture)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::ResolveToTexture(Texture2D* texture)", "bool ResolveToTexture(Texture2D@+)", AS_METHODPR(Graphics, ResolveToTexture, (Texture2D*), bool), AS_CALL_THISCALL));

    // bool Graphics::ResolveToTexture(TextureCube* texture)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::ResolveToTexture(TextureCube* texture)", "bool ResolveToTexture(TextureCube@+)", AS_METHODPR(Graphics, ResolveToTexture, (TextureCube*), bool), AS_CALL_THISCALL));

    // void Graphics::Draw(PrimitiveType type, unsigned vertexStart, unsigned vertexCount)
    methods.Push(RegisterObjectMethodArgs("void Graphics::Draw(PrimitiveType type, unsigned vertexStart, unsigned vertexCount)", "void Draw(PrimitiveType, uint, uint)", AS_METHODPR(Graphics, Draw, (PrimitiveType, unsigned, unsigned), void), AS_CALL_THISCALL));

    // void Graphics::Draw(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned minVertex, unsigned vertexCount)
    methods.Push(RegisterObjectMethodArgs("void Graphics::Draw(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned minVertex, unsigned vertexCount)", "void Draw(PrimitiveType, uint, uint, uint, uint)", AS_METHODPR(Graphics, Draw, (PrimitiveType, unsigned, unsigned, unsigned, unsigned), void), AS_CALL_THISCALL));

    // void Graphics::Draw(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned baseVertexIndex, unsigned minVertex, unsigned vertexCount)
    methods.Push(RegisterObjectMethodArgs("void Graphics::Draw(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned baseVertexIndex, unsigned minVertex, unsigned vertexCount)", "void Draw(PrimitiveType, uint, uint, uint, uint, uint)", AS_METHODPR(Graphics, Draw, (PrimitiveType, unsigned, unsigned, unsigned, unsigned, unsigned), void), AS_CALL_THISCALL));

    // void Graphics::DrawInstanced(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned minVertex, unsigned vertexCount, unsigned instanceCount)
    methods.Push(RegisterObjectMethodArgs("void Graphics::DrawInstanced(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned minVertex, unsigned vertexCount, unsigned instanceCount)", "void DrawInstanced(PrimitiveType, uint, uint, uint, uint, uint)", AS_METHODPR(Graphics, DrawInstanced, (PrimitiveType, unsigned, unsigned, unsigned, unsigned, unsigned), void), AS_CALL_THISCALL));

    // void Graphics::DrawInstanced(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned baseVertexIndex, unsigned minVertex, unsigned vertexCount, unsigned instanceCount)
    methods.Push(RegisterObjectMethodArgs("void Graphics::DrawInstanced(PrimitiveType type, unsigned indexStart, unsigned indexCount, unsigned baseVertexIndex, unsigned minVertex, unsigned vertexCount, unsigned instanceCount)", "void DrawInstanced(PrimitiveType, uint, uint, uint, uint, uint, uint)", AS_METHODPR(Graphics, DrawInstanced, (PrimitiveType, unsigned, unsigned, unsigned, unsigned, unsigned, unsigned), void), AS_CALL_THISCALL));

    // void Graphics::SetVertexBuffer(VertexBuffer* buffer)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetVertexBuffer(VertexBuffer* buffer)", "void SetVertexBuffer(VertexBuffer@+)", AS_METHODPR(Graphics, SetVertexBuffer, (VertexBuffer*), void), AS_CALL_THISCALL));

    // bool Graphics::SetVertexBuffers(const Vector<SharedPtr<VertexBuffer>>& buffers, unsigned instanceOffset=0)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::SetVertexBuffers(const Vector<SharedPtr<VertexBuffer>>& buffers, unsigned instanceOffset=0)", "bool SetVertexBuffers(Array<VertexBuffer@>@+, uint = 0)", AS_FUNCTION_OBJFIRST(Graphics_SetVertexBuffers_VectorSharedPtrVertexBuffer_unsigned), AS_CALL_CDECL_OBJFIRST));

    // void Graphics::SetIndexBuffer(IndexBuffer* buffer)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetIndexBuffer(IndexBuffer* buffer)", "void SetIndexBuffer(IndexBuffer@+)", AS_METHODPR(Graphics, SetIndexBuffer, (IndexBuffer*), void), AS_CALL_THISCALL));

    // void Graphics::SetShaders(ShaderVariation* vs, ShaderVariation* ps)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaders(ShaderVariation* vs, ShaderVariation* ps)", "void SetShaders(ShaderVariation@+, ShaderVariation@+)", AS_METHODPR(Graphics, SetShaders, (ShaderVariation*, ShaderVariation*), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, float value)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, float value)", "void SetShaderParameter(StringHash, float)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, float), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, int value)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, int value)", "void SetShaderParameter(StringHash, int)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, int), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, bool value)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, bool value)", "void SetShaderParameter(StringHash, bool)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, bool), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, const Color& color)", "void SetShaderParameter(StringHash, const Color&in)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, const Color&), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, const Vector2& vector)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, const Vector2& vector)", "void SetShaderParameter(StringHash, const Vector2&in)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, const Vector2&), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, const Matrix3& matrix)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, const Matrix3& matrix)", "void SetShaderParameter(StringHash, const Matrix3&in)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, const Matrix3&), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, const Vector3& vector)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, const Vector3& vector)", "void SetShaderParameter(StringHash, const Vector3&in)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, const Vector3&), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, const Matrix4& matrix)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, const Matrix4& matrix)", "void SetShaderParameter(StringHash, const Matrix4&in)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, const Matrix4&), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, const Vector4& vector)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, const Vector4& vector)", "void SetShaderParameter(StringHash, const Vector4&in)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, const Vector4&), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, const Matrix3x4& matrix)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, const Matrix3x4& matrix)", "void SetShaderParameter(StringHash, const Matrix3x4&in)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, const Matrix3x4&), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderParameter(StringHash param, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderParameter(StringHash param, const Variant& value)", "void SetShaderParameter(StringHash, const Variant&in)", AS_METHODPR(Graphics, SetShaderParameter, (StringHash, const Variant&), void), AS_CALL_THISCALL));

    // bool Graphics::HasShaderParameter(StringHash param)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::HasShaderParameter(StringHash param)", "bool HasShaderParameter(StringHash)", AS_METHODPR(Graphics, HasShaderParameter, (StringHash), bool), AS_CALL_THISCALL));

    // bool Graphics::HasTextureUnit(TextureUnit unit)
    methods.Push(RegisterObjectMethodArgs("bool Graphics::HasTextureUnit(TextureUnit unit)", "bool HasTextureUnit(TextureUnit)", AS_METHODPR(Graphics, HasTextureUnit, (TextureUnit), bool), AS_CALL_THISCALL));

    // void Graphics::ClearParameterSource(ShaderParameterGroup group)
    methods.Push(RegisterObjectMethodArgs("void Graphics::ClearParameterSource(ShaderParameterGroup group)", "void ClearParameterSource(ShaderParameterGroup)", AS_METHODPR(Graphics, ClearParameterSource, (ShaderParameterGroup), void), AS_CALL_THISCALL));

    // void Graphics::ClearParameterSources()
    methods.Push(RegisterObjectMethodArgs("void Graphics::ClearParameterSources()", "void ClearParameterSources()", AS_METHODPR(Graphics, ClearParameterSources, (), void), AS_CALL_THISCALL));

    // void Graphics::ClearTransformSources()
    methods.Push(RegisterObjectMethodArgs("void Graphics::ClearTransformSources()", "void ClearTransformSources()", AS_METHODPR(Graphics, ClearTransformSources, (), void), AS_CALL_THISCALL));

    // void Graphics::SetTexture(unsigned index, Texture* texture)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetTexture(unsigned index, Texture* texture)", "void SetTexture(uint, Texture@+)", AS_METHODPR(Graphics, SetTexture, (unsigned, Texture*), void), AS_CALL_THISCALL));

    // void Graphics::SetDefaultTextureFilterMode(TextureFilterMode mode)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDefaultTextureFilterMode(TextureFilterMode mode)", "void SetDefaultTextureFilterMode(TextureFilterMode)", AS_METHODPR(Graphics, SetDefaultTextureFilterMode, (TextureFilterMode), void), AS_CALL_THISCALL));

    // void Graphics::SetDefaultTextureAnisotropy(unsigned level)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDefaultTextureAnisotropy(unsigned level)", "void SetDefaultTextureAnisotropy(uint)", AS_METHODPR(Graphics, SetDefaultTextureAnisotropy, (unsigned), void), AS_CALL_THISCALL));

    // void Graphics::ResetRenderTargets()
    methods.Push(RegisterObjectMethodArgs("void Graphics::ResetRenderTargets()", "void ResetRenderTargets()", AS_METHODPR(Graphics, ResetRenderTargets, (), void), AS_CALL_THISCALL));

    // void Graphics::ResetRenderTarget(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void Graphics::ResetRenderTarget(unsigned index)", "void ResetRenderTarget(uint)", AS_METHODPR(Graphics, ResetRenderTarget, (unsigned), void), AS_CALL_THISCALL));

    // void Graphics::ResetDepthStencil()
    methods.Push(RegisterObjectMethodArgs("void Graphics::ResetDepthStencil()", "void ResetDepthStencil()", AS_METHODPR(Graphics, ResetDepthStencil, (), void), AS_CALL_THISCALL));

    // void Graphics::SetRenderTarget(unsigned index, RenderSurface* renderTarget)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetRenderTarget(unsigned index, RenderSurface* renderTarget)", "void SetRenderTarget(uint, RenderSurface@+)", AS_METHODPR(Graphics, SetRenderTarget, (unsigned, RenderSurface*), void), AS_CALL_THISCALL));

    // void Graphics::SetRenderTarget(unsigned index, Texture2D* texture)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetRenderTarget(unsigned index, Texture2D* texture)", "void SetRenderTarget(uint, Texture2D@+)", AS_METHODPR(Graphics, SetRenderTarget, (unsigned, Texture2D*), void), AS_CALL_THISCALL));

    // void Graphics::SetDepthStencil(RenderSurface* depthStencil)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDepthStencil(RenderSurface* depthStencil)", "void SetDepthStencil(RenderSurface@+)", AS_METHODPR(Graphics, SetDepthStencil, (RenderSurface*), void), AS_CALL_THISCALL));

    // void Graphics::SetDepthStencil(Texture2D* texture)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDepthStencil(Texture2D* texture)", "void SetDepthStencil(Texture2D@+)", AS_METHODPR(Graphics, SetDepthStencil, (Texture2D*), void), AS_CALL_THISCALL));

    // void Graphics::SetViewport(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetViewport(const IntRect& rect)", "void SetViewport(const IntRect&in)", AS_METHODPR(Graphics, SetViewport, (const IntRect&), void), AS_CALL_THISCALL));

    // void Graphics::SetBlendMode(BlendMode mode, bool alphaToCoverage=false)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetBlendMode(BlendMode mode, bool alphaToCoverage=false)", "void SetBlendMode(BlendMode, bool = false)", AS_METHODPR(Graphics, SetBlendMode, (BlendMode, bool), void), AS_CALL_THISCALL));

    // void Graphics::SetColorWrite(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetColorWrite(bool enable)", "void SetColorWrite(bool)", AS_METHODPR(Graphics, SetColorWrite, (bool), void), AS_CALL_THISCALL));

    // void Graphics::SetCullMode(CullMode mode)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetCullMode(CullMode mode)", "void SetCullMode(CullMode)", AS_METHODPR(Graphics, SetCullMode, (CullMode), void), AS_CALL_THISCALL));

    // void Graphics::SetDepthBias(float constantBias, float slopeScaledBias)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDepthBias(float constantBias, float slopeScaledBias)", "void SetDepthBias(float, float)", AS_METHODPR(Graphics, SetDepthBias, (float, float), void), AS_CALL_THISCALL));

    // void Graphics::SetDepthTest(CompareMode mode)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDepthTest(CompareMode mode)", "void SetDepthTest(CompareMode)", AS_METHODPR(Graphics, SetDepthTest, (CompareMode), void), AS_CALL_THISCALL));

    // void Graphics::SetDepthWrite(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetDepthWrite(bool enable)", "void SetDepthWrite(bool)", AS_METHODPR(Graphics, SetDepthWrite, (bool), void), AS_CALL_THISCALL));

    // void Graphics::SetFillMode(FillMode mode)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetFillMode(FillMode mode)", "void SetFillMode(FillMode)", AS_METHODPR(Graphics, SetFillMode, (FillMode), void), AS_CALL_THISCALL));

    // void Graphics::SetLineAntiAlias(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetLineAntiAlias(bool enable)", "void SetLineAntiAlias(bool)", AS_METHODPR(Graphics, SetLineAntiAlias, (bool), void), AS_CALL_THISCALL));

    // void Graphics::SetScissorTest(bool enable, const Rect& rect=Rect::FULL, bool borderInclusive=true)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetScissorTest(bool enable, const Rect& rect=Rect::FULL, bool borderInclusive=true)", "void SetScissorTest(bool, const Rect&in = Rect::FULL, bool = true)", AS_METHODPR(Graphics, SetScissorTest, (bool, const Rect&, bool), void), AS_CALL_THISCALL));

    // void Graphics::SetScissorTest(bool enable, const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetScissorTest(bool enable, const IntRect& rect)", "void SetScissorTest(bool, const IntRect&in)", AS_METHODPR(Graphics, SetScissorTest, (bool, const IntRect&), void), AS_CALL_THISCALL));

    // void Graphics::SetStencilTest(bool enable, CompareMode mode=CMP_ALWAYS, StencilOp pass=OP_KEEP, StencilOp fail=OP_KEEP, StencilOp zFail=OP_KEEP, unsigned stencilRef=0, unsigned compareMask=M_MAX_UNSIGNED, unsigned writeMask=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetStencilTest(bool enable, CompareMode mode=CMP_ALWAYS, StencilOp pass=OP_KEEP, StencilOp fail=OP_KEEP, StencilOp zFail=OP_KEEP, unsigned stencilRef=0, unsigned compareMask=M_MAX_UNSIGNED, unsigned writeMask=M_MAX_UNSIGNED)", "void SetStencilTest(bool, CompareMode = CMP_ALWAYS, StencilOp = OP_KEEP, StencilOp = OP_KEEP, StencilOp = OP_KEEP, uint = 0, uint = M_MAX_UNSIGNED, uint = M_MAX_UNSIGNED)", AS_METHODPR(Graphics, SetStencilTest, (bool, CompareMode, StencilOp, StencilOp, StencilOp, unsigned, unsigned, unsigned), void), AS_CALL_THISCALL));

    // void Graphics::SetClipPlane(bool enable, const Plane& clipPlane=Plane::UP, const Matrix3x4& view=Matrix3x4::IDENTITY, const Matrix4& projection=Matrix4::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetClipPlane(bool enable, const Plane& clipPlane=Plane::UP, const Matrix3x4& view=Matrix3x4::IDENTITY, const Matrix4& projection=Matrix4::IDENTITY)", "void SetClipPlane(bool, const Plane&in = Plane::UP, const Matrix3x4&in = Matrix3x4::IDENTITY, const Matrix4&in = Matrix4::IDENTITY)", AS_METHODPR(Graphics, SetClipPlane, (bool, const Plane&, const Matrix3x4&, const Matrix4&), void), AS_CALL_THISCALL));

    // void Graphics::BeginDumpShaders(const String& fileName)
    methods.Push(RegisterObjectMethodArgs("void Graphics::BeginDumpShaders(const String& fileName)", "void BeginDumpShaders(const String&in)", AS_METHODPR(Graphics, BeginDumpShaders, (const String&), void), AS_CALL_THISCALL));

    // void Graphics::EndDumpShaders()
    methods.Push(RegisterObjectMethodArgs("void Graphics::EndDumpShaders()", "void EndDumpShaders()", AS_METHODPR(Graphics, EndDumpShaders, (), void), AS_CALL_THISCALL));

    // void Graphics::PrecacheShaders(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("void Graphics::PrecacheShaders(Deserializer& source)", "void PrecacheShaders(Deserializer&)", AS_METHODPR(Graphics, PrecacheShaders, (Deserializer&), void), AS_CALL_THISCALL));

    // void Graphics::SetShaderCacheDir(const String& path)
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderCacheDir(const String& path)", "void SetShaderCacheDir(const String&in)", AS_METHODPR(Graphics, SetShaderCacheDir, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Graphics::SetShaderCacheDir(const String& path)", "void set_shaderCacheDir(const String&in)", AS_METHODPR(Graphics, SetShaderCacheDir, (const String&), void), AS_CALL_THISCALL));

    // bool Graphics::IsInitialized() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::IsInitialized() const", "bool IsInitialized() const", AS_METHODPR(Graphics, IsInitialized, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::IsInitialized() const", "bool get_initialized() const", AS_METHODPR(Graphics, IsInitialized, () const, bool), AS_CALL_THISCALL));

    // const String& Graphics::GetWindowTitle() const
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetWindowTitle() const", "const String& GetWindowTitle() const", AS_METHODPR(Graphics, GetWindowTitle, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetWindowTitle() const", "const String& get_windowTitle() const", AS_METHODPR(Graphics, GetWindowTitle, () const, const String&), AS_CALL_THISCALL));

    // const String& Graphics::GetApiName() const
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetApiName() const", "const String& GetApiName() const", AS_METHODPR(Graphics, GetApiName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetApiName() const", "const String& get_apiName() const", AS_METHODPR(Graphics, GetApiName, () const, const String&), AS_CALL_THISCALL));

    // IntVector2 Graphics::GetWindowPosition() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Graphics::GetWindowPosition() const", "IntVector2 GetWindowPosition() const", AS_METHODPR(Graphics, GetWindowPosition, () const, IntVector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector2 Graphics::GetWindowPosition() const", "IntVector2 get_windowPosition() const", AS_METHODPR(Graphics, GetWindowPosition, () const, IntVector2), AS_CALL_THISCALL));

    // int Graphics::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetWidth() const", "int GetWidth() const", AS_METHODPR(Graphics, GetWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetWidth() const", "int get_width() const", AS_METHODPR(Graphics, GetWidth, () const, int), AS_CALL_THISCALL));

    // int Graphics::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetHeight() const", "int GetHeight() const", AS_METHODPR(Graphics, GetHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetHeight() const", "int get_height() const", AS_METHODPR(Graphics, GetHeight, () const, int), AS_CALL_THISCALL));

    // const ScreenModeParams& Graphics::GetScreenModeParams() const
    methods.Push(RegisterObjectMethodArgs("const ScreenModeParams& Graphics::GetScreenModeParams() const", "const ScreenModeParams& GetScreenModeParams() const", AS_METHODPR(Graphics, GetScreenModeParams, () const, const ScreenModeParams&), AS_CALL_THISCALL));

    // int Graphics::GetMultiSample() const
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetMultiSample() const", "int GetMultiSample() const", AS_METHODPR(Graphics, GetMultiSample, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetMultiSample() const", "int get_multiSample() const", AS_METHODPR(Graphics, GetMultiSample, () const, int), AS_CALL_THISCALL));

    // IntVector2 Graphics::GetSize() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Graphics::GetSize() const", "IntVector2 GetSize() const", AS_METHODPR(Graphics, GetSize, () const, IntVector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector2 Graphics::GetSize() const", "IntVector2 get_size() const", AS_METHODPR(Graphics, GetSize, () const, IntVector2), AS_CALL_THISCALL));

    // bool Graphics::GetFullscreen() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetFullscreen() const", "bool GetFullscreen() const", AS_METHODPR(Graphics, GetFullscreen, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetFullscreen() const", "bool get_fullscreen() const", AS_METHODPR(Graphics, GetFullscreen, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetBorderless() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetBorderless() const", "bool GetBorderless() const", AS_METHODPR(Graphics, GetBorderless, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetBorderless() const", "bool get_borderless() const", AS_METHODPR(Graphics, GetBorderless, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetResizable() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetResizable() const", "bool GetResizable() const", AS_METHODPR(Graphics, GetResizable, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetResizable() const", "bool get_resizable() const", AS_METHODPR(Graphics, GetResizable, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetHighDPI() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetHighDPI() const", "bool GetHighDPI() const", AS_METHODPR(Graphics, GetHighDPI, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetVSync() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetVSync() const", "bool GetVSync() const", AS_METHODPR(Graphics, GetVSync, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetVSync() const", "bool get_vSync() const", AS_METHODPR(Graphics, GetVSync, () const, bool), AS_CALL_THISCALL));

    // int Graphics::GetRefreshRate() const
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetRefreshRate() const", "int GetRefreshRate() const", AS_METHODPR(Graphics, GetRefreshRate, () const, int), AS_CALL_THISCALL));

    // int Graphics::GetMonitor() const
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetMonitor() const", "int GetMonitor() const", AS_METHODPR(Graphics, GetMonitor, () const, int), AS_CALL_THISCALL));

    // bool Graphics::GetTripleBuffer() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetTripleBuffer() const", "bool GetTripleBuffer() const", AS_METHODPR(Graphics, GetTripleBuffer, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetTripleBuffer() const", "bool get_tripleBuffer() const", AS_METHODPR(Graphics, GetTripleBuffer, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetSRGB() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetSRGB() const", "bool GetSRGB() const", AS_METHODPR(Graphics, GetSRGB, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetSRGB() const", "bool get_sRGB() const", AS_METHODPR(Graphics, GetSRGB, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetDither() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetDither() const", "bool GetDither() const", AS_METHODPR(Graphics, GetDither, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetDither() const", "bool get_dither() const", AS_METHODPR(Graphics, GetDither, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetFlushGPU() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetFlushGPU() const", "bool GetFlushGPU() const", AS_METHODPR(Graphics, GetFlushGPU, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetFlushGPU() const", "bool get_flushGPU() const", AS_METHODPR(Graphics, GetFlushGPU, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetForceGL2() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetForceGL2() const", "bool GetForceGL2() const", AS_METHODPR(Graphics, GetForceGL2, () const, bool), AS_CALL_THISCALL));

    // const String& Graphics::GetOrientations() const
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetOrientations() const", "const String& GetOrientations() const", AS_METHODPR(Graphics, GetOrientations, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetOrientations() const", "const String& get_orientations() const", AS_METHODPR(Graphics, GetOrientations, () const, const String&), AS_CALL_THISCALL));

    // bool Graphics::IsDeviceLost() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::IsDeviceLost() const", "bool IsDeviceLost() const", AS_METHODPR(Graphics, IsDeviceLost, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::IsDeviceLost() const", "bool get_deviceLost() const", AS_METHODPR(Graphics, IsDeviceLost, () const, bool), AS_CALL_THISCALL));

    // unsigned Graphics::GetNumPrimitives() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetNumPrimitives() const", "uint GetNumPrimitives() const", AS_METHODPR(Graphics, GetNumPrimitives, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetNumPrimitives() const", "uint get_numPrimitives() const", AS_METHODPR(Graphics, GetNumPrimitives, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Graphics::GetNumBatches() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetNumBatches() const", "uint GetNumBatches() const", AS_METHODPR(Graphics, GetNumBatches, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetNumBatches() const", "uint get_numBatches() const", AS_METHODPR(Graphics, GetNumBatches, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Graphics::GetDummyColorFormat() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetDummyColorFormat() const", "uint GetDummyColorFormat() const", AS_METHODPR(Graphics, GetDummyColorFormat, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Graphics::GetShadowMapFormat() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetShadowMapFormat() const", "uint GetShadowMapFormat() const", AS_METHODPR(Graphics, GetShadowMapFormat, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Graphics::GetHiresShadowMapFormat() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetHiresShadowMapFormat() const", "uint GetHiresShadowMapFormat() const", AS_METHODPR(Graphics, GetHiresShadowMapFormat, () const, unsigned), AS_CALL_THISCALL));

    // bool Graphics::GetInstancingSupport() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetInstancingSupport() const", "bool GetInstancingSupport() const", AS_METHODPR(Graphics, GetInstancingSupport, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetInstancingSupport() const", "bool get_instancingSupport() const", AS_METHODPR(Graphics, GetInstancingSupport, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetLightPrepassSupport() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetLightPrepassSupport() const", "bool GetLightPrepassSupport() const", AS_METHODPR(Graphics, GetLightPrepassSupport, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetLightPrepassSupport() const", "bool get_lightPrepassSupport() const", AS_METHODPR(Graphics, GetLightPrepassSupport, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetDeferredSupport() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetDeferredSupport() const", "bool GetDeferredSupport() const", AS_METHODPR(Graphics, GetDeferredSupport, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetDeferredSupport() const", "bool get_deferredSupport() const", AS_METHODPR(Graphics, GetDeferredSupport, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetAnisotropySupport() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetAnisotropySupport() const", "bool GetAnisotropySupport() const", AS_METHODPR(Graphics, GetAnisotropySupport, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetHardwareShadowSupport() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetHardwareShadowSupport() const", "bool GetHardwareShadowSupport() const", AS_METHODPR(Graphics, GetHardwareShadowSupport, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetHardwareShadowSupport() const", "bool get_hardwareShadowSupport() const", AS_METHODPR(Graphics, GetHardwareShadowSupport, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetReadableDepthSupport() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetReadableDepthSupport() const", "bool GetReadableDepthSupport() const", AS_METHODPR(Graphics, GetReadableDepthSupport, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetReadableDepthSupport() const", "bool get_readableDepthSupport() const", AS_METHODPR(Graphics, GetReadableDepthSupport, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetSRGBSupport() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetSRGBSupport() const", "bool GetSRGBSupport() const", AS_METHODPR(Graphics, GetSRGBSupport, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetSRGBSupport() const", "bool get_sRGBSupport() const", AS_METHODPR(Graphics, GetSRGBSupport, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetSRGBWriteSupport() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetSRGBWriteSupport() const", "bool GetSRGBWriteSupport() const", AS_METHODPR(Graphics, GetSRGBWriteSupport, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetSRGBWriteSupport() const", "bool get_sRGBWriteSupport() const", AS_METHODPR(Graphics, GetSRGBWriteSupport, () const, bool), AS_CALL_THISCALL));

    // PODVector<IntVector3> Graphics::GetResolutions(int monitor) const
    methods.Push(RegisterObjectMethodArgs("PODVector<IntVector3> Graphics::GetResolutions(int monitor) const", "Array<IntVector3>@ GetResolutions(int) const", AS_FUNCTION_OBJFIRST(Graphics_GetResolutions_int), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("PODVector<IntVector3> Graphics::GetResolutions(int monitor) const", "Array<IntVector3>@ get_resolutions(int) const", AS_FUNCTION_OBJFIRST(Graphics_GetResolutions_int), AS_CALL_CDECL_OBJFIRST));

    // unsigned Graphics::FindBestResolutionIndex(int monitor, int width, int height, int refreshRate) const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::FindBestResolutionIndex(int monitor, int width, int height, int refreshRate) const", "uint FindBestResolutionIndex(int, int, int, int) const", AS_METHODPR(Graphics, FindBestResolutionIndex, (int, int, int, int) const, unsigned), AS_CALL_THISCALL));

    // PODVector<int> Graphics::GetMultiSampleLevels() const
    methods.Push(RegisterObjectMethodArgs("PODVector<int> Graphics::GetMultiSampleLevels() const", "Array<int>@ GetMultiSampleLevels() const", AS_FUNCTION_OBJFIRST(Graphics_GetMultiSampleLevels_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("PODVector<int> Graphics::GetMultiSampleLevels() const", "Array<int>@ get_multiSampleLevels() const", AS_FUNCTION_OBJFIRST(Graphics_GetMultiSampleLevels_void), AS_CALL_CDECL_OBJFIRST));

    // IntVector2 Graphics::GetDesktopResolution(int monitor) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Graphics::GetDesktopResolution(int monitor) const", "IntVector2 GetDesktopResolution(int) const", AS_METHODPR(Graphics, GetDesktopResolution, (int) const, IntVector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector2 Graphics::GetDesktopResolution(int monitor) const", "IntVector2 get_desktopResolution(int) const", AS_METHODPR(Graphics, GetDesktopResolution, (int) const, IntVector2), AS_CALL_THISCALL));

    // int Graphics::GetMonitorCount() const
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetMonitorCount() const", "int GetMonitorCount() const", AS_METHODPR(Graphics, GetMonitorCount, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetMonitorCount() const", "int get_monitorCount() const", AS_METHODPR(Graphics, GetMonitorCount, () const, int), AS_CALL_THISCALL));

    // int Graphics::GetCurrentMonitor() const
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetCurrentMonitor() const", "int GetCurrentMonitor() const", AS_METHODPR(Graphics, GetCurrentMonitor, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Graphics::GetCurrentMonitor() const", "int get_currentMonitor() const", AS_METHODPR(Graphics, GetCurrentMonitor, () const, int), AS_CALL_THISCALL));

    // bool Graphics::GetMaximized() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetMaximized() const", "bool GetMaximized() const", AS_METHODPR(Graphics, GetMaximized, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetMaximized() const", "bool get_maximized() const", AS_METHODPR(Graphics, GetMaximized, () const, bool), AS_CALL_THISCALL));

    // Vector3 Graphics::GetDisplayDPI(int monitor=0) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Graphics::GetDisplayDPI(int monitor=0) const", "Vector3 GetDisplayDPI(int = 0) const", AS_METHODPR(Graphics, GetDisplayDPI, (int) const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Graphics::GetDisplayDPI(int monitor=0) const", "Vector3 get_displayDPI(int = 0) const", AS_METHODPR(Graphics, GetDisplayDPI, (int) const, Vector3), AS_CALL_THISCALL));

    // unsigned Graphics::GetFormat(CompressedFormat format) const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetFormat(CompressedFormat format) const", "uint GetFormat(CompressedFormat) const", AS_METHODPR(Graphics, GetFormat, (CompressedFormat) const, unsigned), AS_CALL_THISCALL));

    // ShaderVariation* Graphics::GetShader(ShaderType type, const String& name, const String& defines=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("ShaderVariation* Graphics::GetShader(ShaderType type, const String& name, const String& defines=String::EMPTY) const", "ShaderVariation@+ GetShader(ShaderType, const String&in, const String&in = String::EMPTY) const", AS_METHODPR(Graphics, GetShader, (ShaderType, const String&, const String&) const, ShaderVariation*), AS_CALL_THISCALL));

    // VertexBuffer* Graphics::GetVertexBuffer(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("VertexBuffer* Graphics::GetVertexBuffer(unsigned index) const", "VertexBuffer@+ GetVertexBuffer(uint) const", AS_METHODPR(Graphics, GetVertexBuffer, (unsigned) const, VertexBuffer*), AS_CALL_THISCALL));

    // IndexBuffer* Graphics::GetIndexBuffer() const
    methods.Push(RegisterObjectMethodArgs("IndexBuffer* Graphics::GetIndexBuffer() const", "IndexBuffer@+ GetIndexBuffer() const", AS_METHODPR(Graphics, GetIndexBuffer, () const, IndexBuffer*), AS_CALL_THISCALL));

    // ShaderVariation* Graphics::GetVertexShader() const
    methods.Push(RegisterObjectMethodArgs("ShaderVariation* Graphics::GetVertexShader() const", "ShaderVariation@+ GetVertexShader() const", AS_METHODPR(Graphics, GetVertexShader, () const, ShaderVariation*), AS_CALL_THISCALL));

    // ShaderVariation* Graphics::GetPixelShader() const
    methods.Push(RegisterObjectMethodArgs("ShaderVariation* Graphics::GetPixelShader() const", "ShaderVariation@+ GetPixelShader() const", AS_METHODPR(Graphics, GetPixelShader, () const, ShaderVariation*), AS_CALL_THISCALL));

    // TextureUnit Graphics::GetTextureUnit(const String& name)
    methods.Push(RegisterObjectMethodArgs("TextureUnit Graphics::GetTextureUnit(const String& name)", "TextureUnit GetTextureUnit(const String&in)", AS_METHODPR(Graphics, GetTextureUnit, (const String&), TextureUnit), AS_CALL_THISCALL));

    // const String& Graphics::GetTextureUnitName(TextureUnit unit)
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetTextureUnitName(TextureUnit unit)", "const String& GetTextureUnitName(TextureUnit)", AS_METHODPR(Graphics, GetTextureUnitName, (TextureUnit), const String&), AS_CALL_THISCALL));

    // Texture* Graphics::GetTexture(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Texture* Graphics::GetTexture(unsigned index) const", "Texture@+ GetTexture(uint) const", AS_METHODPR(Graphics, GetTexture, (unsigned) const, Texture*), AS_CALL_THISCALL));

    // TextureFilterMode Graphics::GetDefaultTextureFilterMode() const
    methods.Push(RegisterObjectMethodArgs("TextureFilterMode Graphics::GetDefaultTextureFilterMode() const", "TextureFilterMode GetDefaultTextureFilterMode() const", AS_METHODPR(Graphics, GetDefaultTextureFilterMode, () const, TextureFilterMode), AS_CALL_THISCALL));

    // unsigned Graphics::GetDefaultTextureAnisotropy() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetDefaultTextureAnisotropy() const", "uint GetDefaultTextureAnisotropy() const", AS_METHODPR(Graphics, GetDefaultTextureAnisotropy, () const, unsigned), AS_CALL_THISCALL));

    // RenderSurface* Graphics::GetRenderTarget(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("RenderSurface* Graphics::GetRenderTarget(unsigned index) const", "RenderSurface@+ GetRenderTarget(uint) const", AS_METHODPR(Graphics, GetRenderTarget, (unsigned) const, RenderSurface*), AS_CALL_THISCALL));

    // RenderSurface* Graphics::GetDepthStencil() const
    methods.Push(RegisterObjectMethodArgs("RenderSurface* Graphics::GetDepthStencil() const", "RenderSurface@+ GetDepthStencil() const", AS_METHODPR(Graphics, GetDepthStencil, () const, RenderSurface*), AS_CALL_THISCALL));

    // IntRect Graphics::GetViewport() const
    methods.Push(RegisterObjectMethodArgs("IntRect Graphics::GetViewport() const", "IntRect GetViewport() const", AS_METHODPR(Graphics, GetViewport, () const, IntRect), AS_CALL_THISCALL));

    // BlendMode Graphics::GetBlendMode() const
    methods.Push(RegisterObjectMethodArgs("BlendMode Graphics::GetBlendMode() const", "BlendMode GetBlendMode() const", AS_METHODPR(Graphics, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));

    // bool Graphics::GetAlphaToCoverage() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetAlphaToCoverage() const", "bool GetAlphaToCoverage() const", AS_METHODPR(Graphics, GetAlphaToCoverage, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetColorWrite() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetColorWrite() const", "bool GetColorWrite() const", AS_METHODPR(Graphics, GetColorWrite, () const, bool), AS_CALL_THISCALL));

    // CullMode Graphics::GetCullMode() const
    methods.Push(RegisterObjectMethodArgs("CullMode Graphics::GetCullMode() const", "CullMode GetCullMode() const", AS_METHODPR(Graphics, GetCullMode, () const, CullMode), AS_CALL_THISCALL));

    // float Graphics::GetDepthConstantBias() const
    methods.Push(RegisterObjectMethodArgs("float Graphics::GetDepthConstantBias() const", "float GetDepthConstantBias() const", AS_METHODPR(Graphics, GetDepthConstantBias, () const, float), AS_CALL_THISCALL));

    // float Graphics::GetDepthSlopeScaledBias() const
    methods.Push(RegisterObjectMethodArgs("float Graphics::GetDepthSlopeScaledBias() const", "float GetDepthSlopeScaledBias() const", AS_METHODPR(Graphics, GetDepthSlopeScaledBias, () const, float), AS_CALL_THISCALL));

    // CompareMode Graphics::GetDepthTest() const
    methods.Push(RegisterObjectMethodArgs("CompareMode Graphics::GetDepthTest() const", "CompareMode GetDepthTest() const", AS_METHODPR(Graphics, GetDepthTest, () const, CompareMode), AS_CALL_THISCALL));

    // bool Graphics::GetDepthWrite() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetDepthWrite() const", "bool GetDepthWrite() const", AS_METHODPR(Graphics, GetDepthWrite, () const, bool), AS_CALL_THISCALL));

    // FillMode Graphics::GetFillMode() const
    methods.Push(RegisterObjectMethodArgs("FillMode Graphics::GetFillMode() const", "FillMode GetFillMode() const", AS_METHODPR(Graphics, GetFillMode, () const, FillMode), AS_CALL_THISCALL));

    // bool Graphics::GetLineAntiAlias() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetLineAntiAlias() const", "bool GetLineAntiAlias() const", AS_METHODPR(Graphics, GetLineAntiAlias, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetStencilTest() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetStencilTest() const", "bool GetStencilTest() const", AS_METHODPR(Graphics, GetStencilTest, () const, bool), AS_CALL_THISCALL));

    // bool Graphics::GetScissorTest() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetScissorTest() const", "bool GetScissorTest() const", AS_METHODPR(Graphics, GetScissorTest, () const, bool), AS_CALL_THISCALL));

    // const IntRect& Graphics::GetScissorRect() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& Graphics::GetScissorRect() const", "const IntRect& GetScissorRect() const", AS_METHODPR(Graphics, GetScissorRect, () const, const IntRect&), AS_CALL_THISCALL));

    // CompareMode Graphics::GetStencilTestMode() const
    methods.Push(RegisterObjectMethodArgs("CompareMode Graphics::GetStencilTestMode() const", "CompareMode GetStencilTestMode() const", AS_METHODPR(Graphics, GetStencilTestMode, () const, CompareMode), AS_CALL_THISCALL));

    // StencilOp Graphics::GetStencilPass() const
    methods.Push(RegisterObjectMethodArgs("StencilOp Graphics::GetStencilPass() const", "StencilOp GetStencilPass() const", AS_METHODPR(Graphics, GetStencilPass, () const, StencilOp), AS_CALL_THISCALL));

    // StencilOp Graphics::GetStencilFail() const
    methods.Push(RegisterObjectMethodArgs("StencilOp Graphics::GetStencilFail() const", "StencilOp GetStencilFail() const", AS_METHODPR(Graphics, GetStencilFail, () const, StencilOp), AS_CALL_THISCALL));

    // StencilOp Graphics::GetStencilZFail() const
    methods.Push(RegisterObjectMethodArgs("StencilOp Graphics::GetStencilZFail() const", "StencilOp GetStencilZFail() const", AS_METHODPR(Graphics, GetStencilZFail, () const, StencilOp), AS_CALL_THISCALL));

    // unsigned Graphics::GetStencilRef() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetStencilRef() const", "uint GetStencilRef() const", AS_METHODPR(Graphics, GetStencilRef, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Graphics::GetStencilCompareMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetStencilCompareMask() const", "uint GetStencilCompareMask() const", AS_METHODPR(Graphics, GetStencilCompareMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Graphics::GetStencilWriteMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Graphics::GetStencilWriteMask() const", "uint GetStencilWriteMask() const", AS_METHODPR(Graphics, GetStencilWriteMask, () const, unsigned), AS_CALL_THISCALL));

    // bool Graphics::GetUseClipPlane() const
    methods.Push(RegisterObjectMethodArgs("bool Graphics::GetUseClipPlane() const", "bool GetUseClipPlane() const", AS_METHODPR(Graphics, GetUseClipPlane, () const, bool), AS_CALL_THISCALL));

    // const String& Graphics::GetShaderCacheDir() const
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetShaderCacheDir() const", "const String& GetShaderCacheDir() const", AS_METHODPR(Graphics, GetShaderCacheDir, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Graphics::GetShaderCacheDir() const", "const String& get_shaderCacheDir() const", AS_METHODPR(Graphics, GetShaderCacheDir, () const, const String&), AS_CALL_THISCALL));

    // IntVector2 Graphics::GetRenderTargetDimensions() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Graphics::GetRenderTargetDimensions() const", "IntVector2 GetRenderTargetDimensions() const", AS_METHODPR(Graphics, GetRenderTargetDimensions, () const, IntVector2), AS_CALL_THISCALL));

    // void Graphics::OnWindowResized()
    methods.Push(RegisterObjectMethodArgs("void Graphics::OnWindowResized()", "void OnWindowResized()", AS_METHODPR(Graphics, OnWindowResized, (), void), AS_CALL_THISCALL));

    // void Graphics::OnWindowMoved()
    methods.Push(RegisterObjectMethodArgs("void Graphics::OnWindowMoved()", "void OnWindowMoved()", AS_METHODPR(Graphics, OnWindowMoved, (), void), AS_CALL_THISCALL));

    // void Graphics::Maximize()
    methods.Push(RegisterObjectMethodArgs("void Graphics::Maximize()", "void Maximize()", AS_METHODPR(Graphics, Maximize, (), void), AS_CALL_THISCALL));

    // void Graphics::Minimize()
    methods.Push(RegisterObjectMethodArgs("void Graphics::Minimize()", "void Minimize()", AS_METHODPR(Graphics, Minimize, (), void), AS_CALL_THISCALL));

    // void Graphics::Raise() const
    methods.Push(RegisterObjectMethodArgs("void Graphics::Raise() const", "void Raise() const", AS_METHODPR(Graphics, Raise, () const, void), AS_CALL_THISCALL));

    // void Graphics::CleanupScratchBuffers()
    methods.Push(RegisterObjectMethodArgs("void Graphics::CleanupScratchBuffers()", "void CleanupScratchBuffers()", AS_METHODPR(Graphics, CleanupScratchBuffers, (), void), AS_CALL_THISCALL));

    // void Graphics::CleanupShaderPrograms(ShaderVariation* variation)
    methods.Push(RegisterObjectMethodArgs("void Graphics::CleanupShaderPrograms(ShaderVariation* variation)", "void CleanupShaderPrograms(ShaderVariation@+)", AS_METHODPR(Graphics, CleanupShaderPrograms, (ShaderVariation*), void), AS_CALL_THISCALL));
}

// class HashBase | File: ../Container/HashBase.h
void CollectMembers_HashBase(Vector<RegisterObjectMethodArgs>& methods)
{
    // void HashBase::Swap(HashBase& rhs)
    methods.Push(RegisterObjectMethodArgs("void HashBase::Swap(HashBase& rhs)", "void Swap(HashBase&)", AS_METHODPR(HashBase, Swap, (HashBase&), void), AS_CALL_THISCALL));

    // unsigned HashBase::Size() const
    methods.Push(RegisterObjectMethodArgs("unsigned HashBase::Size() const", "uint Size() const", AS_METHODPR(HashBase, Size, () const, unsigned), AS_CALL_THISCALL));

    // unsigned HashBase::NumBuckets() const
    methods.Push(RegisterObjectMethodArgs("unsigned HashBase::NumBuckets() const", "uint NumBuckets() const", AS_METHODPR(HashBase, NumBuckets, () const, unsigned), AS_CALL_THISCALL));

    // bool HashBase::Empty() const
    methods.Push(RegisterObjectMethodArgs("bool HashBase::Empty() const", "bool Empty() const", AS_METHODPR(HashBase, Empty, () const, bool), AS_CALL_THISCALL));
}

// struct HashIteratorBase | File: ../Container/HashBase.h
void CollectMembers_HashIteratorBase(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool HashIteratorBase::operator!=(const HashIteratorBase& rhs) const
    // Only operator== is needed

    // bool HashIteratorBase::operator==(const HashIteratorBase& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool HashIteratorBase::operator==(const HashIteratorBase& rhs) const", "bool opEquals(const HashIteratorBase&in) const", AS_METHODPR(HashIteratorBase, operator==, (const HashIteratorBase&) const, bool), AS_CALL_THISCALL));

    // void HashIteratorBase::GotoNext()
    methods.Push(RegisterObjectMethodArgs("void HashIteratorBase::GotoNext()", "void GotoNext()", AS_METHODPR(HashIteratorBase, GotoNext, (), void), AS_CALL_THISCALL));

    // void HashIteratorBase::GotoPrev()
    methods.Push(RegisterObjectMethodArgs("void HashIteratorBase::GotoPrev()", "void GotoPrev()", AS_METHODPR(HashIteratorBase, GotoPrev, (), void), AS_CALL_THISCALL));
}

// struct HashNodeBase | File: ../Container/HashBase.h
void CollectMembers_HashNodeBase(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class HiresTimer | File: ../Core/Timer.h
void CollectMembers_HiresTimer(Vector<RegisterObjectMethodArgs>& methods)
{
    // long long HiresTimer::GetUSec(bool reset)
    methods.Push(RegisterObjectMethodArgs("long long HiresTimer::GetUSec(bool reset)", "int64 GetUSec(bool)", AS_METHODPR(HiresTimer, GetUSec, (bool), long long), AS_CALL_THISCALL));

    // void HiresTimer::Reset()
    methods.Push(RegisterObjectMethodArgs("void HiresTimer::Reset()", "void Reset()", AS_METHODPR(HiresTimer, Reset, (), void), AS_CALL_THISCALL));
}

// SharedPtr<Image> Image::GetNextLevel() const
// SharedPtr<Image> Image::GetNextLevel() const | File: ../Resource/Image.h
static Image* Image_GetNextLevel_void(Image* ptr)
{
    SharedPtr<Image> result = ptr->GetNextLevel();
    return result.Detach();
}


// SharedPtr<Image> Image::GetNextSibling() const
// SharedPtr<Image> Image::GetNextSibling() const | File: ../Resource/Image.h
static Image* Image_GetNextSibling_void(Image* ptr)
{
    SharedPtr<Image> result = ptr->GetNextSibling();
    return result.Detach();
}


// SharedPtr<Image> Image::ConvertToRGBA() const
// SharedPtr<Image> Image::ConvertToRGBA() const | File: ../Resource/Image.h
static Image* Image_ConvertToRGBA_void(Image* ptr)
{
    SharedPtr<Image> result = ptr->ConvertToRGBA();
    return result.Detach();
}


// SharedPtr<Image> Image::GetDecompressedImage() const
// SharedPtr<Image> Image::GetDecompressedImage() const | File: ../Resource/Image.h
static Image* Image_GetDecompressedImage_void(Image* ptr)
{
    SharedPtr<Image> result = ptr->GetDecompressedImage();
    return result.Detach();
}


// class Image | File: ../Resource/Image.h
void CollectMembers_Image(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");
    Remove(methods, "virtual bool Resource::SaveFile(const String& fileName) const");

    // unsigned char* Image::GetData() const
    // Error: type "unsigned char*" can not automatically bind

    // void Image::GetLevels(PODVector<Image*>& levels)
    // Error: type "PODVector<Image*>&" can not automatically bind

    // void Image::GetLevels(PODVector<const Image*>& levels) const
    // Error: type "PODVector<const Image*>&" can not automatically bind

    // SDL_Surface* Image::GetSDLSurface(const IntRect& rect=IntRect::ZERO) const
    // Error: type "SDL_Surface*" can not automatically bind

    // void Image::SetData(const unsigned char* pixelData)
    // Error: type "const unsigned char*" can not automatically bind

    // bool Image::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Image::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Image, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Image::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Image::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(Image, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool Image::SaveFile(const String& fileName) const override
    methods.Push(RegisterObjectMethodArgs("bool Image::SaveFile(const String& fileName) const override", "bool SaveFile(const String&in) const", AS_METHODPR(Image, SaveFile, (const String&) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Image::SaveFile(const String& fileName) const override", "bool Save(const String&in) const", AS_METHODPR(Image, SaveFile, (const String&) const, bool), AS_CALL_THISCALL));

    // bool Image::SetSize(int width, int height, unsigned components)
    methods.Push(RegisterObjectMethodArgs("bool Image::SetSize(int width, int height, unsigned components)", "bool SetSize(int, int, uint)", AS_METHODPR(Image, SetSize, (int, int, unsigned), bool), AS_CALL_THISCALL));

    // bool Image::SetSize(int width, int height, int depth, unsigned components)
    methods.Push(RegisterObjectMethodArgs("bool Image::SetSize(int width, int height, int depth, unsigned components)", "bool SetSize(int, int, int, uint)", AS_METHODPR(Image, SetSize, (int, int, int, unsigned), bool), AS_CALL_THISCALL));

    // void Image::SetPixel(int x, int y, const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Image::SetPixel(int x, int y, const Color& color)", "void SetPixel(int, int, const Color&in)", AS_METHODPR(Image, SetPixel, (int, int, const Color&), void), AS_CALL_THISCALL));

    // void Image::SetPixel(int x, int y, int z, const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Image::SetPixel(int x, int y, int z, const Color& color)", "void SetPixel(int, int, int, const Color&in)", AS_METHODPR(Image, SetPixel, (int, int, int, const Color&), void), AS_CALL_THISCALL));

    // void Image::SetPixelInt(int x, int y, unsigned uintColor)
    methods.Push(RegisterObjectMethodArgs("void Image::SetPixelInt(int x, int y, unsigned uintColor)", "void SetPixelInt(int, int, uint)", AS_METHODPR(Image, SetPixelInt, (int, int, unsigned), void), AS_CALL_THISCALL));

    // void Image::SetPixelInt(int x, int y, int z, unsigned uintColor)
    methods.Push(RegisterObjectMethodArgs("void Image::SetPixelInt(int x, int y, int z, unsigned uintColor)", "void SetPixelInt(int, int, int, uint)", AS_METHODPR(Image, SetPixelInt, (int, int, int, unsigned), void), AS_CALL_THISCALL));

    // bool Image::LoadColorLUT(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Image::LoadColorLUT(Deserializer& source)", "bool LoadColorLUT(Deserializer&)", AS_METHODPR(Image, LoadColorLUT, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Image::FlipHorizontal()
    methods.Push(RegisterObjectMethodArgs("bool Image::FlipHorizontal()", "bool FlipHorizontal()", AS_METHODPR(Image, FlipHorizontal, (), bool), AS_CALL_THISCALL));

    // bool Image::FlipVertical()
    methods.Push(RegisterObjectMethodArgs("bool Image::FlipVertical()", "bool FlipVertical()", AS_METHODPR(Image, FlipVertical, (), bool), AS_CALL_THISCALL));

    // bool Image::Resize(int width, int height)
    methods.Push(RegisterObjectMethodArgs("bool Image::Resize(int width, int height)", "bool Resize(int, int)", AS_METHODPR(Image, Resize, (int, int), bool), AS_CALL_THISCALL));

    // void Image::Clear(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Image::Clear(const Color& color)", "void Clear(const Color&in)", AS_METHODPR(Image, Clear, (const Color&), void), AS_CALL_THISCALL));

    // void Image::ClearInt(unsigned uintColor)
    methods.Push(RegisterObjectMethodArgs("void Image::ClearInt(unsigned uintColor)", "void ClearInt(uint)", AS_METHODPR(Image, ClearInt, (unsigned), void), AS_CALL_THISCALL));

    // bool Image::SaveBMP(const String& fileName) const
    methods.Push(RegisterObjectMethodArgs("bool Image::SaveBMP(const String& fileName) const", "bool SaveBMP(const String&in) const", AS_METHODPR(Image, SaveBMP, (const String&) const, bool), AS_CALL_THISCALL));

    // bool Image::SavePNG(const String& fileName) const
    methods.Push(RegisterObjectMethodArgs("bool Image::SavePNG(const String& fileName) const", "bool SavePNG(const String&in) const", AS_METHODPR(Image, SavePNG, (const String&) const, bool), AS_CALL_THISCALL));

    // bool Image::SaveTGA(const String& fileName) const
    methods.Push(RegisterObjectMethodArgs("bool Image::SaveTGA(const String& fileName) const", "bool SaveTGA(const String&in) const", AS_METHODPR(Image, SaveTGA, (const String&) const, bool), AS_CALL_THISCALL));

    // bool Image::SaveJPG(const String& fileName, int quality) const
    methods.Push(RegisterObjectMethodArgs("bool Image::SaveJPG(const String& fileName, int quality) const", "bool SaveJPG(const String&in, int) const", AS_METHODPR(Image, SaveJPG, (const String&, int) const, bool), AS_CALL_THISCALL));

    // bool Image::SaveDDS(const String& fileName) const
    methods.Push(RegisterObjectMethodArgs("bool Image::SaveDDS(const String& fileName) const", "bool SaveDDS(const String&in) const", AS_METHODPR(Image, SaveDDS, (const String&) const, bool), AS_CALL_THISCALL));

    // bool Image::SaveWEBP(const String& fileName, float compression=0.0f) const
    methods.Push(RegisterObjectMethodArgs("bool Image::SaveWEBP(const String& fileName, float compression=0.0f) const", "bool SaveWEBP(const String&in, float = 0.0f) const", AS_METHODPR(Image, SaveWEBP, (const String&, float) const, bool), AS_CALL_THISCALL));

    // bool Image::IsCubemap() const
    methods.Push(RegisterObjectMethodArgs("bool Image::IsCubemap() const", "bool IsCubemap() const", AS_METHODPR(Image, IsCubemap, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Image::IsCubemap() const", "bool get_cubemap() const", AS_METHODPR(Image, IsCubemap, () const, bool), AS_CALL_THISCALL));

    // bool Image::IsArray() const
    methods.Push(RegisterObjectMethodArgs("bool Image::IsArray() const", "bool IsArray() const", AS_METHODPR(Image, IsArray, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Image::IsArray() const", "bool get_array() const", AS_METHODPR(Image, IsArray, () const, bool), AS_CALL_THISCALL));

    // bool Image::IsSRGB() const
    methods.Push(RegisterObjectMethodArgs("bool Image::IsSRGB() const", "bool IsSRGB() const", AS_METHODPR(Image, IsSRGB, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Image::IsSRGB() const", "bool get_sRGB() const", AS_METHODPR(Image, IsSRGB, () const, bool), AS_CALL_THISCALL));

    // Color Image::GetPixel(int x, int y) const
    methods.Push(RegisterObjectMethodArgs("Color Image::GetPixel(int x, int y) const", "Color GetPixel(int, int) const", AS_METHODPR(Image, GetPixel, (int, int) const, Color), AS_CALL_THISCALL));

    // Color Image::GetPixel(int x, int y, int z) const
    methods.Push(RegisterObjectMethodArgs("Color Image::GetPixel(int x, int y, int z) const", "Color GetPixel(int, int, int) const", AS_METHODPR(Image, GetPixel, (int, int, int) const, Color), AS_CALL_THISCALL));

    // unsigned Image::GetPixelInt(int x, int y) const
    methods.Push(RegisterObjectMethodArgs("unsigned Image::GetPixelInt(int x, int y) const", "uint GetPixelInt(int, int) const", AS_METHODPR(Image, GetPixelInt, (int, int) const, unsigned), AS_CALL_THISCALL));

    // unsigned Image::GetPixelInt(int x, int y, int z) const
    methods.Push(RegisterObjectMethodArgs("unsigned Image::GetPixelInt(int x, int y, int z) const", "uint GetPixelInt(int, int, int) const", AS_METHODPR(Image, GetPixelInt, (int, int, int) const, unsigned), AS_CALL_THISCALL));

    // Color Image::GetPixelBilinear(float x, float y) const
    methods.Push(RegisterObjectMethodArgs("Color Image::GetPixelBilinear(float x, float y) const", "Color GetPixelBilinear(float, float) const", AS_METHODPR(Image, GetPixelBilinear, (float, float) const, Color), AS_CALL_THISCALL));

    // Color Image::GetPixelTrilinear(float x, float y, float z) const
    methods.Push(RegisterObjectMethodArgs("Color Image::GetPixelTrilinear(float x, float y, float z) const", "Color GetPixelTrilinear(float, float, float) const", AS_METHODPR(Image, GetPixelTrilinear, (float, float, float) const, Color), AS_CALL_THISCALL));

    // int Image::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int Image::GetWidth() const", "int GetWidth() const", AS_METHODPR(Image, GetWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Image::GetWidth() const", "int get_width() const", AS_METHODPR(Image, GetWidth, () const, int), AS_CALL_THISCALL));

    // int Image::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int Image::GetHeight() const", "int GetHeight() const", AS_METHODPR(Image, GetHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Image::GetHeight() const", "int get_height() const", AS_METHODPR(Image, GetHeight, () const, int), AS_CALL_THISCALL));

    // int Image::GetDepth() const
    methods.Push(RegisterObjectMethodArgs("int Image::GetDepth() const", "int GetDepth() const", AS_METHODPR(Image, GetDepth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Image::GetDepth() const", "int get_depth() const", AS_METHODPR(Image, GetDepth, () const, int), AS_CALL_THISCALL));

    // unsigned Image::GetComponents() const
    methods.Push(RegisterObjectMethodArgs("unsigned Image::GetComponents() const", "uint GetComponents() const", AS_METHODPR(Image, GetComponents, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Image::GetComponents() const", "uint get_components() const", AS_METHODPR(Image, GetComponents, () const, unsigned), AS_CALL_THISCALL));

    // bool Image::IsCompressed() const
    methods.Push(RegisterObjectMethodArgs("bool Image::IsCompressed() const", "bool IsCompressed() const", AS_METHODPR(Image, IsCompressed, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Image::IsCompressed() const", "bool get_compressed() const", AS_METHODPR(Image, IsCompressed, () const, bool), AS_CALL_THISCALL));

    // CompressedFormat Image::GetCompressedFormat() const
    methods.Push(RegisterObjectMethodArgs("CompressedFormat Image::GetCompressedFormat() const", "CompressedFormat GetCompressedFormat() const", AS_METHODPR(Image, GetCompressedFormat, () const, CompressedFormat), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CompressedFormat Image::GetCompressedFormat() const", "CompressedFormat get_compressedFormat() const", AS_METHODPR(Image, GetCompressedFormat, () const, CompressedFormat), AS_CALL_THISCALL));

    // unsigned Image::GetNumCompressedLevels() const
    methods.Push(RegisterObjectMethodArgs("unsigned Image::GetNumCompressedLevels() const", "uint GetNumCompressedLevels() const", AS_METHODPR(Image, GetNumCompressedLevels, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Image::GetNumCompressedLevels() const", "uint get_numCompressedLevels() const", AS_METHODPR(Image, GetNumCompressedLevels, () const, unsigned), AS_CALL_THISCALL));

    // SharedPtr<Image> Image::GetNextLevel() const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Image> Image::GetNextLevel() const", "Image@+ GetNextLevel() const", AS_FUNCTION_OBJFIRST(Image_GetNextLevel_void), AS_CALL_CDECL_OBJFIRST));

    // SharedPtr<Image> Image::GetNextSibling() const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Image> Image::GetNextSibling() const", "Image@+ GetNextSibling() const", AS_FUNCTION_OBJFIRST(Image_GetNextSibling_void), AS_CALL_CDECL_OBJFIRST));

    // SharedPtr<Image> Image::ConvertToRGBA() const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Image> Image::ConvertToRGBA() const", "Image@+ ConvertToRGBA() const", AS_FUNCTION_OBJFIRST(Image_ConvertToRGBA_void), AS_CALL_CDECL_OBJFIRST));

    // CompressedLevel Image::GetCompressedLevel(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("CompressedLevel Image::GetCompressedLevel(unsigned index) const", "CompressedLevel GetCompressedLevel(uint) const", AS_METHODPR(Image, GetCompressedLevel, (unsigned) const, CompressedLevel), AS_CALL_THISCALL));

    // SharedPtr<Image> Image::GetDecompressedImage() const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Image> Image::GetDecompressedImage() const", "Image@+ GetDecompressedImage() const", AS_FUNCTION_OBJFIRST(Image_GetDecompressedImage_void), AS_CALL_CDECL_OBJFIRST));

    // Image* Image::GetSubimage(const IntRect& rect) const
    methods.Push(RegisterObjectMethodArgs("Image* Image::GetSubimage(const IntRect& rect) const", "Image@+ GetSubimage(const IntRect&in) const", AS_METHODPR(Image, GetSubimage, (const IntRect&) const, Image*), AS_CALL_THISCALL));

    // void Image::PrecalculateLevels()
    methods.Push(RegisterObjectMethodArgs("void Image::PrecalculateLevels()", "void PrecalculateLevels()", AS_METHODPR(Image, PrecalculateLevels, (), void), AS_CALL_THISCALL));

    // bool Image::HasAlphaChannel() const
    methods.Push(RegisterObjectMethodArgs("bool Image::HasAlphaChannel() const", "bool HasAlphaChannel() const", AS_METHODPR(Image, HasAlphaChannel, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Image::HasAlphaChannel() const", "bool get_hasAlphaChannel() const", AS_METHODPR(Image, HasAlphaChannel, () const, bool), AS_CALL_THISCALL));

    // bool Image::SetSubimage(const Image* image, const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("bool Image::SetSubimage(const Image* image, const IntRect& rect)", "bool SetSubimage(Image@+, const IntRect&in)", AS_METHODPR(Image, SetSubimage, (const Image*, const IntRect&), bool), AS_CALL_THISCALL));

    // void Image::CleanupLevels()
    methods.Push(RegisterObjectMethodArgs("void Image::CleanupLevels()", "void CleanupLevels()", AS_METHODPR(Image, CleanupLevels, (), void), AS_CALL_THISCALL));
}

// class IndexBuffer | File: ../Graphics/IndexBuffer.h
void CollectMembers_IndexBuffer(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);
    CollectMembers_GPUObject(methods);

    Remove(methods, "virtual void GPUObject::OnDeviceLost()");
    Remove(methods, "virtual void GPUObject::OnDeviceReset()");
    Remove(methods, "virtual void GPUObject::Release()");

    // unsigned char* IndexBuffer::GetShadowData() const
    // Error: type "unsigned char*" can not automatically bind

    // SharedArrayPtr<unsigned char> IndexBuffer::GetShadowDataShared() const
    // Error: type "SharedArrayPtr<unsigned char>" can not automatically bind

    // void* IndexBuffer::Lock(unsigned start, unsigned count, bool discard=false)
    // Error: type "void*" can not automatically bind

    // bool IndexBuffer::SetData(const void* data)
    // Error: type "const void*" can not automatically bind

    // bool IndexBuffer::SetDataRange(const void* data, unsigned start, unsigned count, bool discard=false)
    // Error: type "const void*" can not automatically bind

    // void IndexBuffer::OnDeviceLost() override
    methods.Push(RegisterObjectMethodArgs("void IndexBuffer::OnDeviceLost() override", "void OnDeviceLost()", AS_METHODPR(IndexBuffer, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // void IndexBuffer::OnDeviceReset() override
    methods.Push(RegisterObjectMethodArgs("void IndexBuffer::OnDeviceReset() override", "void OnDeviceReset()", AS_METHODPR(IndexBuffer, OnDeviceReset, (), void), AS_CALL_THISCALL));

    // void IndexBuffer::Release() override
    methods.Push(RegisterObjectMethodArgs("void IndexBuffer::Release() override", "void Release()", AS_METHODPR(IndexBuffer, Release, (), void), AS_CALL_THISCALL));

    // void IndexBuffer::SetShadowed(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IndexBuffer::SetShadowed(bool enable)", "void SetShadowed(bool)", AS_METHODPR(IndexBuffer, SetShadowed, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IndexBuffer::SetShadowed(bool enable)", "void set_shadowed(bool)", AS_METHODPR(IndexBuffer, SetShadowed, (bool), void), AS_CALL_THISCALL));

    // bool IndexBuffer::SetSize(unsigned indexCount, bool largeIndices, bool dynamic=false)
    methods.Push(RegisterObjectMethodArgs("bool IndexBuffer::SetSize(unsigned indexCount, bool largeIndices, bool dynamic=false)", "bool SetSize(uint, bool, bool = false)", AS_METHODPR(IndexBuffer, SetSize, (unsigned, bool, bool), bool), AS_CALL_THISCALL));

    // void IndexBuffer::Unlock()
    methods.Push(RegisterObjectMethodArgs("void IndexBuffer::Unlock()", "void Unlock()", AS_METHODPR(IndexBuffer, Unlock, (), void), AS_CALL_THISCALL));

    // bool IndexBuffer::IsShadowed() const
    methods.Push(RegisterObjectMethodArgs("bool IndexBuffer::IsShadowed() const", "bool IsShadowed() const", AS_METHODPR(IndexBuffer, IsShadowed, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IndexBuffer::IsShadowed() const", "bool get_shadowed() const", AS_METHODPR(IndexBuffer, IsShadowed, () const, bool), AS_CALL_THISCALL));

    // bool IndexBuffer::IsDynamic() const
    methods.Push(RegisterObjectMethodArgs("bool IndexBuffer::IsDynamic() const", "bool IsDynamic() const", AS_METHODPR(IndexBuffer, IsDynamic, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IndexBuffer::IsDynamic() const", "bool get_dynamic() const", AS_METHODPR(IndexBuffer, IsDynamic, () const, bool), AS_CALL_THISCALL));

    // bool IndexBuffer::IsLocked() const
    methods.Push(RegisterObjectMethodArgs("bool IndexBuffer::IsLocked() const", "bool IsLocked() const", AS_METHODPR(IndexBuffer, IsLocked, () const, bool), AS_CALL_THISCALL));

    // unsigned IndexBuffer::GetIndexCount() const
    methods.Push(RegisterObjectMethodArgs("unsigned IndexBuffer::GetIndexCount() const", "uint GetIndexCount() const", AS_METHODPR(IndexBuffer, GetIndexCount, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned IndexBuffer::GetIndexCount() const", "uint get_indexCount() const", AS_METHODPR(IndexBuffer, GetIndexCount, () const, unsigned), AS_CALL_THISCALL));

    // unsigned IndexBuffer::GetIndexSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned IndexBuffer::GetIndexSize() const", "uint GetIndexSize() const", AS_METHODPR(IndexBuffer, GetIndexSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned IndexBuffer::GetIndexSize() const", "uint get_indexSize() const", AS_METHODPR(IndexBuffer, GetIndexSize, () const, unsigned), AS_CALL_THISCALL));

    // bool IndexBuffer::GetUsedVertexRange(unsigned start, unsigned count, unsigned& minVertex, unsigned& vertexCount)
    methods.Push(RegisterObjectMethodArgs("bool IndexBuffer::GetUsedVertexRange(unsigned start, unsigned count, unsigned& minVertex, unsigned& vertexCount)", "bool GetUsedVertexRange(uint, uint, uint&, uint&)", AS_METHODPR(IndexBuffer, GetUsedVertexRange, (unsigned, unsigned, unsigned&, unsigned&), bool), AS_CALL_THISCALL));
}

// struct IndexBufferDesc | File: ../Graphics/Model.h
void CollectMembers_IndexBufferDesc(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Input | File: ../Input/Input.h
void CollectMembers_Input(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Input::Update()
    methods.Push(RegisterObjectMethodArgs("void Input::Update()", "void Update()", AS_METHODPR(Input, Update, (), void), AS_CALL_THISCALL));

    // void Input::SetToggleFullscreen(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Input::SetToggleFullscreen(bool enable)", "void SetToggleFullscreen(bool)", AS_METHODPR(Input, SetToggleFullscreen, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Input::SetToggleFullscreen(bool enable)", "void set_toggleFullscreen(bool)", AS_METHODPR(Input, SetToggleFullscreen, (bool), void), AS_CALL_THISCALL));

    // void Input::SetMouseVisible(bool enable, bool suppressEvent=false)
    methods.Push(RegisterObjectMethodArgs("void Input::SetMouseVisible(bool enable, bool suppressEvent=false)", "void SetMouseVisible(bool, bool = false)", AS_METHODPR(Input, SetMouseVisible, (bool, bool), void), AS_CALL_THISCALL));

    // void Input::ResetMouseVisible()
    methods.Push(RegisterObjectMethodArgs("void Input::ResetMouseVisible()", "void ResetMouseVisible()", AS_METHODPR(Input, ResetMouseVisible, (), void), AS_CALL_THISCALL));

    // void Input::SetMouseGrabbed(bool grab, bool suppressEvent=false)
    methods.Push(RegisterObjectMethodArgs("void Input::SetMouseGrabbed(bool grab, bool suppressEvent=false)", "void SetMouseGrabbed(bool, bool = false)", AS_METHODPR(Input, SetMouseGrabbed, (bool, bool), void), AS_CALL_THISCALL));

    // void Input::ResetMouseGrabbed()
    methods.Push(RegisterObjectMethodArgs("void Input::ResetMouseGrabbed()", "void ResetMouseGrabbed()", AS_METHODPR(Input, ResetMouseGrabbed, (), void), AS_CALL_THISCALL));

    // void Input::SetMouseMode(MouseMode mode, bool suppressEvent=false)
    methods.Push(RegisterObjectMethodArgs("void Input::SetMouseMode(MouseMode mode, bool suppressEvent=false)", "void SetMouseMode(MouseMode, bool = false)", AS_METHODPR(Input, SetMouseMode, (MouseMode, bool), void), AS_CALL_THISCALL));

    // void Input::ResetMouseMode()
    methods.Push(RegisterObjectMethodArgs("void Input::ResetMouseMode()", "void ResetMouseMode()", AS_METHODPR(Input, ResetMouseMode, (), void), AS_CALL_THISCALL));

    // SDL_JoystickID Input::AddScreenJoystick(XMLFile* layoutFile=nullptr, XMLFile* styleFile=nullptr)
    methods.Push(RegisterObjectMethodArgs("SDL_JoystickID Input::AddScreenJoystick(XMLFile* layoutFile=nullptr, XMLFile* styleFile=nullptr)", "SDL_JoystickID AddScreenJoystick(XMLFile@+ = null, XMLFile@+ = null)", AS_METHODPR(Input, AddScreenJoystick, (XMLFile*, XMLFile*), SDL_JoystickID), AS_CALL_THISCALL));

    // bool Input::RemoveScreenJoystick(SDL_JoystickID id)
    methods.Push(RegisterObjectMethodArgs("bool Input::RemoveScreenJoystick(SDL_JoystickID id)", "bool RemoveScreenJoystick(SDL_JoystickID)", AS_METHODPR(Input, RemoveScreenJoystick, (SDL_JoystickID), bool), AS_CALL_THISCALL));

    // void Input::SetScreenJoystickVisible(SDL_JoystickID id, bool enable)
    methods.Push(RegisterObjectMethodArgs("void Input::SetScreenJoystickVisible(SDL_JoystickID id, bool enable)", "void SetScreenJoystickVisible(SDL_JoystickID, bool)", AS_METHODPR(Input, SetScreenJoystickVisible, (SDL_JoystickID, bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Input::SetScreenJoystickVisible(SDL_JoystickID id, bool enable)", "void set_screenJoystickVisible(SDL_JoystickID, bool)", AS_METHODPR(Input, SetScreenJoystickVisible, (SDL_JoystickID, bool), void), AS_CALL_THISCALL));

    // void Input::SetScreenKeyboardVisible(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Input::SetScreenKeyboardVisible(bool enable)", "void SetScreenKeyboardVisible(bool)", AS_METHODPR(Input, SetScreenKeyboardVisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Input::SetScreenKeyboardVisible(bool enable)", "void set_screenKeyboardVisible(bool)", AS_METHODPR(Input, SetScreenKeyboardVisible, (bool), void), AS_CALL_THISCALL));

    // void Input::SetTouchEmulation(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Input::SetTouchEmulation(bool enable)", "void SetTouchEmulation(bool)", AS_METHODPR(Input, SetTouchEmulation, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Input::SetTouchEmulation(bool enable)", "void set_touchEmulation(bool)", AS_METHODPR(Input, SetTouchEmulation, (bool), void), AS_CALL_THISCALL));

    // bool Input::RecordGesture()
    methods.Push(RegisterObjectMethodArgs("bool Input::RecordGesture()", "bool RecordGesture()", AS_METHODPR(Input, RecordGesture, (), bool), AS_CALL_THISCALL));

    // bool Input::SaveGestures(Serializer& dest)
    methods.Push(RegisterObjectMethodArgs("bool Input::SaveGestures(Serializer& dest)", "bool SaveGestures(Serializer&)", AS_METHODPR(Input, SaveGestures, (Serializer&), bool), AS_CALL_THISCALL));

    // bool Input::SaveGesture(Serializer& dest, unsigned gestureID)
    methods.Push(RegisterObjectMethodArgs("bool Input::SaveGesture(Serializer& dest, unsigned gestureID)", "bool SaveGesture(Serializer&, uint)", AS_METHODPR(Input, SaveGesture, (Serializer&, unsigned), bool), AS_CALL_THISCALL));

    // unsigned Input::LoadGestures(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("unsigned Input::LoadGestures(Deserializer& source)", "uint LoadGestures(Deserializer&)", AS_METHODPR(Input, LoadGestures, (Deserializer&), unsigned), AS_CALL_THISCALL));

    // bool Input::RemoveGesture(unsigned gestureID)
    methods.Push(RegisterObjectMethodArgs("bool Input::RemoveGesture(unsigned gestureID)", "bool RemoveGesture(uint)", AS_METHODPR(Input, RemoveGesture, (unsigned), bool), AS_CALL_THISCALL));

    // void Input::RemoveAllGestures()
    methods.Push(RegisterObjectMethodArgs("void Input::RemoveAllGestures()", "void RemoveAllGestures()", AS_METHODPR(Input, RemoveAllGestures, (), void), AS_CALL_THISCALL));

    // void Input::SetMousePosition(const IntVector2& position)
    methods.Push(RegisterObjectMethodArgs("void Input::SetMousePosition(const IntVector2& position)", "void SetMousePosition(const IntVector2&in)", AS_METHODPR(Input, SetMousePosition, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Input::SetMousePosition(const IntVector2& position)", "void set_mousePosition(const IntVector2&in)", AS_METHODPR(Input, SetMousePosition, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Input::CenterMousePosition()
    methods.Push(RegisterObjectMethodArgs("void Input::CenterMousePosition()", "void CenterMousePosition()", AS_METHODPR(Input, CenterMousePosition, (), void), AS_CALL_THISCALL));

    // Key Input::GetKeyFromName(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Key Input::GetKeyFromName(const String& name) const", "Key GetKeyFromName(const String&in) const", AS_METHODPR(Input, GetKeyFromName, (const String&) const, Key), AS_CALL_THISCALL));

    // Key Input::GetKeyFromScancode(Scancode scancode) const
    methods.Push(RegisterObjectMethodArgs("Key Input::GetKeyFromScancode(Scancode scancode) const", "Key GetKeyFromScancode(Scancode) const", AS_METHODPR(Input, GetKeyFromScancode, (Scancode) const, Key), AS_CALL_THISCALL));

    // String Input::GetKeyName(Key key) const
    methods.Push(RegisterObjectMethodArgs("String Input::GetKeyName(Key key) const", "String GetKeyName(Key) const", AS_METHODPR(Input, GetKeyName, (Key) const, String), AS_CALL_THISCALL));

    // Scancode Input::GetScancodeFromKey(Key key) const
    methods.Push(RegisterObjectMethodArgs("Scancode Input::GetScancodeFromKey(Key key) const", "Scancode GetScancodeFromKey(Key) const", AS_METHODPR(Input, GetScancodeFromKey, (Key) const, Scancode), AS_CALL_THISCALL));

    // Scancode Input::GetScancodeFromName(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Scancode Input::GetScancodeFromName(const String& name) const", "Scancode GetScancodeFromName(const String&in) const", AS_METHODPR(Input, GetScancodeFromName, (const String&) const, Scancode), AS_CALL_THISCALL));

    // String Input::GetScancodeName(Scancode scancode) const
    methods.Push(RegisterObjectMethodArgs("String Input::GetScancodeName(Scancode scancode) const", "String GetScancodeName(Scancode) const", AS_METHODPR(Input, GetScancodeName, (Scancode) const, String), AS_CALL_THISCALL));

    // bool Input::GetKeyDown(Key key) const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetKeyDown(Key key) const", "bool GetKeyDown(Key) const", AS_METHODPR(Input, GetKeyDown, (Key) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetKeyDown(Key key) const", "bool get_keyDown(Key) const", AS_METHODPR(Input, GetKeyDown, (Key) const, bool), AS_CALL_THISCALL));

    // bool Input::GetKeyPress(Key key) const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetKeyPress(Key key) const", "bool GetKeyPress(Key) const", AS_METHODPR(Input, GetKeyPress, (Key) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetKeyPress(Key key) const", "bool get_keyPress(Key) const", AS_METHODPR(Input, GetKeyPress, (Key) const, bool), AS_CALL_THISCALL));

    // bool Input::GetScancodeDown(Scancode scancode) const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetScancodeDown(Scancode scancode) const", "bool GetScancodeDown(Scancode) const", AS_METHODPR(Input, GetScancodeDown, (Scancode) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetScancodeDown(Scancode scancode) const", "bool get_scancodeDown(Scancode) const", AS_METHODPR(Input, GetScancodeDown, (Scancode) const, bool), AS_CALL_THISCALL));

    // bool Input::GetScancodePress(Scancode scancode) const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetScancodePress(Scancode scancode) const", "bool GetScancodePress(Scancode) const", AS_METHODPR(Input, GetScancodePress, (Scancode) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetScancodePress(Scancode scancode) const", "bool get_scancodePress(Scancode) const", AS_METHODPR(Input, GetScancodePress, (Scancode) const, bool), AS_CALL_THISCALL));

    // bool Input::GetMouseButtonDown(MouseButtonFlags button) const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetMouseButtonDown(MouseButtonFlags button) const", "bool GetMouseButtonDown(MouseButtonFlags) const", AS_METHODPR(Input, GetMouseButtonDown, (MouseButtonFlags) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetMouseButtonDown(MouseButtonFlags button) const", "bool get_mouseButtonDown(MouseButtonFlags) const", AS_METHODPR(Input, GetMouseButtonDown, (MouseButtonFlags) const, bool), AS_CALL_THISCALL));

    // bool Input::GetMouseButtonPress(MouseButtonFlags button) const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetMouseButtonPress(MouseButtonFlags button) const", "bool GetMouseButtonPress(MouseButtonFlags) const", AS_METHODPR(Input, GetMouseButtonPress, (MouseButtonFlags) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetMouseButtonPress(MouseButtonFlags button) const", "bool get_mouseButtonPress(MouseButtonFlags) const", AS_METHODPR(Input, GetMouseButtonPress, (MouseButtonFlags) const, bool), AS_CALL_THISCALL));

    // bool Input::GetQualifierDown(Qualifier qualifier) const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetQualifierDown(Qualifier qualifier) const", "bool GetQualifierDown(Qualifier) const", AS_METHODPR(Input, GetQualifierDown, (Qualifier) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetQualifierDown(Qualifier qualifier) const", "bool get_qualifierDown(Qualifier) const", AS_METHODPR(Input, GetQualifierDown, (Qualifier) const, bool), AS_CALL_THISCALL));

    // bool Input::GetQualifierPress(Qualifier qualifier) const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetQualifierPress(Qualifier qualifier) const", "bool GetQualifierPress(Qualifier) const", AS_METHODPR(Input, GetQualifierPress, (Qualifier) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetQualifierPress(Qualifier qualifier) const", "bool get_qualifierPress(Qualifier) const", AS_METHODPR(Input, GetQualifierPress, (Qualifier) const, bool), AS_CALL_THISCALL));

    // QualifierFlags Input::GetQualifiers() const
    methods.Push(RegisterObjectMethodArgs("QualifierFlags Input::GetQualifiers() const", "QualifierFlags GetQualifiers() const", AS_METHODPR(Input, GetQualifiers, () const, QualifierFlags), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("QualifierFlags Input::GetQualifiers() const", "QualifierFlags get_qualifiers() const", AS_METHODPR(Input, GetQualifiers, () const, QualifierFlags), AS_CALL_THISCALL));

    // IntVector2 Input::GetMousePosition() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Input::GetMousePosition() const", "IntVector2 GetMousePosition() const", AS_METHODPR(Input, GetMousePosition, () const, IntVector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector2 Input::GetMousePosition() const", "IntVector2 get_mousePosition() const", AS_METHODPR(Input, GetMousePosition, () const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 Input::GetMouseMove() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Input::GetMouseMove() const", "IntVector2 GetMouseMove() const", AS_METHODPR(Input, GetMouseMove, () const, IntVector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector2 Input::GetMouseMove() const", "IntVector2 get_mouseMove() const", AS_METHODPR(Input, GetMouseMove, () const, IntVector2), AS_CALL_THISCALL));

    // int Input::GetMouseMoveX() const
    methods.Push(RegisterObjectMethodArgs("int Input::GetMouseMoveX() const", "int GetMouseMoveX() const", AS_METHODPR(Input, GetMouseMoveX, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Input::GetMouseMoveX() const", "int get_mouseMoveX() const", AS_METHODPR(Input, GetMouseMoveX, () const, int), AS_CALL_THISCALL));

    // int Input::GetMouseMoveY() const
    methods.Push(RegisterObjectMethodArgs("int Input::GetMouseMoveY() const", "int GetMouseMoveY() const", AS_METHODPR(Input, GetMouseMoveY, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Input::GetMouseMoveY() const", "int get_mouseMoveY() const", AS_METHODPR(Input, GetMouseMoveY, () const, int), AS_CALL_THISCALL));

    // int Input::GetMouseMoveWheel() const
    methods.Push(RegisterObjectMethodArgs("int Input::GetMouseMoveWheel() const", "int GetMouseMoveWheel() const", AS_METHODPR(Input, GetMouseMoveWheel, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Input::GetMouseMoveWheel() const", "int get_mouseMoveWheel() const", AS_METHODPR(Input, GetMouseMoveWheel, () const, int), AS_CALL_THISCALL));

    // Vector2 Input::GetInputScale() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Input::GetInputScale() const", "Vector2 GetInputScale() const", AS_METHODPR(Input, GetInputScale, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Input::GetInputScale() const", "Vector2 get_inputScale() const", AS_METHODPR(Input, GetInputScale, () const, Vector2), AS_CALL_THISCALL));

    // unsigned Input::GetNumTouches() const
    methods.Push(RegisterObjectMethodArgs("unsigned Input::GetNumTouches() const", "uint GetNumTouches() const", AS_METHODPR(Input, GetNumTouches, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Input::GetNumTouches() const", "uint get_numTouches() const", AS_METHODPR(Input, GetNumTouches, () const, unsigned), AS_CALL_THISCALL));

    // TouchState* Input::GetTouch(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("TouchState* Input::GetTouch(unsigned index) const", "TouchState@+ GetTouch(uint) const", AS_METHODPR(Input, GetTouch, (unsigned) const, TouchState*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TouchState* Input::GetTouch(unsigned index) const", "TouchState@+ get_touches(uint) const", AS_METHODPR(Input, GetTouch, (unsigned) const, TouchState*), AS_CALL_THISCALL));

    // unsigned Input::GetNumJoysticks() const
    methods.Push(RegisterObjectMethodArgs("unsigned Input::GetNumJoysticks() const", "uint GetNumJoysticks() const", AS_METHODPR(Input, GetNumJoysticks, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Input::GetNumJoysticks() const", "uint get_numJoysticks() const", AS_METHODPR(Input, GetNumJoysticks, () const, unsigned), AS_CALL_THISCALL));

    // JoystickState* Input::GetJoystick(SDL_JoystickID id)
    methods.Push(RegisterObjectMethodArgs("JoystickState* Input::GetJoystick(SDL_JoystickID id)", "JoystickState@+ GetJoystick(SDL_JoystickID)", AS_METHODPR(Input, GetJoystick, (SDL_JoystickID), JoystickState*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("JoystickState* Input::GetJoystick(SDL_JoystickID id)", "JoystickState@+ get_joysticks(SDL_JoystickID)", AS_METHODPR(Input, GetJoystick, (SDL_JoystickID), JoystickState*), AS_CALL_THISCALL));

    // JoystickState* Input::GetJoystickByIndex(unsigned index)
    methods.Push(RegisterObjectMethodArgs("JoystickState* Input::GetJoystickByIndex(unsigned index)", "JoystickState@+ GetJoystickByIndex(uint)", AS_METHODPR(Input, GetJoystickByIndex, (unsigned), JoystickState*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("JoystickState* Input::GetJoystickByIndex(unsigned index)", "JoystickState@+ get_joysticksByIndex(uint)", AS_METHODPR(Input, GetJoystickByIndex, (unsigned), JoystickState*), AS_CALL_THISCALL));

    // JoystickState* Input::GetJoystickByName(const String& name)
    methods.Push(RegisterObjectMethodArgs("JoystickState* Input::GetJoystickByName(const String& name)", "JoystickState@+ GetJoystickByName(const String&in)", AS_METHODPR(Input, GetJoystickByName, (const String&), JoystickState*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("JoystickState* Input::GetJoystickByName(const String& name)", "JoystickState@+ get_joysticksByName(const String&in)", AS_METHODPR(Input, GetJoystickByName, (const String&), JoystickState*), AS_CALL_THISCALL));

    // bool Input::GetToggleFullscreen() const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetToggleFullscreen() const", "bool GetToggleFullscreen() const", AS_METHODPR(Input, GetToggleFullscreen, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetToggleFullscreen() const", "bool get_toggleFullscreen() const", AS_METHODPR(Input, GetToggleFullscreen, () const, bool), AS_CALL_THISCALL));

    // bool Input::IsScreenJoystickVisible(SDL_JoystickID id) const
    methods.Push(RegisterObjectMethodArgs("bool Input::IsScreenJoystickVisible(SDL_JoystickID id) const", "bool IsScreenJoystickVisible(SDL_JoystickID) const", AS_METHODPR(Input, IsScreenJoystickVisible, (SDL_JoystickID) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::IsScreenJoystickVisible(SDL_JoystickID id) const", "bool get_screenJoystickVisible(SDL_JoystickID) const", AS_METHODPR(Input, IsScreenJoystickVisible, (SDL_JoystickID) const, bool), AS_CALL_THISCALL));

    // bool Input::GetScreenKeyboardSupport() const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetScreenKeyboardSupport() const", "bool GetScreenKeyboardSupport() const", AS_METHODPR(Input, GetScreenKeyboardSupport, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetScreenKeyboardSupport() const", "bool get_screenKeyboardSupport() const", AS_METHODPR(Input, GetScreenKeyboardSupport, () const, bool), AS_CALL_THISCALL));

    // bool Input::IsScreenKeyboardVisible() const
    methods.Push(RegisterObjectMethodArgs("bool Input::IsScreenKeyboardVisible() const", "bool IsScreenKeyboardVisible() const", AS_METHODPR(Input, IsScreenKeyboardVisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::IsScreenKeyboardVisible() const", "bool get_screenKeyboardVisible() const", AS_METHODPR(Input, IsScreenKeyboardVisible, () const, bool), AS_CALL_THISCALL));

    // bool Input::GetTouchEmulation() const
    methods.Push(RegisterObjectMethodArgs("bool Input::GetTouchEmulation() const", "bool GetTouchEmulation() const", AS_METHODPR(Input, GetTouchEmulation, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::GetTouchEmulation() const", "bool get_touchEmulation() const", AS_METHODPR(Input, GetTouchEmulation, () const, bool), AS_CALL_THISCALL));

    // bool Input::IsMouseVisible() const
    methods.Push(RegisterObjectMethodArgs("bool Input::IsMouseVisible() const", "bool IsMouseVisible() const", AS_METHODPR(Input, IsMouseVisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::IsMouseVisible() const", "bool get_mouseVisible() const", AS_METHODPR(Input, IsMouseVisible, () const, bool), AS_CALL_THISCALL));

    // bool Input::IsMouseGrabbed() const
    methods.Push(RegisterObjectMethodArgs("bool Input::IsMouseGrabbed() const", "bool IsMouseGrabbed() const", AS_METHODPR(Input, IsMouseGrabbed, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::IsMouseGrabbed() const", "bool get_mouseGrabbed() const", AS_METHODPR(Input, IsMouseGrabbed, () const, bool), AS_CALL_THISCALL));

    // bool Input::IsMouseLocked() const
    methods.Push(RegisterObjectMethodArgs("bool Input::IsMouseLocked() const", "bool IsMouseLocked() const", AS_METHODPR(Input, IsMouseLocked, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::IsMouseLocked() const", "bool get_mouseLocked() const", AS_METHODPR(Input, IsMouseLocked, () const, bool), AS_CALL_THISCALL));

    // MouseMode Input::GetMouseMode() const
    methods.Push(RegisterObjectMethodArgs("MouseMode Input::GetMouseMode() const", "MouseMode GetMouseMode() const", AS_METHODPR(Input, GetMouseMode, () const, MouseMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("MouseMode Input::GetMouseMode() const", "MouseMode get_mouseMode() const", AS_METHODPR(Input, GetMouseMode, () const, MouseMode), AS_CALL_THISCALL));

    // bool Input::HasFocus()
    methods.Push(RegisterObjectMethodArgs("bool Input::HasFocus()", "bool HasFocus()", AS_METHODPR(Input, HasFocus, (), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::HasFocus()", "bool get_focus()", AS_METHODPR(Input, HasFocus, (), bool), AS_CALL_THISCALL));

    // bool Input::IsMinimized() const
    methods.Push(RegisterObjectMethodArgs("bool Input::IsMinimized() const", "bool IsMinimized() const", AS_METHODPR(Input, IsMinimized, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Input::IsMinimized() const", "bool get_minimized() const", AS_METHODPR(Input, IsMinimized, () const, bool), AS_CALL_THISCALL));
}

// struct InstanceData | File: ../Graphics/Batch.h
void CollectMembers_InstanceData(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class IntRect | File: ../Math/Rect.h
void CollectMembers_IntRect(Vector<RegisterObjectMethodArgs>& methods)
{
    // const int* IntRect::Data() const
    // Error: type "const int*" can not automatically bind

    // bool IntRect::operator!=(const IntRect& rhs) const
    // Only operator== is needed

    // bool IntRect::operator==(const IntRect& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool IntRect::operator==(const IntRect& rhs) const", "bool opEquals(const IntRect&in) const", AS_METHODPR(IntRect, operator==, (const IntRect&) const, bool), AS_CALL_THISCALL));

    // IntRect& IntRect::operator+=(const IntRect& rhs)
    methods.Push(RegisterObjectMethodArgs("IntRect& IntRect::operator+=(const IntRect& rhs)", "IntRect& opAddAssign(const IntRect&in)", AS_METHODPR(IntRect, operator+=, (const IntRect&), IntRect&), AS_CALL_THISCALL));

    // IntRect& IntRect::operator-=(const IntRect& rhs)
    methods.Push(RegisterObjectMethodArgs("IntRect& IntRect::operator-=(const IntRect& rhs)", "IntRect& opSubAssign(const IntRect&in)", AS_METHODPR(IntRect, operator-=, (const IntRect&), IntRect&), AS_CALL_THISCALL));

    // IntRect& IntRect::operator/=(float value)
    methods.Push(RegisterObjectMethodArgs("IntRect& IntRect::operator/=(float value)", "IntRect& opDivAssign(float)", AS_METHODPR(IntRect, operator/=, (float), IntRect&), AS_CALL_THISCALL));

    // IntRect& IntRect::operator*=(float value)
    methods.Push(RegisterObjectMethodArgs("IntRect& IntRect::operator*=(float value)", "IntRect& opMulAssign(float)", AS_METHODPR(IntRect, operator*=, (float), IntRect&), AS_CALL_THISCALL));

    // IntRect IntRect::operator/(float value) const
    methods.Push(RegisterObjectMethodArgs("IntRect IntRect::operator/(float value) const", "IntRect opDiv(float) const", AS_METHODPR(IntRect, operator/, (float) const, IntRect), AS_CALL_THISCALL));

    // IntRect IntRect::operator*(float value) const
    methods.Push(RegisterObjectMethodArgs("IntRect IntRect::operator*(float value) const", "IntRect opMul(float) const", AS_METHODPR(IntRect, operator*, (float) const, IntRect), AS_CALL_THISCALL));

    // IntRect IntRect::operator+(const IntRect& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntRect IntRect::operator+(const IntRect& rhs) const", "IntRect opAdd(const IntRect&in) const", AS_METHODPR(IntRect, operator+, (const IntRect&) const, IntRect), AS_CALL_THISCALL));

    // IntRect IntRect::operator-(const IntRect& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntRect IntRect::operator-(const IntRect& rhs) const", "IntRect opSub(const IntRect&in) const", AS_METHODPR(IntRect, operator-, (const IntRect&) const, IntRect), AS_CALL_THISCALL));

    // IntVector2 IntRect::Size() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntRect::Size() const", "IntVector2 Size() const", AS_METHODPR(IntRect, Size, () const, IntVector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntRect::Size() const", "IntVector2 get_size() const", AS_METHODPR(IntRect, Size, () const, IntVector2), AS_CALL_THISCALL));

    // int IntRect::Width() const
    methods.Push(RegisterObjectMethodArgs("int IntRect::Width() const", "int Width() const", AS_METHODPR(IntRect, Width, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int IntRect::Width() const", "int get_width() const", AS_METHODPR(IntRect, Width, () const, int), AS_CALL_THISCALL));

    // int IntRect::Height() const
    methods.Push(RegisterObjectMethodArgs("int IntRect::Height() const", "int Height() const", AS_METHODPR(IntRect, Height, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int IntRect::Height() const", "int get_height() const", AS_METHODPR(IntRect, Height, () const, int), AS_CALL_THISCALL));

    // Intersection IntRect::IsInside(const IntVector2& point) const
    methods.Push(RegisterObjectMethodArgs("Intersection IntRect::IsInside(const IntVector2& point) const", "Intersection IsInside(const IntVector2&in) const", AS_METHODPR(IntRect, IsInside, (const IntVector2&) const, Intersection), AS_CALL_THISCALL));

    // Intersection IntRect::IsInside(const IntRect& rect) const
    methods.Push(RegisterObjectMethodArgs("Intersection IntRect::IsInside(const IntRect& rect) const", "Intersection IsInside(const IntRect&in) const", AS_METHODPR(IntRect, IsInside, (const IntRect&) const, Intersection), AS_CALL_THISCALL));

    // void IntRect::Clip(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void IntRect::Clip(const IntRect& rect)", "void Clip(const IntRect&in)", AS_METHODPR(IntRect, Clip, (const IntRect&), void), AS_CALL_THISCALL));

    // void IntRect::Merge(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void IntRect::Merge(const IntRect& rect)", "void Merge(const IntRect&in)", AS_METHODPR(IntRect, Merge, (const IntRect&), void), AS_CALL_THISCALL));

    // String IntRect::ToString() const
    methods.Push(RegisterObjectMethodArgs("String IntRect::ToString() const", "String ToString() const", AS_METHODPR(IntRect, ToString, () const, String), AS_CALL_THISCALL));

    // IntVector2 IntRect::Min() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntRect::Min() const", "IntVector2 Min() const", AS_METHODPR(IntRect, Min, () const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 IntRect::Max() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntRect::Max() const", "IntVector2 Max() const", AS_METHODPR(IntRect, Max, () const, IntVector2), AS_CALL_THISCALL));

    // int IntRect::Left() const
    methods.Push(RegisterObjectMethodArgs("int IntRect::Left() const", "int Left() const", AS_METHODPR(IntRect, Left, () const, int), AS_CALL_THISCALL));

    // int IntRect::Top() const
    methods.Push(RegisterObjectMethodArgs("int IntRect::Top() const", "int Top() const", AS_METHODPR(IntRect, Top, () const, int), AS_CALL_THISCALL));

    // int IntRect::Right() const
    methods.Push(RegisterObjectMethodArgs("int IntRect::Right() const", "int Right() const", AS_METHODPR(IntRect, Right, () const, int), AS_CALL_THISCALL));

    // int IntRect::Bottom() const
    methods.Push(RegisterObjectMethodArgs("int IntRect::Bottom() const", "int Bottom() const", AS_METHODPR(IntRect, Bottom, () const, int), AS_CALL_THISCALL));
}

// class IntVector2 | File: ../Math/Vector2.h
void CollectMembers_IntVector2(Vector<RegisterObjectMethodArgs>& methods)
{
    // const int* IntVector2::Data() const
    // Error: type "const int*" can not automatically bind

    // bool IntVector2::operator!=(const IntVector2& rhs) const
    // Only operator== is needed

    // IntVector2& IntVector2::operator=(const IntVector2& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("IntVector2& IntVector2::operator=(const IntVector2& rhs) noexcept=default", "IntVector2& opAssign(const IntVector2&in)", AS_METHODPR(IntVector2, operator=, (const IntVector2&), IntVector2&), AS_CALL_THISCALL));

    // bool IntVector2::operator==(const IntVector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool IntVector2::operator==(const IntVector2& rhs) const", "bool opEquals(const IntVector2&in) const", AS_METHODPR(IntVector2, operator==, (const IntVector2&) const, bool), AS_CALL_THISCALL));

    // IntVector2 IntVector2::operator+(const IntVector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntVector2::operator+(const IntVector2& rhs) const", "IntVector2 opAdd(const IntVector2&in) const", AS_METHODPR(IntVector2, operator+, (const IntVector2&) const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 IntVector2::operator-() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntVector2::operator-() const", "IntVector2 opNeg() const", AS_METHODPR(IntVector2, operator-, () const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 IntVector2::operator-(const IntVector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntVector2::operator-(const IntVector2& rhs) const", "IntVector2 opSub(const IntVector2&in) const", AS_METHODPR(IntVector2, operator-, (const IntVector2&) const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 IntVector2::operator*(int rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntVector2::operator*(int rhs) const", "IntVector2 opMul(int) const", AS_METHODPR(IntVector2, operator*, (int) const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 IntVector2::operator*(const IntVector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntVector2::operator*(const IntVector2& rhs) const", "IntVector2 opMul(const IntVector2&in) const", AS_METHODPR(IntVector2, operator*, (const IntVector2&) const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 IntVector2::operator/(int rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntVector2::operator/(int rhs) const", "IntVector2 opDiv(int) const", AS_METHODPR(IntVector2, operator/, (int) const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 IntVector2::operator/(const IntVector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 IntVector2::operator/(const IntVector2& rhs) const", "IntVector2 opDiv(const IntVector2&in) const", AS_METHODPR(IntVector2, operator/, (const IntVector2&) const, IntVector2), AS_CALL_THISCALL));

    // IntVector2& IntVector2::operator+=(const IntVector2& rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector2& IntVector2::operator+=(const IntVector2& rhs)", "IntVector2& opAddAssign(const IntVector2&in)", AS_METHODPR(IntVector2, operator+=, (const IntVector2&), IntVector2&), AS_CALL_THISCALL));

    // IntVector2& IntVector2::operator-=(const IntVector2& rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector2& IntVector2::operator-=(const IntVector2& rhs)", "IntVector2& opSubAssign(const IntVector2&in)", AS_METHODPR(IntVector2, operator-=, (const IntVector2&), IntVector2&), AS_CALL_THISCALL));

    // IntVector2& IntVector2::operator*=(int rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector2& IntVector2::operator*=(int rhs)", "IntVector2& opMulAssign(int)", AS_METHODPR(IntVector2, operator*=, (int), IntVector2&), AS_CALL_THISCALL));

    // IntVector2& IntVector2::operator*=(const IntVector2& rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector2& IntVector2::operator*=(const IntVector2& rhs)", "IntVector2& opMulAssign(const IntVector2&in)", AS_METHODPR(IntVector2, operator*=, (const IntVector2&), IntVector2&), AS_CALL_THISCALL));

    // IntVector2& IntVector2::operator/=(int rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector2& IntVector2::operator/=(int rhs)", "IntVector2& opDivAssign(int)", AS_METHODPR(IntVector2, operator/=, (int), IntVector2&), AS_CALL_THISCALL));

    // IntVector2& IntVector2::operator/=(const IntVector2& rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector2& IntVector2::operator/=(const IntVector2& rhs)", "IntVector2& opDivAssign(const IntVector2&in)", AS_METHODPR(IntVector2, operator/=, (const IntVector2&), IntVector2&), AS_CALL_THISCALL));

    // String IntVector2::ToString() const
    methods.Push(RegisterObjectMethodArgs("String IntVector2::ToString() const", "String ToString() const", AS_METHODPR(IntVector2, ToString, () const, String), AS_CALL_THISCALL));

    // unsigned IntVector2::ToHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned IntVector2::ToHash() const", "uint ToHash() const", AS_METHODPR(IntVector2, ToHash, () const, unsigned), AS_CALL_THISCALL));

    // float IntVector2::Length() const
    methods.Push(RegisterObjectMethodArgs("float IntVector2::Length() const", "float Length() const", AS_METHODPR(IntVector2, Length, () const, float), AS_CALL_THISCALL));
}

// class IntVector3 | File: ../Math/Vector3.h
void CollectMembers_IntVector3(Vector<RegisterObjectMethodArgs>& methods)
{
    // const int* IntVector3::Data() const
    // Error: type "const int*" can not automatically bind

    // bool IntVector3::operator!=(const IntVector3& rhs) const
    // Only operator== is needed

    // IntVector3& IntVector3::operator=(const IntVector3& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("IntVector3& IntVector3::operator=(const IntVector3& rhs) noexcept=default", "IntVector3& opAssign(const IntVector3&in)", AS_METHODPR(IntVector3, operator=, (const IntVector3&), IntVector3&), AS_CALL_THISCALL));

    // bool IntVector3::operator==(const IntVector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool IntVector3::operator==(const IntVector3& rhs) const", "bool opEquals(const IntVector3&in) const", AS_METHODPR(IntVector3, operator==, (const IntVector3&) const, bool), AS_CALL_THISCALL));

    // IntVector3 IntVector3::operator+(const IntVector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector3 IntVector3::operator+(const IntVector3& rhs) const", "IntVector3 opAdd(const IntVector3&in) const", AS_METHODPR(IntVector3, operator+, (const IntVector3&) const, IntVector3), AS_CALL_THISCALL));

    // IntVector3 IntVector3::operator-() const
    methods.Push(RegisterObjectMethodArgs("IntVector3 IntVector3::operator-() const", "IntVector3 opNeg() const", AS_METHODPR(IntVector3, operator-, () const, IntVector3), AS_CALL_THISCALL));

    // IntVector3 IntVector3::operator-(const IntVector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector3 IntVector3::operator-(const IntVector3& rhs) const", "IntVector3 opSub(const IntVector3&in) const", AS_METHODPR(IntVector3, operator-, (const IntVector3&) const, IntVector3), AS_CALL_THISCALL));

    // IntVector3 IntVector3::operator*(int rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector3 IntVector3::operator*(int rhs) const", "IntVector3 opMul(int) const", AS_METHODPR(IntVector3, operator*, (int) const, IntVector3), AS_CALL_THISCALL));

    // IntVector3 IntVector3::operator*(const IntVector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector3 IntVector3::operator*(const IntVector3& rhs) const", "IntVector3 opMul(const IntVector3&in) const", AS_METHODPR(IntVector3, operator*, (const IntVector3&) const, IntVector3), AS_CALL_THISCALL));

    // IntVector3 IntVector3::operator/(int rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector3 IntVector3::operator/(int rhs) const", "IntVector3 opDiv(int) const", AS_METHODPR(IntVector3, operator/, (int) const, IntVector3), AS_CALL_THISCALL));

    // IntVector3 IntVector3::operator/(const IntVector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("IntVector3 IntVector3::operator/(const IntVector3& rhs) const", "IntVector3 opDiv(const IntVector3&in) const", AS_METHODPR(IntVector3, operator/, (const IntVector3&) const, IntVector3), AS_CALL_THISCALL));

    // IntVector3& IntVector3::operator+=(const IntVector3& rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector3& IntVector3::operator+=(const IntVector3& rhs)", "IntVector3& opAddAssign(const IntVector3&in)", AS_METHODPR(IntVector3, operator+=, (const IntVector3&), IntVector3&), AS_CALL_THISCALL));

    // IntVector3& IntVector3::operator-=(const IntVector3& rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector3& IntVector3::operator-=(const IntVector3& rhs)", "IntVector3& opSubAssign(const IntVector3&in)", AS_METHODPR(IntVector3, operator-=, (const IntVector3&), IntVector3&), AS_CALL_THISCALL));

    // IntVector3& IntVector3::operator*=(int rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector3& IntVector3::operator*=(int rhs)", "IntVector3& opMulAssign(int)", AS_METHODPR(IntVector3, operator*=, (int), IntVector3&), AS_CALL_THISCALL));

    // IntVector3& IntVector3::operator*=(const IntVector3& rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector3& IntVector3::operator*=(const IntVector3& rhs)", "IntVector3& opMulAssign(const IntVector3&in)", AS_METHODPR(IntVector3, operator*=, (const IntVector3&), IntVector3&), AS_CALL_THISCALL));

    // IntVector3& IntVector3::operator/=(int rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector3& IntVector3::operator/=(int rhs)", "IntVector3& opDivAssign(int)", AS_METHODPR(IntVector3, operator/=, (int), IntVector3&), AS_CALL_THISCALL));

    // IntVector3& IntVector3::operator/=(const IntVector3& rhs)
    methods.Push(RegisterObjectMethodArgs("IntVector3& IntVector3::operator/=(const IntVector3& rhs)", "IntVector3& opDivAssign(const IntVector3&in)", AS_METHODPR(IntVector3, operator/=, (const IntVector3&), IntVector3&), AS_CALL_THISCALL));

    // String IntVector3::ToString() const
    methods.Push(RegisterObjectMethodArgs("String IntVector3::ToString() const", "String ToString() const", AS_METHODPR(IntVector3, ToString, () const, String), AS_CALL_THISCALL));

    // unsigned IntVector3::ToHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned IntVector3::ToHash() const", "uint ToHash() const", AS_METHODPR(IntVector3, ToHash, () const, unsigned), AS_CALL_THISCALL));

    // float IntVector3::Length() const
    methods.Push(RegisterObjectMethodArgs("float IntVector3::Length() const", "float Length() const", AS_METHODPR(IntVector3, Length, () const, float), AS_CALL_THISCALL));
}

// class JSONFile | File: ../Resource/JSONFile.h
void CollectMembers_JSONFile(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // bool JSONFile::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool JSONFile::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(JSONFile, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool JSONFile::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool JSONFile::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(JSONFile, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool JSONFile::Save(Serializer& dest, const String& indendation) const
    methods.Push(RegisterObjectMethodArgs("bool JSONFile::Save(Serializer& dest, const String& indendation) const", "bool Save(Serializer&, const String&in) const", AS_METHODPR(JSONFile, Save, (Serializer&, const String&) const, bool), AS_CALL_THISCALL));

    // bool JSONFile::FromString(const String& source)
    methods.Push(RegisterObjectMethodArgs("bool JSONFile::FromString(const String& source)", "bool FromString(const String&in)", AS_METHODPR(JSONFile, FromString, (const String&), bool), AS_CALL_THISCALL));

    // String JSONFile::ToString(const String& indendation=\"\t\") const
    methods.Push(RegisterObjectMethodArgs("String JSONFile::ToString(const String& indendation=\"\t\") const", "String ToString(const String&in = \"\t\") const", AS_METHODPR(JSONFile, ToString, (const String&) const, String), AS_CALL_THISCALL));

    // JSONValue& JSONFile::GetRoot()
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONFile::GetRoot()", "JSONValue& GetRoot()", AS_METHODPR(JSONFile, GetRoot, (), JSONValue&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONFile::GetRoot()", "JSONValue& get_root()", AS_METHODPR(JSONFile, GetRoot, (), JSONValue&), AS_CALL_THISCALL));

    // const JSONValue& JSONFile::GetRoot() const
    methods.Push(RegisterObjectMethodArgs("const JSONValue& JSONFile::GetRoot() const", "const JSONValue& GetRoot() const", AS_METHODPR(JSONFile, GetRoot, () const, const JSONValue&), AS_CALL_THISCALL));
}

// void JSONValue::SetVariant(const Variant& variant, Context* context=nullptr)
// void JSONValue::SetVariant(const Variant& variant, Context* context=nullptr) | File: ../Resource/JSONValue.h
static void JSONValue_SetVariant_Variant_Context(JSONValue* ptr, const Variant& variant)
{
    Context* context = GetScriptContext();
    ptr->SetVariant(variant, context);
}


// void JSONValue::SetVariantValue(const Variant& variant, Context* context=nullptr)
// void JSONValue::SetVariantValue(const Variant& variant, Context* context=nullptr) | File: ../Resource/JSONValue.h
static void JSONValue_SetVariantValue_Variant_Context(JSONValue* ptr, const Variant& variant)
{
    Context* context = GetScriptContext();
    ptr->SetVariantValue(variant, context);
}


// void JSONValue::SetVariantMap(const VariantMap& variantMap, Context* context=nullptr)
// void JSONValue::SetVariantMap(const VariantMap& variantMap, Context* context=nullptr) | File: ../Resource/JSONValue.h
static void JSONValue_SetVariantMap_VariantMap_Context(JSONValue* ptr, const VariantMap& variantMap)
{
    Context* context = GetScriptContext();
    ptr->SetVariantMap(variantMap, context);
}


// class JSONValue | File: ../Resource/JSONValue.h
void CollectMembers_JSONValue(Vector<RegisterObjectMethodArgs>& methods)
{
    // ConstJSONObjectIterator JSONValue::Begin() const
    // Error: type "ConstJSONObjectIterator" can not automatically bind

    // JSONObjectIterator JSONValue::Begin()
    // Error: type "JSONObjectIterator" can not automatically bind

    // ConstJSONObjectIterator JSONValue::End() const
    // Error: type "ConstJSONObjectIterator" can not automatically bind

    // JSONObjectIterator JSONValue::End()
    // Error: type "JSONObjectIterator" can not automatically bind

    // const JSONArray& JSONValue::GetArray() const
    // Error: type "const JSONArray&" can not automatically bind

    // const char* JSONValue::GetCString(const char* defaultValue="") const
    // Error: type "const char*" can not automatically bind

    // const JSONObject& JSONValue::GetObject() const
    // Error: type "const JSONObject&" can not automatically bind

    // VariantVector JSONValue::GetVariantVector() const
    // Error: type "VariantVector" can not automatically bind

    // void JSONValue::SetVariantVector(const VariantVector& variantVector, Context* context=nullptr)
    // Error: type "const VariantVector&" can not automatically bind

    // JSONValue& JSONValue::operator=(const JSONArray& rhs)
    // Error: type "const JSONArray&" can not automatically bind

    // JSONValue& JSONValue::operator=(const JSONObject& rhs)
    // Error: type "const JSONObject&" can not automatically bind

    // JSONValue& JSONValue::operator=(const char* rhs)
    // Error: type "const char*" can not automatically bind

    // JSONValue& JSONValue::operator=(bool rhs)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator=(bool rhs)", "JSONValue& opAssign(bool)", AS_METHODPR(JSONValue, operator=, (bool), JSONValue&), AS_CALL_THISCALL));

    // JSONValue& JSONValue::operator=(int rhs)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator=(int rhs)", "JSONValue& opAssign(int)", AS_METHODPR(JSONValue, operator=, (int), JSONValue&), AS_CALL_THISCALL));

    // JSONValue& JSONValue::operator=(unsigned rhs)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator=(unsigned rhs)", "JSONValue& opAssign(uint)", AS_METHODPR(JSONValue, operator=, (unsigned), JSONValue&), AS_CALL_THISCALL));

    // JSONValue& JSONValue::operator=(float rhs)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator=(float rhs)", "JSONValue& opAssign(float)", AS_METHODPR(JSONValue, operator=, (float), JSONValue&), AS_CALL_THISCALL));

    // JSONValue& JSONValue::operator=(double rhs)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator=(double rhs)", "JSONValue& opAssign(double)", AS_METHODPR(JSONValue, operator=, (double), JSONValue&), AS_CALL_THISCALL));

    // JSONValue& JSONValue::operator=(const String& rhs)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator=(const String& rhs)", "JSONValue& opAssign(const String&in)", AS_METHODPR(JSONValue, operator=, (const String&), JSONValue&), AS_CALL_THISCALL));

    // JSONValue& JSONValue::operator=(const JSONValue& rhs)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator=(const JSONValue& rhs)", "JSONValue& opAssign(const JSONValue&in)", AS_METHODPR(JSONValue, operator=, (const JSONValue&), JSONValue&), AS_CALL_THISCALL));

    // JSONValueType JSONValue::GetValueType() const
    methods.Push(RegisterObjectMethodArgs("JSONValueType JSONValue::GetValueType() const", "JSONValueType GetValueType() const", AS_METHODPR(JSONValue, GetValueType, () const, JSONValueType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("JSONValueType JSONValue::GetValueType() const", "JSONValueType get_valueType() const", AS_METHODPR(JSONValue, GetValueType, () const, JSONValueType), AS_CALL_THISCALL));

    // JSONNumberType JSONValue::GetNumberType() const
    methods.Push(RegisterObjectMethodArgs("JSONNumberType JSONValue::GetNumberType() const", "JSONNumberType GetNumberType() const", AS_METHODPR(JSONValue, GetNumberType, () const, JSONNumberType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("JSONNumberType JSONValue::GetNumberType() const", "JSONNumberType get_numberType() const", AS_METHODPR(JSONValue, GetNumberType, () const, JSONNumberType), AS_CALL_THISCALL));

    // String JSONValue::GetValueTypeName() const
    methods.Push(RegisterObjectMethodArgs("String JSONValue::GetValueTypeName() const", "String GetValueTypeName() const", AS_METHODPR(JSONValue, GetValueTypeName, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String JSONValue::GetValueTypeName() const", "String get_valueTypeName() const", AS_METHODPR(JSONValue, GetValueTypeName, () const, String), AS_CALL_THISCALL));

    // String JSONValue::GetNumberTypeName() const
    methods.Push(RegisterObjectMethodArgs("String JSONValue::GetNumberTypeName() const", "String GetNumberTypeName() const", AS_METHODPR(JSONValue, GetNumberTypeName, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String JSONValue::GetNumberTypeName() const", "String get_numberTypeName() const", AS_METHODPR(JSONValue, GetNumberTypeName, () const, String), AS_CALL_THISCALL));

    // bool JSONValue::IsNull() const
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsNull() const", "bool IsNull() const", AS_METHODPR(JSONValue, IsNull, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsNull() const", "bool get_isNull() const", AS_METHODPR(JSONValue, IsNull, () const, bool), AS_CALL_THISCALL));

    // bool JSONValue::IsBool() const
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsBool() const", "bool IsBool() const", AS_METHODPR(JSONValue, IsBool, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsBool() const", "bool get_isBool() const", AS_METHODPR(JSONValue, IsBool, () const, bool), AS_CALL_THISCALL));

    // bool JSONValue::IsNumber() const
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsNumber() const", "bool IsNumber() const", AS_METHODPR(JSONValue, IsNumber, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsNumber() const", "bool get_isNumber() const", AS_METHODPR(JSONValue, IsNumber, () const, bool), AS_CALL_THISCALL));

    // bool JSONValue::IsString() const
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsString() const", "bool IsString() const", AS_METHODPR(JSONValue, IsString, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsString() const", "bool get_isString() const", AS_METHODPR(JSONValue, IsString, () const, bool), AS_CALL_THISCALL));

    // bool JSONValue::IsArray() const
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsArray() const", "bool IsArray() const", AS_METHODPR(JSONValue, IsArray, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsArray() const", "bool get_isArray() const", AS_METHODPR(JSONValue, IsArray, () const, bool), AS_CALL_THISCALL));

    // bool JSONValue::IsObject() const
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsObject() const", "bool IsObject() const", AS_METHODPR(JSONValue, IsObject, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::IsObject() const", "bool get_isObject() const", AS_METHODPR(JSONValue, IsObject, () const, bool), AS_CALL_THISCALL));

    // bool JSONValue::GetBool(bool defaultValue=false) const
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::GetBool(bool defaultValue=false) const", "bool GetBool(bool = false) const", AS_METHODPR(JSONValue, GetBool, (bool) const, bool), AS_CALL_THISCALL));

    // int JSONValue::GetInt(int defaultValue=0) const
    methods.Push(RegisterObjectMethodArgs("int JSONValue::GetInt(int defaultValue=0) const", "int GetInt(int = 0) const", AS_METHODPR(JSONValue, GetInt, (int) const, int), AS_CALL_THISCALL));

    // unsigned JSONValue::GetUInt(unsigned defaultValue=0) const
    methods.Push(RegisterObjectMethodArgs("unsigned JSONValue::GetUInt(unsigned defaultValue=0) const", "uint GetUInt(uint = 0) const", AS_METHODPR(JSONValue, GetUInt, (unsigned) const, unsigned), AS_CALL_THISCALL));

    // float JSONValue::GetFloat(float defaultValue=0.0f) const
    methods.Push(RegisterObjectMethodArgs("float JSONValue::GetFloat(float defaultValue=0.0f) const", "float GetFloat(float = 0.0f) const", AS_METHODPR(JSONValue, GetFloat, (float) const, float), AS_CALL_THISCALL));

    // double JSONValue::GetDouble(double defaultValue=0.0) const
    methods.Push(RegisterObjectMethodArgs("double JSONValue::GetDouble(double defaultValue=0.0) const", "double GetDouble(double = 0.0) const", AS_METHODPR(JSONValue, GetDouble, (double) const, double), AS_CALL_THISCALL));

    // const String& JSONValue::GetString(const String& defaultValue=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("const String& JSONValue::GetString(const String& defaultValue=String::EMPTY) const", "const String& GetString(const String&in = String::EMPTY) const", AS_METHODPR(JSONValue, GetString, (const String&) const, const String&), AS_CALL_THISCALL));

    // JSONValue& JSONValue::operator[](unsigned index)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator[](unsigned index)", "JSONValue& opIndex(uint)", AS_METHODPR(JSONValue, operator[], (unsigned), JSONValue&), AS_CALL_THISCALL));

    // const JSONValue& JSONValue::operator[](unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const JSONValue& JSONValue::operator[](unsigned index) const", "const JSONValue& opIndex(uint) const", AS_METHODPR(JSONValue, operator[], (unsigned) const, const JSONValue&), AS_CALL_THISCALL));

    // void JSONValue::Push(const JSONValue& value)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::Push(const JSONValue& value)", "void Push(const JSONValue&in)", AS_METHODPR(JSONValue, Push, (const JSONValue&), void), AS_CALL_THISCALL));

    // void JSONValue::Pop()
    methods.Push(RegisterObjectMethodArgs("void JSONValue::Pop()", "void Pop()", AS_METHODPR(JSONValue, Pop, (), void), AS_CALL_THISCALL));

    // void JSONValue::Insert(unsigned pos, const JSONValue& value)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::Insert(unsigned pos, const JSONValue& value)", "void Insert(uint, const JSONValue&in)", AS_METHODPR(JSONValue, Insert, (unsigned, const JSONValue&), void), AS_CALL_THISCALL));

    // void JSONValue::Erase(unsigned pos, unsigned length=1)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::Erase(unsigned pos, unsigned length=1)", "void Erase(uint, uint = 1)", AS_METHODPR(JSONValue, Erase, (unsigned, unsigned), void), AS_CALL_THISCALL));

    // void JSONValue::Resize(unsigned newSize)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::Resize(unsigned newSize)", "void Resize(uint)", AS_METHODPR(JSONValue, Resize, (unsigned), void), AS_CALL_THISCALL));

    // unsigned JSONValue::Size() const
    methods.Push(RegisterObjectMethodArgs("unsigned JSONValue::Size() const", "uint Size() const", AS_METHODPR(JSONValue, Size, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned JSONValue::Size() const", "uint get_size() const", AS_METHODPR(JSONValue, Size, () const, unsigned), AS_CALL_THISCALL));

    // JSONValue& JSONValue::operator[](const String& key)
    methods.Push(RegisterObjectMethodArgs("JSONValue& JSONValue::operator[](const String& key)", "JSONValue& opIndex(const String&in)", AS_METHODPR(JSONValue, operator[], (const String&), JSONValue&), AS_CALL_THISCALL));

    // const JSONValue& JSONValue::operator[](const String& key) const
    methods.Push(RegisterObjectMethodArgs("const JSONValue& JSONValue::operator[](const String& key) const", "const JSONValue& opIndex(const String&in) const", AS_METHODPR(JSONValue, operator[], (const String&) const, const JSONValue&), AS_CALL_THISCALL));

    // void JSONValue::Set(const String& key, const JSONValue& value)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::Set(const String& key, const JSONValue& value)", "void Set(const String&in, const JSONValue&in)", AS_METHODPR(JSONValue, Set, (const String&, const JSONValue&), void), AS_CALL_THISCALL));

    // const JSONValue& JSONValue::Get(const String& key) const
    methods.Push(RegisterObjectMethodArgs("const JSONValue& JSONValue::Get(const String& key) const", "const JSONValue& Get(const String&in) const", AS_METHODPR(JSONValue, Get, (const String&) const, const JSONValue&), AS_CALL_THISCALL));

    // bool JSONValue::Erase(const String& key)
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::Erase(const String& key)", "bool Erase(const String&in)", AS_METHODPR(JSONValue, Erase, (const String&), bool), AS_CALL_THISCALL));

    // bool JSONValue::Contains(const String& key) const
    methods.Push(RegisterObjectMethodArgs("bool JSONValue::Contains(const String& key) const", "bool Contains(const String&in) const", AS_METHODPR(JSONValue, Contains, (const String&) const, bool), AS_CALL_THISCALL));

    // void JSONValue::Clear()
    methods.Push(RegisterObjectMethodArgs("void JSONValue::Clear()", "void Clear()", AS_METHODPR(JSONValue, Clear, (), void), AS_CALL_THISCALL));

    // void JSONValue::SetType(JSONValueType valueType, JSONNumberType numberType=JSONNT_NAN)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::SetType(JSONValueType valueType, JSONNumberType numberType=JSONNT_NAN)", "void SetType(JSONValueType, JSONNumberType = JSONNT_NAN)", AS_METHODPR(JSONValue, SetType, (JSONValueType, JSONNumberType), void), AS_CALL_THISCALL));

    // void JSONValue::SetVariant(const Variant& variant, Context* context=nullptr)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::SetVariant(const Variant& variant, Context* context=nullptr)", "void SetVariant(const Variant&in)", AS_FUNCTION_OBJFIRST(JSONValue_SetVariant_Variant_Context), AS_CALL_CDECL_OBJFIRST));

    // Variant JSONValue::GetVariant() const
    methods.Push(RegisterObjectMethodArgs("Variant JSONValue::GetVariant() const", "Variant GetVariant() const", AS_METHODPR(JSONValue, GetVariant, () const, Variant), AS_CALL_THISCALL));

    // void JSONValue::SetVariantValue(const Variant& variant, Context* context=nullptr)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::SetVariantValue(const Variant& variant, Context* context=nullptr)", "void SetVariantValue(const Variant&in)", AS_FUNCTION_OBJFIRST(JSONValue_SetVariantValue_Variant_Context), AS_CALL_CDECL_OBJFIRST));

    // Variant JSONValue::GetVariantValue(VariantType type) const
    methods.Push(RegisterObjectMethodArgs("Variant JSONValue::GetVariantValue(VariantType type) const", "Variant GetVariantValue(VariantType) const", AS_METHODPR(JSONValue, GetVariantValue, (VariantType) const, Variant), AS_CALL_THISCALL));

    // void JSONValue::SetVariantMap(const VariantMap& variantMap, Context* context=nullptr)
    methods.Push(RegisterObjectMethodArgs("void JSONValue::SetVariantMap(const VariantMap& variantMap, Context* context=nullptr)", "void SetVariantMap(const VariantMap&in)", AS_FUNCTION_OBJFIRST(JSONValue_SetVariantMap_VariantMap_Context), AS_CALL_CDECL_OBJFIRST));

    // VariantMap JSONValue::GetVariantMap() const
    methods.Push(RegisterObjectMethodArgs("VariantMap JSONValue::GetVariantMap() const", "VariantMap GetVariantMap() const", AS_METHODPR(JSONValue, GetVariantMap, () const, VariantMap), AS_CALL_THISCALL));
}

// struct JoystickState | File: ../Input/Input.h
void CollectMembers_JoystickState(Vector<RegisterObjectMethodArgs>& methods)
{
    // void JoystickState::Initialize(unsigned numButtons, unsigned numAxes, unsigned numHats)
    methods.Push(RegisterObjectMethodArgs("void JoystickState::Initialize(unsigned numButtons, unsigned numAxes, unsigned numHats)", "void Initialize(uint, uint, uint)", AS_METHODPR(JoystickState, Initialize, (unsigned, unsigned, unsigned), void), AS_CALL_THISCALL));

    // void JoystickState::Reset()
    methods.Push(RegisterObjectMethodArgs("void JoystickState::Reset()", "void Reset()", AS_METHODPR(JoystickState, Reset, (), void), AS_CALL_THISCALL));

    // bool JoystickState::IsController() const
    methods.Push(RegisterObjectMethodArgs("bool JoystickState::IsController() const", "bool IsController() const", AS_METHODPR(JoystickState, IsController, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JoystickState::IsController() const", "bool get_controller() const", AS_METHODPR(JoystickState, IsController, () const, bool), AS_CALL_THISCALL));

    // unsigned JoystickState::GetNumButtons() const
    methods.Push(RegisterObjectMethodArgs("unsigned JoystickState::GetNumButtons() const", "uint GetNumButtons() const", AS_METHODPR(JoystickState, GetNumButtons, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned JoystickState::GetNumButtons() const", "uint get_numButtons() const", AS_METHODPR(JoystickState, GetNumButtons, () const, unsigned), AS_CALL_THISCALL));

    // unsigned JoystickState::GetNumAxes() const
    methods.Push(RegisterObjectMethodArgs("unsigned JoystickState::GetNumAxes() const", "uint GetNumAxes() const", AS_METHODPR(JoystickState, GetNumAxes, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned JoystickState::GetNumAxes() const", "uint get_numAxes() const", AS_METHODPR(JoystickState, GetNumAxes, () const, unsigned), AS_CALL_THISCALL));

    // unsigned JoystickState::GetNumHats() const
    methods.Push(RegisterObjectMethodArgs("unsigned JoystickState::GetNumHats() const", "uint GetNumHats() const", AS_METHODPR(JoystickState, GetNumHats, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned JoystickState::GetNumHats() const", "uint get_numHats() const", AS_METHODPR(JoystickState, GetNumHats, () const, unsigned), AS_CALL_THISCALL));

    // bool JoystickState::GetButtonDown(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("bool JoystickState::GetButtonDown(unsigned index) const", "bool GetButtonDown(uint) const", AS_METHODPR(JoystickState, GetButtonDown, (unsigned) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JoystickState::GetButtonDown(unsigned index) const", "bool get_buttonDown(uint) const", AS_METHODPR(JoystickState, GetButtonDown, (unsigned) const, bool), AS_CALL_THISCALL));

    // bool JoystickState::GetButtonPress(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("bool JoystickState::GetButtonPress(unsigned index) const", "bool GetButtonPress(uint) const", AS_METHODPR(JoystickState, GetButtonPress, (unsigned) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool JoystickState::GetButtonPress(unsigned index) const", "bool get_buttonPress(uint) const", AS_METHODPR(JoystickState, GetButtonPress, (unsigned) const, bool), AS_CALL_THISCALL));

    // float JoystickState::GetAxisPosition(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("float JoystickState::GetAxisPosition(unsigned index) const", "float GetAxisPosition(uint) const", AS_METHODPR(JoystickState, GetAxisPosition, (unsigned) const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float JoystickState::GetAxisPosition(unsigned index) const", "float get_axisPosition(uint) const", AS_METHODPR(JoystickState, GetAxisPosition, (unsigned) const, float), AS_CALL_THISCALL));

    // int JoystickState::GetHatPosition(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("int JoystickState::GetHatPosition(unsigned index) const", "int GetHatPosition(uint) const", AS_METHODPR(JoystickState, GetHatPosition, (unsigned) const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int JoystickState::GetHatPosition(unsigned index) const", "int get_hatPosition(uint) const", AS_METHODPR(JoystickState, GetHatPosition, (unsigned) const, int), AS_CALL_THISCALL));
}

// class Light | File: ../Graphics/Light.h
void CollectMembers_Light(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)");
    Remove(methods, "virtual void Drawable::UpdateBatches(const FrameInfo& frame)");
    Remove(methods, "void Drawable::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override");

    // LightBatchQueue* Light::GetLightQueue() const
    // Error: type "LightBatchQueue*" can not automatically bind

    // void Light::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void Light::SetLightQueue(LightBatchQueue* queue)
    // Error: type "LightBatchQueue*" can not automatically bind

    // void Light::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void Light::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(Light, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void Light::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void Light::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Light, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void Light::SetLightType(LightType type)
    methods.Push(RegisterObjectMethodArgs("void Light::SetLightType(LightType type)", "void SetLightType(LightType)", AS_METHODPR(Light, SetLightType, (LightType), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetLightType(LightType type)", "void set_lightType(LightType)", AS_METHODPR(Light, SetLightType, (LightType), void), AS_CALL_THISCALL));

    // void Light::SetPerVertex(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Light::SetPerVertex(bool enable)", "void SetPerVertex(bool)", AS_METHODPR(Light, SetPerVertex, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetPerVertex(bool enable)", "void set_perVertex(bool)", AS_METHODPR(Light, SetPerVertex, (bool), void), AS_CALL_THISCALL));

    // void Light::SetColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Light::SetColor(const Color& color)", "void SetColor(const Color&in)", AS_METHODPR(Light, SetColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetColor(const Color& color)", "void set_color(const Color&in)", AS_METHODPR(Light, SetColor, (const Color&), void), AS_CALL_THISCALL));

    // void Light::SetTemperature(float temperature)
    methods.Push(RegisterObjectMethodArgs("void Light::SetTemperature(float temperature)", "void SetTemperature(float)", AS_METHODPR(Light, SetTemperature, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetTemperature(float temperature)", "void set_temperature(float)", AS_METHODPR(Light, SetTemperature, (float), void), AS_CALL_THISCALL));

    // void Light::SetRadius(float radius)
    methods.Push(RegisterObjectMethodArgs("void Light::SetRadius(float radius)", "void SetRadius(float)", AS_METHODPR(Light, SetRadius, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetRadius(float radius)", "void set_radius(float)", AS_METHODPR(Light, SetRadius, (float), void), AS_CALL_THISCALL));

    // void Light::SetLength(float length)
    methods.Push(RegisterObjectMethodArgs("void Light::SetLength(float length)", "void SetLength(float)", AS_METHODPR(Light, SetLength, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetLength(float length)", "void set_length(float)", AS_METHODPR(Light, SetLength, (float), void), AS_CALL_THISCALL));

    // void Light::SetUsePhysicalValues(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Light::SetUsePhysicalValues(bool enable)", "void SetUsePhysicalValues(bool)", AS_METHODPR(Light, SetUsePhysicalValues, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetUsePhysicalValues(bool enable)", "void set_usePhysicalValues(bool)", AS_METHODPR(Light, SetUsePhysicalValues, (bool), void), AS_CALL_THISCALL));

    // void Light::SetSpecularIntensity(float intensity)
    methods.Push(RegisterObjectMethodArgs("void Light::SetSpecularIntensity(float intensity)", "void SetSpecularIntensity(float)", AS_METHODPR(Light, SetSpecularIntensity, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetSpecularIntensity(float intensity)", "void set_specularIntensity(float)", AS_METHODPR(Light, SetSpecularIntensity, (float), void), AS_CALL_THISCALL));

    // void Light::SetBrightness(float brightness)
    methods.Push(RegisterObjectMethodArgs("void Light::SetBrightness(float brightness)", "void SetBrightness(float)", AS_METHODPR(Light, SetBrightness, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetBrightness(float brightness)", "void set_brightness(float)", AS_METHODPR(Light, SetBrightness, (float), void), AS_CALL_THISCALL));

    // void Light::SetRange(float range)
    methods.Push(RegisterObjectMethodArgs("void Light::SetRange(float range)", "void SetRange(float)", AS_METHODPR(Light, SetRange, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetRange(float range)", "void set_range(float)", AS_METHODPR(Light, SetRange, (float), void), AS_CALL_THISCALL));

    // void Light::SetFov(float fov)
    methods.Push(RegisterObjectMethodArgs("void Light::SetFov(float fov)", "void SetFov(float)", AS_METHODPR(Light, SetFov, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetFov(float fov)", "void set_fov(float)", AS_METHODPR(Light, SetFov, (float), void), AS_CALL_THISCALL));

    // void Light::SetAspectRatio(float aspectRatio)
    methods.Push(RegisterObjectMethodArgs("void Light::SetAspectRatio(float aspectRatio)", "void SetAspectRatio(float)", AS_METHODPR(Light, SetAspectRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetAspectRatio(float aspectRatio)", "void set_aspectRatio(float)", AS_METHODPR(Light, SetAspectRatio, (float), void), AS_CALL_THISCALL));

    // void Light::SetFadeDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void Light::SetFadeDistance(float distance)", "void SetFadeDistance(float)", AS_METHODPR(Light, SetFadeDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetFadeDistance(float distance)", "void set_fadeDistance(float)", AS_METHODPR(Light, SetFadeDistance, (float), void), AS_CALL_THISCALL));

    // void Light::SetShadowFadeDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowFadeDistance(float distance)", "void SetShadowFadeDistance(float)", AS_METHODPR(Light, SetShadowFadeDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowFadeDistance(float distance)", "void set_shadowFadeDistance(float)", AS_METHODPR(Light, SetShadowFadeDistance, (float), void), AS_CALL_THISCALL));

    // void Light::SetShadowBias(const BiasParameters& parameters)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowBias(const BiasParameters& parameters)", "void SetShadowBias(const BiasParameters&in)", AS_METHODPR(Light, SetShadowBias, (const BiasParameters&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowBias(const BiasParameters& parameters)", "void set_shadowBias(const BiasParameters&in)", AS_METHODPR(Light, SetShadowBias, (const BiasParameters&), void), AS_CALL_THISCALL));

    // void Light::SetShadowCascade(const CascadeParameters& parameters)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowCascade(const CascadeParameters& parameters)", "void SetShadowCascade(const CascadeParameters&in)", AS_METHODPR(Light, SetShadowCascade, (const CascadeParameters&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowCascade(const CascadeParameters& parameters)", "void set_shadowCascade(const CascadeParameters&in)", AS_METHODPR(Light, SetShadowCascade, (const CascadeParameters&), void), AS_CALL_THISCALL));

    // void Light::SetShadowFocus(const FocusParameters& parameters)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowFocus(const FocusParameters& parameters)", "void SetShadowFocus(const FocusParameters&in)", AS_METHODPR(Light, SetShadowFocus, (const FocusParameters&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowFocus(const FocusParameters& parameters)", "void set_shadowFocus(const FocusParameters&in)", AS_METHODPR(Light, SetShadowFocus, (const FocusParameters&), void), AS_CALL_THISCALL));

    // void Light::SetShadowIntensity(float intensity)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowIntensity(float intensity)", "void SetShadowIntensity(float)", AS_METHODPR(Light, SetShadowIntensity, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowIntensity(float intensity)", "void set_shadowIntensity(float)", AS_METHODPR(Light, SetShadowIntensity, (float), void), AS_CALL_THISCALL));

    // void Light::SetShadowResolution(float resolution)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowResolution(float resolution)", "void SetShadowResolution(float)", AS_METHODPR(Light, SetShadowResolution, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowResolution(float resolution)", "void set_shadowResolution(float)", AS_METHODPR(Light, SetShadowResolution, (float), void), AS_CALL_THISCALL));

    // void Light::SetShadowNearFarRatio(float nearFarRatio)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowNearFarRatio(float nearFarRatio)", "void SetShadowNearFarRatio(float)", AS_METHODPR(Light, SetShadowNearFarRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowNearFarRatio(float nearFarRatio)", "void set_shadowNearFarRatio(float)", AS_METHODPR(Light, SetShadowNearFarRatio, (float), void), AS_CALL_THISCALL));

    // void Light::SetShadowMaxExtrusion(float extrusion)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowMaxExtrusion(float extrusion)", "void SetShadowMaxExtrusion(float)", AS_METHODPR(Light, SetShadowMaxExtrusion, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShadowMaxExtrusion(float extrusion)", "void set_shadowMaxExtrusion(float)", AS_METHODPR(Light, SetShadowMaxExtrusion, (float), void), AS_CALL_THISCALL));

    // void Light::SetRampTexture(Texture* texture)
    methods.Push(RegisterObjectMethodArgs("void Light::SetRampTexture(Texture* texture)", "void SetRampTexture(Texture@+)", AS_METHODPR(Light, SetRampTexture, (Texture*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetRampTexture(Texture* texture)", "void set_rampTexture(Texture@+)", AS_METHODPR(Light, SetRampTexture, (Texture*), void), AS_CALL_THISCALL));

    // void Light::SetShapeTexture(Texture* texture)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShapeTexture(Texture* texture)", "void SetShapeTexture(Texture@+)", AS_METHODPR(Light, SetShapeTexture, (Texture*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Light::SetShapeTexture(Texture* texture)", "void set_shapeTexture(Texture@+)", AS_METHODPR(Light, SetShapeTexture, (Texture*), void), AS_CALL_THISCALL));

    // LightType Light::GetLightType() const
    methods.Push(RegisterObjectMethodArgs("LightType Light::GetLightType() const", "LightType GetLightType() const", AS_METHODPR(Light, GetLightType, () const, LightType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("LightType Light::GetLightType() const", "LightType get_lightType() const", AS_METHODPR(Light, GetLightType, () const, LightType), AS_CALL_THISCALL));

    // bool Light::GetPerVertex() const
    methods.Push(RegisterObjectMethodArgs("bool Light::GetPerVertex() const", "bool GetPerVertex() const", AS_METHODPR(Light, GetPerVertex, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Light::GetPerVertex() const", "bool get_perVertex() const", AS_METHODPR(Light, GetPerVertex, () const, bool), AS_CALL_THISCALL));

    // const Color& Light::GetColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Light::GetColor() const", "const Color& GetColor() const", AS_METHODPR(Light, GetColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Light::GetColor() const", "const Color& get_color() const", AS_METHODPR(Light, GetColor, () const, const Color&), AS_CALL_THISCALL));

    // float Light::GetTemperature() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetTemperature() const", "float GetTemperature() const", AS_METHODPR(Light, GetTemperature, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetTemperature() const", "float get_temperature() const", AS_METHODPR(Light, GetTemperature, () const, float), AS_CALL_THISCALL));

    // float Light::GetRadius() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetRadius() const", "float GetRadius() const", AS_METHODPR(Light, GetRadius, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetRadius() const", "float get_radius() const", AS_METHODPR(Light, GetRadius, () const, float), AS_CALL_THISCALL));

    // float Light::GetLength() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetLength() const", "float GetLength() const", AS_METHODPR(Light, GetLength, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetLength() const", "float get_length() const", AS_METHODPR(Light, GetLength, () const, float), AS_CALL_THISCALL));

    // bool Light::GetUsePhysicalValues() const
    methods.Push(RegisterObjectMethodArgs("bool Light::GetUsePhysicalValues() const", "bool GetUsePhysicalValues() const", AS_METHODPR(Light, GetUsePhysicalValues, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Light::GetUsePhysicalValues() const", "bool get_usePhysicalValues() const", AS_METHODPR(Light, GetUsePhysicalValues, () const, bool), AS_CALL_THISCALL));

    // Color Light::GetColorFromTemperature() const
    methods.Push(RegisterObjectMethodArgs("Color Light::GetColorFromTemperature() const", "Color GetColorFromTemperature() const", AS_METHODPR(Light, GetColorFromTemperature, () const, Color), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Color Light::GetColorFromTemperature() const", "Color get_colorFromTemperature() const", AS_METHODPR(Light, GetColorFromTemperature, () const, Color), AS_CALL_THISCALL));

    // float Light::GetSpecularIntensity() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetSpecularIntensity() const", "float GetSpecularIntensity() const", AS_METHODPR(Light, GetSpecularIntensity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetSpecularIntensity() const", "float get_specularIntensity() const", AS_METHODPR(Light, GetSpecularIntensity, () const, float), AS_CALL_THISCALL));

    // float Light::GetBrightness() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetBrightness() const", "float GetBrightness() const", AS_METHODPR(Light, GetBrightness, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetBrightness() const", "float get_brightness() const", AS_METHODPR(Light, GetBrightness, () const, float), AS_CALL_THISCALL));

    // Color Light::GetEffectiveColor() const
    methods.Push(RegisterObjectMethodArgs("Color Light::GetEffectiveColor() const", "Color GetEffectiveColor() const", AS_METHODPR(Light, GetEffectiveColor, () const, Color), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Color Light::GetEffectiveColor() const", "Color get_effectiveColor() const", AS_METHODPR(Light, GetEffectiveColor, () const, Color), AS_CALL_THISCALL));

    // float Light::GetEffectiveSpecularIntensity() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetEffectiveSpecularIntensity() const", "float GetEffectiveSpecularIntensity() const", AS_METHODPR(Light, GetEffectiveSpecularIntensity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetEffectiveSpecularIntensity() const", "float get_effectiveSpecularIntensity() const", AS_METHODPR(Light, GetEffectiveSpecularIntensity, () const, float), AS_CALL_THISCALL));

    // float Light::GetRange() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetRange() const", "float GetRange() const", AS_METHODPR(Light, GetRange, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetRange() const", "float get_range() const", AS_METHODPR(Light, GetRange, () const, float), AS_CALL_THISCALL));

    // float Light::GetFov() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetFov() const", "float GetFov() const", AS_METHODPR(Light, GetFov, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetFov() const", "float get_fov() const", AS_METHODPR(Light, GetFov, () const, float), AS_CALL_THISCALL));

    // float Light::GetAspectRatio() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetAspectRatio() const", "float GetAspectRatio() const", AS_METHODPR(Light, GetAspectRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetAspectRatio() const", "float get_aspectRatio() const", AS_METHODPR(Light, GetAspectRatio, () const, float), AS_CALL_THISCALL));

    // float Light::GetFadeDistance() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetFadeDistance() const", "float GetFadeDistance() const", AS_METHODPR(Light, GetFadeDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetFadeDistance() const", "float get_fadeDistance() const", AS_METHODPR(Light, GetFadeDistance, () const, float), AS_CALL_THISCALL));

    // float Light::GetShadowFadeDistance() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowFadeDistance() const", "float GetShadowFadeDistance() const", AS_METHODPR(Light, GetShadowFadeDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowFadeDistance() const", "float get_shadowFadeDistance() const", AS_METHODPR(Light, GetShadowFadeDistance, () const, float), AS_CALL_THISCALL));

    // const BiasParameters& Light::GetShadowBias() const
    methods.Push(RegisterObjectMethodArgs("const BiasParameters& Light::GetShadowBias() const", "const BiasParameters& GetShadowBias() const", AS_METHODPR(Light, GetShadowBias, () const, const BiasParameters&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const BiasParameters& Light::GetShadowBias() const", "const BiasParameters& get_shadowBias() const", AS_METHODPR(Light, GetShadowBias, () const, const BiasParameters&), AS_CALL_THISCALL));

    // const CascadeParameters& Light::GetShadowCascade() const
    methods.Push(RegisterObjectMethodArgs("const CascadeParameters& Light::GetShadowCascade() const", "const CascadeParameters& GetShadowCascade() const", AS_METHODPR(Light, GetShadowCascade, () const, const CascadeParameters&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const CascadeParameters& Light::GetShadowCascade() const", "const CascadeParameters& get_shadowCascade() const", AS_METHODPR(Light, GetShadowCascade, () const, const CascadeParameters&), AS_CALL_THISCALL));

    // const FocusParameters& Light::GetShadowFocus() const
    methods.Push(RegisterObjectMethodArgs("const FocusParameters& Light::GetShadowFocus() const", "const FocusParameters& GetShadowFocus() const", AS_METHODPR(Light, GetShadowFocus, () const, const FocusParameters&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const FocusParameters& Light::GetShadowFocus() const", "const FocusParameters& get_shadowFocus() const", AS_METHODPR(Light, GetShadowFocus, () const, const FocusParameters&), AS_CALL_THISCALL));

    // float Light::GetShadowIntensity() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowIntensity() const", "float GetShadowIntensity() const", AS_METHODPR(Light, GetShadowIntensity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowIntensity() const", "float get_shadowIntensity() const", AS_METHODPR(Light, GetShadowIntensity, () const, float), AS_CALL_THISCALL));

    // float Light::GetShadowResolution() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowResolution() const", "float GetShadowResolution() const", AS_METHODPR(Light, GetShadowResolution, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowResolution() const", "float get_shadowResolution() const", AS_METHODPR(Light, GetShadowResolution, () const, float), AS_CALL_THISCALL));

    // float Light::GetShadowNearFarRatio() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowNearFarRatio() const", "float GetShadowNearFarRatio() const", AS_METHODPR(Light, GetShadowNearFarRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowNearFarRatio() const", "float get_shadowNearFarRatio() const", AS_METHODPR(Light, GetShadowNearFarRatio, () const, float), AS_CALL_THISCALL));

    // float Light::GetShadowMaxExtrusion() const
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowMaxExtrusion() const", "float GetShadowMaxExtrusion() const", AS_METHODPR(Light, GetShadowMaxExtrusion, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Light::GetShadowMaxExtrusion() const", "float get_shadowMaxExtrusion() const", AS_METHODPR(Light, GetShadowMaxExtrusion, () const, float), AS_CALL_THISCALL));

    // Texture* Light::GetRampTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture* Light::GetRampTexture() const", "Texture@+ GetRampTexture() const", AS_METHODPR(Light, GetRampTexture, () const, Texture*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture* Light::GetRampTexture() const", "Texture@+ get_rampTexture() const", AS_METHODPR(Light, GetRampTexture, () const, Texture*), AS_CALL_THISCALL));

    // Texture* Light::GetShapeTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture* Light::GetShapeTexture() const", "Texture@+ GetShapeTexture() const", AS_METHODPR(Light, GetShapeTexture, () const, Texture*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture* Light::GetShapeTexture() const", "Texture@+ get_shapeTexture() const", AS_METHODPR(Light, GetShapeTexture, () const, Texture*), AS_CALL_THISCALL));

    // Frustum Light::GetFrustum() const
    methods.Push(RegisterObjectMethodArgs("Frustum Light::GetFrustum() const", "Frustum GetFrustum() const", AS_METHODPR(Light, GetFrustum, () const, Frustum), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Frustum Light::GetFrustum() const", "Frustum get_frustum() const", AS_METHODPR(Light, GetFrustum, () const, Frustum), AS_CALL_THISCALL));

    // Frustum Light::GetViewSpaceFrustum(const Matrix3x4& view) const
    methods.Push(RegisterObjectMethodArgs("Frustum Light::GetViewSpaceFrustum(const Matrix3x4& view) const", "Frustum GetViewSpaceFrustum(const Matrix3x4&in) const", AS_METHODPR(Light, GetViewSpaceFrustum, (const Matrix3x4&) const, Frustum), AS_CALL_THISCALL));

    // int Light::GetNumShadowSplits() const
    methods.Push(RegisterObjectMethodArgs("int Light::GetNumShadowSplits() const", "int GetNumShadowSplits() const", AS_METHODPR(Light, GetNumShadowSplits, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Light::GetNumShadowSplits() const", "int get_numShadowSplits() const", AS_METHODPR(Light, GetNumShadowSplits, () const, int), AS_CALL_THISCALL));

    // bool Light::IsNegative() const
    methods.Push(RegisterObjectMethodArgs("bool Light::IsNegative() const", "bool IsNegative() const", AS_METHODPR(Light, IsNegative, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Light::IsNegative() const", "bool get_negative() const", AS_METHODPR(Light, IsNegative, () const, bool), AS_CALL_THISCALL));

    // void Light::SetIntensitySortValue(float distance)
    methods.Push(RegisterObjectMethodArgs("void Light::SetIntensitySortValue(float distance)", "void SetIntensitySortValue(float)", AS_METHODPR(Light, SetIntensitySortValue, (float), void), AS_CALL_THISCALL));

    // void Light::SetIntensitySortValue(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void Light::SetIntensitySortValue(const BoundingBox& box)", "void SetIntensitySortValue(const BoundingBox&in)", AS_METHODPR(Light, SetIntensitySortValue, (const BoundingBox&), void), AS_CALL_THISCALL));

    // const Matrix3x4& Light::GetVolumeTransform(Camera* camera)
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Light::GetVolumeTransform(Camera* camera)", "const Matrix3x4& GetVolumeTransform(Camera@+)", AS_METHODPR(Light, GetVolumeTransform, (Camera*), const Matrix3x4&), AS_CALL_THISCALL));

    // float Light::GetIntensityDivisor(float attenuation=1.0f) const
    methods.Push(RegisterObjectMethodArgs("float Light::GetIntensityDivisor(float attenuation=1.0f) const", "float GetIntensityDivisor(float = 1.0f) const", AS_METHODPR(Light, GetIntensityDivisor, (float) const, float), AS_CALL_THISCALL));

    // void Light::SetRampTextureAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Light::SetRampTextureAttr(const ResourceRef& value)", "void SetRampTextureAttr(const ResourceRef&in)", AS_METHODPR(Light, SetRampTextureAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // void Light::SetShapeTextureAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Light::SetShapeTextureAttr(const ResourceRef& value)", "void SetShapeTextureAttr(const ResourceRef&in)", AS_METHODPR(Light, SetShapeTextureAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef Light::GetRampTextureAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Light::GetRampTextureAttr() const", "ResourceRef GetRampTextureAttr() const", AS_METHODPR(Light, GetRampTextureAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // ResourceRef Light::GetShapeTextureAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Light::GetShapeTextureAttr() const", "ResourceRef GetShapeTextureAttr() const", AS_METHODPR(Light, GetShapeTextureAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

// struct LightBatchQueue | File: ../Graphics/Batch.h
void CollectMembers_LightBatchQueue(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct LightQueryResult | File: ../Graphics/View.h
void CollectMembers_LightQueryResult(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class LineEdit | File: ../UI/LineEdit.h
void CollectMembers_LineEdit(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BorderImage(methods);

    Remove(methods, "static void BorderImage::RegisterObject(Context* context)");
    Remove(methods, "virtual bool UIElement::OnDragDropFinish(UIElement* source)");
    Remove(methods, "virtual bool UIElement::OnDragDropTest(UIElement* source)");
    Remove(methods, "virtual void UIElement::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnDoubleClick(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers)");
    Remove(methods, "virtual void UIElement::OnTextInput(const String& text)");
    Remove(methods, "virtual void UIElement::Update(float timeStep)");
    Remove(methods, "void UIElement::ApplyAttributes() override");

    // void LineEdit::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void LineEdit::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(LineEdit, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void LineEdit::Update(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void LineEdit::Update(float timeStep) override", "void Update(float)", AS_METHODPR(LineEdit, Update, (float), void), AS_CALL_THISCALL));

    // void LineEdit::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void LineEdit::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnClickBegin(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(LineEdit, OnClickBegin, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void LineEdit::OnDoubleClick(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void LineEdit::OnDoubleClick(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnDoubleClick(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(LineEdit, OnDoubleClick, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void LineEdit::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void LineEdit::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnDragBegin(const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(LineEdit, OnDragBegin, (const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void LineEdit::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void LineEdit::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnDragMove(const IntVector2&in, const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(LineEdit, OnDragMove, (const IntVector2&, const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // bool LineEdit::OnDragDropTest(UIElement* source) override
    methods.Push(RegisterObjectMethodArgs("bool LineEdit::OnDragDropTest(UIElement* source) override", "bool OnDragDropTest(UIElement@+)", AS_METHODPR(LineEdit, OnDragDropTest, (UIElement*), bool), AS_CALL_THISCALL));

    // bool LineEdit::OnDragDropFinish(UIElement* source) override
    methods.Push(RegisterObjectMethodArgs("bool LineEdit::OnDragDropFinish(UIElement* source) override", "bool OnDragDropFinish(UIElement@+)", AS_METHODPR(LineEdit, OnDragDropFinish, (UIElement*), bool), AS_CALL_THISCALL));

    // void LineEdit::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override
    methods.Push(RegisterObjectMethodArgs("void LineEdit::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override", "void OnKey(Key, MouseButtonFlags, QualifierFlags)", AS_METHODPR(LineEdit, OnKey, (Key, MouseButtonFlags, QualifierFlags), void), AS_CALL_THISCALL));

    // void LineEdit::OnTextInput(const String& text) override
    methods.Push(RegisterObjectMethodArgs("void LineEdit::OnTextInput(const String& text) override", "void OnTextInput(const String&in)", AS_METHODPR(LineEdit, OnTextInput, (const String&), void), AS_CALL_THISCALL));

    // void LineEdit::SetText(const String& text)
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetText(const String& text)", "void SetText(const String&in)", AS_METHODPR(LineEdit, SetText, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetText(const String& text)", "void set_text(const String&in)", AS_METHODPR(LineEdit, SetText, (const String&), void), AS_CALL_THISCALL));

    // void LineEdit::SetCursorPosition(unsigned position)
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetCursorPosition(unsigned position)", "void SetCursorPosition(uint)", AS_METHODPR(LineEdit, SetCursorPosition, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetCursorPosition(unsigned position)", "void set_cursorPosition(uint)", AS_METHODPR(LineEdit, SetCursorPosition, (unsigned), void), AS_CALL_THISCALL));

    // void LineEdit::SetCursorBlinkRate(float rate)
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetCursorBlinkRate(float rate)", "void SetCursorBlinkRate(float)", AS_METHODPR(LineEdit, SetCursorBlinkRate, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetCursorBlinkRate(float rate)", "void set_cursorBlinkRate(float)", AS_METHODPR(LineEdit, SetCursorBlinkRate, (float), void), AS_CALL_THISCALL));

    // void LineEdit::SetMaxLength(unsigned length)
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetMaxLength(unsigned length)", "void SetMaxLength(uint)", AS_METHODPR(LineEdit, SetMaxLength, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetMaxLength(unsigned length)", "void set_maxLength(uint)", AS_METHODPR(LineEdit, SetMaxLength, (unsigned), void), AS_CALL_THISCALL));

    // void LineEdit::SetEchoCharacter(unsigned c)
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetEchoCharacter(unsigned c)", "void SetEchoCharacter(uint)", AS_METHODPR(LineEdit, SetEchoCharacter, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetEchoCharacter(unsigned c)", "void set_echoCharacter(uint)", AS_METHODPR(LineEdit, SetEchoCharacter, (unsigned), void), AS_CALL_THISCALL));

    // void LineEdit::SetCursorMovable(bool enable)
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetCursorMovable(bool enable)", "void SetCursorMovable(bool)", AS_METHODPR(LineEdit, SetCursorMovable, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetCursorMovable(bool enable)", "void set_cursorMovable(bool)", AS_METHODPR(LineEdit, SetCursorMovable, (bool), void), AS_CALL_THISCALL));

    // void LineEdit::SetTextSelectable(bool enable)
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetTextSelectable(bool enable)", "void SetTextSelectable(bool)", AS_METHODPR(LineEdit, SetTextSelectable, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetTextSelectable(bool enable)", "void set_textSelectable(bool)", AS_METHODPR(LineEdit, SetTextSelectable, (bool), void), AS_CALL_THISCALL));

    // void LineEdit::SetTextCopyable(bool enable)
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetTextCopyable(bool enable)", "void SetTextCopyable(bool)", AS_METHODPR(LineEdit, SetTextCopyable, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void LineEdit::SetTextCopyable(bool enable)", "void set_textCopyable(bool)", AS_METHODPR(LineEdit, SetTextCopyable, (bool), void), AS_CALL_THISCALL));

    // const String& LineEdit::GetText() const
    methods.Push(RegisterObjectMethodArgs("const String& LineEdit::GetText() const", "const String& GetText() const", AS_METHODPR(LineEdit, GetText, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& LineEdit::GetText() const", "const String& get_text() const", AS_METHODPR(LineEdit, GetText, () const, const String&), AS_CALL_THISCALL));

    // unsigned LineEdit::GetCursorPosition() const
    methods.Push(RegisterObjectMethodArgs("unsigned LineEdit::GetCursorPosition() const", "uint GetCursorPosition() const", AS_METHODPR(LineEdit, GetCursorPosition, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned LineEdit::GetCursorPosition() const", "uint get_cursorPosition() const", AS_METHODPR(LineEdit, GetCursorPosition, () const, unsigned), AS_CALL_THISCALL));

    // float LineEdit::GetCursorBlinkRate() const
    methods.Push(RegisterObjectMethodArgs("float LineEdit::GetCursorBlinkRate() const", "float GetCursorBlinkRate() const", AS_METHODPR(LineEdit, GetCursorBlinkRate, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float LineEdit::GetCursorBlinkRate() const", "float get_cursorBlinkRate() const", AS_METHODPR(LineEdit, GetCursorBlinkRate, () const, float), AS_CALL_THISCALL));

    // unsigned LineEdit::GetMaxLength() const
    methods.Push(RegisterObjectMethodArgs("unsigned LineEdit::GetMaxLength() const", "uint GetMaxLength() const", AS_METHODPR(LineEdit, GetMaxLength, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned LineEdit::GetMaxLength() const", "uint get_maxLength() const", AS_METHODPR(LineEdit, GetMaxLength, () const, unsigned), AS_CALL_THISCALL));

    // unsigned LineEdit::GetEchoCharacter() const
    methods.Push(RegisterObjectMethodArgs("unsigned LineEdit::GetEchoCharacter() const", "uint GetEchoCharacter() const", AS_METHODPR(LineEdit, GetEchoCharacter, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned LineEdit::GetEchoCharacter() const", "uint get_echoCharacter() const", AS_METHODPR(LineEdit, GetEchoCharacter, () const, unsigned), AS_CALL_THISCALL));

    // bool LineEdit::IsCursorMovable() const
    methods.Push(RegisterObjectMethodArgs("bool LineEdit::IsCursorMovable() const", "bool IsCursorMovable() const", AS_METHODPR(LineEdit, IsCursorMovable, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool LineEdit::IsCursorMovable() const", "bool get_cursorMovable() const", AS_METHODPR(LineEdit, IsCursorMovable, () const, bool), AS_CALL_THISCALL));

    // bool LineEdit::IsTextSelectable() const
    methods.Push(RegisterObjectMethodArgs("bool LineEdit::IsTextSelectable() const", "bool IsTextSelectable() const", AS_METHODPR(LineEdit, IsTextSelectable, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool LineEdit::IsTextSelectable() const", "bool get_textSelectable() const", AS_METHODPR(LineEdit, IsTextSelectable, () const, bool), AS_CALL_THISCALL));

    // bool LineEdit::IsTextCopyable() const
    methods.Push(RegisterObjectMethodArgs("bool LineEdit::IsTextCopyable() const", "bool IsTextCopyable() const", AS_METHODPR(LineEdit, IsTextCopyable, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool LineEdit::IsTextCopyable() const", "bool get_textCopyable() const", AS_METHODPR(LineEdit, IsTextCopyable, () const, bool), AS_CALL_THISCALL));

    // Text* LineEdit::GetTextElement() const
    methods.Push(RegisterObjectMethodArgs("Text* LineEdit::GetTextElement() const", "Text@+ GetTextElement() const", AS_METHODPR(LineEdit, GetTextElement, () const, Text*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Text* LineEdit::GetTextElement() const", "Text@+ get_textElement() const", AS_METHODPR(LineEdit, GetTextElement, () const, Text*), AS_CALL_THISCALL));

    // BorderImage* LineEdit::GetCursor() const
    methods.Push(RegisterObjectMethodArgs("BorderImage* LineEdit::GetCursor() const", "BorderImage@+ GetCursor() const", AS_METHODPR(LineEdit, GetCursor, () const, BorderImage*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BorderImage* LineEdit::GetCursor() const", "BorderImage@+ get_cursor() const", AS_METHODPR(LineEdit, GetCursor, () const, BorderImage*), AS_CALL_THISCALL));
}

// struct LinkedListNode | File: ../Container/LinkedList.h
void CollectMembers_LinkedListNode(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class ListBase | File: ../Container/ListBase.h
void CollectMembers_ListBase(Vector<RegisterObjectMethodArgs>& methods)
{
    // void ListBase::Swap(ListBase& rhs)
    methods.Push(RegisterObjectMethodArgs("void ListBase::Swap(ListBase& rhs)", "void Swap(ListBase&)", AS_METHODPR(ListBase, Swap, (ListBase&), void), AS_CALL_THISCALL));
}

// struct ListIteratorBase | File: ../Container/ListBase.h
void CollectMembers_ListIteratorBase(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool ListIteratorBase::operator!=(const ListIteratorBase& rhs) const
    // Only operator== is needed

    // bool ListIteratorBase::operator==(const ListIteratorBase& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool ListIteratorBase::operator==(const ListIteratorBase& rhs) const", "bool opEquals(const ListIteratorBase&in) const", AS_METHODPR(ListIteratorBase, operator==, (const ListIteratorBase&) const, bool), AS_CALL_THISCALL));

    // void ListIteratorBase::GotoNext()
    methods.Push(RegisterObjectMethodArgs("void ListIteratorBase::GotoNext()", "void GotoNext()", AS_METHODPR(ListIteratorBase, GotoNext, (), void), AS_CALL_THISCALL));

    // void ListIteratorBase::GotoPrev()
    methods.Push(RegisterObjectMethodArgs("void ListIteratorBase::GotoPrev()", "void GotoPrev()", AS_METHODPR(ListIteratorBase, GotoPrev, (), void), AS_CALL_THISCALL));
}

// struct ListNodeBase | File: ../Container/ListBase.h
void CollectMembers_ListNodeBase(Vector<RegisterObjectMethodArgs>& methods)
{
}

// void ListView::SetSelections(const PODVector<unsigned>& indices)
// void ListView::SetSelections(const PODVector<unsigned>& indices) | File: ../UI/ListView.h
static void ListView_SetSelections_PODVectorunsigned(ListView* ptr, CScriptArray* indices_conv)
{
    PODVector<unsigned> indices = ArrayToPODVector<unsigned>(indices_conv);
    ptr->SetSelections(indices);
}


// PODVector<UIElement*> ListView::GetItems() const
// PODVector<UIElement*> ListView::GetItems() const | File: ../UI/ListView.h
static CScriptArray* ListView_GetItems_void(ListView* ptr)
{
    PODVector<UIElement*> result = ptr->GetItems();
    return VectorToHandleArray(result, "Array<UIElement@>");
}


// const PODVector<unsigned>& ListView::GetSelections() const
// const PODVector<unsigned>& ListView::GetSelections() const | File: ../UI/ListView.h
static CScriptArray* ListView_GetSelections_void(ListView* ptr)
{
    const PODVector<unsigned>& result = ptr->GetSelections();
    return VectorToArray(result, "Array<uint>");
}


// PODVector<UIElement*> ListView::GetSelectedItems() const
// PODVector<UIElement*> ListView::GetSelectedItems() const | File: ../UI/ListView.h
static CScriptArray* ListView_GetSelectedItems_void(ListView* ptr)
{
    PODVector<UIElement*> result = ptr->GetSelectedItems();
    return VectorToHandleArray(result, "Array<UIElement@>");
}


// class ListView | File: ../UI/ListView.h
void CollectMembers_ListView(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ScrollView(methods);

    Remove(methods, "bool UIElement::IsSelected() const");
    Remove(methods, "static void ScrollView::RegisterObject(Context* context)");
    Remove(methods, "void ScrollView::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override");
    Remove(methods, "void ScrollView::OnResize(const IntVector2& newSize, const IntVector2& delta) override");

    // void ListView::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override
    methods.Push(RegisterObjectMethodArgs("void ListView::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override", "void OnKey(Key, MouseButtonFlags, QualifierFlags)", AS_METHODPR(ListView, OnKey, (Key, MouseButtonFlags, QualifierFlags), void), AS_CALL_THISCALL));

    // void ListView::OnResize(const IntVector2& newSize, const IntVector2& delta) override
    methods.Push(RegisterObjectMethodArgs("void ListView::OnResize(const IntVector2& newSize, const IntVector2& delta) override", "void OnResize(const IntVector2&in, const IntVector2&in)", AS_METHODPR(ListView, OnResize, (const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // void ListView::UpdateInternalLayout()
    methods.Push(RegisterObjectMethodArgs("void ListView::UpdateInternalLayout()", "void UpdateInternalLayout()", AS_METHODPR(ListView, UpdateInternalLayout, (), void), AS_CALL_THISCALL));

    // void ListView::DisableInternalLayoutUpdate()
    methods.Push(RegisterObjectMethodArgs("void ListView::DisableInternalLayoutUpdate()", "void DisableInternalLayoutUpdate()", AS_METHODPR(ListView, DisableInternalLayoutUpdate, (), void), AS_CALL_THISCALL));

    // void ListView::EnableInternalLayoutUpdate()
    methods.Push(RegisterObjectMethodArgs("void ListView::EnableInternalLayoutUpdate()", "void EnableInternalLayoutUpdate()", AS_METHODPR(ListView, EnableInternalLayoutUpdate, (), void), AS_CALL_THISCALL));

    // void ListView::AddItem(UIElement* item)
    methods.Push(RegisterObjectMethodArgs("void ListView::AddItem(UIElement* item)", "void AddItem(UIElement@+)", AS_METHODPR(ListView, AddItem, (UIElement*), void), AS_CALL_THISCALL));

    // void ListView::InsertItem(unsigned index, UIElement* item, UIElement* parentItem=nullptr)
    methods.Push(RegisterObjectMethodArgs("void ListView::InsertItem(unsigned index, UIElement* item, UIElement* parentItem=nullptr)", "void InsertItem(uint, UIElement@+, UIElement@+ = null)", AS_METHODPR(ListView, InsertItem, (unsigned, UIElement*, UIElement*), void), AS_CALL_THISCALL));

    // void ListView::RemoveItem(UIElement* item, unsigned index=0)
    methods.Push(RegisterObjectMethodArgs("void ListView::RemoveItem(UIElement* item, unsigned index=0)", "void RemoveItem(UIElement@+, uint = 0)", AS_METHODPR(ListView, RemoveItem, (UIElement*, unsigned), void), AS_CALL_THISCALL));

    // void ListView::RemoveItem(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void ListView::RemoveItem(unsigned index)", "void RemoveItem(uint)", AS_METHODPR(ListView, RemoveItem, (unsigned), void), AS_CALL_THISCALL));

    // void ListView::RemoveAllItems()
    methods.Push(RegisterObjectMethodArgs("void ListView::RemoveAllItems()", "void RemoveAllItems()", AS_METHODPR(ListView, RemoveAllItems, (), void), AS_CALL_THISCALL));

    // void ListView::SetSelection(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void ListView::SetSelection(unsigned index)", "void SetSelection(uint)", AS_METHODPR(ListView, SetSelection, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ListView::SetSelection(unsigned index)", "void set_selection(uint)", AS_METHODPR(ListView, SetSelection, (unsigned), void), AS_CALL_THISCALL));

    // void ListView::SetSelections(const PODVector<unsigned>& indices)
    methods.Push(RegisterObjectMethodArgs("void ListView::SetSelections(const PODVector<unsigned>& indices)", "void SetSelections(Array<uint>@+)", AS_FUNCTION_OBJFIRST(ListView_SetSelections_PODVectorunsigned), AS_CALL_CDECL_OBJFIRST));

    // void ListView::AddSelection(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void ListView::AddSelection(unsigned index)", "void AddSelection(uint)", AS_METHODPR(ListView, AddSelection, (unsigned), void), AS_CALL_THISCALL));

    // void ListView::RemoveSelection(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void ListView::RemoveSelection(unsigned index)", "void RemoveSelection(uint)", AS_METHODPR(ListView, RemoveSelection, (unsigned), void), AS_CALL_THISCALL));

    // void ListView::ToggleSelection(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void ListView::ToggleSelection(unsigned index)", "void ToggleSelection(uint)", AS_METHODPR(ListView, ToggleSelection, (unsigned), void), AS_CALL_THISCALL));

    // void ListView::ChangeSelection(int delta, bool additive=false)
    methods.Push(RegisterObjectMethodArgs("void ListView::ChangeSelection(int delta, bool additive=false)", "void ChangeSelection(int, bool = false)", AS_METHODPR(ListView, ChangeSelection, (int, bool), void), AS_CALL_THISCALL));

    // void ListView::ClearSelection()
    methods.Push(RegisterObjectMethodArgs("void ListView::ClearSelection()", "void ClearSelection()", AS_METHODPR(ListView, ClearSelection, (), void), AS_CALL_THISCALL));

    // void ListView::SetHighlightMode(HighlightMode mode)
    methods.Push(RegisterObjectMethodArgs("void ListView::SetHighlightMode(HighlightMode mode)", "void SetHighlightMode(HighlightMode)", AS_METHODPR(ListView, SetHighlightMode, (HighlightMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ListView::SetHighlightMode(HighlightMode mode)", "void set_highlightMode(HighlightMode)", AS_METHODPR(ListView, SetHighlightMode, (HighlightMode), void), AS_CALL_THISCALL));

    // void ListView::SetMultiselect(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ListView::SetMultiselect(bool enable)", "void SetMultiselect(bool)", AS_METHODPR(ListView, SetMultiselect, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ListView::SetMultiselect(bool enable)", "void set_multiselect(bool)", AS_METHODPR(ListView, SetMultiselect, (bool), void), AS_CALL_THISCALL));

    // void ListView::SetHierarchyMode(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ListView::SetHierarchyMode(bool enable)", "void SetHierarchyMode(bool)", AS_METHODPR(ListView, SetHierarchyMode, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ListView::SetHierarchyMode(bool enable)", "void set_hierarchyMode(bool)", AS_METHODPR(ListView, SetHierarchyMode, (bool), void), AS_CALL_THISCALL));

    // void ListView::SetBaseIndent(int baseIndent)
    methods.Push(RegisterObjectMethodArgs("void ListView::SetBaseIndent(int baseIndent)", "void SetBaseIndent(int)", AS_METHODPR(ListView, SetBaseIndent, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ListView::SetBaseIndent(int baseIndent)", "void set_baseIndent(int)", AS_METHODPR(ListView, SetBaseIndent, (int), void), AS_CALL_THISCALL));

    // void ListView::SetClearSelectionOnDefocus(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ListView::SetClearSelectionOnDefocus(bool enable)", "void SetClearSelectionOnDefocus(bool)", AS_METHODPR(ListView, SetClearSelectionOnDefocus, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ListView::SetClearSelectionOnDefocus(bool enable)", "void set_clearSelectionOnDefocus(bool)", AS_METHODPR(ListView, SetClearSelectionOnDefocus, (bool), void), AS_CALL_THISCALL));

    // void ListView::SetSelectOnClickEnd(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ListView::SetSelectOnClickEnd(bool enable)", "void SetSelectOnClickEnd(bool)", AS_METHODPR(ListView, SetSelectOnClickEnd, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ListView::SetSelectOnClickEnd(bool enable)", "void set_selectOnClickEnd(bool)", AS_METHODPR(ListView, SetSelectOnClickEnd, (bool), void), AS_CALL_THISCALL));

    // void ListView::Expand(unsigned index, bool enable, bool recursive=false)
    methods.Push(RegisterObjectMethodArgs("void ListView::Expand(unsigned index, bool enable, bool recursive=false)", "void Expand(uint, bool, bool = false)", AS_METHODPR(ListView, Expand, (unsigned, bool, bool), void), AS_CALL_THISCALL));

    // void ListView::ToggleExpand(unsigned index, bool recursive=false)
    methods.Push(RegisterObjectMethodArgs("void ListView::ToggleExpand(unsigned index, bool recursive=false)", "void ToggleExpand(uint, bool = false)", AS_METHODPR(ListView, ToggleExpand, (unsigned, bool), void), AS_CALL_THISCALL));

    // unsigned ListView::GetNumItems() const
    methods.Push(RegisterObjectMethodArgs("unsigned ListView::GetNumItems() const", "uint GetNumItems() const", AS_METHODPR(ListView, GetNumItems, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned ListView::GetNumItems() const", "uint get_numItems() const", AS_METHODPR(ListView, GetNumItems, () const, unsigned), AS_CALL_THISCALL));

    // UIElement* ListView::GetItem(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("UIElement* ListView::GetItem(unsigned index) const", "UIElement@+ GetItem(uint) const", AS_METHODPR(ListView, GetItem, (unsigned) const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* ListView::GetItem(unsigned index) const", "UIElement@+ get_items(uint) const", AS_METHODPR(ListView, GetItem, (unsigned) const, UIElement*), AS_CALL_THISCALL));

    // PODVector<UIElement*> ListView::GetItems() const
    methods.Push(RegisterObjectMethodArgs("PODVector<UIElement*> ListView::GetItems() const", "Array<UIElement@>@ GetItems() const", AS_FUNCTION_OBJFIRST(ListView_GetItems_void), AS_CALL_CDECL_OBJFIRST));

    // unsigned ListView::FindItem(UIElement* item) const
    methods.Push(RegisterObjectMethodArgs("unsigned ListView::FindItem(UIElement* item) const", "uint FindItem(UIElement@+) const", AS_METHODPR(ListView, FindItem, (UIElement*) const, unsigned), AS_CALL_THISCALL));

    // unsigned ListView::GetSelection() const
    methods.Push(RegisterObjectMethodArgs("unsigned ListView::GetSelection() const", "uint GetSelection() const", AS_METHODPR(ListView, GetSelection, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned ListView::GetSelection() const", "uint get_selection() const", AS_METHODPR(ListView, GetSelection, () const, unsigned), AS_CALL_THISCALL));

    // const PODVector<unsigned>& ListView::GetSelections() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<unsigned>& ListView::GetSelections() const", "Array<uint>@ GetSelections() const", AS_FUNCTION_OBJFIRST(ListView_GetSelections_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("const PODVector<unsigned>& ListView::GetSelections() const", "Array<uint>@ get_selections() const", AS_FUNCTION_OBJFIRST(ListView_GetSelections_void), AS_CALL_CDECL_OBJFIRST));

    // void ListView::CopySelectedItemsToClipboard() const
    methods.Push(RegisterObjectMethodArgs("void ListView::CopySelectedItemsToClipboard() const", "void CopySelectedItemsToClipboard() const", AS_METHODPR(ListView, CopySelectedItemsToClipboard, () const, void), AS_CALL_THISCALL));

    // UIElement* ListView::GetSelectedItem() const
    methods.Push(RegisterObjectMethodArgs("UIElement* ListView::GetSelectedItem() const", "UIElement@+ GetSelectedItem() const", AS_METHODPR(ListView, GetSelectedItem, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* ListView::GetSelectedItem() const", "UIElement@+ get_selectedItem() const", AS_METHODPR(ListView, GetSelectedItem, () const, UIElement*), AS_CALL_THISCALL));

    // PODVector<UIElement*> ListView::GetSelectedItems() const
    methods.Push(RegisterObjectMethodArgs("PODVector<UIElement*> ListView::GetSelectedItems() const", "Array<UIElement@>@ GetSelectedItems() const", AS_FUNCTION_OBJFIRST(ListView_GetSelectedItems_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("PODVector<UIElement*> ListView::GetSelectedItems() const", "Array<UIElement@>@ get_selectedItems() const", AS_FUNCTION_OBJFIRST(ListView_GetSelectedItems_void), AS_CALL_CDECL_OBJFIRST));

    // bool ListView::IsSelected(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("bool ListView::IsSelected(unsigned index) const", "bool IsSelected(uint) const", AS_METHODPR(ListView, IsSelected, (unsigned) const, bool), AS_CALL_THISCALL));

    // bool ListView::IsExpanded(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("bool ListView::IsExpanded(unsigned index) const", "bool IsExpanded(uint) const", AS_METHODPR(ListView, IsExpanded, (unsigned) const, bool), AS_CALL_THISCALL));

    // HighlightMode ListView::GetHighlightMode() const
    methods.Push(RegisterObjectMethodArgs("HighlightMode ListView::GetHighlightMode() const", "HighlightMode GetHighlightMode() const", AS_METHODPR(ListView, GetHighlightMode, () const, HighlightMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("HighlightMode ListView::GetHighlightMode() const", "HighlightMode get_highlightMode() const", AS_METHODPR(ListView, GetHighlightMode, () const, HighlightMode), AS_CALL_THISCALL));

    // bool ListView::GetMultiselect() const
    methods.Push(RegisterObjectMethodArgs("bool ListView::GetMultiselect() const", "bool GetMultiselect() const", AS_METHODPR(ListView, GetMultiselect, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ListView::GetMultiselect() const", "bool get_multiselect() const", AS_METHODPR(ListView, GetMultiselect, () const, bool), AS_CALL_THISCALL));

    // bool ListView::GetClearSelectionOnDefocus() const
    methods.Push(RegisterObjectMethodArgs("bool ListView::GetClearSelectionOnDefocus() const", "bool GetClearSelectionOnDefocus() const", AS_METHODPR(ListView, GetClearSelectionOnDefocus, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ListView::GetClearSelectionOnDefocus() const", "bool get_clearSelectionOnDefocus() const", AS_METHODPR(ListView, GetClearSelectionOnDefocus, () const, bool), AS_CALL_THISCALL));

    // bool ListView::GetSelectOnClickEnd() const
    methods.Push(RegisterObjectMethodArgs("bool ListView::GetSelectOnClickEnd() const", "bool GetSelectOnClickEnd() const", AS_METHODPR(ListView, GetSelectOnClickEnd, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ListView::GetSelectOnClickEnd() const", "bool get_selectOnClickEnd() const", AS_METHODPR(ListView, GetSelectOnClickEnd, () const, bool), AS_CALL_THISCALL));

    // bool ListView::GetHierarchyMode() const
    methods.Push(RegisterObjectMethodArgs("bool ListView::GetHierarchyMode() const", "bool GetHierarchyMode() const", AS_METHODPR(ListView, GetHierarchyMode, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ListView::GetHierarchyMode() const", "bool get_hierarchyMode() const", AS_METHODPR(ListView, GetHierarchyMode, () const, bool), AS_CALL_THISCALL));

    // int ListView::GetBaseIndent() const
    methods.Push(RegisterObjectMethodArgs("int ListView::GetBaseIndent() const", "int GetBaseIndent() const", AS_METHODPR(ListView, GetBaseIndent, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int ListView::GetBaseIndent() const", "int get_baseIndent() const", AS_METHODPR(ListView, GetBaseIndent, () const, int), AS_CALL_THISCALL));

    // void ListView::EnsureItemVisibility(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void ListView::EnsureItemVisibility(unsigned index)", "void EnsureItemVisibility(uint)", AS_METHODPR(ListView, EnsureItemVisibility, (unsigned), void), AS_CALL_THISCALL));

    // void ListView::EnsureItemVisibility(UIElement* item)
    methods.Push(RegisterObjectMethodArgs("void ListView::EnsureItemVisibility(UIElement* item)", "void EnsureItemVisibility(UIElement@+)", AS_METHODPR(ListView, EnsureItemVisibility, (UIElement*), void), AS_CALL_THISCALL));
}

// class Localization | File: ../Resource/Localization.h
void CollectMembers_Localization(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // int Localization::GetNumLanguages() const
    methods.Push(RegisterObjectMethodArgs("int Localization::GetNumLanguages() const", "int GetNumLanguages() const", AS_METHODPR(Localization, GetNumLanguages, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Localization::GetNumLanguages() const", "int get_numLanguages() const", AS_METHODPR(Localization, GetNumLanguages, () const, int), AS_CALL_THISCALL));

    // int Localization::GetLanguageIndex() const
    methods.Push(RegisterObjectMethodArgs("int Localization::GetLanguageIndex() const", "int GetLanguageIndex() const", AS_METHODPR(Localization, GetLanguageIndex, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Localization::GetLanguageIndex() const", "int get_languageIndex() const", AS_METHODPR(Localization, GetLanguageIndex, () const, int), AS_CALL_THISCALL));

    // int Localization::GetLanguageIndex(const String& language)
    methods.Push(RegisterObjectMethodArgs("int Localization::GetLanguageIndex(const String& language)", "int GetLanguageIndex(const String&in)", AS_METHODPR(Localization, GetLanguageIndex, (const String&), int), AS_CALL_THISCALL));

    // String Localization::GetLanguage()
    methods.Push(RegisterObjectMethodArgs("String Localization::GetLanguage()", "String GetLanguage()", AS_METHODPR(Localization, GetLanguage, (), String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String Localization::GetLanguage()", "String get_language()", AS_METHODPR(Localization, GetLanguage, (), String), AS_CALL_THISCALL));

    // String Localization::GetLanguage(int index)
    methods.Push(RegisterObjectMethodArgs("String Localization::GetLanguage(int index)", "String GetLanguage(int)", AS_METHODPR(Localization, GetLanguage, (int), String), AS_CALL_THISCALL));

    // void Localization::SetLanguage(int index)
    methods.Push(RegisterObjectMethodArgs("void Localization::SetLanguage(int index)", "void SetLanguage(int)", AS_METHODPR(Localization, SetLanguage, (int), void), AS_CALL_THISCALL));

    // void Localization::SetLanguage(const String& language)
    methods.Push(RegisterObjectMethodArgs("void Localization::SetLanguage(const String& language)", "void SetLanguage(const String&in)", AS_METHODPR(Localization, SetLanguage, (const String&), void), AS_CALL_THISCALL));

    // String Localization::Get(const String& id)
    methods.Push(RegisterObjectMethodArgs("String Localization::Get(const String& id)", "String Get(const String&in)", AS_METHODPR(Localization, Get, (const String&), String), AS_CALL_THISCALL));

    // void Localization::Reset()
    methods.Push(RegisterObjectMethodArgs("void Localization::Reset()", "void Reset()", AS_METHODPR(Localization, Reset, (), void), AS_CALL_THISCALL));

    // void Localization::LoadJSONFile(const String& name, const String& language=String::EMPTY)
    methods.Push(RegisterObjectMethodArgs("void Localization::LoadJSONFile(const String& name, const String& language=String::EMPTY)", "void LoadJSONFile(const String&in, const String&in = String::EMPTY)", AS_METHODPR(Localization, LoadJSONFile, (const String&, const String&), void), AS_CALL_THISCALL));

    // void Localization::LoadMultipleLanguageJSON(const JSONValue& source)
    methods.Push(RegisterObjectMethodArgs("void Localization::LoadMultipleLanguageJSON(const JSONValue& source)", "void LoadMultipleLanguageJSON(const JSONValue&in)", AS_METHODPR(Localization, LoadMultipleLanguageJSON, (const JSONValue&), void), AS_CALL_THISCALL));

    // void Localization::LoadSingleLanguageJSON(const JSONValue& source, const String& language=String::EMPTY)
    methods.Push(RegisterObjectMethodArgs("void Localization::LoadSingleLanguageJSON(const JSONValue& source, const String& language=String::EMPTY)", "void LoadSingleLanguageJSON(const JSONValue&in, const String&in = String::EMPTY)", AS_METHODPR(Localization, LoadSingleLanguageJSON, (const JSONValue&, const String&), void), AS_CALL_THISCALL));
}

// class Log | File: ../IO/Log.h
void CollectMembers_Log(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Log::Open(const String& fileName)
    methods.Push(RegisterObjectMethodArgs("void Log::Open(const String& fileName)", "void Open(const String&in)", AS_METHODPR(Log, Open, (const String&), void), AS_CALL_THISCALL));

    // void Log::Close()
    methods.Push(RegisterObjectMethodArgs("void Log::Close()", "void Close()", AS_METHODPR(Log, Close, (), void), AS_CALL_THISCALL));

    // void Log::SetLevel(int level)
    methods.Push(RegisterObjectMethodArgs("void Log::SetLevel(int level)", "void SetLevel(int)", AS_METHODPR(Log, SetLevel, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Log::SetLevel(int level)", "void set_level(int)", AS_METHODPR(Log, SetLevel, (int), void), AS_CALL_THISCALL));

    // void Log::SetTimeStamp(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Log::SetTimeStamp(bool enable)", "void SetTimeStamp(bool)", AS_METHODPR(Log, SetTimeStamp, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Log::SetTimeStamp(bool enable)", "void set_timeStamp(bool)", AS_METHODPR(Log, SetTimeStamp, (bool), void), AS_CALL_THISCALL));

    // void Log::SetQuiet(bool quiet)
    methods.Push(RegisterObjectMethodArgs("void Log::SetQuiet(bool quiet)", "void SetQuiet(bool)", AS_METHODPR(Log, SetQuiet, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Log::SetQuiet(bool quiet)", "void set_quiet(bool)", AS_METHODPR(Log, SetQuiet, (bool), void), AS_CALL_THISCALL));

    // int Log::GetLevel() const
    methods.Push(RegisterObjectMethodArgs("int Log::GetLevel() const", "int GetLevel() const", AS_METHODPR(Log, GetLevel, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Log::GetLevel() const", "int get_level() const", AS_METHODPR(Log, GetLevel, () const, int), AS_CALL_THISCALL));

    // bool Log::GetTimeStamp() const
    methods.Push(RegisterObjectMethodArgs("bool Log::GetTimeStamp() const", "bool GetTimeStamp() const", AS_METHODPR(Log, GetTimeStamp, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Log::GetTimeStamp() const", "bool get_timeStamp() const", AS_METHODPR(Log, GetTimeStamp, () const, bool), AS_CALL_THISCALL));

    // String Log::GetLastMessage() const
    methods.Push(RegisterObjectMethodArgs("String Log::GetLastMessage() const", "String GetLastMessage() const", AS_METHODPR(Log, GetLastMessage, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String Log::GetLastMessage() const", "String get_lastMessage() const", AS_METHODPR(Log, GetLastMessage, () const, String), AS_CALL_THISCALL));

    // bool Log::IsQuiet() const
    methods.Push(RegisterObjectMethodArgs("bool Log::IsQuiet() const", "bool IsQuiet() const", AS_METHODPR(Log, IsQuiet, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Log::IsQuiet() const", "bool get_quiet() const", AS_METHODPR(Log, IsQuiet, () const, bool), AS_CALL_THISCALL));
}

// class LogicComponent | File: ../Scene/LogicComponent.h
void CollectMembers_LogicComponent(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "virtual void Component::OnSetEnabled()");
}

// SharedPtr<Material> Material::Clone(const String& cloneName=String::EMPTY) const
// SharedPtr<Material> Material::Clone(const String& cloneName=String::EMPTY) const | File: ../Graphics/Material.h
static Material* Material_Clone_String(Material* ptr, const String& cloneName)
{
    SharedPtr<Material> result = ptr->Clone(cloneName);
    return result.Detach();
}


// class Material | File: ../Graphics/Material.h
void CollectMembers_Material(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "bool Resource::Load(Deserializer& source)");
    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // const HashMap<StringHash, MaterialShaderParameter>& Material::GetShaderParameters() const
    // Error: type "const HashMap<StringHash, MaterialShaderParameter>&" can not automatically bind

    // const Vector<TechniqueEntry>& Material::GetTechniques() const
    // Error: type "const Vector<TechniqueEntry>&" can not automatically bind

    // const HashMap<TextureUnit, SharedPtr<Texture>>& Material::GetTextures() const
    // Error: type "const HashMap<TextureUnit, SharedPtr<Texture>>&" can not automatically bind

    // bool Material::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Material::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Material, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Material::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool Material::EndLoad() override", "bool EndLoad()", AS_METHODPR(Material, EndLoad, (), bool), AS_CALL_THISCALL));

    // bool Material::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Material::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(Material, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool Material::Load(const XMLElement& source)
    methods.Push(RegisterObjectMethodArgs("bool Material::Load(const XMLElement& source)", "bool Load(const XMLElement&in)", AS_METHODPR(Material, Load, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool Material::Save(XMLElement& dest) const
    methods.Push(RegisterObjectMethodArgs("bool Material::Save(XMLElement& dest) const", "bool Save(XMLElement&) const", AS_METHODPR(Material, Save, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // bool Material::Load(const JSONValue& source)
    methods.Push(RegisterObjectMethodArgs("bool Material::Load(const JSONValue& source)", "bool Load(const JSONValue&in)", AS_METHODPR(Material, Load, (const JSONValue&), bool), AS_CALL_THISCALL));

    // bool Material::Save(JSONValue& dest) const
    methods.Push(RegisterObjectMethodArgs("bool Material::Save(JSONValue& dest) const", "bool Save(JSONValue&) const", AS_METHODPR(Material, Save, (JSONValue&) const, bool), AS_CALL_THISCALL));

    // void Material::SetNumTechniques(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void Material::SetNumTechniques(unsigned num)", "void SetNumTechniques(uint)", AS_METHODPR(Material, SetNumTechniques, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetNumTechniques(unsigned num)", "void set_numTechniques(uint)", AS_METHODPR(Material, SetNumTechniques, (unsigned), void), AS_CALL_THISCALL));

    // void Material::SetTechnique(unsigned index, Technique* tech, MaterialQuality qualityLevel=QUALITY_LOW, float lodDistance=0.0f)
    methods.Push(RegisterObjectMethodArgs("void Material::SetTechnique(unsigned index, Technique* tech, MaterialQuality qualityLevel=QUALITY_LOW, float lodDistance=0.0f)", "void SetTechnique(uint, Technique@+, MaterialQuality = QUALITY_LOW, float = 0.0f)", AS_METHODPR(Material, SetTechnique, (unsigned, Technique*, MaterialQuality, float), void), AS_CALL_THISCALL));

    // void Material::SetVertexShaderDefines(const String& defines)
    methods.Push(RegisterObjectMethodArgs("void Material::SetVertexShaderDefines(const String& defines)", "void SetVertexShaderDefines(const String&in)", AS_METHODPR(Material, SetVertexShaderDefines, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetVertexShaderDefines(const String& defines)", "void set_vertexShaderDefines(const String&in)", AS_METHODPR(Material, SetVertexShaderDefines, (const String&), void), AS_CALL_THISCALL));

    // void Material::SetPixelShaderDefines(const String& defines)
    methods.Push(RegisterObjectMethodArgs("void Material::SetPixelShaderDefines(const String& defines)", "void SetPixelShaderDefines(const String&in)", AS_METHODPR(Material, SetPixelShaderDefines, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetPixelShaderDefines(const String& defines)", "void set_pixelShaderDefines(const String&in)", AS_METHODPR(Material, SetPixelShaderDefines, (const String&), void), AS_CALL_THISCALL));

    // void Material::SetShaderParameter(const String& name, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void Material::SetShaderParameter(const String& name, const Variant& value)", "void SetShaderParameter(const String&in, const Variant&in)", AS_METHODPR(Material, SetShaderParameter, (const String&, const Variant&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetShaderParameter(const String& name, const Variant& value)", "void set_shaderParameters(const String&in, const Variant&in)", AS_METHODPR(Material, SetShaderParameter, (const String&, const Variant&), void), AS_CALL_THISCALL));

    // void Material::SetShaderParameterAnimation(const String& name, ValueAnimation* animation, WrapMode wrapMode=WM_LOOP, float speed=1.0f)
    methods.Push(RegisterObjectMethodArgs("void Material::SetShaderParameterAnimation(const String& name, ValueAnimation* animation, WrapMode wrapMode=WM_LOOP, float speed=1.0f)", "void SetShaderParameterAnimation(const String&in, ValueAnimation@+, WrapMode = WM_LOOP, float = 1.0f)", AS_METHODPR(Material, SetShaderParameterAnimation, (const String&, ValueAnimation*, WrapMode, float), void), AS_CALL_THISCALL));

    // void Material::SetShaderParameterAnimationWrapMode(const String& name, WrapMode wrapMode)
    methods.Push(RegisterObjectMethodArgs("void Material::SetShaderParameterAnimationWrapMode(const String& name, WrapMode wrapMode)", "void SetShaderParameterAnimationWrapMode(const String&in, WrapMode)", AS_METHODPR(Material, SetShaderParameterAnimationWrapMode, (const String&, WrapMode), void), AS_CALL_THISCALL));

    // void Material::SetShaderParameterAnimationSpeed(const String& name, float speed)
    methods.Push(RegisterObjectMethodArgs("void Material::SetShaderParameterAnimationSpeed(const String& name, float speed)", "void SetShaderParameterAnimationSpeed(const String&in, float)", AS_METHODPR(Material, SetShaderParameterAnimationSpeed, (const String&, float), void), AS_CALL_THISCALL));

    // void Material::SetTexture(TextureUnit unit, Texture* texture)
    methods.Push(RegisterObjectMethodArgs("void Material::SetTexture(TextureUnit unit, Texture* texture)", "void SetTexture(TextureUnit, Texture@+)", AS_METHODPR(Material, SetTexture, (TextureUnit, Texture*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetTexture(TextureUnit unit, Texture* texture)", "void set_textures(TextureUnit, Texture@+)", AS_METHODPR(Material, SetTexture, (TextureUnit, Texture*), void), AS_CALL_THISCALL));

    // void Material::SetUVTransform(const Vector2& offset, float rotation, const Vector2& repeat)
    methods.Push(RegisterObjectMethodArgs("void Material::SetUVTransform(const Vector2& offset, float rotation, const Vector2& repeat)", "void SetUVTransform(const Vector2&in, float, const Vector2&in)", AS_METHODPR(Material, SetUVTransform, (const Vector2&, float, const Vector2&), void), AS_CALL_THISCALL));

    // void Material::SetUVTransform(const Vector2& offset, float rotation, float repeat)
    methods.Push(RegisterObjectMethodArgs("void Material::SetUVTransform(const Vector2& offset, float rotation, float repeat)", "void SetUVTransform(const Vector2&in, float, float)", AS_METHODPR(Material, SetUVTransform, (const Vector2&, float, float), void), AS_CALL_THISCALL));

    // void Material::SetCullMode(CullMode mode)
    methods.Push(RegisterObjectMethodArgs("void Material::SetCullMode(CullMode mode)", "void SetCullMode(CullMode)", AS_METHODPR(Material, SetCullMode, (CullMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetCullMode(CullMode mode)", "void set_cullMode(CullMode)", AS_METHODPR(Material, SetCullMode, (CullMode), void), AS_CALL_THISCALL));

    // void Material::SetShadowCullMode(CullMode mode)
    methods.Push(RegisterObjectMethodArgs("void Material::SetShadowCullMode(CullMode mode)", "void SetShadowCullMode(CullMode)", AS_METHODPR(Material, SetShadowCullMode, (CullMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetShadowCullMode(CullMode mode)", "void set_shadowCullMode(CullMode)", AS_METHODPR(Material, SetShadowCullMode, (CullMode), void), AS_CALL_THISCALL));

    // void Material::SetFillMode(FillMode mode)
    methods.Push(RegisterObjectMethodArgs("void Material::SetFillMode(FillMode mode)", "void SetFillMode(FillMode)", AS_METHODPR(Material, SetFillMode, (FillMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetFillMode(FillMode mode)", "void set_fillMode(FillMode)", AS_METHODPR(Material, SetFillMode, (FillMode), void), AS_CALL_THISCALL));

    // void Material::SetDepthBias(const BiasParameters& parameters)
    methods.Push(RegisterObjectMethodArgs("void Material::SetDepthBias(const BiasParameters& parameters)", "void SetDepthBias(const BiasParameters&in)", AS_METHODPR(Material, SetDepthBias, (const BiasParameters&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetDepthBias(const BiasParameters& parameters)", "void set_depthBias(const BiasParameters&in)", AS_METHODPR(Material, SetDepthBias, (const BiasParameters&), void), AS_CALL_THISCALL));

    // void Material::SetAlphaToCoverage(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Material::SetAlphaToCoverage(bool enable)", "void SetAlphaToCoverage(bool)", AS_METHODPR(Material, SetAlphaToCoverage, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetAlphaToCoverage(bool enable)", "void set_alphaToCoverage(bool)", AS_METHODPR(Material, SetAlphaToCoverage, (bool), void), AS_CALL_THISCALL));

    // void Material::SetLineAntiAlias(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Material::SetLineAntiAlias(bool enable)", "void SetLineAntiAlias(bool)", AS_METHODPR(Material, SetLineAntiAlias, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetLineAntiAlias(bool enable)", "void set_lineAntiAlias(bool)", AS_METHODPR(Material, SetLineAntiAlias, (bool), void), AS_CALL_THISCALL));

    // void Material::SetRenderOrder(unsigned char order)
    methods.Push(RegisterObjectMethodArgs("void Material::SetRenderOrder(unsigned char order)", "void SetRenderOrder(uint8)", AS_METHODPR(Material, SetRenderOrder, (unsigned char), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetRenderOrder(unsigned char order)", "void set_renderOrder(uint8)", AS_METHODPR(Material, SetRenderOrder, (unsigned char), void), AS_CALL_THISCALL));

    // void Material::SetOcclusion(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Material::SetOcclusion(bool enable)", "void SetOcclusion(bool)", AS_METHODPR(Material, SetOcclusion, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetOcclusion(bool enable)", "void set_occlusion(bool)", AS_METHODPR(Material, SetOcclusion, (bool), void), AS_CALL_THISCALL));

    // void Material::SetScene(Scene* scene)
    methods.Push(RegisterObjectMethodArgs("void Material::SetScene(Scene* scene)", "void SetScene(Scene@+)", AS_METHODPR(Material, SetScene, (Scene*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Material::SetScene(Scene* scene)", "void set_scene(Scene@+)", AS_METHODPR(Material, SetScene, (Scene*), void), AS_CALL_THISCALL));

    // void Material::RemoveShaderParameter(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Material::RemoveShaderParameter(const String& name)", "void RemoveShaderParameter(const String&in)", AS_METHODPR(Material, RemoveShaderParameter, (const String&), void), AS_CALL_THISCALL));

    // void Material::ReleaseShaders()
    methods.Push(RegisterObjectMethodArgs("void Material::ReleaseShaders()", "void ReleaseShaders()", AS_METHODPR(Material, ReleaseShaders, (), void), AS_CALL_THISCALL));

    // SharedPtr<Material> Material::Clone(const String& cloneName=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Material> Material::Clone(const String& cloneName=String::EMPTY) const", "Material@+ Clone(const String&in = String::EMPTY) const", AS_FUNCTION_OBJFIRST(Material_Clone_String), AS_CALL_CDECL_OBJFIRST));

    // void Material::SortTechniques()
    methods.Push(RegisterObjectMethodArgs("void Material::SortTechniques()", "void SortTechniques()", AS_METHODPR(Material, SortTechniques, (), void), AS_CALL_THISCALL));

    // void Material::MarkForAuxView(unsigned frameNumber)
    methods.Push(RegisterObjectMethodArgs("void Material::MarkForAuxView(unsigned frameNumber)", "void MarkForAuxView(uint)", AS_METHODPR(Material, MarkForAuxView, (unsigned), void), AS_CALL_THISCALL));

    // unsigned Material::GetNumTechniques() const
    methods.Push(RegisterObjectMethodArgs("unsigned Material::GetNumTechniques() const", "uint GetNumTechniques() const", AS_METHODPR(Material, GetNumTechniques, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Material::GetNumTechniques() const", "uint get_numTechniques() const", AS_METHODPR(Material, GetNumTechniques, () const, unsigned), AS_CALL_THISCALL));

    // const TechniqueEntry& Material::GetTechniqueEntry(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const TechniqueEntry& Material::GetTechniqueEntry(unsigned index) const", "const TechniqueEntry& GetTechniqueEntry(uint) const", AS_METHODPR(Material, GetTechniqueEntry, (unsigned) const, const TechniqueEntry&), AS_CALL_THISCALL));

    // Technique* Material::GetTechnique(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Technique* Material::GetTechnique(unsigned index) const", "Technique@+ GetTechnique(uint) const", AS_METHODPR(Material, GetTechnique, (unsigned) const, Technique*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Technique* Material::GetTechnique(unsigned index) const", "Technique@+ get_techniques(uint) const", AS_METHODPR(Material, GetTechnique, (unsigned) const, Technique*), AS_CALL_THISCALL));

    // Pass* Material::GetPass(unsigned index, const String& passName) const
    methods.Push(RegisterObjectMethodArgs("Pass* Material::GetPass(unsigned index, const String& passName) const", "Pass@+ GetPass(uint, const String&in) const", AS_METHODPR(Material, GetPass, (unsigned, const String&) const, Pass*), AS_CALL_THISCALL));

    // Texture* Material::GetTexture(TextureUnit unit) const
    methods.Push(RegisterObjectMethodArgs("Texture* Material::GetTexture(TextureUnit unit) const", "Texture@+ GetTexture(TextureUnit) const", AS_METHODPR(Material, GetTexture, (TextureUnit) const, Texture*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture* Material::GetTexture(TextureUnit unit) const", "Texture@+ get_textures(TextureUnit) const", AS_METHODPR(Material, GetTexture, (TextureUnit) const, Texture*), AS_CALL_THISCALL));

    // const String& Material::GetVertexShaderDefines() const
    methods.Push(RegisterObjectMethodArgs("const String& Material::GetVertexShaderDefines() const", "const String& GetVertexShaderDefines() const", AS_METHODPR(Material, GetVertexShaderDefines, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Material::GetVertexShaderDefines() const", "const String& get_vertexShaderDefines() const", AS_METHODPR(Material, GetVertexShaderDefines, () const, const String&), AS_CALL_THISCALL));

    // const String& Material::GetPixelShaderDefines() const
    methods.Push(RegisterObjectMethodArgs("const String& Material::GetPixelShaderDefines() const", "const String& GetPixelShaderDefines() const", AS_METHODPR(Material, GetPixelShaderDefines, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Material::GetPixelShaderDefines() const", "const String& get_pixelShaderDefines() const", AS_METHODPR(Material, GetPixelShaderDefines, () const, const String&), AS_CALL_THISCALL));

    // const Variant& Material::GetShaderParameter(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const Variant& Material::GetShaderParameter(const String& name) const", "const Variant& GetShaderParameter(const String&in) const", AS_METHODPR(Material, GetShaderParameter, (const String&) const, const Variant&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Variant& Material::GetShaderParameter(const String& name) const", "const Variant& get_shaderParameters(const String&in) const", AS_METHODPR(Material, GetShaderParameter, (const String&) const, const Variant&), AS_CALL_THISCALL));

    // ValueAnimation* Material::GetShaderParameterAnimation(const String& name) const
    methods.Push(RegisterObjectMethodArgs("ValueAnimation* Material::GetShaderParameterAnimation(const String& name) const", "ValueAnimation@+ GetShaderParameterAnimation(const String&in) const", AS_METHODPR(Material, GetShaderParameterAnimation, (const String&) const, ValueAnimation*), AS_CALL_THISCALL));

    // WrapMode Material::GetShaderParameterAnimationWrapMode(const String& name) const
    methods.Push(RegisterObjectMethodArgs("WrapMode Material::GetShaderParameterAnimationWrapMode(const String& name) const", "WrapMode GetShaderParameterAnimationWrapMode(const String&in) const", AS_METHODPR(Material, GetShaderParameterAnimationWrapMode, (const String&) const, WrapMode), AS_CALL_THISCALL));

    // float Material::GetShaderParameterAnimationSpeed(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float Material::GetShaderParameterAnimationSpeed(const String& name) const", "float GetShaderParameterAnimationSpeed(const String&in) const", AS_METHODPR(Material, GetShaderParameterAnimationSpeed, (const String&) const, float), AS_CALL_THISCALL));

    // CullMode Material::GetCullMode() const
    methods.Push(RegisterObjectMethodArgs("CullMode Material::GetCullMode() const", "CullMode GetCullMode() const", AS_METHODPR(Material, GetCullMode, () const, CullMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CullMode Material::GetCullMode() const", "CullMode get_cullMode() const", AS_METHODPR(Material, GetCullMode, () const, CullMode), AS_CALL_THISCALL));

    // CullMode Material::GetShadowCullMode() const
    methods.Push(RegisterObjectMethodArgs("CullMode Material::GetShadowCullMode() const", "CullMode GetShadowCullMode() const", AS_METHODPR(Material, GetShadowCullMode, () const, CullMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CullMode Material::GetShadowCullMode() const", "CullMode get_shadowCullMode() const", AS_METHODPR(Material, GetShadowCullMode, () const, CullMode), AS_CALL_THISCALL));

    // FillMode Material::GetFillMode() const
    methods.Push(RegisterObjectMethodArgs("FillMode Material::GetFillMode() const", "FillMode GetFillMode() const", AS_METHODPR(Material, GetFillMode, () const, FillMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FillMode Material::GetFillMode() const", "FillMode get_fillMode() const", AS_METHODPR(Material, GetFillMode, () const, FillMode), AS_CALL_THISCALL));

    // const BiasParameters& Material::GetDepthBias() const
    methods.Push(RegisterObjectMethodArgs("const BiasParameters& Material::GetDepthBias() const", "const BiasParameters& GetDepthBias() const", AS_METHODPR(Material, GetDepthBias, () const, const BiasParameters&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const BiasParameters& Material::GetDepthBias() const", "const BiasParameters& get_depthBias() const", AS_METHODPR(Material, GetDepthBias, () const, const BiasParameters&), AS_CALL_THISCALL));

    // bool Material::GetAlphaToCoverage() const
    methods.Push(RegisterObjectMethodArgs("bool Material::GetAlphaToCoverage() const", "bool GetAlphaToCoverage() const", AS_METHODPR(Material, GetAlphaToCoverage, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Material::GetAlphaToCoverage() const", "bool get_alphaToCoverage() const", AS_METHODPR(Material, GetAlphaToCoverage, () const, bool), AS_CALL_THISCALL));

    // bool Material::GetLineAntiAlias() const
    methods.Push(RegisterObjectMethodArgs("bool Material::GetLineAntiAlias() const", "bool GetLineAntiAlias() const", AS_METHODPR(Material, GetLineAntiAlias, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Material::GetLineAntiAlias() const", "bool get_lineAntiAlias() const", AS_METHODPR(Material, GetLineAntiAlias, () const, bool), AS_CALL_THISCALL));

    // unsigned char Material::GetRenderOrder() const
    methods.Push(RegisterObjectMethodArgs("unsigned char Material::GetRenderOrder() const", "uint8 GetRenderOrder() const", AS_METHODPR(Material, GetRenderOrder, () const, unsigned char), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned char Material::GetRenderOrder() const", "uint8 get_renderOrder() const", AS_METHODPR(Material, GetRenderOrder, () const, unsigned char), AS_CALL_THISCALL));

    // unsigned Material::GetAuxViewFrameNumber() const
    methods.Push(RegisterObjectMethodArgs("unsigned Material::GetAuxViewFrameNumber() const", "uint GetAuxViewFrameNumber() const", AS_METHODPR(Material, GetAuxViewFrameNumber, () const, unsigned), AS_CALL_THISCALL));

    // bool Material::GetOcclusion() const
    methods.Push(RegisterObjectMethodArgs("bool Material::GetOcclusion() const", "bool GetOcclusion() const", AS_METHODPR(Material, GetOcclusion, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Material::GetOcclusion() const", "bool get_occlusion() const", AS_METHODPR(Material, GetOcclusion, () const, bool), AS_CALL_THISCALL));

    // bool Material::GetSpecular() const
    methods.Push(RegisterObjectMethodArgs("bool Material::GetSpecular() const", "bool GetSpecular() const", AS_METHODPR(Material, GetSpecular, () const, bool), AS_CALL_THISCALL));

    // Scene* Material::GetScene() const
    methods.Push(RegisterObjectMethodArgs("Scene* Material::GetScene() const", "Scene@+ GetScene() const", AS_METHODPR(Material, GetScene, () const, Scene*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Scene* Material::GetScene() const", "Scene@+ get_scene() const", AS_METHODPR(Material, GetScene, () const, Scene*), AS_CALL_THISCALL));

    // unsigned Material::GetShaderParameterHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned Material::GetShaderParameterHash() const", "uint GetShaderParameterHash() const", AS_METHODPR(Material, GetShaderParameterHash, () const, unsigned), AS_CALL_THISCALL));
}

// struct MaterialShaderParameter | File: ../Graphics/Material.h
void CollectMembers_MaterialShaderParameter(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Matrix2 | File: ../Math/Matrix2.h
void CollectMembers_Matrix2(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Matrix2::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Matrix2::operator!=(const Matrix2& rhs) const
    // Only operator== is needed

    // Matrix2& Matrix2::operator=(const Matrix2& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Matrix2& Matrix2::operator=(const Matrix2& rhs) noexcept=default", "Matrix2& opAssign(const Matrix2&in)", AS_METHODPR(Matrix2, operator=, (const Matrix2&), Matrix2&), AS_CALL_THISCALL));

    // bool Matrix2::operator==(const Matrix2& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Matrix2::operator==(const Matrix2& rhs) const", "bool opEquals(const Matrix2&in) const", AS_METHODPR(Matrix2, operator==, (const Matrix2&) const, bool), AS_CALL_THISCALL));

    // Vector2 Matrix2::operator*(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Matrix2::operator*(const Vector2& rhs) const", "Vector2 opMul(const Vector2&in) const", AS_METHODPR(Matrix2, operator*, (const Vector2&) const, Vector2), AS_CALL_THISCALL));

    // Matrix2 Matrix2::operator+(const Matrix2& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix2 Matrix2::operator+(const Matrix2& rhs) const", "Matrix2 opAdd(const Matrix2&in) const", AS_METHODPR(Matrix2, operator+, (const Matrix2&) const, Matrix2), AS_CALL_THISCALL));

    // Matrix2 Matrix2::operator-(const Matrix2& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix2 Matrix2::operator-(const Matrix2& rhs) const", "Matrix2 opSub(const Matrix2&in) const", AS_METHODPR(Matrix2, operator-, (const Matrix2&) const, Matrix2), AS_CALL_THISCALL));

    // Matrix2 Matrix2::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix2 Matrix2::operator*(float rhs) const", "Matrix2 opMul(float) const", AS_METHODPR(Matrix2, operator*, (float) const, Matrix2), AS_CALL_THISCALL));

    // Matrix2 Matrix2::operator*(const Matrix2& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix2 Matrix2::operator*(const Matrix2& rhs) const", "Matrix2 opMul(const Matrix2&in) const", AS_METHODPR(Matrix2, operator*, (const Matrix2&) const, Matrix2), AS_CALL_THISCALL));

    // void Matrix2::SetScale(const Vector2& scale)
    methods.Push(RegisterObjectMethodArgs("void Matrix2::SetScale(const Vector2& scale)", "void SetScale(const Vector2&in)", AS_METHODPR(Matrix2, SetScale, (const Vector2&), void), AS_CALL_THISCALL));

    // void Matrix2::SetScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Matrix2::SetScale(float scale)", "void SetScale(float)", AS_METHODPR(Matrix2, SetScale, (float), void), AS_CALL_THISCALL));

    // Vector2 Matrix2::Scale() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Matrix2::Scale() const", "Vector2 Scale() const", AS_METHODPR(Matrix2, Scale, () const, Vector2), AS_CALL_THISCALL));

    // Matrix2 Matrix2::Transpose() const
    methods.Push(RegisterObjectMethodArgs("Matrix2 Matrix2::Transpose() const", "Matrix2 Transpose() const", AS_METHODPR(Matrix2, Transpose, () const, Matrix2), AS_CALL_THISCALL));

    // Matrix2 Matrix2::Scaled(const Vector2& scale) const
    methods.Push(RegisterObjectMethodArgs("Matrix2 Matrix2::Scaled(const Vector2& scale) const", "Matrix2 Scaled(const Vector2&in) const", AS_METHODPR(Matrix2, Scaled, (const Vector2&) const, Matrix2), AS_CALL_THISCALL));

    // bool Matrix2::Equals(const Matrix2& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Matrix2::Equals(const Matrix2& rhs) const", "bool Equals(const Matrix2&in) const", AS_METHODPR(Matrix2, Equals, (const Matrix2&) const, bool), AS_CALL_THISCALL));

    // Matrix2 Matrix2::Inverse() const
    methods.Push(RegisterObjectMethodArgs("Matrix2 Matrix2::Inverse() const", "Matrix2 Inverse() const", AS_METHODPR(Matrix2, Inverse, () const, Matrix2), AS_CALL_THISCALL));

    // bool Matrix2::IsNaN() const
    methods.Push(RegisterObjectMethodArgs("bool Matrix2::IsNaN() const", "bool IsNaN() const", AS_METHODPR(Matrix2, IsNaN, () const, bool), AS_CALL_THISCALL));

    // bool Matrix2::IsInf() const
    methods.Push(RegisterObjectMethodArgs("bool Matrix2::IsInf() const", "bool IsInf() const", AS_METHODPR(Matrix2, IsInf, () const, bool), AS_CALL_THISCALL));

    // String Matrix2::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Matrix2::ToString() const", "String ToString() const", AS_METHODPR(Matrix2, ToString, () const, String), AS_CALL_THISCALL));
}

// class Matrix3 | File: ../Math/Matrix3.h
void CollectMembers_Matrix3(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Matrix3::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Matrix3::operator!=(const Matrix3& rhs) const
    // Only operator== is needed

    // Matrix3& Matrix3::operator=(const Matrix3& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Matrix3& Matrix3::operator=(const Matrix3& rhs) noexcept=default", "Matrix3& opAssign(const Matrix3&in)", AS_METHODPR(Matrix3, operator=, (const Matrix3&), Matrix3&), AS_CALL_THISCALL));

    // bool Matrix3::operator==(const Matrix3& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Matrix3::operator==(const Matrix3& rhs) const", "bool opEquals(const Matrix3&in) const", AS_METHODPR(Matrix3, operator==, (const Matrix3&) const, bool), AS_CALL_THISCALL));

    // Vector3 Matrix3::operator*(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3::operator*(const Vector3& rhs) const", "Vector3 opMul(const Vector3&in) const", AS_METHODPR(Matrix3, operator*, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Matrix3 Matrix3::operator+(const Matrix3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3::operator+(const Matrix3& rhs) const", "Matrix3 opAdd(const Matrix3&in) const", AS_METHODPR(Matrix3, operator+, (const Matrix3&) const, Matrix3), AS_CALL_THISCALL));

    // Matrix3 Matrix3::operator-(const Matrix3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3::operator-(const Matrix3& rhs) const", "Matrix3 opSub(const Matrix3&in) const", AS_METHODPR(Matrix3, operator-, (const Matrix3&) const, Matrix3), AS_CALL_THISCALL));

    // Matrix3 Matrix3::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3::operator*(float rhs) const", "Matrix3 opMul(float) const", AS_METHODPR(Matrix3, operator*, (float) const, Matrix3), AS_CALL_THISCALL));

    // Matrix3 Matrix3::operator*(const Matrix3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3::operator*(const Matrix3& rhs) const", "Matrix3 opMul(const Matrix3&in) const", AS_METHODPR(Matrix3, operator*, (const Matrix3&) const, Matrix3), AS_CALL_THISCALL));

    // void Matrix3::SetScale(const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Matrix3::SetScale(const Vector3& scale)", "void SetScale(const Vector3&in)", AS_METHODPR(Matrix3, SetScale, (const Vector3&), void), AS_CALL_THISCALL));

    // void Matrix3::SetScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Matrix3::SetScale(float scale)", "void SetScale(float)", AS_METHODPR(Matrix3, SetScale, (float), void), AS_CALL_THISCALL));

    // Vector3 Matrix3::Scale() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3::Scale() const", "Vector3 Scale() const", AS_METHODPR(Matrix3, Scale, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Matrix3::SignedScale(const Matrix3& rotation) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3::SignedScale(const Matrix3& rotation) const", "Vector3 SignedScale(const Matrix3&in) const", AS_METHODPR(Matrix3, SignedScale, (const Matrix3&) const, Vector3), AS_CALL_THISCALL));

    // Matrix3 Matrix3::Transpose() const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3::Transpose() const", "Matrix3 Transpose() const", AS_METHODPR(Matrix3, Transpose, () const, Matrix3), AS_CALL_THISCALL));

    // Matrix3 Matrix3::Scaled(const Vector3& scale) const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3::Scaled(const Vector3& scale) const", "Matrix3 Scaled(const Vector3&in) const", AS_METHODPR(Matrix3, Scaled, (const Vector3&) const, Matrix3), AS_CALL_THISCALL));

    // bool Matrix3::Equals(const Matrix3& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Matrix3::Equals(const Matrix3& rhs) const", "bool Equals(const Matrix3&in) const", AS_METHODPR(Matrix3, Equals, (const Matrix3&) const, bool), AS_CALL_THISCALL));

    // Matrix3 Matrix3::Inverse() const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3::Inverse() const", "Matrix3 Inverse() const", AS_METHODPR(Matrix3, Inverse, () const, Matrix3), AS_CALL_THISCALL));

    // float Matrix3::Element(unsigned i, unsigned j) const
    methods.Push(RegisterObjectMethodArgs("float Matrix3::Element(unsigned i, unsigned j) const", "float Element(uint, uint) const", AS_METHODPR(Matrix3, Element, (unsigned, unsigned) const, float), AS_CALL_THISCALL));

    // Vector3 Matrix3::Row(unsigned i) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3::Row(unsigned i) const", "Vector3 Row(uint) const", AS_METHODPR(Matrix3, Row, (unsigned) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Matrix3::Column(unsigned j) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3::Column(unsigned j) const", "Vector3 Column(uint) const", AS_METHODPR(Matrix3, Column, (unsigned) const, Vector3), AS_CALL_THISCALL));

    // bool Matrix3::IsNaN() const
    methods.Push(RegisterObjectMethodArgs("bool Matrix3::IsNaN() const", "bool IsNaN() const", AS_METHODPR(Matrix3, IsNaN, () const, bool), AS_CALL_THISCALL));

    // bool Matrix3::IsInf() const
    methods.Push(RegisterObjectMethodArgs("bool Matrix3::IsInf() const", "bool IsInf() const", AS_METHODPR(Matrix3, IsInf, () const, bool), AS_CALL_THISCALL));

    // String Matrix3::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Matrix3::ToString() const", "String ToString() const", AS_METHODPR(Matrix3, ToString, () const, String), AS_CALL_THISCALL));
}

// class Matrix3x4 | File: ../Math/Matrix3x4.h
void CollectMembers_Matrix3x4(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Matrix3x4::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Matrix3x4::operator!=(const Matrix3x4& rhs) const
    // Only operator== is needed

    // Matrix3x4& Matrix3x4::operator=(const Matrix3x4& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Matrix3x4& Matrix3x4::operator=(const Matrix3x4& rhs) noexcept=default", "Matrix3x4& opAssign(const Matrix3x4&in)", AS_METHODPR(Matrix3x4, operator=, (const Matrix3x4&), Matrix3x4&), AS_CALL_THISCALL));

    // Matrix3x4& Matrix3x4::operator=(const Matrix3& rhs) noexcept
    methods.Push(RegisterObjectMethodArgs("Matrix3x4& Matrix3x4::operator=(const Matrix3& rhs) noexcept", "Matrix3x4& opAssign(const Matrix3&in)", AS_METHODPR(Matrix3x4, operator=, (const Matrix3&), Matrix3x4&), AS_CALL_THISCALL));

    // Matrix3x4& Matrix3x4::operator=(const Matrix4& rhs) noexcept
    methods.Push(RegisterObjectMethodArgs("Matrix3x4& Matrix3x4::operator=(const Matrix4& rhs) noexcept", "Matrix3x4& opAssign(const Matrix4&in)", AS_METHODPR(Matrix3x4, operator=, (const Matrix4&), Matrix3x4&), AS_CALL_THISCALL));

    // bool Matrix3x4::operator==(const Matrix3x4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Matrix3x4::operator==(const Matrix3x4& rhs) const", "bool opEquals(const Matrix3x4&in) const", AS_METHODPR(Matrix3x4, operator==, (const Matrix3x4&) const, bool), AS_CALL_THISCALL));

    // Vector3 Matrix3x4::operator*(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3x4::operator*(const Vector3& rhs) const", "Vector3 opMul(const Vector3&in) const", AS_METHODPR(Matrix3x4, operator*, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Matrix3x4::operator*(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3x4::operator*(const Vector4& rhs) const", "Vector3 opMul(const Vector4&in) const", AS_METHODPR(Matrix3x4, operator*, (const Vector4&) const, Vector3), AS_CALL_THISCALL));

    // Matrix3x4 Matrix3x4::operator+(const Matrix3x4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Matrix3x4::operator+(const Matrix3x4& rhs) const", "Matrix3x4 opAdd(const Matrix3x4&in) const", AS_METHODPR(Matrix3x4, operator+, (const Matrix3x4&) const, Matrix3x4), AS_CALL_THISCALL));

    // Matrix3x4 Matrix3x4::operator-(const Matrix3x4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Matrix3x4::operator-(const Matrix3x4& rhs) const", "Matrix3x4 opSub(const Matrix3x4&in) const", AS_METHODPR(Matrix3x4, operator-, (const Matrix3x4&) const, Matrix3x4), AS_CALL_THISCALL));

    // Matrix3x4 Matrix3x4::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Matrix3x4::operator*(float rhs) const", "Matrix3x4 opMul(float) const", AS_METHODPR(Matrix3x4, operator*, (float) const, Matrix3x4), AS_CALL_THISCALL));

    // Matrix3x4 Matrix3x4::operator*(const Matrix3x4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Matrix3x4::operator*(const Matrix3x4& rhs) const", "Matrix3x4 opMul(const Matrix3x4&in) const", AS_METHODPR(Matrix3x4, operator*, (const Matrix3x4&) const, Matrix3x4), AS_CALL_THISCALL));

    // Matrix4 Matrix3x4::operator*(const Matrix4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix3x4::operator*(const Matrix4& rhs) const", "Matrix4 opMul(const Matrix4&in) const", AS_METHODPR(Matrix3x4, operator*, (const Matrix4&) const, Matrix4), AS_CALL_THISCALL));

    // void Matrix3x4::SetTranslation(const Vector3& translation)
    methods.Push(RegisterObjectMethodArgs("void Matrix3x4::SetTranslation(const Vector3& translation)", "void SetTranslation(const Vector3&in)", AS_METHODPR(Matrix3x4, SetTranslation, (const Vector3&), void), AS_CALL_THISCALL));

    // void Matrix3x4::SetRotation(const Matrix3& rotation)
    methods.Push(RegisterObjectMethodArgs("void Matrix3x4::SetRotation(const Matrix3& rotation)", "void SetRotation(const Matrix3&in)", AS_METHODPR(Matrix3x4, SetRotation, (const Matrix3&), void), AS_CALL_THISCALL));

    // void Matrix3x4::SetScale(const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Matrix3x4::SetScale(const Vector3& scale)", "void SetScale(const Vector3&in)", AS_METHODPR(Matrix3x4, SetScale, (const Vector3&), void), AS_CALL_THISCALL));

    // void Matrix3x4::SetScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Matrix3x4::SetScale(float scale)", "void SetScale(float)", AS_METHODPR(Matrix3x4, SetScale, (float), void), AS_CALL_THISCALL));

    // Matrix3 Matrix3x4::ToMatrix3() const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3x4::ToMatrix3() const", "Matrix3 ToMatrix3() const", AS_METHODPR(Matrix3x4, ToMatrix3, () const, Matrix3), AS_CALL_THISCALL));

    // Matrix4 Matrix3x4::ToMatrix4() const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix3x4::ToMatrix4() const", "Matrix4 ToMatrix4() const", AS_METHODPR(Matrix3x4, ToMatrix4, () const, Matrix4), AS_CALL_THISCALL));

    // Matrix3 Matrix3x4::RotationMatrix() const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix3x4::RotationMatrix() const", "Matrix3 RotationMatrix() const", AS_METHODPR(Matrix3x4, RotationMatrix, () const, Matrix3), AS_CALL_THISCALL));

    // Vector3 Matrix3x4::Translation() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3x4::Translation() const", "Vector3 Translation() const", AS_METHODPR(Matrix3x4, Translation, () const, Vector3), AS_CALL_THISCALL));

    // Quaternion Matrix3x4::Rotation() const
    methods.Push(RegisterObjectMethodArgs("Quaternion Matrix3x4::Rotation() const", "Quaternion Rotation() const", AS_METHODPR(Matrix3x4, Rotation, () const, Quaternion), AS_CALL_THISCALL));

    // Vector3 Matrix3x4::Scale() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3x4::Scale() const", "Vector3 Scale() const", AS_METHODPR(Matrix3x4, Scale, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Matrix3x4::SignedScale(const Matrix3& rotation) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3x4::SignedScale(const Matrix3& rotation) const", "Vector3 SignedScale(const Matrix3&in) const", AS_METHODPR(Matrix3x4, SignedScale, (const Matrix3&) const, Vector3), AS_CALL_THISCALL));

    // bool Matrix3x4::Equals(const Matrix3x4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Matrix3x4::Equals(const Matrix3x4& rhs) const", "bool Equals(const Matrix3x4&in) const", AS_METHODPR(Matrix3x4, Equals, (const Matrix3x4&) const, bool), AS_CALL_THISCALL));

    // void Matrix3x4::Decompose(Vector3& translation, Quaternion& rotation, Vector3& scale) const
    methods.Push(RegisterObjectMethodArgs("void Matrix3x4::Decompose(Vector3& translation, Quaternion& rotation, Vector3& scale) const", "void Decompose(Vector3&, Quaternion&, Vector3&) const", AS_METHODPR(Matrix3x4, Decompose, (Vector3&, Quaternion&, Vector3&) const, void), AS_CALL_THISCALL));

    // Matrix3x4 Matrix3x4::Inverse() const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Matrix3x4::Inverse() const", "Matrix3x4 Inverse() const", AS_METHODPR(Matrix3x4, Inverse, () const, Matrix3x4), AS_CALL_THISCALL));

    // float Matrix3x4::Element(unsigned i, unsigned j) const
    methods.Push(RegisterObjectMethodArgs("float Matrix3x4::Element(unsigned i, unsigned j) const", "float Element(uint, uint) const", AS_METHODPR(Matrix3x4, Element, (unsigned, unsigned) const, float), AS_CALL_THISCALL));

    // Vector4 Matrix3x4::Row(unsigned i) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Matrix3x4::Row(unsigned i) const", "Vector4 Row(uint) const", AS_METHODPR(Matrix3x4, Row, (unsigned) const, Vector4), AS_CALL_THISCALL));

    // Vector3 Matrix3x4::Column(unsigned j) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix3x4::Column(unsigned j) const", "Vector3 Column(uint) const", AS_METHODPR(Matrix3x4, Column, (unsigned) const, Vector3), AS_CALL_THISCALL));

    // bool Matrix3x4::IsNaN() const
    methods.Push(RegisterObjectMethodArgs("bool Matrix3x4::IsNaN() const", "bool IsNaN() const", AS_METHODPR(Matrix3x4, IsNaN, () const, bool), AS_CALL_THISCALL));

    // bool Matrix3x4::IsInf() const
    methods.Push(RegisterObjectMethodArgs("bool Matrix3x4::IsInf() const", "bool IsInf() const", AS_METHODPR(Matrix3x4, IsInf, () const, bool), AS_CALL_THISCALL));

    // String Matrix3x4::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Matrix3x4::ToString() const", "String ToString() const", AS_METHODPR(Matrix3x4, ToString, () const, String), AS_CALL_THISCALL));
}

// class Matrix4 | File: ../Math/Matrix4.h
void CollectMembers_Matrix4(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Matrix4::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Matrix4::operator!=(const Matrix4& rhs) const
    // Only operator== is needed

    // Matrix4& Matrix4::operator=(const Matrix4& rhs) noexcept
    methods.Push(RegisterObjectMethodArgs("Matrix4& Matrix4::operator=(const Matrix4& rhs) noexcept", "Matrix4& opAssign(const Matrix4&in)", AS_METHODPR(Matrix4, operator=, (const Matrix4&), Matrix4&), AS_CALL_THISCALL));

    // Matrix4& Matrix4::operator=(const Matrix3& rhs) noexcept
    methods.Push(RegisterObjectMethodArgs("Matrix4& Matrix4::operator=(const Matrix3& rhs) noexcept", "Matrix4& opAssign(const Matrix3&in)", AS_METHODPR(Matrix4, operator=, (const Matrix3&), Matrix4&), AS_CALL_THISCALL));

    // bool Matrix4::operator==(const Matrix4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Matrix4::operator==(const Matrix4& rhs) const", "bool opEquals(const Matrix4&in) const", AS_METHODPR(Matrix4, operator==, (const Matrix4&) const, bool), AS_CALL_THISCALL));

    // Vector3 Matrix4::operator*(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix4::operator*(const Vector3& rhs) const", "Vector3 opMul(const Vector3&in) const", AS_METHODPR(Matrix4, operator*, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector4 Matrix4::operator*(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Matrix4::operator*(const Vector4& rhs) const", "Vector4 opMul(const Vector4&in) const", AS_METHODPR(Matrix4, operator*, (const Vector4&) const, Vector4), AS_CALL_THISCALL));

    // Matrix4 Matrix4::operator+(const Matrix4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix4::operator+(const Matrix4& rhs) const", "Matrix4 opAdd(const Matrix4&in) const", AS_METHODPR(Matrix4, operator+, (const Matrix4&) const, Matrix4), AS_CALL_THISCALL));

    // Matrix4 Matrix4::operator-(const Matrix4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix4::operator-(const Matrix4& rhs) const", "Matrix4 opSub(const Matrix4&in) const", AS_METHODPR(Matrix4, operator-, (const Matrix4&) const, Matrix4), AS_CALL_THISCALL));

    // Matrix4 Matrix4::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix4::operator*(float rhs) const", "Matrix4 opMul(float) const", AS_METHODPR(Matrix4, operator*, (float) const, Matrix4), AS_CALL_THISCALL));

    // Matrix4 Matrix4::operator*(const Matrix4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix4::operator*(const Matrix4& rhs) const", "Matrix4 opMul(const Matrix4&in) const", AS_METHODPR(Matrix4, operator*, (const Matrix4&) const, Matrix4), AS_CALL_THISCALL));

    // Matrix4 Matrix4::operator*(const Matrix3x4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix4::operator*(const Matrix3x4& rhs) const", "Matrix4 opMul(const Matrix3x4&in) const", AS_METHODPR(Matrix4, operator*, (const Matrix3x4&) const, Matrix4), AS_CALL_THISCALL));

    // void Matrix4::SetTranslation(const Vector3& translation)
    methods.Push(RegisterObjectMethodArgs("void Matrix4::SetTranslation(const Vector3& translation)", "void SetTranslation(const Vector3&in)", AS_METHODPR(Matrix4, SetTranslation, (const Vector3&), void), AS_CALL_THISCALL));

    // void Matrix4::SetRotation(const Matrix3& rotation)
    methods.Push(RegisterObjectMethodArgs("void Matrix4::SetRotation(const Matrix3& rotation)", "void SetRotation(const Matrix3&in)", AS_METHODPR(Matrix4, SetRotation, (const Matrix3&), void), AS_CALL_THISCALL));

    // void Matrix4::SetScale(const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Matrix4::SetScale(const Vector3& scale)", "void SetScale(const Vector3&in)", AS_METHODPR(Matrix4, SetScale, (const Vector3&), void), AS_CALL_THISCALL));

    // void Matrix4::SetScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Matrix4::SetScale(float scale)", "void SetScale(float)", AS_METHODPR(Matrix4, SetScale, (float), void), AS_CALL_THISCALL));

    // Matrix3 Matrix4::ToMatrix3() const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix4::ToMatrix3() const", "Matrix3 ToMatrix3() const", AS_METHODPR(Matrix4, ToMatrix3, () const, Matrix3), AS_CALL_THISCALL));

    // Matrix3 Matrix4::RotationMatrix() const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Matrix4::RotationMatrix() const", "Matrix3 RotationMatrix() const", AS_METHODPR(Matrix4, RotationMatrix, () const, Matrix3), AS_CALL_THISCALL));

    // Vector3 Matrix4::Translation() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix4::Translation() const", "Vector3 Translation() const", AS_METHODPR(Matrix4, Translation, () const, Vector3), AS_CALL_THISCALL));

    // Quaternion Matrix4::Rotation() const
    methods.Push(RegisterObjectMethodArgs("Quaternion Matrix4::Rotation() const", "Quaternion Rotation() const", AS_METHODPR(Matrix4, Rotation, () const, Quaternion), AS_CALL_THISCALL));

    // Vector3 Matrix4::Scale() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix4::Scale() const", "Vector3 Scale() const", AS_METHODPR(Matrix4, Scale, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Matrix4::SignedScale(const Matrix3& rotation) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Matrix4::SignedScale(const Matrix3& rotation) const", "Vector3 SignedScale(const Matrix3&in) const", AS_METHODPR(Matrix4, SignedScale, (const Matrix3&) const, Vector3), AS_CALL_THISCALL));

    // Matrix4 Matrix4::Transpose() const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix4::Transpose() const", "Matrix4 Transpose() const", AS_METHODPR(Matrix4, Transpose, () const, Matrix4), AS_CALL_THISCALL));

    // bool Matrix4::Equals(const Matrix4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Matrix4::Equals(const Matrix4& rhs) const", "bool Equals(const Matrix4&in) const", AS_METHODPR(Matrix4, Equals, (const Matrix4&) const, bool), AS_CALL_THISCALL));

    // void Matrix4::Decompose(Vector3& translation, Quaternion& rotation, Vector3& scale) const
    methods.Push(RegisterObjectMethodArgs("void Matrix4::Decompose(Vector3& translation, Quaternion& rotation, Vector3& scale) const", "void Decompose(Vector3&, Quaternion&, Vector3&) const", AS_METHODPR(Matrix4, Decompose, (Vector3&, Quaternion&, Vector3&) const, void), AS_CALL_THISCALL));

    // Matrix4 Matrix4::Inverse() const
    methods.Push(RegisterObjectMethodArgs("Matrix4 Matrix4::Inverse() const", "Matrix4 Inverse() const", AS_METHODPR(Matrix4, Inverse, () const, Matrix4), AS_CALL_THISCALL));

    // float Matrix4::Element(unsigned i, unsigned j) const
    methods.Push(RegisterObjectMethodArgs("float Matrix4::Element(unsigned i, unsigned j) const", "float Element(uint, uint) const", AS_METHODPR(Matrix4, Element, (unsigned, unsigned) const, float), AS_CALL_THISCALL));

    // Vector4 Matrix4::Row(unsigned i) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Matrix4::Row(unsigned i) const", "Vector4 Row(uint) const", AS_METHODPR(Matrix4, Row, (unsigned) const, Vector4), AS_CALL_THISCALL));

    // Vector4 Matrix4::Column(unsigned j) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Matrix4::Column(unsigned j) const", "Vector4 Column(uint) const", AS_METHODPR(Matrix4, Column, (unsigned) const, Vector4), AS_CALL_THISCALL));

    // bool Matrix4::IsNaN() const
    methods.Push(RegisterObjectMethodArgs("bool Matrix4::IsNaN() const", "bool IsNaN() const", AS_METHODPR(Matrix4, IsNaN, () const, bool), AS_CALL_THISCALL));

    // bool Matrix4::IsInf() const
    methods.Push(RegisterObjectMethodArgs("bool Matrix4::IsInf() const", "bool IsInf() const", AS_METHODPR(Matrix4, IsInf, () const, bool), AS_CALL_THISCALL));

    // String Matrix4::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Matrix4::ToString() const", "String ToString() const", AS_METHODPR(Matrix4, ToString, () const, String), AS_CALL_THISCALL));
}

// class MemoryBuffer | File: ../IO/MemoryBuffer.h
void CollectMembers_MemoryBuffer(Vector<RegisterObjectMethodArgs>& methods)
{
    // unsigned char* MemoryBuffer::GetData()
    // Error: type "unsigned char*" can not automatically bind

    // unsigned MemoryBuffer::Read(void* dest, unsigned size) override
    // Error: type "void*" can not automatically bind

    // unsigned MemoryBuffer::Write(const void* data, unsigned size) override
    // Error: type "const void*" can not automatically bind

    // unsigned MemoryBuffer::Seek(unsigned position) override
    methods.Push(RegisterObjectMethodArgs("unsigned MemoryBuffer::Seek(unsigned position) override", "uint Seek(uint)", AS_METHODPR(MemoryBuffer, Seek, (unsigned), unsigned), AS_CALL_THISCALL));

    // bool MemoryBuffer::IsReadOnly()
    methods.Push(RegisterObjectMethodArgs("bool MemoryBuffer::IsReadOnly()", "bool IsReadOnly()", AS_METHODPR(MemoryBuffer, IsReadOnly, (), bool), AS_CALL_THISCALL));
}

// class Menu | File: ../UI/Menu.h
void CollectMembers_Menu(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Button(methods);

    Remove(methods, "bool UIElement::LoadXML(Deserializer& source)");
    Remove(methods, "bool UIElement::LoadXML(const XMLElement& source) override");
    Remove(methods, "bool UIElement::SaveXML(Serializer& dest, const String& indentation=\"\t\") const");
    Remove(methods, "bool UIElement::SaveXML(XMLElement& dest) const override");
    Remove(methods, "static void Button::RegisterObject(Context* context)");
    Remove(methods, "virtual bool UIElement::LoadXML(const XMLElement& source, XMLFile* styleFile)");
    Remove(methods, "virtual void UIElement::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "void Button::Update(float timeStep) override");

    // bool Menu::LoadXML(const XMLElement& source, XMLFile* styleFile) override
    methods.Push(RegisterObjectMethodArgs("bool Menu::LoadXML(const XMLElement& source, XMLFile* styleFile) override", "bool LoadXML(const XMLElement&in, XMLFile@+)", AS_METHODPR(Menu, LoadXML, (const XMLElement&, XMLFile*), bool), AS_CALL_THISCALL));

    // bool Menu::SaveXML(XMLElement& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Menu::SaveXML(XMLElement& dest) const override", "bool SaveXML(XMLElement&) const", AS_METHODPR(Menu, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // void Menu::Update(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void Menu::Update(float timeStep) override", "void Update(float)", AS_METHODPR(Menu, Update, (float), void), AS_CALL_THISCALL));

    // void Menu::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Menu::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnHover(const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Menu, OnHover, (const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // virtual void Menu::OnShowPopup()
    methods.Push(RegisterObjectMethodArgs("virtual void Menu::OnShowPopup()", "void OnShowPopup()", AS_METHODPR(Menu, OnShowPopup, (), void), AS_CALL_THISCALL));

    // virtual void Menu::OnHidePopup()
    methods.Push(RegisterObjectMethodArgs("virtual void Menu::OnHidePopup()", "void OnHidePopup()", AS_METHODPR(Menu, OnHidePopup, (), void), AS_CALL_THISCALL));

    // void Menu::SetPopup(UIElement* popup)
    methods.Push(RegisterObjectMethodArgs("void Menu::SetPopup(UIElement* popup)", "void SetPopup(UIElement@+)", AS_METHODPR(Menu, SetPopup, (UIElement*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Menu::SetPopup(UIElement* popup)", "void set_popup(UIElement@+)", AS_METHODPR(Menu, SetPopup, (UIElement*), void), AS_CALL_THISCALL));

    // void Menu::SetPopupOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Menu::SetPopupOffset(const IntVector2& offset)", "void SetPopupOffset(const IntVector2&in)", AS_METHODPR(Menu, SetPopupOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Menu::SetPopupOffset(const IntVector2& offset)", "void set_popupOffset(const IntVector2&in)", AS_METHODPR(Menu, SetPopupOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Menu::SetPopupOffset(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void Menu::SetPopupOffset(int x, int y)", "void SetPopupOffset(int, int)", AS_METHODPR(Menu, SetPopupOffset, (int, int), void), AS_CALL_THISCALL));

    // void Menu::ShowPopup(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Menu::ShowPopup(bool enable)", "void ShowPopup(bool)", AS_METHODPR(Menu, ShowPopup, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Menu::ShowPopup(bool enable)", "void set_showPopup(bool)", AS_METHODPR(Menu, ShowPopup, (bool), void), AS_CALL_THISCALL));

    // void Menu::SetAccelerator(int key, int qualifiers)
    methods.Push(RegisterObjectMethodArgs("void Menu::SetAccelerator(int key, int qualifiers)", "void SetAccelerator(int, int)", AS_METHODPR(Menu, SetAccelerator, (int, int), void), AS_CALL_THISCALL));

    // UIElement* Menu::GetPopup() const
    methods.Push(RegisterObjectMethodArgs("UIElement* Menu::GetPopup() const", "UIElement@+ GetPopup() const", AS_METHODPR(Menu, GetPopup, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* Menu::GetPopup() const", "UIElement@+ get_popup() const", AS_METHODPR(Menu, GetPopup, () const, UIElement*), AS_CALL_THISCALL));

    // const IntVector2& Menu::GetPopupOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Menu::GetPopupOffset() const", "const IntVector2& GetPopupOffset() const", AS_METHODPR(Menu, GetPopupOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Menu::GetPopupOffset() const", "const IntVector2& get_popupOffset() const", AS_METHODPR(Menu, GetPopupOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // bool Menu::GetShowPopup() const
    methods.Push(RegisterObjectMethodArgs("bool Menu::GetShowPopup() const", "bool GetShowPopup() const", AS_METHODPR(Menu, GetShowPopup, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Menu::GetShowPopup() const", "bool get_showPopup() const", AS_METHODPR(Menu, GetShowPopup, () const, bool), AS_CALL_THISCALL));

    // int Menu::GetAcceleratorKey() const
    methods.Push(RegisterObjectMethodArgs("int Menu::GetAcceleratorKey() const", "int GetAcceleratorKey() const", AS_METHODPR(Menu, GetAcceleratorKey, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Menu::GetAcceleratorKey() const", "int get_acceleratorKey() const", AS_METHODPR(Menu, GetAcceleratorKey, () const, int), AS_CALL_THISCALL));

    // int Menu::GetAcceleratorQualifiers() const
    methods.Push(RegisterObjectMethodArgs("int Menu::GetAcceleratorQualifiers() const", "int GetAcceleratorQualifiers() const", AS_METHODPR(Menu, GetAcceleratorQualifiers, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Menu::GetAcceleratorQualifiers() const", "int get_acceleratorQualifiers() const", AS_METHODPR(Menu, GetAcceleratorQualifiers, () const, int), AS_CALL_THISCALL));
}

// class MessageBox | File: ../UI/MessageBox.h
void CollectMembers_MessageBox(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void MessageBox::SetTitle(const String& text)
    methods.Push(RegisterObjectMethodArgs("void MessageBox::SetTitle(const String& text)", "void SetTitle(const String&in)", AS_METHODPR(MessageBox, SetTitle, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void MessageBox::SetTitle(const String& text)", "void set_title(const String&in)", AS_METHODPR(MessageBox, SetTitle, (const String&), void), AS_CALL_THISCALL));

    // void MessageBox::SetMessage(const String& text)
    methods.Push(RegisterObjectMethodArgs("void MessageBox::SetMessage(const String& text)", "void SetMessage(const String&in)", AS_METHODPR(MessageBox, SetMessage, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void MessageBox::SetMessage(const String& text)", "void set_message(const String&in)", AS_METHODPR(MessageBox, SetMessage, (const String&), void), AS_CALL_THISCALL));

    // const String& MessageBox::GetTitle() const
    methods.Push(RegisterObjectMethodArgs("const String& MessageBox::GetTitle() const", "const String& GetTitle() const", AS_METHODPR(MessageBox, GetTitle, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& MessageBox::GetTitle() const", "const String& get_title() const", AS_METHODPR(MessageBox, GetTitle, () const, const String&), AS_CALL_THISCALL));

    // const String& MessageBox::GetMessage() const
    methods.Push(RegisterObjectMethodArgs("const String& MessageBox::GetMessage() const", "const String& GetMessage() const", AS_METHODPR(MessageBox, GetMessage, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& MessageBox::GetMessage() const", "const String& get_message() const", AS_METHODPR(MessageBox, GetMessage, () const, const String&), AS_CALL_THISCALL));

    // UIElement* MessageBox::GetWindow() const
    methods.Push(RegisterObjectMethodArgs("UIElement* MessageBox::GetWindow() const", "UIElement@+ GetWindow() const", AS_METHODPR(MessageBox, GetWindow, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* MessageBox::GetWindow() const", "UIElement@+ get_window() const", AS_METHODPR(MessageBox, GetWindow, () const, UIElement*), AS_CALL_THISCALL));
}

// bool Model::SetVertexBuffers(const Vector<SharedPtr<VertexBuffer>>& buffers, const PODVector<unsigned>& morphRangeStarts, const PODVector<unsigned>& morphRangeCounts)
// bool Model::SetVertexBuffers(const Vector<SharedPtr<VertexBuffer>>& buffers, const PODVector<unsigned>& morphRangeStarts, const PODVector<unsigned>& morphRangeCounts) | File: ../Graphics/Model.h
static bool Model_SetVertexBuffers_VectorSharedPtrVertexBuffer_PODVectorunsigned_PODVectorunsigned(Model* ptr, CScriptArray* buffers_conv, CScriptArray* morphRangeStarts_conv, CScriptArray* morphRangeCounts_conv)
{
    Vector<SharedPtr<VertexBuffer>> buffers = HandleArrayToVector<VertexBuffer>(buffers_conv);
    PODVector<unsigned> morphRangeStarts = ArrayToPODVector<unsigned>(morphRangeStarts_conv);
    PODVector<unsigned> morphRangeCounts = ArrayToPODVector<unsigned>(morphRangeCounts_conv);
    bool result = ptr->SetVertexBuffers(buffers, morphRangeStarts, morphRangeCounts);
    return result;
}


// bool Model::SetIndexBuffers(const Vector<SharedPtr<IndexBuffer>>& buffers)
// bool Model::SetIndexBuffers(const Vector<SharedPtr<IndexBuffer>>& buffers) | File: ../Graphics/Model.h
static bool Model_SetIndexBuffers_VectorSharedPtrIndexBuffer(Model* ptr, CScriptArray* buffers_conv)
{
    Vector<SharedPtr<IndexBuffer>> buffers = HandleArrayToVector<IndexBuffer>(buffers_conv);
    bool result = ptr->SetIndexBuffers(buffers);
    return result;
}


// SharedPtr<Model> Model::Clone(const String& cloneName=String::EMPTY) const
// SharedPtr<Model> Model::Clone(const String& cloneName=String::EMPTY) const | File: ../Graphics/Model.h
static Model* Model_Clone_String(Model* ptr, const String& cloneName)
{
    SharedPtr<Model> result = ptr->Clone(cloneName);
    return result.Detach();
}


// const Vector<SharedPtr<VertexBuffer>>& Model::GetVertexBuffers() const
// const Vector<SharedPtr<VertexBuffer>>& Model::GetVertexBuffers() const | File: ../Graphics/Model.h
static CScriptArray* Model_GetVertexBuffers_void(Model* ptr)
{
    const Vector<SharedPtr<VertexBuffer>>& result = ptr->GetVertexBuffers();
    return VectorToHandleArray(result, "Array<VertexBuffer@>");
}


// const Vector<SharedPtr<IndexBuffer>>& Model::GetIndexBuffers() const
// const Vector<SharedPtr<IndexBuffer>>& Model::GetIndexBuffers() const | File: ../Graphics/Model.h
static CScriptArray* Model_GetIndexBuffers_void(Model* ptr)
{
    const Vector<SharedPtr<IndexBuffer>>& result = ptr->GetIndexBuffers();
    return VectorToHandleArray(result, "Array<IndexBuffer@>");
}


// const PODVector<Vector3>& Model::GetGeometryCenters() const
// const PODVector<Vector3>& Model::GetGeometryCenters() const | File: ../Graphics/Model.h
static CScriptArray* Model_GetGeometryCenters_void(Model* ptr)
{
    const PODVector<Vector3>& result = ptr->GetGeometryCenters();
    return VectorToArray(result, "Array<Vector3>");
}


// class Model | File: ../Graphics/Model.h
void CollectMembers_Model(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ResourceWithMetadata(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // const Vector<Vector<SharedPtr<Geometry>>>& Model::GetGeometries() const
    // Error: type "const Vector<Vector<SharedPtr<Geometry>>>&" can not automatically bind

    // const Vector<PODVector<unsigned>>& Model::GetGeometryBoneMappings() const
    // Error: type "const Vector<PODVector<unsigned>>&" can not automatically bind

    // const ModelMorph* Model::GetMorph(StringHash nameHash) const
    // Error: type "const ModelMorph*" can not automatically bind

    // const ModelMorph* Model::GetMorph(const String& name) const
    // Error: type "const ModelMorph*" can not automatically bind

    // const ModelMorph* Model::GetMorph(unsigned index) const
    // Error: type "const ModelMorph*" can not automatically bind

    // const Vector<ModelMorph>& Model::GetMorphs() const
    // Error: type "const Vector<ModelMorph>&" can not automatically bind

    // void Model::SetGeometryBoneMappings(const Vector<PODVector<unsigned>>& geometryBoneMappings)
    // Error: type "const Vector<PODVector<unsigned>>&" can not automatically bind

    // void Model::SetMorphs(const Vector<ModelMorph>& morphs)
    // Error: type "const Vector<ModelMorph>&" can not automatically bind

    // bool Model::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Model::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Model, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Model::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool Model::EndLoad() override", "bool EndLoad()", AS_METHODPR(Model, EndLoad, (), bool), AS_CALL_THISCALL));

    // bool Model::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Model::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(Model, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // void Model::SetBoundingBox(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void Model::SetBoundingBox(const BoundingBox& box)", "void SetBoundingBox(const BoundingBox&in)", AS_METHODPR(Model, SetBoundingBox, (const BoundingBox&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Model::SetBoundingBox(const BoundingBox& box)", "void set_boundingBox(const BoundingBox&in)", AS_METHODPR(Model, SetBoundingBox, (const BoundingBox&), void), AS_CALL_THISCALL));

    // bool Model::SetVertexBuffers(const Vector<SharedPtr<VertexBuffer>>& buffers, const PODVector<unsigned>& morphRangeStarts, const PODVector<unsigned>& morphRangeCounts)
    methods.Push(RegisterObjectMethodArgs("bool Model::SetVertexBuffers(const Vector<SharedPtr<VertexBuffer>>& buffers, const PODVector<unsigned>& morphRangeStarts, const PODVector<unsigned>& morphRangeCounts)", "bool SetVertexBuffers(Array<VertexBuffer@>@+, Array<uint>@+, Array<uint>@+)", AS_FUNCTION_OBJFIRST(Model_SetVertexBuffers_VectorSharedPtrVertexBuffer_PODVectorunsigned_PODVectorunsigned), AS_CALL_CDECL_OBJFIRST));

    // bool Model::SetIndexBuffers(const Vector<SharedPtr<IndexBuffer>>& buffers)
    methods.Push(RegisterObjectMethodArgs("bool Model::SetIndexBuffers(const Vector<SharedPtr<IndexBuffer>>& buffers)", "bool SetIndexBuffers(Array<IndexBuffer@>@+)", AS_FUNCTION_OBJFIRST(Model_SetIndexBuffers_VectorSharedPtrIndexBuffer), AS_CALL_CDECL_OBJFIRST));

    // void Model::SetNumGeometries(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void Model::SetNumGeometries(unsigned num)", "void SetNumGeometries(uint)", AS_METHODPR(Model, SetNumGeometries, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Model::SetNumGeometries(unsigned num)", "void set_numGeometries(uint)", AS_METHODPR(Model, SetNumGeometries, (unsigned), void), AS_CALL_THISCALL));

    // bool Model::SetNumGeometryLodLevels(unsigned index, unsigned num)
    methods.Push(RegisterObjectMethodArgs("bool Model::SetNumGeometryLodLevels(unsigned index, unsigned num)", "bool SetNumGeometryLodLevels(uint, uint)", AS_METHODPR(Model, SetNumGeometryLodLevels, (unsigned, unsigned), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Model::SetNumGeometryLodLevels(unsigned index, unsigned num)", "bool set_numGeometryLodLevels(uint, uint)", AS_METHODPR(Model, SetNumGeometryLodLevels, (unsigned, unsigned), bool), AS_CALL_THISCALL));

    // bool Model::SetGeometry(unsigned index, unsigned lodLevel, Geometry* geometry)
    methods.Push(RegisterObjectMethodArgs("bool Model::SetGeometry(unsigned index, unsigned lodLevel, Geometry* geometry)", "bool SetGeometry(uint, uint, Geometry@+)", AS_METHODPR(Model, SetGeometry, (unsigned, unsigned, Geometry*), bool), AS_CALL_THISCALL));

    // bool Model::SetGeometryCenter(unsigned index, const Vector3& center)
    methods.Push(RegisterObjectMethodArgs("bool Model::SetGeometryCenter(unsigned index, const Vector3& center)", "bool SetGeometryCenter(uint, const Vector3&in)", AS_METHODPR(Model, SetGeometryCenter, (unsigned, const Vector3&), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Model::SetGeometryCenter(unsigned index, const Vector3& center)", "bool set_geometryCenters(uint, const Vector3&in)", AS_METHODPR(Model, SetGeometryCenter, (unsigned, const Vector3&), bool), AS_CALL_THISCALL));

    // void Model::SetSkeleton(const Skeleton& skeleton)
    methods.Push(RegisterObjectMethodArgs("void Model::SetSkeleton(const Skeleton& skeleton)", "void SetSkeleton(const Skeleton&in)", AS_METHODPR(Model, SetSkeleton, (const Skeleton&), void), AS_CALL_THISCALL));

    // SharedPtr<Model> Model::Clone(const String& cloneName=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Model> Model::Clone(const String& cloneName=String::EMPTY) const", "Model@+ Clone(const String&in = String::EMPTY) const", AS_FUNCTION_OBJFIRST(Model_Clone_String), AS_CALL_CDECL_OBJFIRST));

    // const BoundingBox& Model::GetBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Model::GetBoundingBox() const", "const BoundingBox& GetBoundingBox() const", AS_METHODPR(Model, GetBoundingBox, () const, const BoundingBox&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Model::GetBoundingBox() const", "const BoundingBox& get_boundingBox() const", AS_METHODPR(Model, GetBoundingBox, () const, const BoundingBox&), AS_CALL_THISCALL));

    // Skeleton& Model::GetSkeleton()
    methods.Push(RegisterObjectMethodArgs("Skeleton& Model::GetSkeleton()", "Skeleton& GetSkeleton()", AS_METHODPR(Model, GetSkeleton, (), Skeleton&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Skeleton& Model::GetSkeleton()", "Skeleton& get_skeleton()", AS_METHODPR(Model, GetSkeleton, (), Skeleton&), AS_CALL_THISCALL));

    // const Vector<SharedPtr<VertexBuffer>>& Model::GetVertexBuffers() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<VertexBuffer>>& Model::GetVertexBuffers() const", "Array<VertexBuffer@>@ GetVertexBuffers() const", AS_FUNCTION_OBJFIRST(Model_GetVertexBuffers_void), AS_CALL_CDECL_OBJFIRST));

    // const Vector<SharedPtr<IndexBuffer>>& Model::GetIndexBuffers() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<IndexBuffer>>& Model::GetIndexBuffers() const", "Array<IndexBuffer@>@ GetIndexBuffers() const", AS_FUNCTION_OBJFIRST(Model_GetIndexBuffers_void), AS_CALL_CDECL_OBJFIRST));

    // unsigned Model::GetNumGeometries() const
    methods.Push(RegisterObjectMethodArgs("unsigned Model::GetNumGeometries() const", "uint GetNumGeometries() const", AS_METHODPR(Model, GetNumGeometries, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Model::GetNumGeometries() const", "uint get_numGeometries() const", AS_METHODPR(Model, GetNumGeometries, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Model::GetNumGeometryLodLevels(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("unsigned Model::GetNumGeometryLodLevels(unsigned index) const", "uint GetNumGeometryLodLevels(uint) const", AS_METHODPR(Model, GetNumGeometryLodLevels, (unsigned) const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Model::GetNumGeometryLodLevels(unsigned index) const", "uint get_numGeometryLodLevels(uint) const", AS_METHODPR(Model, GetNumGeometryLodLevels, (unsigned) const, unsigned), AS_CALL_THISCALL));

    // const PODVector<Vector3>& Model::GetGeometryCenters() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Vector3>& Model::GetGeometryCenters() const", "Array<Vector3>@ GetGeometryCenters() const", AS_FUNCTION_OBJFIRST(Model_GetGeometryCenters_void), AS_CALL_CDECL_OBJFIRST));

    // Geometry* Model::GetGeometry(unsigned index, unsigned lodLevel) const
    methods.Push(RegisterObjectMethodArgs("Geometry* Model::GetGeometry(unsigned index, unsigned lodLevel) const", "Geometry@+ GetGeometry(uint, uint) const", AS_METHODPR(Model, GetGeometry, (unsigned, unsigned) const, Geometry*), AS_CALL_THISCALL));

    // const Vector3& Model::GetGeometryCenter(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Model::GetGeometryCenter(unsigned index) const", "const Vector3& GetGeometryCenter(uint) const", AS_METHODPR(Model, GetGeometryCenter, (unsigned) const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& Model::GetGeometryCenter(unsigned index) const", "const Vector3& get_geometryCenters(uint) const", AS_METHODPR(Model, GetGeometryCenter, (unsigned) const, const Vector3&), AS_CALL_THISCALL));

    // unsigned Model::GetNumMorphs() const
    methods.Push(RegisterObjectMethodArgs("unsigned Model::GetNumMorphs() const", "uint GetNumMorphs() const", AS_METHODPR(Model, GetNumMorphs, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Model::GetNumMorphs() const", "uint get_numMorphs() const", AS_METHODPR(Model, GetNumMorphs, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Model::GetMorphRangeStart(unsigned bufferIndex) const
    methods.Push(RegisterObjectMethodArgs("unsigned Model::GetMorphRangeStart(unsigned bufferIndex) const", "uint GetMorphRangeStart(uint) const", AS_METHODPR(Model, GetMorphRangeStart, (unsigned) const, unsigned), AS_CALL_THISCALL));

    // unsigned Model::GetMorphRangeCount(unsigned bufferIndex) const
    methods.Push(RegisterObjectMethodArgs("unsigned Model::GetMorphRangeCount(unsigned bufferIndex) const", "uint GetMorphRangeCount(uint) const", AS_METHODPR(Model, GetMorphRangeCount, (unsigned) const, unsigned), AS_CALL_THISCALL));
}

// struct ModelMorph | File: ../Graphics/Model.h
void CollectMembers_ModelMorph(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Mutex | File: ../Core/Mutex.h
void CollectMembers_Mutex(Vector<RegisterObjectMethodArgs>& methods)
{
    // void Mutex::Acquire()
    methods.Push(RegisterObjectMethodArgs("void Mutex::Acquire()", "void Acquire()", AS_METHODPR(Mutex, Acquire, (), void), AS_CALL_THISCALL));

    // bool Mutex::TryAcquire()
    methods.Push(RegisterObjectMethodArgs("bool Mutex::TryAcquire()", "bool TryAcquire()", AS_METHODPR(Mutex, TryAcquire, (), bool), AS_CALL_THISCALL));

    // void Mutex::Release()
    methods.Push(RegisterObjectMethodArgs("void Mutex::Release()", "void Release()", AS_METHODPR(Mutex, Release, (), void), AS_CALL_THISCALL));
}

// class MutexLock | File: ../Core/Mutex.h
void CollectMembers_MutexLock(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class NamedPipe | File: ../IO/NamedPipe.h
void CollectMembers_NamedPipe(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);
    CollectMembers_AbstractFile(methods);

    Remove(methods, "virtual bool Deserializer::IsEof() const");
    Remove(methods, "virtual unsigned Deserializer::Read(void* dest, unsigned size)=0");
    Remove(methods, "virtual unsigned Deserializer::Seek(unsigned position)=0");
    Remove(methods, "virtual unsigned Serializer::Write(const void* data, unsigned size)=0");
    Remove(methods, "virtual void AbstractFile::SetName(const String& name)");

    // unsigned NamedPipe::Read(void* dest, unsigned size) override
    // Error: type "void*" can not automatically bind

    // unsigned NamedPipe::Write(const void* data, unsigned size) override
    // Error: type "const void*" can not automatically bind

    // unsigned NamedPipe::Seek(unsigned position) override
    methods.Push(RegisterObjectMethodArgs("unsigned NamedPipe::Seek(unsigned position) override", "uint Seek(uint)", AS_METHODPR(NamedPipe, Seek, (unsigned), unsigned), AS_CALL_THISCALL));

    // bool NamedPipe::IsEof() const override
    methods.Push(RegisterObjectMethodArgs("bool NamedPipe::IsEof() const override", "bool IsEof() const", AS_METHODPR(NamedPipe, IsEof, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool NamedPipe::IsEof() const override", "bool get_eof() const", AS_METHODPR(NamedPipe, IsEof, () const, bool), AS_CALL_THISCALL));

    // void NamedPipe::SetName(const String& name) override
    methods.Push(RegisterObjectMethodArgs("void NamedPipe::SetName(const String& name) override", "void SetName(const String&in)", AS_METHODPR(NamedPipe, SetName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NamedPipe::SetName(const String& name) override", "void set_name(const String&in)", AS_METHODPR(NamedPipe, SetName, (const String&), void), AS_CALL_THISCALL));

    // bool NamedPipe::Open(const String& name, bool isServer)
    methods.Push(RegisterObjectMethodArgs("bool NamedPipe::Open(const String& name, bool isServer)", "bool Open(const String&in, bool)", AS_METHODPR(NamedPipe, Open, (const String&, bool), bool), AS_CALL_THISCALL));

    // void NamedPipe::Close()
    methods.Push(RegisterObjectMethodArgs("void NamedPipe::Close()", "void Close()", AS_METHODPR(NamedPipe, Close, (), void), AS_CALL_THISCALL));

    // bool NamedPipe::IsOpen() const
    methods.Push(RegisterObjectMethodArgs("bool NamedPipe::IsOpen() const", "bool IsOpen() const", AS_METHODPR(NamedPipe, IsOpen, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool NamedPipe::IsOpen() const", "bool get_open() const", AS_METHODPR(NamedPipe, IsOpen, () const, bool), AS_CALL_THISCALL));

    // bool NamedPipe::IsServer() const
    methods.Push(RegisterObjectMethodArgs("bool NamedPipe::IsServer() const", "bool IsServer() const", AS_METHODPR(NamedPipe, IsServer, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool NamedPipe::IsServer() const", "bool get_server() const", AS_METHODPR(NamedPipe, IsServer, () const, bool), AS_CALL_THISCALL));
}

// struct NetworkState | File: ../Scene/ReplicationState.h
void CollectMembers_NetworkState(Vector<RegisterObjectMethodArgs>& methods)
{
}

// void Node::SetTags(const StringVector& tags)
// void Node::SetTags(const StringVector& tags) | File: ../Scene/Node.h
static void Node_SetTags_StringVector(Node* ptr, CScriptArray* tags_conv)
{
    StringVector tags = ArrayToVector<String>(tags_conv);
    ptr->SetTags(tags);
}


// void Node::AddTags(const StringVector& tags)
// void Node::AddTags(const StringVector& tags) | File: ../Scene/Node.h
static void Node_AddTags_StringVector(Node* ptr, CScriptArray* tags_conv)
{
    StringVector tags = ArrayToVector<String>(tags_conv);
    ptr->AddTags(tags);
}


// const StringVector& Node::GetTags() const
// const StringVector& Node::GetTags() const | File: ../Scene/Node.h
static CScriptArray* Node_GetTags_void(Node* ptr)
{
    const StringVector& result = ptr->GetTags();
    return VectorToArray<String>(result, "Array<String>");
}


// const Vector<SharedPtr<Node>>& Node::GetChildren() const
// const Vector<SharedPtr<Node>>& Node::GetChildren() const | File: ../Scene/Node.h
static CScriptArray* Node_GetChildren_void(Node* ptr)
{
    const Vector<SharedPtr<Node>>& result = ptr->GetChildren();
    return VectorToHandleArray(result, "Array<Node@>");
}


// PODVector<Node*> Node::GetChildren(bool recursive) const
// PODVector<Node*> Node::GetChildren(bool recursive) const | File: ../Scene/Node.h
static CScriptArray* Node_GetChildren_bool(Node* ptr, bool recursive)
{
    PODVector<Node*> result = ptr->GetChildren(recursive);
    return VectorToHandleArray(result, "Array<Node@>");
}


// PODVector<Node*> Node::GetChildrenWithComponent(StringHash type, bool recursive=false) const
// PODVector<Node*> Node::GetChildrenWithComponent(StringHash type, bool recursive=false) const | File: ../Scene/Node.h
static CScriptArray* Node_GetChildrenWithComponent_StringHash_bool(Node* ptr, StringHash type, bool recursive)
{
    PODVector<Node*> result = ptr->GetChildrenWithComponent(type, recursive);
    return VectorToHandleArray(result, "Array<Node@>");
}


// PODVector<Node*> Node::GetChildrenWithTag(const String& tag, bool recursive=false) const
// PODVector<Node*> Node::GetChildrenWithTag(const String& tag, bool recursive=false) const | File: ../Scene/Node.h
static CScriptArray* Node_GetChildrenWithTag_String_bool(Node* ptr, const String& tag, bool recursive)
{
    PODVector<Node*> result = ptr->GetChildrenWithTag(tag, recursive);
    return VectorToHandleArray(result, "Array<Node@>");
}


// const Vector<SharedPtr<Component>>& Node::GetComponents() const
// const Vector<SharedPtr<Component>>& Node::GetComponents() const | File: ../Scene/Node.h
static CScriptArray* Node_GetComponents_void(Node* ptr)
{
    const Vector<SharedPtr<Component>>& result = ptr->GetComponents();
    return VectorToHandleArray(result, "Array<Component@>");
}


// const PODVector<Node*>& Node::GetDependencyNodes() const
// const PODVector<Node*>& Node::GetDependencyNodes() const | File: ../Scene/Node.h
static CScriptArray* Node_GetDependencyNodes_void(Node* ptr)
{
    const PODVector<Node*>& result = ptr->GetDependencyNodes();
    return VectorToHandleArray(result, "Array<Node@>");
}


// class Node | File: ../Scene/Node.h
void CollectMembers_Node(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Animatable(methods);

    Remove(methods, "bool Animatable::LoadJSON(const JSONValue& source) override");
    Remove(methods, "bool Animatable::LoadXML(const XMLElement& source) override");
    Remove(methods, "bool Animatable::SaveJSON(JSONValue& dest) const override");
    Remove(methods, "bool Animatable::SaveXML(XMLElement& dest) const override");
    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual bool Serializable::Load(Deserializer& source)");
    Remove(methods, "virtual bool Serializable::Save(Serializer& dest) const");
    Remove(methods, "virtual bool Serializable::SaveDefaultAttributes() const");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");
    Remove(methods, "virtual void Serializable::MarkNetworkUpdate()");

    // virtual void Node::AddReplicationState(NodeReplicationState* state)
    // Error: type "NodeReplicationState*" can not automatically bind

    // Node* Node::GetChild(const char* name, bool recursive=false) const
    // Error: type "const char*" can not automatically bind

    // void Node::GetChildren(PODVector<Node*>& dest, bool recursive=false) const
    // Error: type "PODVector<Node*>&" can not automatically bind

    // void Node::GetChildrenWithComponent(PODVector<Node*>& dest, StringHash type, bool recursive=false) const
    // Error: type "PODVector<Node*>&" can not automatically bind

    // void Node::GetChildrenWithTag(PODVector<Node*>& dest, const String& tag, bool recursive=false) const
    // Error: type "PODVector<Node*>&" can not automatically bind

    // void Node::GetComponents(PODVector<Component*>& dest, StringHash type, bool recursive=false) const
    // Error: type "PODVector<Component*>&" can not automatically bind

    // const Vector<WeakPtr<Component>> Node::GetListeners() const
    // Error: type "const Vector<WeakPtr<Component>>" can not automatically bind

    // const PODVector<unsigned char>& Node::GetNetParentAttr() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // const PODVector<unsigned char>& Node::GetNetRotationAttr() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void Node::SetNetParentAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void Node::SetNetRotationAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // bool Node::Load(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Node::Load(Deserializer& source) override", "bool Load(Deserializer&)", AS_METHODPR(Node, Load, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Node::LoadXML(const XMLElement& source) override
    methods.Push(RegisterObjectMethodArgs("bool Node::LoadXML(const XMLElement& source) override", "bool LoadXML(const XMLElement&in)", AS_METHODPR(Node, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool Node::LoadJSON(const JSONValue& source) override
    methods.Push(RegisterObjectMethodArgs("bool Node::LoadJSON(const JSONValue& source) override", "bool LoadJSON(const JSONValue&in)", AS_METHODPR(Node, LoadJSON, (const JSONValue&), bool), AS_CALL_THISCALL));

    // bool Node::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Node::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(Node, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool Node::SaveXML(XMLElement& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Node::SaveXML(XMLElement& dest) const override", "bool SaveXML(XMLElement&) const", AS_METHODPR(Node, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // bool Node::SaveJSON(JSONValue& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Node::SaveJSON(JSONValue& dest) const override", "bool SaveJSON(JSONValue&) const", AS_METHODPR(Node, SaveJSON, (JSONValue&) const, bool), AS_CALL_THISCALL));

    // void Node::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void Node::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(Node, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // bool Node::SaveDefaultAttributes() const override
    methods.Push(RegisterObjectMethodArgs("bool Node::SaveDefaultAttributes() const override", "bool SaveDefaultAttributes() const", AS_METHODPR(Node, SaveDefaultAttributes, () const, bool), AS_CALL_THISCALL));

    // void Node::MarkNetworkUpdate() override
    methods.Push(RegisterObjectMethodArgs("void Node::MarkNetworkUpdate() override", "void MarkNetworkUpdate()", AS_METHODPR(Node, MarkNetworkUpdate, (), void), AS_CALL_THISCALL));

    // bool Node::SaveXML(Serializer& dest, const String& indentation=\"\t\") const
    methods.Push(RegisterObjectMethodArgs("bool Node::SaveXML(Serializer& dest, const String& indentation=\"\t\") const", "bool SaveXML(Serializer&, const String&in = \"\t\") const", AS_METHODPR(Node, SaveXML, (Serializer&, const String&) const, bool), AS_CALL_THISCALL));

    // bool Node::SaveJSON(Serializer& dest, const String& indentation=\"\t\") const
    methods.Push(RegisterObjectMethodArgs("bool Node::SaveJSON(Serializer& dest, const String& indentation=\"\t\") const", "bool SaveJSON(Serializer&, const String&in = \"\t\") const", AS_METHODPR(Node, SaveJSON, (Serializer&, const String&) const, bool), AS_CALL_THISCALL));

    // void Node::SetName(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Node::SetName(const String& name)", "void SetName(const String&in)", AS_METHODPR(Node, SetName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetName(const String& name)", "void set_name(const String&in)", AS_METHODPR(Node, SetName, (const String&), void), AS_CALL_THISCALL));

    // void Node::SetTags(const StringVector& tags)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTags(const StringVector& tags)", "void SetTags(Array<String>@+)", AS_FUNCTION_OBJFIRST(Node_SetTags_StringVector), AS_CALL_CDECL_OBJFIRST));

    // void Node::AddTag(const String& tag)
    methods.Push(RegisterObjectMethodArgs("void Node::AddTag(const String& tag)", "void AddTag(const String&in)", AS_METHODPR(Node, AddTag, (const String&), void), AS_CALL_THISCALL));

    // void Node::AddTags(const String& tags, char separator=';')
    methods.Push(RegisterObjectMethodArgs("void Node::AddTags(const String& tags, char separator=';')", "void AddTags(const String&in, int8 = ';')", AS_METHODPR(Node, AddTags, (const String&, char), void), AS_CALL_THISCALL));

    // void Node::AddTags(const StringVector& tags)
    methods.Push(RegisterObjectMethodArgs("void Node::AddTags(const StringVector& tags)", "void AddTags(Array<String>@+)", AS_FUNCTION_OBJFIRST(Node_AddTags_StringVector), AS_CALL_CDECL_OBJFIRST));

    // bool Node::RemoveTag(const String& tag)
    methods.Push(RegisterObjectMethodArgs("bool Node::RemoveTag(const String& tag)", "bool RemoveTag(const String&in)", AS_METHODPR(Node, RemoveTag, (const String&), bool), AS_CALL_THISCALL));

    // void Node::RemoveAllTags()
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveAllTags()", "void RemoveAllTags()", AS_METHODPR(Node, RemoveAllTags, (), void), AS_CALL_THISCALL));

    // void Node::SetPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void Node::SetPosition(const Vector3& position)", "void SetPosition(const Vector3&in)", AS_METHODPR(Node, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetPosition(const Vector3& position)", "void set_position(const Vector3&in)", AS_METHODPR(Node, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetPosition2D(const Vector2& position)
    methods.Push(RegisterObjectMethodArgs("void Node::SetPosition2D(const Vector2& position)", "void SetPosition2D(const Vector2&in)", AS_METHODPR(Node, SetPosition2D, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetPosition2D(const Vector2& position)", "void set_position2D(const Vector2&in)", AS_METHODPR(Node, SetPosition2D, (const Vector2&), void), AS_CALL_THISCALL));

    // void Node::SetPosition2D(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void Node::SetPosition2D(float x, float y)", "void SetPosition2D(float, float)", AS_METHODPR(Node, SetPosition2D, (float, float), void), AS_CALL_THISCALL));

    // void Node::SetRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetRotation(const Quaternion& rotation)", "void SetRotation(const Quaternion&in)", AS_METHODPR(Node, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetRotation(const Quaternion& rotation)", "void set_rotation(const Quaternion&in)", AS_METHODPR(Node, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // void Node::SetRotation2D(float rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetRotation2D(float rotation)", "void SetRotation2D(float)", AS_METHODPR(Node, SetRotation2D, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetRotation2D(float rotation)", "void set_rotation2D(float)", AS_METHODPR(Node, SetRotation2D, (float), void), AS_CALL_THISCALL));

    // void Node::SetDirection(const Vector3& direction)
    methods.Push(RegisterObjectMethodArgs("void Node::SetDirection(const Vector3& direction)", "void SetDirection(const Vector3&in)", AS_METHODPR(Node, SetDirection, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetDirection(const Vector3& direction)", "void set_direction(const Vector3&in)", AS_METHODPR(Node, SetDirection, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetScale(float scale)", "void SetScale(float)", AS_METHODPR(Node, SetScale, (float), void), AS_CALL_THISCALL));

    // void Node::SetScale(const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetScale(const Vector3& scale)", "void SetScale(const Vector3&in)", AS_METHODPR(Node, SetScale, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetScale(const Vector3& scale)", "void set_scale(const Vector3&in)", AS_METHODPR(Node, SetScale, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetScale2D(const Vector2& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetScale2D(const Vector2& scale)", "void SetScale2D(const Vector2&in)", AS_METHODPR(Node, SetScale2D, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetScale2D(const Vector2& scale)", "void set_scale2D(const Vector2&in)", AS_METHODPR(Node, SetScale2D, (const Vector2&), void), AS_CALL_THISCALL));

    // void Node::SetScale2D(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void Node::SetScale2D(float x, float y)", "void SetScale2D(float, float)", AS_METHODPR(Node, SetScale2D, (float, float), void), AS_CALL_THISCALL));

    // void Node::SetTransform(const Vector3& position, const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTransform(const Vector3& position, const Quaternion& rotation)", "void SetTransform(const Vector3&in, const Quaternion&in)", AS_METHODPR(Node, SetTransform, (const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void Node::SetTransform(const Vector3& position, const Quaternion& rotation, float scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTransform(const Vector3& position, const Quaternion& rotation, float scale)", "void SetTransform(const Vector3&in, const Quaternion&in, float)", AS_METHODPR(Node, SetTransform, (const Vector3&, const Quaternion&, float), void), AS_CALL_THISCALL));

    // void Node::SetTransform(const Vector3& position, const Quaternion& rotation, const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTransform(const Vector3& position, const Quaternion& rotation, const Vector3& scale)", "void SetTransform(const Vector3&in, const Quaternion&in, const Vector3&in)", AS_METHODPR(Node, SetTransform, (const Vector3&, const Quaternion&, const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetTransform(const Matrix3x4& matrix)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTransform(const Matrix3x4& matrix)", "void SetTransform(const Matrix3x4&in)", AS_METHODPR(Node, SetTransform, (const Matrix3x4&), void), AS_CALL_THISCALL));

    // void Node::SetTransform2D(const Vector2& position, float rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTransform2D(const Vector2& position, float rotation)", "void SetTransform2D(const Vector2&in, float)", AS_METHODPR(Node, SetTransform2D, (const Vector2&, float), void), AS_CALL_THISCALL));

    // void Node::SetTransform2D(const Vector2& position, float rotation, float scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTransform2D(const Vector2& position, float rotation, float scale)", "void SetTransform2D(const Vector2&in, float, float)", AS_METHODPR(Node, SetTransform2D, (const Vector2&, float, float), void), AS_CALL_THISCALL));

    // void Node::SetTransform2D(const Vector2& position, float rotation, const Vector2& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTransform2D(const Vector2& position, float rotation, const Vector2& scale)", "void SetTransform2D(const Vector2&in, float, const Vector2&in)", AS_METHODPR(Node, SetTransform2D, (const Vector2&, float, const Vector2&), void), AS_CALL_THISCALL));

    // void Node::SetWorldPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldPosition(const Vector3& position)", "void SetWorldPosition(const Vector3&in)", AS_METHODPR(Node, SetWorldPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldPosition(const Vector3& position)", "void set_worldPosition(const Vector3&in)", AS_METHODPR(Node, SetWorldPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetWorldPosition2D(const Vector2& position)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldPosition2D(const Vector2& position)", "void SetWorldPosition2D(const Vector2&in)", AS_METHODPR(Node, SetWorldPosition2D, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldPosition2D(const Vector2& position)", "void set_worldPosition2D(const Vector2&in)", AS_METHODPR(Node, SetWorldPosition2D, (const Vector2&), void), AS_CALL_THISCALL));

    // void Node::SetWorldPosition2D(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldPosition2D(float x, float y)", "void SetWorldPosition2D(float, float)", AS_METHODPR(Node, SetWorldPosition2D, (float, float), void), AS_CALL_THISCALL));

    // void Node::SetWorldRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldRotation(const Quaternion& rotation)", "void SetWorldRotation(const Quaternion&in)", AS_METHODPR(Node, SetWorldRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldRotation(const Quaternion& rotation)", "void set_worldRotation(const Quaternion&in)", AS_METHODPR(Node, SetWorldRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // void Node::SetWorldRotation2D(float rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldRotation2D(float rotation)", "void SetWorldRotation2D(float)", AS_METHODPR(Node, SetWorldRotation2D, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldRotation2D(float rotation)", "void set_worldRotation2D(float)", AS_METHODPR(Node, SetWorldRotation2D, (float), void), AS_CALL_THISCALL));

    // void Node::SetWorldDirection(const Vector3& direction)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldDirection(const Vector3& direction)", "void SetWorldDirection(const Vector3&in)", AS_METHODPR(Node, SetWorldDirection, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldDirection(const Vector3& direction)", "void set_worldDirection(const Vector3&in)", AS_METHODPR(Node, SetWorldDirection, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetWorldScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldScale(float scale)", "void SetWorldScale(float)", AS_METHODPR(Node, SetWorldScale, (float), void), AS_CALL_THISCALL));

    // void Node::SetWorldScale(const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldScale(const Vector3& scale)", "void SetWorldScale(const Vector3&in)", AS_METHODPR(Node, SetWorldScale, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldScale(const Vector3& scale)", "void set_worldScale(const Vector3&in)", AS_METHODPR(Node, SetWorldScale, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetWorldScale2D(const Vector2& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldScale2D(const Vector2& scale)", "void SetWorldScale2D(const Vector2&in)", AS_METHODPR(Node, SetWorldScale2D, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldScale2D(const Vector2& scale)", "void set_worldScale2D(const Vector2&in)", AS_METHODPR(Node, SetWorldScale2D, (const Vector2&), void), AS_CALL_THISCALL));

    // void Node::SetWorldScale2D(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldScale2D(float x, float y)", "void SetWorldScale2D(float, float)", AS_METHODPR(Node, SetWorldScale2D, (float, float), void), AS_CALL_THISCALL));

    // void Node::SetWorldTransform(const Vector3& position, const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldTransform(const Vector3& position, const Quaternion& rotation)", "void SetWorldTransform(const Vector3&in, const Quaternion&in)", AS_METHODPR(Node, SetWorldTransform, (const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void Node::SetWorldTransform(const Vector3& position, const Quaternion& rotation, float scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldTransform(const Vector3& position, const Quaternion& rotation, float scale)", "void SetWorldTransform(const Vector3&in, const Quaternion&in, float)", AS_METHODPR(Node, SetWorldTransform, (const Vector3&, const Quaternion&, float), void), AS_CALL_THISCALL));

    // void Node::SetWorldTransform(const Vector3& position, const Quaternion& rotation, const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldTransform(const Vector3& position, const Quaternion& rotation, const Vector3& scale)", "void SetWorldTransform(const Vector3&in, const Quaternion&in, const Vector3&in)", AS_METHODPR(Node, SetWorldTransform, (const Vector3&, const Quaternion&, const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetWorldTransform(const Matrix3x4& worldTransform)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldTransform(const Matrix3x4& worldTransform)", "void SetWorldTransform(const Matrix3x4&in)", AS_METHODPR(Node, SetWorldTransform, (const Matrix3x4&), void), AS_CALL_THISCALL));

    // void Node::SetWorldTransform2D(const Vector2& position, float rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldTransform2D(const Vector2& position, float rotation)", "void SetWorldTransform2D(const Vector2&in, float)", AS_METHODPR(Node, SetWorldTransform2D, (const Vector2&, float), void), AS_CALL_THISCALL));

    // void Node::SetWorldTransform2D(const Vector2& position, float rotation, float scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldTransform2D(const Vector2& position, float rotation, float scale)", "void SetWorldTransform2D(const Vector2&in, float, float)", AS_METHODPR(Node, SetWorldTransform2D, (const Vector2&, float, float), void), AS_CALL_THISCALL));

    // void Node::SetWorldTransform2D(const Vector2& position, float rotation, const Vector2& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetWorldTransform2D(const Vector2& position, float rotation, const Vector2& scale)", "void SetWorldTransform2D(const Vector2&in, float, const Vector2&in)", AS_METHODPR(Node, SetWorldTransform2D, (const Vector2&, float, const Vector2&), void), AS_CALL_THISCALL));

    // void Node::Translate(const Vector3& delta, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::Translate(const Vector3& delta, TransformSpace space=TS_LOCAL)", "void Translate(const Vector3&in, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, Translate, (const Vector3&, TransformSpace), void), AS_CALL_THISCALL));

    // void Node::Translate2D(const Vector2& delta, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::Translate2D(const Vector2& delta, TransformSpace space=TS_LOCAL)", "void Translate2D(const Vector2&in, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, Translate2D, (const Vector2&, TransformSpace), void), AS_CALL_THISCALL));

    // void Node::Rotate(const Quaternion& delta, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::Rotate(const Quaternion& delta, TransformSpace space=TS_LOCAL)", "void Rotate(const Quaternion&in, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, Rotate, (const Quaternion&, TransformSpace), void), AS_CALL_THISCALL));

    // void Node::Rotate2D(float delta, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::Rotate2D(float delta, TransformSpace space=TS_LOCAL)", "void Rotate2D(float, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, Rotate2D, (float, TransformSpace), void), AS_CALL_THISCALL));

    // void Node::RotateAround(const Vector3& point, const Quaternion& delta, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::RotateAround(const Vector3& point, const Quaternion& delta, TransformSpace space=TS_LOCAL)", "void RotateAround(const Vector3&in, const Quaternion&in, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, RotateAround, (const Vector3&, const Quaternion&, TransformSpace), void), AS_CALL_THISCALL));

    // void Node::RotateAround2D(const Vector2& point, float delta, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::RotateAround2D(const Vector2& point, float delta, TransformSpace space=TS_LOCAL)", "void RotateAround2D(const Vector2&in, float, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, RotateAround2D, (const Vector2&, float, TransformSpace), void), AS_CALL_THISCALL));

    // void Node::Pitch(float angle, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::Pitch(float angle, TransformSpace space=TS_LOCAL)", "void Pitch(float, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, Pitch, (float, TransformSpace), void), AS_CALL_THISCALL));

    // void Node::Yaw(float angle, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::Yaw(float angle, TransformSpace space=TS_LOCAL)", "void Yaw(float, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, Yaw, (float, TransformSpace), void), AS_CALL_THISCALL));

    // void Node::Roll(float angle, TransformSpace space=TS_LOCAL)
    methods.Push(RegisterObjectMethodArgs("void Node::Roll(float angle, TransformSpace space=TS_LOCAL)", "void Roll(float, TransformSpace = TS_LOCAL)", AS_METHODPR(Node, Roll, (float, TransformSpace), void), AS_CALL_THISCALL));

    // bool Node::LookAt(const Vector3& target, const Vector3& up=Vector3::UP, TransformSpace space=TS_WORLD)
    methods.Push(RegisterObjectMethodArgs("bool Node::LookAt(const Vector3& target, const Vector3& up=Vector3::UP, TransformSpace space=TS_WORLD)", "bool LookAt(const Vector3&in, const Vector3&in = Vector3::UP, TransformSpace = TS_WORLD)", AS_METHODPR(Node, LookAt, (const Vector3&, const Vector3&, TransformSpace), bool), AS_CALL_THISCALL));

    // void Node::Scale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Node::Scale(float scale)", "void Scale(float)", AS_METHODPR(Node, Scale, (float), void), AS_CALL_THISCALL));

    // void Node::Scale(const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::Scale(const Vector3& scale)", "void Scale(const Vector3&in)", AS_METHODPR(Node, Scale, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::Scale2D(const Vector2& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::Scale2D(const Vector2& scale)", "void Scale2D(const Vector2&in)", AS_METHODPR(Node, Scale2D, (const Vector2&), void), AS_CALL_THISCALL));

    // void Node::SetEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Node::SetEnabled(bool enable)", "void SetEnabled(bool)", AS_METHODPR(Node, SetEnabled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetEnabled(bool enable)", "void set_enabled(bool)", AS_METHODPR(Node, SetEnabled, (bool), void), AS_CALL_THISCALL));

    // void Node::SetDeepEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Node::SetDeepEnabled(bool enable)", "void SetDeepEnabled(bool)", AS_METHODPR(Node, SetDeepEnabled, (bool), void), AS_CALL_THISCALL));

    // void Node::ResetDeepEnabled()
    methods.Push(RegisterObjectMethodArgs("void Node::ResetDeepEnabled()", "void ResetDeepEnabled()", AS_METHODPR(Node, ResetDeepEnabled, (), void), AS_CALL_THISCALL));

    // void Node::SetEnabledRecursive(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Node::SetEnabledRecursive(bool enable)", "void SetEnabledRecursive(bool)", AS_METHODPR(Node, SetEnabledRecursive, (bool), void), AS_CALL_THISCALL));

    // void Node::MarkDirty()
    methods.Push(RegisterObjectMethodArgs("void Node::MarkDirty()", "void MarkDirty()", AS_METHODPR(Node, MarkDirty, (), void), AS_CALL_THISCALL));

    // Node* Node::CreateChild(const String& name=String::EMPTY, CreateMode mode=REPLICATED, unsigned id=0, bool temporary=false)
    methods.Push(RegisterObjectMethodArgs("Node* Node::CreateChild(const String& name=String::EMPTY, CreateMode mode=REPLICATED, unsigned id=0, bool temporary=false)", "Node@+ CreateChild(const String&in = String::EMPTY, CreateMode = REPLICATED, uint = 0, bool = false)", AS_METHODPR(Node, CreateChild, (const String&, CreateMode, unsigned, bool), Node*), AS_CALL_THISCALL));

    // Node* Node::CreateTemporaryChild(const String& name=String::EMPTY, CreateMode mode=REPLICATED, unsigned id=0)
    methods.Push(RegisterObjectMethodArgs("Node* Node::CreateTemporaryChild(const String& name=String::EMPTY, CreateMode mode=REPLICATED, unsigned id=0)", "Node@+ CreateTemporaryChild(const String&in = String::EMPTY, CreateMode = REPLICATED, uint = 0)", AS_METHODPR(Node, CreateTemporaryChild, (const String&, CreateMode, unsigned), Node*), AS_CALL_THISCALL));

    // void Node::AddChild(Node* node, unsigned index=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void Node::AddChild(Node* node, unsigned index=M_MAX_UNSIGNED)", "void AddChild(Node@+, uint = M_MAX_UNSIGNED)", AS_METHODPR(Node, AddChild, (Node*, unsigned), void), AS_CALL_THISCALL));

    // void Node::RemoveChild(Node* node)
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveChild(Node* node)", "void RemoveChild(Node@+)", AS_METHODPR(Node, RemoveChild, (Node*), void), AS_CALL_THISCALL));

    // void Node::RemoveAllChildren()
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveAllChildren()", "void RemoveAllChildren()", AS_METHODPR(Node, RemoveAllChildren, (), void), AS_CALL_THISCALL));

    // void Node::RemoveChildren(bool removeReplicated, bool removeLocal, bool recursive)
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveChildren(bool removeReplicated, bool removeLocal, bool recursive)", "void RemoveChildren(bool, bool, bool)", AS_METHODPR(Node, RemoveChildren, (bool, bool, bool), void), AS_CALL_THISCALL));

    // Component* Node::CreateComponent(StringHash type, CreateMode mode=REPLICATED, unsigned id=0)
    methods.Push(RegisterObjectMethodArgs("Component* Node::CreateComponent(StringHash type, CreateMode mode=REPLICATED, unsigned id=0)", "Component@+ CreateComponent(StringHash, CreateMode = REPLICATED, uint = 0)", AS_METHODPR(Node, CreateComponent, (StringHash, CreateMode, unsigned), Component*), AS_CALL_THISCALL));

    // Component* Node::GetOrCreateComponent(StringHash type, CreateMode mode=REPLICATED, unsigned id=0)
    methods.Push(RegisterObjectMethodArgs("Component* Node::GetOrCreateComponent(StringHash type, CreateMode mode=REPLICATED, unsigned id=0)", "Component@+ GetOrCreateComponent(StringHash, CreateMode = REPLICATED, uint = 0)", AS_METHODPR(Node, GetOrCreateComponent, (StringHash, CreateMode, unsigned), Component*), AS_CALL_THISCALL));

    // Component* Node::CloneComponent(Component* component, unsigned id=0)
    methods.Push(RegisterObjectMethodArgs("Component* Node::CloneComponent(Component* component, unsigned id=0)", "Component@+ CloneComponent(Component@+, uint = 0)", AS_METHODPR(Node, CloneComponent, (Component*, unsigned), Component*), AS_CALL_THISCALL));

    // Component* Node::CloneComponent(Component* component, CreateMode mode, unsigned id=0)
    methods.Push(RegisterObjectMethodArgs("Component* Node::CloneComponent(Component* component, CreateMode mode, unsigned id=0)", "Component@+ CloneComponent(Component@+, CreateMode, uint = 0)", AS_METHODPR(Node, CloneComponent, (Component*, CreateMode, unsigned), Component*), AS_CALL_THISCALL));

    // void Node::RemoveComponent(Component* component)
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveComponent(Component* component)", "void RemoveComponent(Component@+)", AS_METHODPR(Node, RemoveComponent, (Component*), void), AS_CALL_THISCALL));

    // void Node::RemoveComponent(StringHash type)
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveComponent(StringHash type)", "void RemoveComponent(StringHash)", AS_METHODPR(Node, RemoveComponent, (StringHash), void), AS_CALL_THISCALL));

    // void Node::RemoveComponents(bool removeReplicated, bool removeLocal)
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveComponents(bool removeReplicated, bool removeLocal)", "void RemoveComponents(bool, bool)", AS_METHODPR(Node, RemoveComponents, (bool, bool), void), AS_CALL_THISCALL));

    // void Node::RemoveComponents(StringHash type)
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveComponents(StringHash type)", "void RemoveComponents(StringHash)", AS_METHODPR(Node, RemoveComponents, (StringHash), void), AS_CALL_THISCALL));

    // void Node::RemoveAllComponents()
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveAllComponents()", "void RemoveAllComponents()", AS_METHODPR(Node, RemoveAllComponents, (), void), AS_CALL_THISCALL));

    // void Node::ReorderComponent(Component* component, unsigned index)
    methods.Push(RegisterObjectMethodArgs("void Node::ReorderComponent(Component* component, unsigned index)", "void ReorderComponent(Component@+, uint)", AS_METHODPR(Node, ReorderComponent, (Component*, unsigned), void), AS_CALL_THISCALL));

    // Node* Node::Clone(CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("Node* Node::Clone(CreateMode mode=REPLICATED)", "Node@+ Clone(CreateMode = REPLICATED)", AS_METHODPR(Node, Clone, (CreateMode), Node*), AS_CALL_THISCALL));

    // void Node::Remove()
    methods.Push(RegisterObjectMethodArgs("void Node::Remove()", "void Remove()", AS_METHODPR(Node, Remove, (), void), AS_CALL_THISCALL));

    // void Node::SetParent(Node* parent)
    methods.Push(RegisterObjectMethodArgs("void Node::SetParent(Node* parent)", "void SetParent(Node@+)", AS_METHODPR(Node, SetParent, (Node*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetParent(Node* parent)", "void set_parent(Node@+)", AS_METHODPR(Node, SetParent, (Node*), void), AS_CALL_THISCALL));

    // void Node::SetVar(StringHash key, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void Node::SetVar(StringHash key, const Variant& value)", "void SetVar(StringHash, const Variant&in)", AS_METHODPR(Node, SetVar, (StringHash, const Variant&), void), AS_CALL_THISCALL));

    // void Node::AddListener(Component* component)
    methods.Push(RegisterObjectMethodArgs("void Node::AddListener(Component* component)", "void AddListener(Component@+)", AS_METHODPR(Node, AddListener, (Component*), void), AS_CALL_THISCALL));

    // void Node::RemoveListener(Component* component)
    methods.Push(RegisterObjectMethodArgs("void Node::RemoveListener(Component* component)", "void RemoveListener(Component@+)", AS_METHODPR(Node, RemoveListener, (Component*), void), AS_CALL_THISCALL));

    // unsigned Node::GetID() const
    methods.Push(RegisterObjectMethodArgs("unsigned Node::GetID() const", "uint GetID() const", AS_METHODPR(Node, GetID, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Node::GetID() const", "uint get_id() const", AS_METHODPR(Node, GetID, () const, unsigned), AS_CALL_THISCALL));

    // bool Node::IsReplicated() const
    methods.Push(RegisterObjectMethodArgs("bool Node::IsReplicated() const", "bool IsReplicated() const", AS_METHODPR(Node, IsReplicated, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Node::IsReplicated() const", "bool get_replicated() const", AS_METHODPR(Node, IsReplicated, () const, bool), AS_CALL_THISCALL));

    // const String& Node::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& Node::GetName() const", "const String& GetName() const", AS_METHODPR(Node, GetName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Node::GetName() const", "const String& get_name() const", AS_METHODPR(Node, GetName, () const, const String&), AS_CALL_THISCALL));

    // StringHash Node::GetNameHash() const
    methods.Push(RegisterObjectMethodArgs("StringHash Node::GetNameHash() const", "StringHash GetNameHash() const", AS_METHODPR(Node, GetNameHash, () const, StringHash), AS_CALL_THISCALL));

    // const StringVector& Node::GetTags() const
    methods.Push(RegisterObjectMethodArgs("const StringVector& Node::GetTags() const", "Array<String>@ GetTags() const", AS_FUNCTION_OBJFIRST(Node_GetTags_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("const StringVector& Node::GetTags() const", "Array<String>@ get_tags() const", AS_FUNCTION_OBJFIRST(Node_GetTags_void), AS_CALL_CDECL_OBJFIRST));

    // bool Node::HasTag(const String& tag) const
    methods.Push(RegisterObjectMethodArgs("bool Node::HasTag(const String& tag) const", "bool HasTag(const String&in) const", AS_METHODPR(Node, HasTag, (const String&) const, bool), AS_CALL_THISCALL));

    // Node* Node::GetParent() const
    methods.Push(RegisterObjectMethodArgs("Node* Node::GetParent() const", "Node@+ GetParent() const", AS_METHODPR(Node, GetParent, () const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* Node::GetParent() const", "Node@+ get_parent() const", AS_METHODPR(Node, GetParent, () const, Node*), AS_CALL_THISCALL));

    // Scene* Node::GetScene() const
    methods.Push(RegisterObjectMethodArgs("Scene* Node::GetScene() const", "Scene@+ GetScene() const", AS_METHODPR(Node, GetScene, () const, Scene*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Scene* Node::GetScene() const", "Scene@+ get_scene() const", AS_METHODPR(Node, GetScene, () const, Scene*), AS_CALL_THISCALL));

    // bool Node::IsChildOf(Node* node) const
    methods.Push(RegisterObjectMethodArgs("bool Node::IsChildOf(Node* node) const", "bool IsChildOf(Node@+) const", AS_METHODPR(Node, IsChildOf, (Node*) const, bool), AS_CALL_THISCALL));

    // bool Node::IsEnabled() const
    methods.Push(RegisterObjectMethodArgs("bool Node::IsEnabled() const", "bool IsEnabled() const", AS_METHODPR(Node, IsEnabled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Node::IsEnabled() const", "bool get_enabled() const", AS_METHODPR(Node, IsEnabled, () const, bool), AS_CALL_THISCALL));

    // bool Node::IsEnabledSelf() const
    methods.Push(RegisterObjectMethodArgs("bool Node::IsEnabledSelf() const", "bool IsEnabledSelf() const", AS_METHODPR(Node, IsEnabledSelf, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Node::IsEnabledSelf() const", "bool get_enabledSelf() const", AS_METHODPR(Node, IsEnabledSelf, () const, bool), AS_CALL_THISCALL));

    // const Vector3& Node::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Node::GetPosition() const", "const Vector3& GetPosition() const", AS_METHODPR(Node, GetPosition, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& Node::GetPosition() const", "const Vector3& get_position() const", AS_METHODPR(Node, GetPosition, () const, const Vector3&), AS_CALL_THISCALL));

    // Vector2 Node::GetPosition2D() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::GetPosition2D() const", "Vector2 GetPosition2D() const", AS_METHODPR(Node, GetPosition2D, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::GetPosition2D() const", "Vector2 get_position2D() const", AS_METHODPR(Node, GetPosition2D, () const, Vector2), AS_CALL_THISCALL));

    // const Quaternion& Node::GetRotation() const
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Node::GetRotation() const", "const Quaternion& GetRotation() const", AS_METHODPR(Node, GetRotation, () const, const Quaternion&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Node::GetRotation() const", "const Quaternion& get_rotation() const", AS_METHODPR(Node, GetRotation, () const, const Quaternion&), AS_CALL_THISCALL));

    // float Node::GetRotation2D() const
    methods.Push(RegisterObjectMethodArgs("float Node::GetRotation2D() const", "float GetRotation2D() const", AS_METHODPR(Node, GetRotation2D, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Node::GetRotation2D() const", "float get_rotation2D() const", AS_METHODPR(Node, GetRotation2D, () const, float), AS_CALL_THISCALL));

    // Vector3 Node::GetDirection() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetDirection() const", "Vector3 GetDirection() const", AS_METHODPR(Node, GetDirection, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetDirection() const", "Vector3 get_direction() const", AS_METHODPR(Node, GetDirection, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Node::GetUp() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetUp() const", "Vector3 GetUp() const", AS_METHODPR(Node, GetUp, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetUp() const", "Vector3 get_up() const", AS_METHODPR(Node, GetUp, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Node::GetRight() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetRight() const", "Vector3 GetRight() const", AS_METHODPR(Node, GetRight, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetRight() const", "Vector3 get_right() const", AS_METHODPR(Node, GetRight, () const, Vector3), AS_CALL_THISCALL));

    // const Vector3& Node::GetScale() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Node::GetScale() const", "const Vector3& GetScale() const", AS_METHODPR(Node, GetScale, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& Node::GetScale() const", "const Vector3& get_scale() const", AS_METHODPR(Node, GetScale, () const, const Vector3&), AS_CALL_THISCALL));

    // Vector2 Node::GetScale2D() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::GetScale2D() const", "Vector2 GetScale2D() const", AS_METHODPR(Node, GetScale2D, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::GetScale2D() const", "Vector2 get_scale2D() const", AS_METHODPR(Node, GetScale2D, () const, Vector2), AS_CALL_THISCALL));

    // Matrix3x4 Node::GetTransform() const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Node::GetTransform() const", "Matrix3x4 GetTransform() const", AS_METHODPR(Node, GetTransform, () const, Matrix3x4), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Node::GetTransform() const", "Matrix3x4 get_transform() const", AS_METHODPR(Node, GetTransform, () const, Matrix3x4), AS_CALL_THISCALL));

    // Vector3 Node::GetWorldPosition() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldPosition() const", "Vector3 GetWorldPosition() const", AS_METHODPR(Node, GetWorldPosition, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldPosition() const", "Vector3 get_worldPosition() const", AS_METHODPR(Node, GetWorldPosition, () const, Vector3), AS_CALL_THISCALL));

    // Vector2 Node::GetWorldPosition2D() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::GetWorldPosition2D() const", "Vector2 GetWorldPosition2D() const", AS_METHODPR(Node, GetWorldPosition2D, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::GetWorldPosition2D() const", "Vector2 get_worldPosition2D() const", AS_METHODPR(Node, GetWorldPosition2D, () const, Vector2), AS_CALL_THISCALL));

    // Quaternion Node::GetWorldRotation() const
    methods.Push(RegisterObjectMethodArgs("Quaternion Node::GetWorldRotation() const", "Quaternion GetWorldRotation() const", AS_METHODPR(Node, GetWorldRotation, () const, Quaternion), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Quaternion Node::GetWorldRotation() const", "Quaternion get_worldRotation() const", AS_METHODPR(Node, GetWorldRotation, () const, Quaternion), AS_CALL_THISCALL));

    // float Node::GetWorldRotation2D() const
    methods.Push(RegisterObjectMethodArgs("float Node::GetWorldRotation2D() const", "float GetWorldRotation2D() const", AS_METHODPR(Node, GetWorldRotation2D, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Node::GetWorldRotation2D() const", "float get_worldRotation2D() const", AS_METHODPR(Node, GetWorldRotation2D, () const, float), AS_CALL_THISCALL));

    // Vector3 Node::GetWorldDirection() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldDirection() const", "Vector3 GetWorldDirection() const", AS_METHODPR(Node, GetWorldDirection, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldDirection() const", "Vector3 get_worldDirection() const", AS_METHODPR(Node, GetWorldDirection, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Node::GetWorldUp() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldUp() const", "Vector3 GetWorldUp() const", AS_METHODPR(Node, GetWorldUp, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldUp() const", "Vector3 get_worldUp() const", AS_METHODPR(Node, GetWorldUp, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Node::GetWorldRight() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldRight() const", "Vector3 GetWorldRight() const", AS_METHODPR(Node, GetWorldRight, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldRight() const", "Vector3 get_worldRight() const", AS_METHODPR(Node, GetWorldRight, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Node::GetWorldScale() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldScale() const", "Vector3 GetWorldScale() const", AS_METHODPR(Node, GetWorldScale, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetWorldScale() const", "Vector3 get_worldScale() const", AS_METHODPR(Node, GetWorldScale, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Node::GetSignedWorldScale() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetSignedWorldScale() const", "Vector3 GetSignedWorldScale() const", AS_METHODPR(Node, GetSignedWorldScale, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::GetSignedWorldScale() const", "Vector3 get_signedWorldScale() const", AS_METHODPR(Node, GetSignedWorldScale, () const, Vector3), AS_CALL_THISCALL));

    // Vector2 Node::GetWorldScale2D() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::GetWorldScale2D() const", "Vector2 GetWorldScale2D() const", AS_METHODPR(Node, GetWorldScale2D, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::GetWorldScale2D() const", "Vector2 get_worldScale2D() const", AS_METHODPR(Node, GetWorldScale2D, () const, Vector2), AS_CALL_THISCALL));

    // const Matrix3x4& Node::GetWorldTransform() const
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Node::GetWorldTransform() const", "const Matrix3x4& GetWorldTransform() const", AS_METHODPR(Node, GetWorldTransform, () const, const Matrix3x4&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Node::GetWorldTransform() const", "const Matrix3x4& get_worldTransform() const", AS_METHODPR(Node, GetWorldTransform, () const, const Matrix3x4&), AS_CALL_THISCALL));

    // Vector3 Node::LocalToWorld(const Vector3& position) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::LocalToWorld(const Vector3& position) const", "Vector3 LocalToWorld(const Vector3&in) const", AS_METHODPR(Node, LocalToWorld, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Node::LocalToWorld(const Vector4& vector) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::LocalToWorld(const Vector4& vector) const", "Vector3 LocalToWorld(const Vector4&in) const", AS_METHODPR(Node, LocalToWorld, (const Vector4&) const, Vector3), AS_CALL_THISCALL));

    // Vector2 Node::LocalToWorld2D(const Vector2& vector) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::LocalToWorld2D(const Vector2& vector) const", "Vector2 LocalToWorld2D(const Vector2&in) const", AS_METHODPR(Node, LocalToWorld2D, (const Vector2&) const, Vector2), AS_CALL_THISCALL));

    // Vector3 Node::WorldToLocal(const Vector3& position) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::WorldToLocal(const Vector3& position) const", "Vector3 WorldToLocal(const Vector3&in) const", AS_METHODPR(Node, WorldToLocal, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Node::WorldToLocal(const Vector4& vector) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Node::WorldToLocal(const Vector4& vector) const", "Vector3 WorldToLocal(const Vector4&in) const", AS_METHODPR(Node, WorldToLocal, (const Vector4&) const, Vector3), AS_CALL_THISCALL));

    // Vector2 Node::WorldToLocal2D(const Vector2& vector) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Node::WorldToLocal2D(const Vector2& vector) const", "Vector2 WorldToLocal2D(const Vector2&in) const", AS_METHODPR(Node, WorldToLocal2D, (const Vector2&) const, Vector2), AS_CALL_THISCALL));

    // bool Node::IsDirty() const
    methods.Push(RegisterObjectMethodArgs("bool Node::IsDirty() const", "bool IsDirty() const", AS_METHODPR(Node, IsDirty, () const, bool), AS_CALL_THISCALL));

    // unsigned Node::GetNumChildren(bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("unsigned Node::GetNumChildren(bool recursive=false) const", "uint GetNumChildren(bool = false) const", AS_METHODPR(Node, GetNumChildren, (bool) const, unsigned), AS_CALL_THISCALL));

    // const Vector<SharedPtr<Node>>& Node::GetChildren() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<Node>>& Node::GetChildren() const", "Array<Node@>@ GetChildren() const", AS_FUNCTION_OBJFIRST(Node_GetChildren_void), AS_CALL_CDECL_OBJFIRST));

    // PODVector<Node*> Node::GetChildren(bool recursive) const
    methods.Push(RegisterObjectMethodArgs("PODVector<Node*> Node::GetChildren(bool recursive) const", "Array<Node@>@ GetChildren(bool) const", AS_FUNCTION_OBJFIRST(Node_GetChildren_bool), AS_CALL_CDECL_OBJFIRST));

    // PODVector<Node*> Node::GetChildrenWithComponent(StringHash type, bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("PODVector<Node*> Node::GetChildrenWithComponent(StringHash type, bool recursive=false) const", "Array<Node@>@ GetChildrenWithComponent(StringHash, bool = false) const", AS_FUNCTION_OBJFIRST(Node_GetChildrenWithComponent_StringHash_bool), AS_CALL_CDECL_OBJFIRST));

    // PODVector<Node*> Node::GetChildrenWithTag(const String& tag, bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("PODVector<Node*> Node::GetChildrenWithTag(const String& tag, bool recursive=false) const", "Array<Node@>@ GetChildrenWithTag(const String&in, bool = false) const", AS_FUNCTION_OBJFIRST(Node_GetChildrenWithTag_String_bool), AS_CALL_CDECL_OBJFIRST));

    // Node* Node::GetChild(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Node* Node::GetChild(unsigned index) const", "Node@+ GetChild(uint) const", AS_METHODPR(Node, GetChild, (unsigned) const, Node*), AS_CALL_THISCALL));

    // Node* Node::GetChild(const String& name, bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("Node* Node::GetChild(const String& name, bool recursive=false) const", "Node@+ GetChild(const String&in, bool = false) const", AS_METHODPR(Node, GetChild, (const String&, bool) const, Node*), AS_CALL_THISCALL));

    // Node* Node::GetChild(StringHash nameHash, bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("Node* Node::GetChild(StringHash nameHash, bool recursive=false) const", "Node@+ GetChild(StringHash, bool = false) const", AS_METHODPR(Node, GetChild, (StringHash, bool) const, Node*), AS_CALL_THISCALL));

    // unsigned Node::GetNumComponents() const
    methods.Push(RegisterObjectMethodArgs("unsigned Node::GetNumComponents() const", "uint GetNumComponents() const", AS_METHODPR(Node, GetNumComponents, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Node::GetNumComponents() const", "uint get_numComponents() const", AS_METHODPR(Node, GetNumComponents, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Node::GetNumNetworkComponents() const
    methods.Push(RegisterObjectMethodArgs("unsigned Node::GetNumNetworkComponents() const", "uint GetNumNetworkComponents() const", AS_METHODPR(Node, GetNumNetworkComponents, () const, unsigned), AS_CALL_THISCALL));

    // const Vector<SharedPtr<Component>>& Node::GetComponents() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<Component>>& Node::GetComponents() const", "Array<Component@>@ GetComponents() const", AS_FUNCTION_OBJFIRST(Node_GetComponents_void), AS_CALL_CDECL_OBJFIRST));

    // Component* Node::GetComponent(StringHash type, bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("Component* Node::GetComponent(StringHash type, bool recursive=false) const", "Component@+ GetComponent(StringHash, bool = false) const", AS_METHODPR(Node, GetComponent, (StringHash, bool) const, Component*), AS_CALL_THISCALL));

    // Component* Node::GetParentComponent(StringHash type, bool fullTraversal=false) const
    methods.Push(RegisterObjectMethodArgs("Component* Node::GetParentComponent(StringHash type, bool fullTraversal=false) const", "Component@+ GetParentComponent(StringHash, bool = false) const", AS_METHODPR(Node, GetParentComponent, (StringHash, bool) const, Component*), AS_CALL_THISCALL));

    // bool Node::HasComponent(StringHash type) const
    methods.Push(RegisterObjectMethodArgs("bool Node::HasComponent(StringHash type) const", "bool HasComponent(StringHash) const", AS_METHODPR(Node, HasComponent, (StringHash) const, bool), AS_CALL_THISCALL));

    // const Variant& Node::GetVar(StringHash key) const
    methods.Push(RegisterObjectMethodArgs("const Variant& Node::GetVar(StringHash key) const", "const Variant& GetVar(StringHash) const", AS_METHODPR(Node, GetVar, (StringHash) const, const Variant&), AS_CALL_THISCALL));

    // const VariantMap& Node::GetVars() const
    methods.Push(RegisterObjectMethodArgs("const VariantMap& Node::GetVars() const", "const VariantMap& GetVars() const", AS_METHODPR(Node, GetVars, () const, const VariantMap&), AS_CALL_THISCALL));

    // void Node::SetID(unsigned id)
    methods.Push(RegisterObjectMethodArgs("void Node::SetID(unsigned id)", "void SetID(uint)", AS_METHODPR(Node, SetID, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Node::SetID(unsigned id)", "void set_id(uint)", AS_METHODPR(Node, SetID, (unsigned), void), AS_CALL_THISCALL));

    // void Node::SetScene(Scene* scene)
    methods.Push(RegisterObjectMethodArgs("void Node::SetScene(Scene* scene)", "void SetScene(Scene@+)", AS_METHODPR(Node, SetScene, (Scene*), void), AS_CALL_THISCALL));

    // void Node::ResetScene()
    methods.Push(RegisterObjectMethodArgs("void Node::ResetScene()", "void ResetScene()", AS_METHODPR(Node, ResetScene, (), void), AS_CALL_THISCALL));

    // void Node::SetNetPositionAttr(const Vector3& value)
    methods.Push(RegisterObjectMethodArgs("void Node::SetNetPositionAttr(const Vector3& value)", "void SetNetPositionAttr(const Vector3&in)", AS_METHODPR(Node, SetNetPositionAttr, (const Vector3&), void), AS_CALL_THISCALL));

    // const Vector3& Node::GetNetPositionAttr() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Node::GetNetPositionAttr() const", "const Vector3& GetNetPositionAttr() const", AS_METHODPR(Node, GetNetPositionAttr, () const, const Vector3&), AS_CALL_THISCALL));

    // bool Node::Load(Deserializer& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("bool Node::Load(Deserializer& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)", "bool Load(Deserializer&, SceneResolver&, bool = true, bool = false, CreateMode = REPLICATED)", AS_METHODPR(Node, Load, (Deserializer&, SceneResolver&, bool, bool, CreateMode), bool), AS_CALL_THISCALL));

    // bool Node::LoadXML(const XMLElement& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("bool Node::LoadXML(const XMLElement& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)", "bool LoadXML(const XMLElement&in, SceneResolver&, bool = true, bool = false, CreateMode = REPLICATED)", AS_METHODPR(Node, LoadXML, (const XMLElement&, SceneResolver&, bool, bool, CreateMode), bool), AS_CALL_THISCALL));

    // bool Node::LoadJSON(const JSONValue& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("bool Node::LoadJSON(const JSONValue& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)", "bool LoadJSON(const JSONValue&in, SceneResolver&, bool = true, bool = false, CreateMode = REPLICATED)", AS_METHODPR(Node, LoadJSON, (const JSONValue&, SceneResolver&, bool, bool, CreateMode), bool), AS_CALL_THISCALL));

    // const PODVector<Node*>& Node::GetDependencyNodes() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Node*>& Node::GetDependencyNodes() const", "Array<Node@>@ GetDependencyNodes() const", AS_FUNCTION_OBJFIRST(Node_GetDependencyNodes_void), AS_CALL_CDECL_OBJFIRST));

    // void Node::PrepareNetworkUpdate()
    methods.Push(RegisterObjectMethodArgs("void Node::PrepareNetworkUpdate()", "void PrepareNetworkUpdate()", AS_METHODPR(Node, PrepareNetworkUpdate, (), void), AS_CALL_THISCALL));

    // void Node::MarkReplicationDirty()
    methods.Push(RegisterObjectMethodArgs("void Node::MarkReplicationDirty()", "void MarkReplicationDirty()", AS_METHODPR(Node, MarkReplicationDirty, (), void), AS_CALL_THISCALL));

    // Node* Node::CreateChild(unsigned id, CreateMode mode, bool temporary=false)
    methods.Push(RegisterObjectMethodArgs("Node* Node::CreateChild(unsigned id, CreateMode mode, bool temporary=false)", "Node@+ CreateChild(uint, CreateMode, bool = false)", AS_METHODPR(Node, CreateChild, (unsigned, CreateMode, bool), Node*), AS_CALL_THISCALL));

    // void Node::AddComponent(Component* component, unsigned id, CreateMode mode)
    methods.Push(RegisterObjectMethodArgs("void Node::AddComponent(Component* component, unsigned id, CreateMode mode)", "void AddComponent(Component@+, uint, CreateMode)", AS_METHODPR(Node, AddComponent, (Component*, unsigned, CreateMode), void), AS_CALL_THISCALL));

    // unsigned Node::GetNumPersistentChildren() const
    methods.Push(RegisterObjectMethodArgs("unsigned Node::GetNumPersistentChildren() const", "uint GetNumPersistentChildren() const", AS_METHODPR(Node, GetNumPersistentChildren, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Node::GetNumPersistentComponents() const
    methods.Push(RegisterObjectMethodArgs("unsigned Node::GetNumPersistentComponents() const", "uint GetNumPersistentComponents() const", AS_METHODPR(Node, GetNumPersistentComponents, () const, unsigned), AS_CALL_THISCALL));

    // void Node::SetPositionSilent(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void Node::SetPositionSilent(const Vector3& position)", "void SetPositionSilent(const Vector3&in)", AS_METHODPR(Node, SetPositionSilent, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetRotationSilent(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void Node::SetRotationSilent(const Quaternion& rotation)", "void SetRotationSilent(const Quaternion&in)", AS_METHODPR(Node, SetRotationSilent, (const Quaternion&), void), AS_CALL_THISCALL));

    // void Node::SetScaleSilent(const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetScaleSilent(const Vector3& scale)", "void SetScaleSilent(const Vector3&in)", AS_METHODPR(Node, SetScaleSilent, (const Vector3&), void), AS_CALL_THISCALL));

    // void Node::SetTransformSilent(const Vector3& position, const Quaternion& rotation, const Vector3& scale)
    methods.Push(RegisterObjectMethodArgs("void Node::SetTransformSilent(const Vector3& position, const Quaternion& rotation, const Vector3& scale)", "void SetTransformSilent(const Vector3&in, const Quaternion&in, const Vector3&in)", AS_METHODPR(Node, SetTransformSilent, (const Vector3&, const Quaternion&, const Vector3&), void), AS_CALL_THISCALL));
}

// struct NodeImpl | File: ../Scene/Node.h
void CollectMembers_NodeImpl(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct NodeReplicationState | File: ../Scene/ReplicationState.h
void CollectMembers_NodeReplicationState(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ReplicationState(methods);
}

// void Object::UnsubscribeFromAllEventsExcept(const PODVector<StringHash>& exceptions, bool onlyUserData)
// void Object::UnsubscribeFromAllEventsExcept(const PODVector<StringHash>& exceptions, bool onlyUserData) | File: ../Core/Object.h
static void Object_UnsubscribeFromAllEventsExcept_PODVectorStringHash_bool(Object* ptr, CScriptArray* exceptions_conv, bool onlyUserData)
{
    PODVector<StringHash> exceptions = ArrayToPODVector<StringHash>(exceptions_conv);
    ptr->UnsubscribeFromAllEventsExcept(exceptions, onlyUserData);
}


// class Object | File: ../Core/Object.h
void CollectMembers_Object(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // Context* Object::GetContext() const
    // Error: type "Context*" can used only as function parameter

    // EventHandler* Object::GetEventHandler() const
    // Error: type "EventHandler*" can not automatically bind

    // virtual const TypeInfo* Object::GetTypeInfo() const =0
    // Error: type "TypeInfo" can not automatically bind bacause have @nobind mark

    // bool Object::IsInstanceOf(const TypeInfo* typeInfo) const
    // Error: type "TypeInfo" can not automatically bind bacause have @nobind mark

    // void Object::SubscribeToEvent(Object* sender, StringHash eventType, EventHandler* handler)
    // Error: type "EventHandler*" can not automatically bind

    // void Object::SubscribeToEvent(Object* sender, StringHash eventType, const std::function<void(StringHash, VariantMap&)>& function, void* userData=nullptr)
    // Error: type "const std::function<void(StringHash, VariantMap&)>&" can not automatically bind

    // void Object::SubscribeToEvent(StringHash eventType, EventHandler* handler)
    // Error: type "EventHandler*" can not automatically bind

    // void Object::SubscribeToEvent(StringHash eventType, const std::function<void(StringHash, VariantMap&)>& function, void* userData=nullptr)
    // Error: type "const std::function<void(StringHash, VariantMap&)>&" can not automatically bind

    // virtual StringHash Object::GetType() const =0
    methods.Push(RegisterObjectMethodArgs("virtual StringHash Object::GetType() const =0", "StringHash GetType() const", AS_METHODPR(Object, GetType, () const, StringHash), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual StringHash Object::GetType() const =0", "StringHash get_type() const", AS_METHODPR(Object, GetType, () const, StringHash), AS_CALL_THISCALL));

    // virtual const String& Object::GetTypeName() const =0
    methods.Push(RegisterObjectMethodArgs("virtual const String& Object::GetTypeName() const =0", "const String& GetTypeName() const", AS_METHODPR(Object, GetTypeName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual const String& Object::GetTypeName() const =0", "const String& get_typeName() const", AS_METHODPR(Object, GetTypeName, () const, const String&), AS_CALL_THISCALL));

    // virtual void Object::OnEvent(Object* sender, StringHash eventType, VariantMap& eventData)
    methods.Push(RegisterObjectMethodArgs("virtual void Object::OnEvent(Object* sender, StringHash eventType, VariantMap& eventData)", "void OnEvent(Object@+, StringHash, VariantMap&)", AS_METHODPR(Object, OnEvent, (Object*, StringHash, VariantMap&), void), AS_CALL_THISCALL));

    // bool Object::IsInstanceOf(StringHash type) const
    methods.Push(RegisterObjectMethodArgs("bool Object::IsInstanceOf(StringHash type) const", "bool IsInstanceOf(StringHash) const", AS_METHODPR(Object, IsInstanceOf, (StringHash) const, bool), AS_CALL_THISCALL));

    // void Object::UnsubscribeFromEvent(StringHash eventType)
    methods.Push(RegisterObjectMethodArgs("void Object::UnsubscribeFromEvent(StringHash eventType)", "void UnsubscribeFromEvent(StringHash)", AS_METHODPR(Object, UnsubscribeFromEvent, (StringHash), void), AS_CALL_THISCALL));

    // void Object::UnsubscribeFromEvent(Object* sender, StringHash eventType)
    methods.Push(RegisterObjectMethodArgs("void Object::UnsubscribeFromEvent(Object* sender, StringHash eventType)", "void UnsubscribeFromEvent(Object@+, StringHash)", AS_METHODPR(Object, UnsubscribeFromEvent, (Object*, StringHash), void), AS_CALL_THISCALL));

    // void Object::UnsubscribeFromEvents(Object* sender)
    methods.Push(RegisterObjectMethodArgs("void Object::UnsubscribeFromEvents(Object* sender)", "void UnsubscribeFromEvents(Object@+)", AS_METHODPR(Object, UnsubscribeFromEvents, (Object*), void), AS_CALL_THISCALL));

    // void Object::UnsubscribeFromAllEvents()
    methods.Push(RegisterObjectMethodArgs("void Object::UnsubscribeFromAllEvents()", "void UnsubscribeFromAllEvents()", AS_METHODPR(Object, UnsubscribeFromAllEvents, (), void), AS_CALL_THISCALL));

    // void Object::UnsubscribeFromAllEventsExcept(const PODVector<StringHash>& exceptions, bool onlyUserData)
    methods.Push(RegisterObjectMethodArgs("void Object::UnsubscribeFromAllEventsExcept(const PODVector<StringHash>& exceptions, bool onlyUserData)", "void UnsubscribeFromAllEventsExcept(Array<StringHash>@+, bool)", AS_FUNCTION_OBJFIRST(Object_UnsubscribeFromAllEventsExcept_PODVectorStringHash_bool), AS_CALL_CDECL_OBJFIRST));

    // void Object::SendEvent(StringHash eventType)
    methods.Push(RegisterObjectMethodArgs("void Object::SendEvent(StringHash eventType)", "void SendEvent(StringHash)", AS_METHODPR(Object, SendEvent, (StringHash), void), AS_CALL_THISCALL));

    // void Object::SendEvent(StringHash eventType, VariantMap& eventData)
    methods.Push(RegisterObjectMethodArgs("void Object::SendEvent(StringHash eventType, VariantMap& eventData)", "void SendEvent(StringHash, VariantMap&)", AS_METHODPR(Object, SendEvent, (StringHash, VariantMap&), void), AS_CALL_THISCALL));

    // VariantMap& Object::GetEventDataMap() const
    methods.Push(RegisterObjectMethodArgs("VariantMap& Object::GetEventDataMap() const", "VariantMap& GetEventDataMap() const", AS_METHODPR(Object, GetEventDataMap, () const, VariantMap&), AS_CALL_THISCALL));

    // const Variant& Object::GetGlobalVar(StringHash key) const
    methods.Push(RegisterObjectMethodArgs("const Variant& Object::GetGlobalVar(StringHash key) const", "const Variant& GetGlobalVar(StringHash) const", AS_METHODPR(Object, GetGlobalVar, (StringHash) const, const Variant&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Variant& Object::GetGlobalVar(StringHash key) const", "const Variant& get_globalVar(StringHash) const", AS_METHODPR(Object, GetGlobalVar, (StringHash) const, const Variant&), AS_CALL_THISCALL));

    // const VariantMap& Object::GetGlobalVars() const
    methods.Push(RegisterObjectMethodArgs("const VariantMap& Object::GetGlobalVars() const", "const VariantMap& GetGlobalVars() const", AS_METHODPR(Object, GetGlobalVars, () const, const VariantMap&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const VariantMap& Object::GetGlobalVars() const", "const VariantMap& get_globalVars() const", AS_METHODPR(Object, GetGlobalVars, () const, const VariantMap&), AS_CALL_THISCALL));

    // void Object::SetGlobalVar(StringHash key, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void Object::SetGlobalVar(StringHash key, const Variant& value)", "void SetGlobalVar(StringHash, const Variant&in)", AS_METHODPR(Object, SetGlobalVar, (StringHash, const Variant&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Object::SetGlobalVar(StringHash key, const Variant& value)", "void set_globalVar(StringHash, const Variant&in)", AS_METHODPR(Object, SetGlobalVar, (StringHash, const Variant&), void), AS_CALL_THISCALL));

    // Object* Object::GetSubsystem(StringHash type) const
    methods.Push(RegisterObjectMethodArgs("Object* Object::GetSubsystem(StringHash type) const", "Object@+ GetSubsystem(StringHash) const", AS_METHODPR(Object, GetSubsystem, (StringHash) const, Object*), AS_CALL_THISCALL));

    // Object* Object::GetEventSender() const
    methods.Push(RegisterObjectMethodArgs("Object* Object::GetEventSender() const", "Object@+ GetEventSender() const", AS_METHODPR(Object, GetEventSender, () const, Object*), AS_CALL_THISCALL));

    // bool Object::HasSubscribedToEvent(StringHash eventType) const
    methods.Push(RegisterObjectMethodArgs("bool Object::HasSubscribedToEvent(StringHash eventType) const", "bool HasSubscribedToEvent(StringHash) const", AS_METHODPR(Object, HasSubscribedToEvent, (StringHash) const, bool), AS_CALL_THISCALL));

    // bool Object::HasSubscribedToEvent(Object* sender, StringHash eventType) const
    methods.Push(RegisterObjectMethodArgs("bool Object::HasSubscribedToEvent(Object* sender, StringHash eventType) const", "bool HasSubscribedToEvent(Object@+, StringHash) const", AS_METHODPR(Object, HasSubscribedToEvent, (Object*, StringHash) const, bool), AS_CALL_THISCALL));

    // bool Object::HasEventHandlers() const
    methods.Push(RegisterObjectMethodArgs("bool Object::HasEventHandlers() const", "bool HasEventHandlers() const", AS_METHODPR(Object, HasEventHandlers, () const, bool), AS_CALL_THISCALL));

    // const String& Object::GetCategory() const
    methods.Push(RegisterObjectMethodArgs("const String& Object::GetCategory() const", "const String& GetCategory() const", AS_METHODPR(Object, GetCategory, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Object::GetCategory() const", "const String& get_category() const", AS_METHODPR(Object, GetCategory, () const, const String&), AS_CALL_THISCALL));

    // void Object::SetBlockEvents(bool block)
    methods.Push(RegisterObjectMethodArgs("void Object::SetBlockEvents(bool block)", "void SetBlockEvents(bool)", AS_METHODPR(Object, SetBlockEvents, (bool), void), AS_CALL_THISCALL));

    // bool Object::GetBlockEvents() const
    methods.Push(RegisterObjectMethodArgs("bool Object::GetBlockEvents() const", "bool GetBlockEvents() const", AS_METHODPR(Object, GetBlockEvents, () const, bool), AS_CALL_THISCALL));
}

// class ObjectAnimation | File: ../Scene/ObjectAnimation.h
void CollectMembers_ObjectAnimation(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // const HashMap<String, SharedPtr<ValueAnimationInfo>>& ObjectAnimation::GetAttributeAnimationInfos() const
    // Error: type "const HashMap<String, SharedPtr<ValueAnimationInfo>>&" can not automatically bind

    // bool ObjectAnimation::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool ObjectAnimation::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(ObjectAnimation, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool ObjectAnimation::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool ObjectAnimation::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(ObjectAnimation, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool ObjectAnimation::LoadXML(const XMLElement& source)
    methods.Push(RegisterObjectMethodArgs("bool ObjectAnimation::LoadXML(const XMLElement& source)", "bool LoadXML(const XMLElement&in)", AS_METHODPR(ObjectAnimation, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool ObjectAnimation::SaveXML(XMLElement& dest) const
    methods.Push(RegisterObjectMethodArgs("bool ObjectAnimation::SaveXML(XMLElement& dest) const", "bool SaveXML(XMLElement&) const", AS_METHODPR(ObjectAnimation, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // bool ObjectAnimation::LoadJSON(const JSONValue& source)
    methods.Push(RegisterObjectMethodArgs("bool ObjectAnimation::LoadJSON(const JSONValue& source)", "bool LoadJSON(const JSONValue&in)", AS_METHODPR(ObjectAnimation, LoadJSON, (const JSONValue&), bool), AS_CALL_THISCALL));

    // bool ObjectAnimation::SaveJSON(JSONValue& dest) const
    methods.Push(RegisterObjectMethodArgs("bool ObjectAnimation::SaveJSON(JSONValue& dest) const", "bool SaveJSON(JSONValue&) const", AS_METHODPR(ObjectAnimation, SaveJSON, (JSONValue&) const, bool), AS_CALL_THISCALL));

    // void ObjectAnimation::AddAttributeAnimation(const String& name, ValueAnimation* attributeAnimation, WrapMode wrapMode=WM_LOOP, float speed=1.0f)
    methods.Push(RegisterObjectMethodArgs("void ObjectAnimation::AddAttributeAnimation(const String& name, ValueAnimation* attributeAnimation, WrapMode wrapMode=WM_LOOP, float speed=1.0f)", "void AddAttributeAnimation(const String&in, ValueAnimation@+, WrapMode = WM_LOOP, float = 1.0f)", AS_METHODPR(ObjectAnimation, AddAttributeAnimation, (const String&, ValueAnimation*, WrapMode, float), void), AS_CALL_THISCALL));

    // void ObjectAnimation::RemoveAttributeAnimation(const String& name)
    methods.Push(RegisterObjectMethodArgs("void ObjectAnimation::RemoveAttributeAnimation(const String& name)", "void RemoveAttributeAnimation(const String&in)", AS_METHODPR(ObjectAnimation, RemoveAttributeAnimation, (const String&), void), AS_CALL_THISCALL));

    // void ObjectAnimation::RemoveAttributeAnimation(ValueAnimation* attributeAnimation)
    methods.Push(RegisterObjectMethodArgs("void ObjectAnimation::RemoveAttributeAnimation(ValueAnimation* attributeAnimation)", "void RemoveAttributeAnimation(ValueAnimation@+)", AS_METHODPR(ObjectAnimation, RemoveAttributeAnimation, (ValueAnimation*), void), AS_CALL_THISCALL));

    // ValueAnimation* ObjectAnimation::GetAttributeAnimation(const String& name) const
    methods.Push(RegisterObjectMethodArgs("ValueAnimation* ObjectAnimation::GetAttributeAnimation(const String& name) const", "ValueAnimation@+ GetAttributeAnimation(const String&in) const", AS_METHODPR(ObjectAnimation, GetAttributeAnimation, (const String&) const, ValueAnimation*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ValueAnimation* ObjectAnimation::GetAttributeAnimation(const String& name) const", "ValueAnimation@+ get_attributeAnimations(const String&in) const", AS_METHODPR(ObjectAnimation, GetAttributeAnimation, (const String&) const, ValueAnimation*), AS_CALL_THISCALL));

    // WrapMode ObjectAnimation::GetAttributeAnimationWrapMode(const String& name) const
    methods.Push(RegisterObjectMethodArgs("WrapMode ObjectAnimation::GetAttributeAnimationWrapMode(const String& name) const", "WrapMode GetAttributeAnimationWrapMode(const String&in) const", AS_METHODPR(ObjectAnimation, GetAttributeAnimationWrapMode, (const String&) const, WrapMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("WrapMode ObjectAnimation::GetAttributeAnimationWrapMode(const String& name) const", "WrapMode get_wrapModes(const String&in) const", AS_METHODPR(ObjectAnimation, GetAttributeAnimationWrapMode, (const String&) const, WrapMode), AS_CALL_THISCALL));

    // float ObjectAnimation::GetAttributeAnimationSpeed(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float ObjectAnimation::GetAttributeAnimationSpeed(const String& name) const", "float GetAttributeAnimationSpeed(const String&in) const", AS_METHODPR(ObjectAnimation, GetAttributeAnimationSpeed, (const String&) const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ObjectAnimation::GetAttributeAnimationSpeed(const String& name) const", "float get_speeds(const String&in) const", AS_METHODPR(ObjectAnimation, GetAttributeAnimationSpeed, (const String&) const, float), AS_CALL_THISCALL));

    // ValueAnimationInfo* ObjectAnimation::GetAttributeAnimationInfo(const String& name) const
    methods.Push(RegisterObjectMethodArgs("ValueAnimationInfo* ObjectAnimation::GetAttributeAnimationInfo(const String& name) const", "ValueAnimationInfo@+ GetAttributeAnimationInfo(const String&in) const", AS_METHODPR(ObjectAnimation, GetAttributeAnimationInfo, (const String&) const, ValueAnimationInfo*), AS_CALL_THISCALL));
}

// virtual SharedPtr<Object> ObjectFactory::CreateObject()=0
// virtual SharedPtr<Object> ObjectFactory::CreateObject()=0 | File: ../Core/Object.h
static Object* ObjectFactory_CreateObject_void(ObjectFactory* ptr)
{
    SharedPtr<Object> result = ptr->CreateObject();
    return result.Detach();
}


// class ObjectFactory | File: ../Core/Object.h
void CollectMembers_ObjectFactory(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // Context* ObjectFactory::GetContext() const
    // Error: type "Context*" can used only as function parameter

    // const TypeInfo* ObjectFactory::GetTypeInfo() const
    // Error: type "TypeInfo" can not automatically bind bacause have @nobind mark

    // virtual SharedPtr<Object> ObjectFactory::CreateObject()=0
    methods.Push(RegisterObjectMethodArgs("virtual SharedPtr<Object> ObjectFactory::CreateObject()=0", "Object@+ CreateObject()", AS_FUNCTION_OBJFIRST(ObjectFactory_CreateObject_void), AS_CALL_CDECL_OBJFIRST));

    // StringHash ObjectFactory::GetType() const
    methods.Push(RegisterObjectMethodArgs("StringHash ObjectFactory::GetType() const", "StringHash GetType() const", AS_METHODPR(ObjectFactory, GetType, () const, StringHash), AS_CALL_THISCALL));

    // const String& ObjectFactory::GetTypeName() const
    methods.Push(RegisterObjectMethodArgs("const String& ObjectFactory::GetTypeName() const", "const String& GetTypeName() const", AS_METHODPR(ObjectFactory, GetTypeName, () const, const String&), AS_CALL_THISCALL));
}

// struct OcclusionBatch | File: ../Graphics/OcclusionBuffer.h
void CollectMembers_OcclusionBatch(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class OcclusionBuffer | File: ../Graphics/OcclusionBuffer.h
void CollectMembers_OcclusionBuffer(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // bool OcclusionBuffer::AddTriangles(const Matrix3x4& model, const void* vertexData, unsigned vertexSize, const void* indexData, unsigned indexSize, unsigned indexStart, unsigned indexCount)
    // Error: type "const void*" can not automatically bind

    // bool OcclusionBuffer::AddTriangles(const Matrix3x4& model, const void* vertexData, unsigned vertexSize, unsigned vertexStart, unsigned vertexCount)
    // Error: type "const void*" can not automatically bind

    // int* OcclusionBuffer::GetBuffer() const
    // Error: type "int*" can not automatically bind

    // bool OcclusionBuffer::SetSize(int width, int height, bool threaded)
    methods.Push(RegisterObjectMethodArgs("bool OcclusionBuffer::SetSize(int width, int height, bool threaded)", "bool SetSize(int, int, bool)", AS_METHODPR(OcclusionBuffer, SetSize, (int, int, bool), bool), AS_CALL_THISCALL));

    // void OcclusionBuffer::SetView(Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::SetView(Camera* camera)", "void SetView(Camera@+)", AS_METHODPR(OcclusionBuffer, SetView, (Camera*), void), AS_CALL_THISCALL));

    // void OcclusionBuffer::SetMaxTriangles(unsigned triangles)
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::SetMaxTriangles(unsigned triangles)", "void SetMaxTriangles(uint)", AS_METHODPR(OcclusionBuffer, SetMaxTriangles, (unsigned), void), AS_CALL_THISCALL));

    // void OcclusionBuffer::SetCullMode(CullMode mode)
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::SetCullMode(CullMode mode)", "void SetCullMode(CullMode)", AS_METHODPR(OcclusionBuffer, SetCullMode, (CullMode), void), AS_CALL_THISCALL));

    // void OcclusionBuffer::Reset()
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::Reset()", "void Reset()", AS_METHODPR(OcclusionBuffer, Reset, (), void), AS_CALL_THISCALL));

    // void OcclusionBuffer::Clear()
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::Clear()", "void Clear()", AS_METHODPR(OcclusionBuffer, Clear, (), void), AS_CALL_THISCALL));

    // void OcclusionBuffer::DrawTriangles()
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::DrawTriangles()", "void DrawTriangles()", AS_METHODPR(OcclusionBuffer, DrawTriangles, (), void), AS_CALL_THISCALL));

    // void OcclusionBuffer::BuildDepthHierarchy()
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::BuildDepthHierarchy()", "void BuildDepthHierarchy()", AS_METHODPR(OcclusionBuffer, BuildDepthHierarchy, (), void), AS_CALL_THISCALL));

    // void OcclusionBuffer::ResetUseTimer()
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::ResetUseTimer()", "void ResetUseTimer()", AS_METHODPR(OcclusionBuffer, ResetUseTimer, (), void), AS_CALL_THISCALL));

    // const Matrix3x4& OcclusionBuffer::GetView() const
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& OcclusionBuffer::GetView() const", "const Matrix3x4& GetView() const", AS_METHODPR(OcclusionBuffer, GetView, () const, const Matrix3x4&), AS_CALL_THISCALL));

    // const Matrix4& OcclusionBuffer::GetProjection() const
    methods.Push(RegisterObjectMethodArgs("const Matrix4& OcclusionBuffer::GetProjection() const", "const Matrix4& GetProjection() const", AS_METHODPR(OcclusionBuffer, GetProjection, () const, const Matrix4&), AS_CALL_THISCALL));

    // int OcclusionBuffer::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int OcclusionBuffer::GetWidth() const", "int GetWidth() const", AS_METHODPR(OcclusionBuffer, GetWidth, () const, int), AS_CALL_THISCALL));

    // int OcclusionBuffer::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int OcclusionBuffer::GetHeight() const", "int GetHeight() const", AS_METHODPR(OcclusionBuffer, GetHeight, () const, int), AS_CALL_THISCALL));

    // unsigned OcclusionBuffer::GetNumTriangles() const
    methods.Push(RegisterObjectMethodArgs("unsigned OcclusionBuffer::GetNumTriangles() const", "uint GetNumTriangles() const", AS_METHODPR(OcclusionBuffer, GetNumTriangles, () const, unsigned), AS_CALL_THISCALL));

    // unsigned OcclusionBuffer::GetMaxTriangles() const
    methods.Push(RegisterObjectMethodArgs("unsigned OcclusionBuffer::GetMaxTriangles() const", "uint GetMaxTriangles() const", AS_METHODPR(OcclusionBuffer, GetMaxTriangles, () const, unsigned), AS_CALL_THISCALL));

    // CullMode OcclusionBuffer::GetCullMode() const
    methods.Push(RegisterObjectMethodArgs("CullMode OcclusionBuffer::GetCullMode() const", "CullMode GetCullMode() const", AS_METHODPR(OcclusionBuffer, GetCullMode, () const, CullMode), AS_CALL_THISCALL));

    // bool OcclusionBuffer::IsThreaded() const
    methods.Push(RegisterObjectMethodArgs("bool OcclusionBuffer::IsThreaded() const", "bool IsThreaded() const", AS_METHODPR(OcclusionBuffer, IsThreaded, () const, bool), AS_CALL_THISCALL));

    // bool OcclusionBuffer::IsVisible(const BoundingBox& worldSpaceBox) const
    methods.Push(RegisterObjectMethodArgs("bool OcclusionBuffer::IsVisible(const BoundingBox& worldSpaceBox) const", "bool IsVisible(const BoundingBox&in) const", AS_METHODPR(OcclusionBuffer, IsVisible, (const BoundingBox&) const, bool), AS_CALL_THISCALL));

    // unsigned OcclusionBuffer::GetUseTimer()
    methods.Push(RegisterObjectMethodArgs("unsigned OcclusionBuffer::GetUseTimer()", "uint GetUseTimer()", AS_METHODPR(OcclusionBuffer, GetUseTimer, (), unsigned), AS_CALL_THISCALL));

    // void OcclusionBuffer::DrawBatch(const OcclusionBatch& batch, unsigned threadIndex)
    methods.Push(RegisterObjectMethodArgs("void OcclusionBuffer::DrawBatch(const OcclusionBatch& batch, unsigned threadIndex)", "void DrawBatch(const OcclusionBatch&in, uint)", AS_METHODPR(OcclusionBuffer, DrawBatch, (const OcclusionBatch&, unsigned), void), AS_CALL_THISCALL));
}

// struct OcclusionBufferData | File: ../Graphics/OcclusionBuffer.h
void CollectMembers_OcclusionBufferData(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Octant | File: ../Graphics/Octree.h
void CollectMembers_Octant(Vector<RegisterObjectMethodArgs>& methods)
{
    // Octant* Octant::GetOrCreateChild(unsigned index)
    // Error: type "Octant" can not automatically bind bacause have @nobind mark

    // Octant* Octant::GetParent() const
    // Error: type "Octant" can not automatically bind bacause have @nobind mark

    // void Octant::DeleteChild(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void Octant::DeleteChild(unsigned index)", "void DeleteChild(uint)", AS_METHODPR(Octant, DeleteChild, (unsigned), void), AS_CALL_THISCALL));

    // void Octant::InsertDrawable(Drawable* drawable)
    methods.Push(RegisterObjectMethodArgs("void Octant::InsertDrawable(Drawable* drawable)", "void InsertDrawable(Drawable@+)", AS_METHODPR(Octant, InsertDrawable, (Drawable*), void), AS_CALL_THISCALL));

    // bool Octant::CheckDrawableFit(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("bool Octant::CheckDrawableFit(const BoundingBox& box) const", "bool CheckDrawableFit(const BoundingBox&in) const", AS_METHODPR(Octant, CheckDrawableFit, (const BoundingBox&) const, bool), AS_CALL_THISCALL));

    // void Octant::AddDrawable(Drawable* drawable)
    methods.Push(RegisterObjectMethodArgs("void Octant::AddDrawable(Drawable* drawable)", "void AddDrawable(Drawable@+)", AS_METHODPR(Octant, AddDrawable, (Drawable*), void), AS_CALL_THISCALL));

    // void Octant::RemoveDrawable(Drawable* drawable, bool resetOctant=true)
    methods.Push(RegisterObjectMethodArgs("void Octant::RemoveDrawable(Drawable* drawable, bool resetOctant=true)", "void RemoveDrawable(Drawable@+, bool = true)", AS_METHODPR(Octant, RemoveDrawable, (Drawable*, bool), void), AS_CALL_THISCALL));

    // const BoundingBox& Octant::GetWorldBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Octant::GetWorldBoundingBox() const", "const BoundingBox& GetWorldBoundingBox() const", AS_METHODPR(Octant, GetWorldBoundingBox, () const, const BoundingBox&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Octant::GetWorldBoundingBox() const", "const BoundingBox& get_worldBoundingBox() const", AS_METHODPR(Octant, GetWorldBoundingBox, () const, const BoundingBox&), AS_CALL_THISCALL));

    // const BoundingBox& Octant::GetCullingBox() const
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& Octant::GetCullingBox() const", "const BoundingBox& GetCullingBox() const", AS_METHODPR(Octant, GetCullingBox, () const, const BoundingBox&), AS_CALL_THISCALL));

    // unsigned Octant::GetLevel() const
    methods.Push(RegisterObjectMethodArgs("unsigned Octant::GetLevel() const", "uint GetLevel() const", AS_METHODPR(Octant, GetLevel, () const, unsigned), AS_CALL_THISCALL));

    // Octree* Octant::GetRoot() const
    methods.Push(RegisterObjectMethodArgs("Octree* Octant::GetRoot() const", "Octree@+ GetRoot() const", AS_METHODPR(Octant, GetRoot, () const, Octree*), AS_CALL_THISCALL));

    // unsigned Octant::GetNumDrawables() const
    methods.Push(RegisterObjectMethodArgs("unsigned Octant::GetNumDrawables() const", "uint GetNumDrawables() const", AS_METHODPR(Octant, GetNumDrawables, () const, unsigned), AS_CALL_THISCALL));

    // bool Octant::IsEmpty()
    methods.Push(RegisterObjectMethodArgs("bool Octant::IsEmpty()", "bool IsEmpty()", AS_METHODPR(Octant, IsEmpty, (), bool), AS_CALL_THISCALL));

    // void Octant::ResetRoot()
    methods.Push(RegisterObjectMethodArgs("void Octant::ResetRoot()", "void ResetRoot()", AS_METHODPR(Octant, ResetRoot, (), void), AS_CALL_THISCALL));

    // void Octant::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void Octant::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Octant, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));
}

// class Octree | File: ../Graphics/Octree.h
void CollectMembers_Octree(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);
    CollectMembers_Octant(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "void Octant::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // void Octree::Raycast(RayOctreeQuery& query) const
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void Octree::RaycastSingle(RayOctreeQuery& query) const
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void Octree::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void Octree::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Octree, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void Octree::SetSize(const BoundingBox& box, unsigned numLevels)
    methods.Push(RegisterObjectMethodArgs("void Octree::SetSize(const BoundingBox& box, unsigned numLevels)", "void SetSize(const BoundingBox&in, uint)", AS_METHODPR(Octree, SetSize, (const BoundingBox&, unsigned), void), AS_CALL_THISCALL));

    // void Octree::Update(const FrameInfo& frame)
    methods.Push(RegisterObjectMethodArgs("void Octree::Update(const FrameInfo& frame)", "void Update(const FrameInfo&in)", AS_METHODPR(Octree, Update, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void Octree::AddManualDrawable(Drawable* drawable)
    methods.Push(RegisterObjectMethodArgs("void Octree::AddManualDrawable(Drawable* drawable)", "void AddManualDrawable(Drawable@+)", AS_METHODPR(Octree, AddManualDrawable, (Drawable*), void), AS_CALL_THISCALL));

    // void Octree::RemoveManualDrawable(Drawable* drawable)
    methods.Push(RegisterObjectMethodArgs("void Octree::RemoveManualDrawable(Drawable* drawable)", "void RemoveManualDrawable(Drawable@+)", AS_METHODPR(Octree, RemoveManualDrawable, (Drawable*), void), AS_CALL_THISCALL));

    // unsigned Octree::GetNumLevels() const
    methods.Push(RegisterObjectMethodArgs("unsigned Octree::GetNumLevels() const", "uint GetNumLevels() const", AS_METHODPR(Octree, GetNumLevels, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Octree::GetNumLevels() const", "uint get_numLevels() const", AS_METHODPR(Octree, GetNumLevels, () const, unsigned), AS_CALL_THISCALL));

    // void Octree::QueueUpdate(Drawable* drawable)
    methods.Push(RegisterObjectMethodArgs("void Octree::QueueUpdate(Drawable* drawable)", "void QueueUpdate(Drawable@+)", AS_METHODPR(Octree, QueueUpdate, (Drawable*), void), AS_CALL_THISCALL));

    // void Octree::CancelUpdate(Drawable* drawable)
    methods.Push(RegisterObjectMethodArgs("void Octree::CancelUpdate(Drawable* drawable)", "void CancelUpdate(Drawable@+)", AS_METHODPR(Octree, CancelUpdate, (Drawable*), void), AS_CALL_THISCALL));

    // void Octree::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void Octree::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(Octree, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));
}

// class OctreeQuery | File: ../Graphics/OctreeQuery.h
void CollectMembers_OctreeQuery(Vector<RegisterObjectMethodArgs>& methods)
{
    // virtual void OctreeQuery::TestDrawables(Drawable** start, Drawable** end, bool inside)=0
    // Error: type "Drawable**" can not automatically bind

    // virtual Intersection OctreeQuery::TestOctant(const BoundingBox& box, bool inside)=0
    methods.Push(RegisterObjectMethodArgs("virtual Intersection OctreeQuery::TestOctant(const BoundingBox& box, bool inside)=0", "Intersection TestOctant(const BoundingBox&in, bool)", AS_METHODPR(OctreeQuery, TestOctant, (const BoundingBox&, bool), Intersection), AS_CALL_THISCALL));
}

// struct OctreeQueryResult | File: ../Graphics/OctreeQuery.h
void CollectMembers_OctreeQueryResult(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool OctreeQueryResult::operator!=(const OctreeQueryResult& rhs) const
    // Only operator== is needed
}

// class OggVorbisSoundStream | File: ../Audio/OggVorbisSoundStream.h
void CollectMembers_OggVorbisSoundStream(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_SoundStream(methods);

    Remove(methods, "virtual bool SoundStream::Seek(unsigned sample_number)");
    Remove(methods, "virtual unsigned SoundStream::GetData(signed char* dest, unsigned numBytes)=0");

    // unsigned OggVorbisSoundStream::GetData(signed char* dest, unsigned numBytes) override
    // Error: type "signed char*" can not automatically bind

    // bool OggVorbisSoundStream::Seek(unsigned sample_number) override
    methods.Push(RegisterObjectMethodArgs("bool OggVorbisSoundStream::Seek(unsigned sample_number) override", "bool Seek(uint)", AS_METHODPR(OggVorbisSoundStream, Seek, (unsigned), bool), AS_CALL_THISCALL));
}

// struct PackageEntry | File: ../IO/PackageFile.h
void CollectMembers_PackageEntry(Vector<RegisterObjectMethodArgs>& methods)
{
}

// const Vector<String> PackageFile::GetEntryNames() const
// const Vector<String> PackageFile::GetEntryNames() const | File: ../IO/PackageFile.h
static CScriptArray* PackageFile_GetEntryNames_void(PackageFile* ptr)
{
    const Vector<String> result = ptr->GetEntryNames();
    return VectorToArray<String>(result, "Array<String>");
}


// class PackageFile | File: ../IO/PackageFile.h
void CollectMembers_PackageFile(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // const HashMap<String, PackageEntry>& PackageFile::GetEntries() const
    // Error: type "const HashMap<String, PackageEntry>&" can not automatically bind

    // const PackageEntry* PackageFile::GetEntry(const String& fileName) const
    // Error: type "const PackageEntry*" can not automatically bind

    // bool PackageFile::Open(const String& fileName, unsigned startOffset=0)
    methods.Push(RegisterObjectMethodArgs("bool PackageFile::Open(const String& fileName, unsigned startOffset=0)", "bool Open(const String&in, uint = 0)", AS_METHODPR(PackageFile, Open, (const String&, unsigned), bool), AS_CALL_THISCALL));

    // bool PackageFile::Exists(const String& fileName) const
    methods.Push(RegisterObjectMethodArgs("bool PackageFile::Exists(const String& fileName) const", "bool Exists(const String&in) const", AS_METHODPR(PackageFile, Exists, (const String&) const, bool), AS_CALL_THISCALL));

    // const String& PackageFile::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& PackageFile::GetName() const", "const String& GetName() const", AS_METHODPR(PackageFile, GetName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& PackageFile::GetName() const", "const String& get_name() const", AS_METHODPR(PackageFile, GetName, () const, const String&), AS_CALL_THISCALL));

    // StringHash PackageFile::GetNameHash() const
    methods.Push(RegisterObjectMethodArgs("StringHash PackageFile::GetNameHash() const", "StringHash GetNameHash() const", AS_METHODPR(PackageFile, GetNameHash, () const, StringHash), AS_CALL_THISCALL));

    // unsigned PackageFile::GetNumFiles() const
    methods.Push(RegisterObjectMethodArgs("unsigned PackageFile::GetNumFiles() const", "uint GetNumFiles() const", AS_METHODPR(PackageFile, GetNumFiles, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned PackageFile::GetNumFiles() const", "uint get_numFiles() const", AS_METHODPR(PackageFile, GetNumFiles, () const, unsigned), AS_CALL_THISCALL));

    // unsigned PackageFile::GetTotalSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned PackageFile::GetTotalSize() const", "uint GetTotalSize() const", AS_METHODPR(PackageFile, GetTotalSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned PackageFile::GetTotalSize() const", "uint get_totalSize() const", AS_METHODPR(PackageFile, GetTotalSize, () const, unsigned), AS_CALL_THISCALL));

    // unsigned PackageFile::GetTotalDataSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned PackageFile::GetTotalDataSize() const", "uint GetTotalDataSize() const", AS_METHODPR(PackageFile, GetTotalDataSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned PackageFile::GetTotalDataSize() const", "uint get_totalDataSize() const", AS_METHODPR(PackageFile, GetTotalDataSize, () const, unsigned), AS_CALL_THISCALL));

    // unsigned PackageFile::GetChecksum() const
    methods.Push(RegisterObjectMethodArgs("unsigned PackageFile::GetChecksum() const", "uint GetChecksum() const", AS_METHODPR(PackageFile, GetChecksum, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned PackageFile::GetChecksum() const", "uint get_checksum() const", AS_METHODPR(PackageFile, GetChecksum, () const, unsigned), AS_CALL_THISCALL));

    // bool PackageFile::IsCompressed() const
    methods.Push(RegisterObjectMethodArgs("bool PackageFile::IsCompressed() const", "bool IsCompressed() const", AS_METHODPR(PackageFile, IsCompressed, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PackageFile::IsCompressed() const", "bool get_compressed() const", AS_METHODPR(PackageFile, IsCompressed, () const, bool), AS_CALL_THISCALL));

    // const Vector<String> PackageFile::GetEntryNames() const
    methods.Push(RegisterObjectMethodArgs("const Vector<String> PackageFile::GetEntryNames() const", "Array<String>@ GetEntryNames() const", AS_FUNCTION_OBJFIRST(PackageFile_GetEntryNames_void), AS_CALL_CDECL_OBJFIRST));
}

// struct Particle | File: ../Graphics/ParticleEmitter.h
void CollectMembers_Particle(Vector<RegisterObjectMethodArgs>& methods)
{
}

// SharedPtr<ParticleEffect> ParticleEffect::Clone(const String& cloneName=String::EMPTY) const
// SharedPtr<ParticleEffect> ParticleEffect::Clone(const String& cloneName=String::EMPTY) const | File: ../Graphics/ParticleEffect.h
static ParticleEffect* ParticleEffect_Clone_String(ParticleEffect* ptr, const String& cloneName)
{
    SharedPtr<ParticleEffect> result = ptr->Clone(cloneName);
    return result.Detach();
}


// class ParticleEffect | File: ../Graphics/ParticleEffect.h
void CollectMembers_ParticleEffect(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "bool Resource::Load(Deserializer& source)");
    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // const Vector<ColorFrame>& ParticleEffect::GetColorFrames() const
    // Error: type "const Vector<ColorFrame>&" can not automatically bind

    // const Vector<TextureFrame>& ParticleEffect::GetTextureFrames() const
    // Error: type "const Vector<TextureFrame>&" can not automatically bind

    // void ParticleEffect::SetColorFrames(const Vector<ColorFrame>& colorFrames)
    // Error: type "const Vector<ColorFrame>&" can not automatically bind

    // void ParticleEffect::SetTextureFrames(const Vector<TextureFrame>& textureFrames)
    // Error: type "const Vector<TextureFrame>&" can not automatically bind

    // bool ParticleEffect::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(ParticleEffect, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool ParticleEffect::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::EndLoad() override", "bool EndLoad()", AS_METHODPR(ParticleEffect, EndLoad, (), bool), AS_CALL_THISCALL));

    // bool ParticleEffect::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(ParticleEffect, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool ParticleEffect::Save(XMLElement& dest) const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::Save(XMLElement& dest) const", "bool Save(XMLElement&) const", AS_METHODPR(ParticleEffect, Save, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // bool ParticleEffect::Load(const XMLElement& source)
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::Load(const XMLElement& source)", "bool Load(const XMLElement&in)", AS_METHODPR(ParticleEffect, Load, (const XMLElement&), bool), AS_CALL_THISCALL));

    // void ParticleEffect::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(ParticleEffect, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(ParticleEffect, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetNumParticles(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetNumParticles(unsigned num)", "void SetNumParticles(uint)", AS_METHODPR(ParticleEffect, SetNumParticles, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetNumParticles(unsigned num)", "void set_numParticles(uint)", AS_METHODPR(ParticleEffect, SetNumParticles, (unsigned), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetUpdateInvisible(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetUpdateInvisible(bool enable)", "void SetUpdateInvisible(bool)", AS_METHODPR(ParticleEffect, SetUpdateInvisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetUpdateInvisible(bool enable)", "void set_updateInvisible(bool)", AS_METHODPR(ParticleEffect, SetUpdateInvisible, (bool), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetRelative(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetRelative(bool enable)", "void SetRelative(bool)", AS_METHODPR(ParticleEffect, SetRelative, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetRelative(bool enable)", "void set_relative(bool)", AS_METHODPR(ParticleEffect, SetRelative, (bool), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetScaled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetScaled(bool enable)", "void SetScaled(bool)", AS_METHODPR(ParticleEffect, SetScaled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetScaled(bool enable)", "void set_scaled(bool)", AS_METHODPR(ParticleEffect, SetScaled, (bool), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetSorted(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetSorted(bool enable)", "void SetSorted(bool)", AS_METHODPR(ParticleEffect, SetSorted, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetSorted(bool enable)", "void set_sorted(bool)", AS_METHODPR(ParticleEffect, SetSorted, (bool), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetFixedScreenSize(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetFixedScreenSize(bool enable)", "void SetFixedScreenSize(bool)", AS_METHODPR(ParticleEffect, SetFixedScreenSize, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetFixedScreenSize(bool enable)", "void set_fixedScreenSize(bool)", AS_METHODPR(ParticleEffect, SetFixedScreenSize, (bool), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetAnimationLodBias(float lodBias)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetAnimationLodBias(float lodBias)", "void SetAnimationLodBias(float)", AS_METHODPR(ParticleEffect, SetAnimationLodBias, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetAnimationLodBias(float lodBias)", "void set_animationLodBias(float)", AS_METHODPR(ParticleEffect, SetAnimationLodBias, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetEmitterType(EmitterType type)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetEmitterType(EmitterType type)", "void SetEmitterType(EmitterType)", AS_METHODPR(ParticleEffect, SetEmitterType, (EmitterType), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetEmitterType(EmitterType type)", "void set_emitterType(EmitterType)", AS_METHODPR(ParticleEffect, SetEmitterType, (EmitterType), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetEmitterSize(const Vector3& size)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetEmitterSize(const Vector3& size)", "void SetEmitterSize(const Vector3&in)", AS_METHODPR(ParticleEffect, SetEmitterSize, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetEmitterSize(const Vector3& size)", "void set_emitterSize(const Vector3&in)", AS_METHODPR(ParticleEffect, SetEmitterSize, (const Vector3&), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMinDirection(const Vector3& direction)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinDirection(const Vector3& direction)", "void SetMinDirection(const Vector3&in)", AS_METHODPR(ParticleEffect, SetMinDirection, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinDirection(const Vector3& direction)", "void set_minDirection(const Vector3&in)", AS_METHODPR(ParticleEffect, SetMinDirection, (const Vector3&), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMaxDirection(const Vector3& direction)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxDirection(const Vector3& direction)", "void SetMaxDirection(const Vector3&in)", AS_METHODPR(ParticleEffect, SetMaxDirection, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxDirection(const Vector3& direction)", "void set_maxDirection(const Vector3&in)", AS_METHODPR(ParticleEffect, SetMaxDirection, (const Vector3&), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetConstantForce(const Vector3& force)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetConstantForce(const Vector3& force)", "void SetConstantForce(const Vector3&in)", AS_METHODPR(ParticleEffect, SetConstantForce, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetConstantForce(const Vector3& force)", "void set_constantForce(const Vector3&in)", AS_METHODPR(ParticleEffect, SetConstantForce, (const Vector3&), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetDampingForce(float force)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetDampingForce(float force)", "void SetDampingForce(float)", AS_METHODPR(ParticleEffect, SetDampingForce, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetDampingForce(float force)", "void set_dampingForce(float)", AS_METHODPR(ParticleEffect, SetDampingForce, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetActiveTime(float time)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetActiveTime(float time)", "void SetActiveTime(float)", AS_METHODPR(ParticleEffect, SetActiveTime, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetActiveTime(float time)", "void set_activeTime(float)", AS_METHODPR(ParticleEffect, SetActiveTime, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetInactiveTime(float time)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetInactiveTime(float time)", "void SetInactiveTime(float)", AS_METHODPR(ParticleEffect, SetInactiveTime, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetInactiveTime(float time)", "void set_inactiveTime(float)", AS_METHODPR(ParticleEffect, SetInactiveTime, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMinEmissionRate(float rate)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinEmissionRate(float rate)", "void SetMinEmissionRate(float)", AS_METHODPR(ParticleEffect, SetMinEmissionRate, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinEmissionRate(float rate)", "void set_minEmissionRate(float)", AS_METHODPR(ParticleEffect, SetMinEmissionRate, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMaxEmissionRate(float rate)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxEmissionRate(float rate)", "void SetMaxEmissionRate(float)", AS_METHODPR(ParticleEffect, SetMaxEmissionRate, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxEmissionRate(float rate)", "void set_maxEmissionRate(float)", AS_METHODPR(ParticleEffect, SetMaxEmissionRate, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMinParticleSize(const Vector2& size)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinParticleSize(const Vector2& size)", "void SetMinParticleSize(const Vector2&in)", AS_METHODPR(ParticleEffect, SetMinParticleSize, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinParticleSize(const Vector2& size)", "void set_minParticleSize(const Vector2&in)", AS_METHODPR(ParticleEffect, SetMinParticleSize, (const Vector2&), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMaxParticleSize(const Vector2& size)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxParticleSize(const Vector2& size)", "void SetMaxParticleSize(const Vector2&in)", AS_METHODPR(ParticleEffect, SetMaxParticleSize, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxParticleSize(const Vector2& size)", "void set_maxParticleSize(const Vector2&in)", AS_METHODPR(ParticleEffect, SetMaxParticleSize, (const Vector2&), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMinTimeToLive(float time)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinTimeToLive(float time)", "void SetMinTimeToLive(float)", AS_METHODPR(ParticleEffect, SetMinTimeToLive, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinTimeToLive(float time)", "void set_minTimeToLive(float)", AS_METHODPR(ParticleEffect, SetMinTimeToLive, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMaxTimeToLive(float time)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxTimeToLive(float time)", "void SetMaxTimeToLive(float)", AS_METHODPR(ParticleEffect, SetMaxTimeToLive, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxTimeToLive(float time)", "void set_maxTimeToLive(float)", AS_METHODPR(ParticleEffect, SetMaxTimeToLive, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMinVelocity(float velocity)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinVelocity(float velocity)", "void SetMinVelocity(float)", AS_METHODPR(ParticleEffect, SetMinVelocity, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinVelocity(float velocity)", "void set_minVelocity(float)", AS_METHODPR(ParticleEffect, SetMinVelocity, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMaxVelocity(float velocity)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxVelocity(float velocity)", "void SetMaxVelocity(float)", AS_METHODPR(ParticleEffect, SetMaxVelocity, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxVelocity(float velocity)", "void set_maxVelocity(float)", AS_METHODPR(ParticleEffect, SetMaxVelocity, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMinRotation(float rotation)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinRotation(float rotation)", "void SetMinRotation(float)", AS_METHODPR(ParticleEffect, SetMinRotation, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinRotation(float rotation)", "void set_minRotation(float)", AS_METHODPR(ParticleEffect, SetMinRotation, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMaxRotation(float rotation)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxRotation(float rotation)", "void SetMaxRotation(float)", AS_METHODPR(ParticleEffect, SetMaxRotation, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxRotation(float rotation)", "void set_maxRotation(float)", AS_METHODPR(ParticleEffect, SetMaxRotation, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMinRotationSpeed(float speed)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinRotationSpeed(float speed)", "void SetMinRotationSpeed(float)", AS_METHODPR(ParticleEffect, SetMinRotationSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMinRotationSpeed(float speed)", "void set_minRotationSpeed(float)", AS_METHODPR(ParticleEffect, SetMinRotationSpeed, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetMaxRotationSpeed(float speed)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxRotationSpeed(float speed)", "void SetMaxRotationSpeed(float)", AS_METHODPR(ParticleEffect, SetMaxRotationSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetMaxRotationSpeed(float speed)", "void set_maxRotationSpeed(float)", AS_METHODPR(ParticleEffect, SetMaxRotationSpeed, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetSizeAdd(float sizeAdd)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetSizeAdd(float sizeAdd)", "void SetSizeAdd(float)", AS_METHODPR(ParticleEffect, SetSizeAdd, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetSizeAdd(float sizeAdd)", "void set_sizeAdd(float)", AS_METHODPR(ParticleEffect, SetSizeAdd, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetSizeMul(float sizeMul)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetSizeMul(float sizeMul)", "void SetSizeMul(float)", AS_METHODPR(ParticleEffect, SetSizeMul, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetSizeMul(float sizeMul)", "void set_sizeMul(float)", AS_METHODPR(ParticleEffect, SetSizeMul, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetFaceCameraMode(FaceCameraMode mode)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetFaceCameraMode(FaceCameraMode mode)", "void SetFaceCameraMode(FaceCameraMode)", AS_METHODPR(ParticleEffect, SetFaceCameraMode, (FaceCameraMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetFaceCameraMode(FaceCameraMode mode)", "void set_faceCameraMode(FaceCameraMode)", AS_METHODPR(ParticleEffect, SetFaceCameraMode, (FaceCameraMode), void), AS_CALL_THISCALL));

    // void ParticleEffect::AddColorTime(const Color& color, float time)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::AddColorTime(const Color& color, float time)", "void AddColorTime(const Color&in, float)", AS_METHODPR(ParticleEffect, AddColorTime, (const Color&, float), void), AS_CALL_THISCALL));

    // void ParticleEffect::AddColorFrame(const ColorFrame& colorFrame)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::AddColorFrame(const ColorFrame& colorFrame)", "void AddColorFrame(const ColorFrame&in)", AS_METHODPR(ParticleEffect, AddColorFrame, (const ColorFrame&), void), AS_CALL_THISCALL));

    // void ParticleEffect::RemoveColorFrame(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::RemoveColorFrame(unsigned index)", "void RemoveColorFrame(uint)", AS_METHODPR(ParticleEffect, RemoveColorFrame, (unsigned), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetColorFrame(unsigned index, const ColorFrame& colorFrame)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetColorFrame(unsigned index, const ColorFrame& colorFrame)", "void SetColorFrame(uint, const ColorFrame&in)", AS_METHODPR(ParticleEffect, SetColorFrame, (unsigned, const ColorFrame&), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetNumColorFrames(unsigned number)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetNumColorFrames(unsigned number)", "void SetNumColorFrames(uint)", AS_METHODPR(ParticleEffect, SetNumColorFrames, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetNumColorFrames(unsigned number)", "void set_numColorFrames(uint)", AS_METHODPR(ParticleEffect, SetNumColorFrames, (unsigned), void), AS_CALL_THISCALL));

    // void ParticleEffect::SortColorFrames()
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SortColorFrames()", "void SortColorFrames()", AS_METHODPR(ParticleEffect, SortColorFrames, (), void), AS_CALL_THISCALL));

    // void ParticleEffect::AddTextureTime(const Rect& uv, float time)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::AddTextureTime(const Rect& uv, float time)", "void AddTextureTime(const Rect&in, float)", AS_METHODPR(ParticleEffect, AddTextureTime, (const Rect&, float), void), AS_CALL_THISCALL));

    // void ParticleEffect::AddTextureFrame(const TextureFrame& textureFrame)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::AddTextureFrame(const TextureFrame& textureFrame)", "void AddTextureFrame(const TextureFrame&in)", AS_METHODPR(ParticleEffect, AddTextureFrame, (const TextureFrame&), void), AS_CALL_THISCALL));

    // void ParticleEffect::RemoveTextureFrame(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::RemoveTextureFrame(unsigned index)", "void RemoveTextureFrame(uint)", AS_METHODPR(ParticleEffect, RemoveTextureFrame, (unsigned), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetTextureFrame(unsigned index, const TextureFrame& textureFrame)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetTextureFrame(unsigned index, const TextureFrame& textureFrame)", "void SetTextureFrame(uint, const TextureFrame&in)", AS_METHODPR(ParticleEffect, SetTextureFrame, (unsigned, const TextureFrame&), void), AS_CALL_THISCALL));

    // void ParticleEffect::SetNumTextureFrames(unsigned number)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetNumTextureFrames(unsigned number)", "void SetNumTextureFrames(uint)", AS_METHODPR(ParticleEffect, SetNumTextureFrames, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SetNumTextureFrames(unsigned number)", "void set_numTextureFrames(uint)", AS_METHODPR(ParticleEffect, SetNumTextureFrames, (unsigned), void), AS_CALL_THISCALL));

    // void ParticleEffect::SortTextureFrames()
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect::SortTextureFrames()", "void SortTextureFrames()", AS_METHODPR(ParticleEffect, SortTextureFrames, (), void), AS_CALL_THISCALL));

    // SharedPtr<ParticleEffect> ParticleEffect::Clone(const String& cloneName=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<ParticleEffect> ParticleEffect::Clone(const String& cloneName=String::EMPTY) const", "ParticleEffect@+ Clone(const String&in = String::EMPTY) const", AS_FUNCTION_OBJFIRST(ParticleEffect_Clone_String), AS_CALL_CDECL_OBJFIRST));

    // Material* ParticleEffect::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* ParticleEffect::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(ParticleEffect, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* ParticleEffect::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(ParticleEffect, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // unsigned ParticleEffect::GetNumParticles() const
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEffect::GetNumParticles() const", "uint GetNumParticles() const", AS_METHODPR(ParticleEffect, GetNumParticles, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEffect::GetNumParticles() const", "uint get_numParticles() const", AS_METHODPR(ParticleEffect, GetNumParticles, () const, unsigned), AS_CALL_THISCALL));

    // bool ParticleEffect::GetUpdateInvisible() const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::GetUpdateInvisible() const", "bool GetUpdateInvisible() const", AS_METHODPR(ParticleEffect, GetUpdateInvisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::GetUpdateInvisible() const", "bool get_updateInvisible() const", AS_METHODPR(ParticleEffect, GetUpdateInvisible, () const, bool), AS_CALL_THISCALL));

    // bool ParticleEffect::IsRelative() const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::IsRelative() const", "bool IsRelative() const", AS_METHODPR(ParticleEffect, IsRelative, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::IsRelative() const", "bool get_relative() const", AS_METHODPR(ParticleEffect, IsRelative, () const, bool), AS_CALL_THISCALL));

    // bool ParticleEffect::IsScaled() const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::IsScaled() const", "bool IsScaled() const", AS_METHODPR(ParticleEffect, IsScaled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::IsScaled() const", "bool get_scaled() const", AS_METHODPR(ParticleEffect, IsScaled, () const, bool), AS_CALL_THISCALL));

    // bool ParticleEffect::IsSorted() const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::IsSorted() const", "bool IsSorted() const", AS_METHODPR(ParticleEffect, IsSorted, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::IsSorted() const", "bool get_sorted() const", AS_METHODPR(ParticleEffect, IsSorted, () const, bool), AS_CALL_THISCALL));

    // bool ParticleEffect::IsFixedScreenSize() const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::IsFixedScreenSize() const", "bool IsFixedScreenSize() const", AS_METHODPR(ParticleEffect, IsFixedScreenSize, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect::IsFixedScreenSize() const", "bool get_fixedScreenSize() const", AS_METHODPR(ParticleEffect, IsFixedScreenSize, () const, bool), AS_CALL_THISCALL));

    // float ParticleEffect::GetAnimationLodBias() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetAnimationLodBias() const", "float GetAnimationLodBias() const", AS_METHODPR(ParticleEffect, GetAnimationLodBias, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetAnimationLodBias() const", "float get_animationLodBias() const", AS_METHODPR(ParticleEffect, GetAnimationLodBias, () const, float), AS_CALL_THISCALL));

    // EmitterType ParticleEffect::GetEmitterType() const
    methods.Push(RegisterObjectMethodArgs("EmitterType ParticleEffect::GetEmitterType() const", "EmitterType GetEmitterType() const", AS_METHODPR(ParticleEffect, GetEmitterType, () const, EmitterType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("EmitterType ParticleEffect::GetEmitterType() const", "EmitterType get_emitterType() const", AS_METHODPR(ParticleEffect, GetEmitterType, () const, EmitterType), AS_CALL_THISCALL));

    // const Vector3& ParticleEffect::GetEmitterSize() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& ParticleEffect::GetEmitterSize() const", "const Vector3& GetEmitterSize() const", AS_METHODPR(ParticleEffect, GetEmitterSize, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& ParticleEffect::GetEmitterSize() const", "const Vector3& get_emitterSize() const", AS_METHODPR(ParticleEffect, GetEmitterSize, () const, const Vector3&), AS_CALL_THISCALL));

    // const Vector3& ParticleEffect::GetMinDirection() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& ParticleEffect::GetMinDirection() const", "const Vector3& GetMinDirection() const", AS_METHODPR(ParticleEffect, GetMinDirection, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& ParticleEffect::GetMinDirection() const", "const Vector3& get_minDirection() const", AS_METHODPR(ParticleEffect, GetMinDirection, () const, const Vector3&), AS_CALL_THISCALL));

    // const Vector3& ParticleEffect::GetMaxDirection() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& ParticleEffect::GetMaxDirection() const", "const Vector3& GetMaxDirection() const", AS_METHODPR(ParticleEffect, GetMaxDirection, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& ParticleEffect::GetMaxDirection() const", "const Vector3& get_maxDirection() const", AS_METHODPR(ParticleEffect, GetMaxDirection, () const, const Vector3&), AS_CALL_THISCALL));

    // const Vector3& ParticleEffect::GetConstantForce() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& ParticleEffect::GetConstantForce() const", "const Vector3& GetConstantForce() const", AS_METHODPR(ParticleEffect, GetConstantForce, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& ParticleEffect::GetConstantForce() const", "const Vector3& get_constantForce() const", AS_METHODPR(ParticleEffect, GetConstantForce, () const, const Vector3&), AS_CALL_THISCALL));

    // float ParticleEffect::GetDampingForce() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetDampingForce() const", "float GetDampingForce() const", AS_METHODPR(ParticleEffect, GetDampingForce, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetDampingForce() const", "float get_dampingForce() const", AS_METHODPR(ParticleEffect, GetDampingForce, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetActiveTime() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetActiveTime() const", "float GetActiveTime() const", AS_METHODPR(ParticleEffect, GetActiveTime, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetActiveTime() const", "float get_activeTime() const", AS_METHODPR(ParticleEffect, GetActiveTime, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetInactiveTime() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetInactiveTime() const", "float GetInactiveTime() const", AS_METHODPR(ParticleEffect, GetInactiveTime, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetInactiveTime() const", "float get_inactiveTime() const", AS_METHODPR(ParticleEffect, GetInactiveTime, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMinEmissionRate() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinEmissionRate() const", "float GetMinEmissionRate() const", AS_METHODPR(ParticleEffect, GetMinEmissionRate, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinEmissionRate() const", "float get_minEmissionRate() const", AS_METHODPR(ParticleEffect, GetMinEmissionRate, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMaxEmissionRate() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxEmissionRate() const", "float GetMaxEmissionRate() const", AS_METHODPR(ParticleEffect, GetMaxEmissionRate, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxEmissionRate() const", "float get_maxEmissionRate() const", AS_METHODPR(ParticleEffect, GetMaxEmissionRate, () const, float), AS_CALL_THISCALL));

    // const Vector2& ParticleEffect::GetMinParticleSize() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ParticleEffect::GetMinParticleSize() const", "const Vector2& GetMinParticleSize() const", AS_METHODPR(ParticleEffect, GetMinParticleSize, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ParticleEffect::GetMinParticleSize() const", "const Vector2& get_minParticleSize() const", AS_METHODPR(ParticleEffect, GetMinParticleSize, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& ParticleEffect::GetMaxParticleSize() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ParticleEffect::GetMaxParticleSize() const", "const Vector2& GetMaxParticleSize() const", AS_METHODPR(ParticleEffect, GetMaxParticleSize, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ParticleEffect::GetMaxParticleSize() const", "const Vector2& get_maxParticleSize() const", AS_METHODPR(ParticleEffect, GetMaxParticleSize, () const, const Vector2&), AS_CALL_THISCALL));

    // float ParticleEffect::GetMinTimeToLive() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinTimeToLive() const", "float GetMinTimeToLive() const", AS_METHODPR(ParticleEffect, GetMinTimeToLive, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinTimeToLive() const", "float get_minTimeToLive() const", AS_METHODPR(ParticleEffect, GetMinTimeToLive, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMaxTimeToLive() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxTimeToLive() const", "float GetMaxTimeToLive() const", AS_METHODPR(ParticleEffect, GetMaxTimeToLive, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxTimeToLive() const", "float get_maxTimeToLive() const", AS_METHODPR(ParticleEffect, GetMaxTimeToLive, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMinVelocity() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinVelocity() const", "float GetMinVelocity() const", AS_METHODPR(ParticleEffect, GetMinVelocity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinVelocity() const", "float get_minVelocity() const", AS_METHODPR(ParticleEffect, GetMinVelocity, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMaxVelocity() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxVelocity() const", "float GetMaxVelocity() const", AS_METHODPR(ParticleEffect, GetMaxVelocity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxVelocity() const", "float get_maxVelocity() const", AS_METHODPR(ParticleEffect, GetMaxVelocity, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMinRotation() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinRotation() const", "float GetMinRotation() const", AS_METHODPR(ParticleEffect, GetMinRotation, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinRotation() const", "float get_minRotation() const", AS_METHODPR(ParticleEffect, GetMinRotation, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMaxRotation() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxRotation() const", "float GetMaxRotation() const", AS_METHODPR(ParticleEffect, GetMaxRotation, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxRotation() const", "float get_maxRotation() const", AS_METHODPR(ParticleEffect, GetMaxRotation, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMinRotationSpeed() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinRotationSpeed() const", "float GetMinRotationSpeed() const", AS_METHODPR(ParticleEffect, GetMinRotationSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMinRotationSpeed() const", "float get_minRotationSpeed() const", AS_METHODPR(ParticleEffect, GetMinRotationSpeed, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetMaxRotationSpeed() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxRotationSpeed() const", "float GetMaxRotationSpeed() const", AS_METHODPR(ParticleEffect, GetMaxRotationSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetMaxRotationSpeed() const", "float get_maxRotationSpeed() const", AS_METHODPR(ParticleEffect, GetMaxRotationSpeed, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetSizeAdd() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetSizeAdd() const", "float GetSizeAdd() const", AS_METHODPR(ParticleEffect, GetSizeAdd, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetSizeAdd() const", "float get_sizeAdd() const", AS_METHODPR(ParticleEffect, GetSizeAdd, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetSizeMul() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetSizeMul() const", "float GetSizeMul() const", AS_METHODPR(ParticleEffect, GetSizeMul, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetSizeMul() const", "float get_sizeMul() const", AS_METHODPR(ParticleEffect, GetSizeMul, () const, float), AS_CALL_THISCALL));

    // unsigned ParticleEffect::GetNumColorFrames() const
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEffect::GetNumColorFrames() const", "uint GetNumColorFrames() const", AS_METHODPR(ParticleEffect, GetNumColorFrames, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEffect::GetNumColorFrames() const", "uint get_numColorFrames() const", AS_METHODPR(ParticleEffect, GetNumColorFrames, () const, unsigned), AS_CALL_THISCALL));

    // const ColorFrame* ParticleEffect::GetColorFrame(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const ColorFrame* ParticleEffect::GetColorFrame(unsigned index) const", "ColorFrame@+ GetColorFrame(uint) const", AS_METHODPR(ParticleEffect, GetColorFrame, (unsigned) const, const ColorFrame*), AS_CALL_THISCALL));

    // unsigned ParticleEffect::GetNumTextureFrames() const
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEffect::GetNumTextureFrames() const", "uint GetNumTextureFrames() const", AS_METHODPR(ParticleEffect, GetNumTextureFrames, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEffect::GetNumTextureFrames() const", "uint get_numTextureFrames() const", AS_METHODPR(ParticleEffect, GetNumTextureFrames, () const, unsigned), AS_CALL_THISCALL));

    // const TextureFrame* ParticleEffect::GetTextureFrame(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const TextureFrame* ParticleEffect::GetTextureFrame(unsigned index) const", "TextureFrame@+ GetTextureFrame(uint) const", AS_METHODPR(ParticleEffect, GetTextureFrame, (unsigned) const, const TextureFrame*), AS_CALL_THISCALL));

    // FaceCameraMode ParticleEffect::GetFaceCameraMode() const
    methods.Push(RegisterObjectMethodArgs("FaceCameraMode ParticleEffect::GetFaceCameraMode() const", "FaceCameraMode GetFaceCameraMode() const", AS_METHODPR(ParticleEffect, GetFaceCameraMode, () const, FaceCameraMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FaceCameraMode ParticleEffect::GetFaceCameraMode() const", "FaceCameraMode get_faceCameraMode() const", AS_METHODPR(ParticleEffect, GetFaceCameraMode, () const, FaceCameraMode), AS_CALL_THISCALL));

    // Vector3 ParticleEffect::GetRandomDirection() const
    methods.Push(RegisterObjectMethodArgs("Vector3 ParticleEffect::GetRandomDirection() const", "Vector3 GetRandomDirection() const", AS_METHODPR(ParticleEffect, GetRandomDirection, () const, Vector3), AS_CALL_THISCALL));

    // Vector2 ParticleEffect::GetRandomSize() const
    methods.Push(RegisterObjectMethodArgs("Vector2 ParticleEffect::GetRandomSize() const", "Vector2 GetRandomSize() const", AS_METHODPR(ParticleEffect, GetRandomSize, () const, Vector2), AS_CALL_THISCALL));

    // float ParticleEffect::GetRandomVelocity() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetRandomVelocity() const", "float GetRandomVelocity() const", AS_METHODPR(ParticleEffect, GetRandomVelocity, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetRandomTimeToLive() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetRandomTimeToLive() const", "float GetRandomTimeToLive() const", AS_METHODPR(ParticleEffect, GetRandomTimeToLive, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetRandomRotationSpeed() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetRandomRotationSpeed() const", "float GetRandomRotationSpeed() const", AS_METHODPR(ParticleEffect, GetRandomRotationSpeed, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect::GetRandomRotation() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect::GetRandomRotation() const", "float GetRandomRotation() const", AS_METHODPR(ParticleEffect, GetRandomRotation, () const, float), AS_CALL_THISCALL));
}

// class ParticleEmitter | File: ../Graphics/ParticleEmitter.h
void CollectMembers_ParticleEmitter(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BillboardSet(methods);

    Remove(methods, "static void BillboardSet::RegisterObject(Context* context)");
    Remove(methods, "virtual void Drawable::Update(const FrameInfo& frame)");
    Remove(methods, "void Drawable::OnSetEnabled() override");

    // VariantVector ParticleEmitter::GetParticleBillboardsAttr() const
    // Error: type "VariantVector" can not automatically bind

    // VariantVector ParticleEmitter::GetParticlesAttr() const
    // Error: type "VariantVector" can not automatically bind

    // void ParticleEmitter::SetParticlesAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void ParticleEmitter::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(ParticleEmitter, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void ParticleEmitter::Update(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::Update(const FrameInfo& frame) override", "void Update(const FrameInfo&in)", AS_METHODPR(ParticleEmitter, Update, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void ParticleEmitter::SetEffect(ParticleEffect* effect)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetEffect(ParticleEffect* effect)", "void SetEffect(ParticleEffect@+)", AS_METHODPR(ParticleEmitter, SetEffect, (ParticleEffect*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetEffect(ParticleEffect* effect)", "void set_effect(ParticleEffect@+)", AS_METHODPR(ParticleEmitter, SetEffect, (ParticleEffect*), void), AS_CALL_THISCALL));

    // void ParticleEmitter::SetNumParticles(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetNumParticles(unsigned num)", "void SetNumParticles(uint)", AS_METHODPR(ParticleEmitter, SetNumParticles, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetNumParticles(unsigned num)", "void set_numParticles(uint)", AS_METHODPR(ParticleEmitter, SetNumParticles, (unsigned), void), AS_CALL_THISCALL));

    // void ParticleEmitter::SetEmitting(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetEmitting(bool enable)", "void SetEmitting(bool)", AS_METHODPR(ParticleEmitter, SetEmitting, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetEmitting(bool enable)", "void set_emitting(bool)", AS_METHODPR(ParticleEmitter, SetEmitting, (bool), void), AS_CALL_THISCALL));

    // void ParticleEmitter::SetSerializeParticles(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetSerializeParticles(bool enable)", "void SetSerializeParticles(bool)", AS_METHODPR(ParticleEmitter, SetSerializeParticles, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetSerializeParticles(bool enable)", "void set_serializeParticles(bool)", AS_METHODPR(ParticleEmitter, SetSerializeParticles, (bool), void), AS_CALL_THISCALL));

    // void ParticleEmitter::SetAutoRemoveMode(AutoRemoveMode mode)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetAutoRemoveMode(AutoRemoveMode mode)", "void SetAutoRemoveMode(AutoRemoveMode)", AS_METHODPR(ParticleEmitter, SetAutoRemoveMode, (AutoRemoveMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetAutoRemoveMode(AutoRemoveMode mode)", "void set_autoRemoveMode(AutoRemoveMode)", AS_METHODPR(ParticleEmitter, SetAutoRemoveMode, (AutoRemoveMode), void), AS_CALL_THISCALL));

    // void ParticleEmitter::ResetEmissionTimer()
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::ResetEmissionTimer()", "void ResetEmissionTimer()", AS_METHODPR(ParticleEmitter, ResetEmissionTimer, (), void), AS_CALL_THISCALL));

    // void ParticleEmitter::RemoveAllParticles()
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::RemoveAllParticles()", "void RemoveAllParticles()", AS_METHODPR(ParticleEmitter, RemoveAllParticles, (), void), AS_CALL_THISCALL));

    // void ParticleEmitter::Reset()
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::Reset()", "void Reset()", AS_METHODPR(ParticleEmitter, Reset, (), void), AS_CALL_THISCALL));

    // void ParticleEmitter::ApplyEffect()
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::ApplyEffect()", "void ApplyEffect()", AS_METHODPR(ParticleEmitter, ApplyEffect, (), void), AS_CALL_THISCALL));

    // ParticleEffect* ParticleEmitter::GetEffect() const
    methods.Push(RegisterObjectMethodArgs("ParticleEffect* ParticleEmitter::GetEffect() const", "ParticleEffect@+ GetEffect() const", AS_METHODPR(ParticleEmitter, GetEffect, () const, ParticleEffect*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ParticleEffect* ParticleEmitter::GetEffect() const", "ParticleEffect@+ get_effect() const", AS_METHODPR(ParticleEmitter, GetEffect, () const, ParticleEffect*), AS_CALL_THISCALL));

    // unsigned ParticleEmitter::GetNumParticles() const
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEmitter::GetNumParticles() const", "uint GetNumParticles() const", AS_METHODPR(ParticleEmitter, GetNumParticles, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEmitter::GetNumParticles() const", "uint get_numParticles() const", AS_METHODPR(ParticleEmitter, GetNumParticles, () const, unsigned), AS_CALL_THISCALL));

    // bool ParticleEmitter::IsEmitting() const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEmitter::IsEmitting() const", "bool IsEmitting() const", AS_METHODPR(ParticleEmitter, IsEmitting, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ParticleEmitter::IsEmitting() const", "bool get_emitting() const", AS_METHODPR(ParticleEmitter, IsEmitting, () const, bool), AS_CALL_THISCALL));

    // bool ParticleEmitter::GetSerializeParticles() const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEmitter::GetSerializeParticles() const", "bool GetSerializeParticles() const", AS_METHODPR(ParticleEmitter, GetSerializeParticles, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ParticleEmitter::GetSerializeParticles() const", "bool get_serializeParticles() const", AS_METHODPR(ParticleEmitter, GetSerializeParticles, () const, bool), AS_CALL_THISCALL));

    // AutoRemoveMode ParticleEmitter::GetAutoRemoveMode() const
    methods.Push(RegisterObjectMethodArgs("AutoRemoveMode ParticleEmitter::GetAutoRemoveMode() const", "AutoRemoveMode GetAutoRemoveMode() const", AS_METHODPR(ParticleEmitter, GetAutoRemoveMode, () const, AutoRemoveMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("AutoRemoveMode ParticleEmitter::GetAutoRemoveMode() const", "AutoRemoveMode get_autoRemoveMode() const", AS_METHODPR(ParticleEmitter, GetAutoRemoveMode, () const, AutoRemoveMode), AS_CALL_THISCALL));

    // void ParticleEmitter::SetEffectAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter::SetEffectAttr(const ResourceRef& value)", "void SetEffectAttr(const ResourceRef&in)", AS_METHODPR(ParticleEmitter, SetEffectAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef ParticleEmitter::GetEffectAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef ParticleEmitter::GetEffectAttr() const", "ResourceRef GetEffectAttr() const", AS_METHODPR(ParticleEmitter, GetEffectAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

// Vector<SharedPtr<ShaderVariation>>& Pass::GetVertexShaders()
// Vector<SharedPtr<ShaderVariation>>& Pass::GetVertexShaders() | File: ../Graphics/Technique.h
static CScriptArray* Pass_GetVertexShaders_void(Pass* ptr)
{
    Vector<SharedPtr<ShaderVariation>>& result = ptr->GetVertexShaders();
    return VectorToHandleArray(result, "Array<ShaderVariation@>");
}


// Vector<SharedPtr<ShaderVariation>>& Pass::GetPixelShaders()
// Vector<SharedPtr<ShaderVariation>>& Pass::GetPixelShaders() | File: ../Graphics/Technique.h
static CScriptArray* Pass_GetPixelShaders_void(Pass* ptr)
{
    Vector<SharedPtr<ShaderVariation>>& result = ptr->GetPixelShaders();
    return VectorToHandleArray(result, "Array<ShaderVariation@>");
}


// Vector<SharedPtr<ShaderVariation>>& Pass::GetVertexShaders(const StringHash& extraDefinesHash)
// Vector<SharedPtr<ShaderVariation>>& Pass::GetVertexShaders(const StringHash& extraDefinesHash) | File: ../Graphics/Technique.h
static CScriptArray* Pass_GetVertexShaders_StringHash(Pass* ptr, const StringHash& extraDefinesHash)
{
    Vector<SharedPtr<ShaderVariation>>& result = ptr->GetVertexShaders(extraDefinesHash);
    return VectorToHandleArray(result, "Array<ShaderVariation@>");
}


// Vector<SharedPtr<ShaderVariation>>& Pass::GetPixelShaders(const StringHash& extraDefinesHash)
// Vector<SharedPtr<ShaderVariation>>& Pass::GetPixelShaders(const StringHash& extraDefinesHash) | File: ../Graphics/Technique.h
static CScriptArray* Pass_GetPixelShaders_StringHash(Pass* ptr, const StringHash& extraDefinesHash)
{
    Vector<SharedPtr<ShaderVariation>>& result = ptr->GetPixelShaders(extraDefinesHash);
    return VectorToHandleArray(result, "Array<ShaderVariation@>");
}


// class Pass | File: ../Graphics/Technique.h
void CollectMembers_Pass(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // void Pass::SetBlendMode(BlendMode mode)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetBlendMode(BlendMode mode)", "void SetBlendMode(BlendMode)", AS_METHODPR(Pass, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetBlendMode(BlendMode mode)", "void set_blendMode(BlendMode)", AS_METHODPR(Pass, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));

    // void Pass::SetCullMode(CullMode mode)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetCullMode(CullMode mode)", "void SetCullMode(CullMode)", AS_METHODPR(Pass, SetCullMode, (CullMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetCullMode(CullMode mode)", "void set_cullMode(CullMode)", AS_METHODPR(Pass, SetCullMode, (CullMode), void), AS_CALL_THISCALL));

    // void Pass::SetDepthTestMode(CompareMode mode)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetDepthTestMode(CompareMode mode)", "void SetDepthTestMode(CompareMode)", AS_METHODPR(Pass, SetDepthTestMode, (CompareMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetDepthTestMode(CompareMode mode)", "void set_depthTestMode(CompareMode)", AS_METHODPR(Pass, SetDepthTestMode, (CompareMode), void), AS_CALL_THISCALL));

    // void Pass::SetLightingMode(PassLightingMode mode)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetLightingMode(PassLightingMode mode)", "void SetLightingMode(PassLightingMode)", AS_METHODPR(Pass, SetLightingMode, (PassLightingMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetLightingMode(PassLightingMode mode)", "void set_lightingMode(PassLightingMode)", AS_METHODPR(Pass, SetLightingMode, (PassLightingMode), void), AS_CALL_THISCALL));

    // void Pass::SetDepthWrite(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetDepthWrite(bool enable)", "void SetDepthWrite(bool)", AS_METHODPR(Pass, SetDepthWrite, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetDepthWrite(bool enable)", "void set_depthWrite(bool)", AS_METHODPR(Pass, SetDepthWrite, (bool), void), AS_CALL_THISCALL));

    // void Pass::SetAlphaToCoverage(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetAlphaToCoverage(bool enable)", "void SetAlphaToCoverage(bool)", AS_METHODPR(Pass, SetAlphaToCoverage, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetAlphaToCoverage(bool enable)", "void set_alphaToCoverage(bool)", AS_METHODPR(Pass, SetAlphaToCoverage, (bool), void), AS_CALL_THISCALL));

    // void Pass::SetIsDesktop(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetIsDesktop(bool enable)", "void SetIsDesktop(bool)", AS_METHODPR(Pass, SetIsDesktop, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetIsDesktop(bool enable)", "void set_desktop(bool)", AS_METHODPR(Pass, SetIsDesktop, (bool), void), AS_CALL_THISCALL));

    // void Pass::SetVertexShader(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetVertexShader(const String& name)", "void SetVertexShader(const String&in)", AS_METHODPR(Pass, SetVertexShader, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetVertexShader(const String& name)", "void set_vertexShader(const String&in)", AS_METHODPR(Pass, SetVertexShader, (const String&), void), AS_CALL_THISCALL));

    // void Pass::SetPixelShader(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetPixelShader(const String& name)", "void SetPixelShader(const String&in)", AS_METHODPR(Pass, SetPixelShader, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetPixelShader(const String& name)", "void set_pixelShader(const String&in)", AS_METHODPR(Pass, SetPixelShader, (const String&), void), AS_CALL_THISCALL));

    // void Pass::SetVertexShaderDefines(const String& defines)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetVertexShaderDefines(const String& defines)", "void SetVertexShaderDefines(const String&in)", AS_METHODPR(Pass, SetVertexShaderDefines, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetVertexShaderDefines(const String& defines)", "void set_vertexShaderDefines(const String&in)", AS_METHODPR(Pass, SetVertexShaderDefines, (const String&), void), AS_CALL_THISCALL));

    // void Pass::SetPixelShaderDefines(const String& defines)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetPixelShaderDefines(const String& defines)", "void SetPixelShaderDefines(const String&in)", AS_METHODPR(Pass, SetPixelShaderDefines, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetPixelShaderDefines(const String& defines)", "void set_pixelShaderDefines(const String&in)", AS_METHODPR(Pass, SetPixelShaderDefines, (const String&), void), AS_CALL_THISCALL));

    // void Pass::SetVertexShaderDefineExcludes(const String& excludes)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetVertexShaderDefineExcludes(const String& excludes)", "void SetVertexShaderDefineExcludes(const String&in)", AS_METHODPR(Pass, SetVertexShaderDefineExcludes, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetVertexShaderDefineExcludes(const String& excludes)", "void set_vertexShaderDefineExcludes(const String&in)", AS_METHODPR(Pass, SetVertexShaderDefineExcludes, (const String&), void), AS_CALL_THISCALL));

    // void Pass::SetPixelShaderDefineExcludes(const String& excludes)
    methods.Push(RegisterObjectMethodArgs("void Pass::SetPixelShaderDefineExcludes(const String& excludes)", "void SetPixelShaderDefineExcludes(const String&in)", AS_METHODPR(Pass, SetPixelShaderDefineExcludes, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Pass::SetPixelShaderDefineExcludes(const String& excludes)", "void set_pixelShaderDefineExcludes(const String&in)", AS_METHODPR(Pass, SetPixelShaderDefineExcludes, (const String&), void), AS_CALL_THISCALL));

    // void Pass::ReleaseShaders()
    methods.Push(RegisterObjectMethodArgs("void Pass::ReleaseShaders()", "void ReleaseShaders()", AS_METHODPR(Pass, ReleaseShaders, (), void), AS_CALL_THISCALL));

    // void Pass::MarkShadersLoaded(unsigned frameNumber)
    methods.Push(RegisterObjectMethodArgs("void Pass::MarkShadersLoaded(unsigned frameNumber)", "void MarkShadersLoaded(uint)", AS_METHODPR(Pass, MarkShadersLoaded, (unsigned), void), AS_CALL_THISCALL));

    // const String& Pass::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetName() const", "const String& GetName() const", AS_METHODPR(Pass, GetName, () const, const String&), AS_CALL_THISCALL));

    // unsigned Pass::GetIndex() const
    methods.Push(RegisterObjectMethodArgs("unsigned Pass::GetIndex() const", "uint GetIndex() const", AS_METHODPR(Pass, GetIndex, () const, unsigned), AS_CALL_THISCALL));

    // BlendMode Pass::GetBlendMode() const
    methods.Push(RegisterObjectMethodArgs("BlendMode Pass::GetBlendMode() const", "BlendMode GetBlendMode() const", AS_METHODPR(Pass, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BlendMode Pass::GetBlendMode() const", "BlendMode get_blendMode() const", AS_METHODPR(Pass, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));

    // CullMode Pass::GetCullMode() const
    methods.Push(RegisterObjectMethodArgs("CullMode Pass::GetCullMode() const", "CullMode GetCullMode() const", AS_METHODPR(Pass, GetCullMode, () const, CullMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CullMode Pass::GetCullMode() const", "CullMode get_cullMode() const", AS_METHODPR(Pass, GetCullMode, () const, CullMode), AS_CALL_THISCALL));

    // CompareMode Pass::GetDepthTestMode() const
    methods.Push(RegisterObjectMethodArgs("CompareMode Pass::GetDepthTestMode() const", "CompareMode GetDepthTestMode() const", AS_METHODPR(Pass, GetDepthTestMode, () const, CompareMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CompareMode Pass::GetDepthTestMode() const", "CompareMode get_depthTestMode() const", AS_METHODPR(Pass, GetDepthTestMode, () const, CompareMode), AS_CALL_THISCALL));

    // PassLightingMode Pass::GetLightingMode() const
    methods.Push(RegisterObjectMethodArgs("PassLightingMode Pass::GetLightingMode() const", "PassLightingMode GetLightingMode() const", AS_METHODPR(Pass, GetLightingMode, () const, PassLightingMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("PassLightingMode Pass::GetLightingMode() const", "PassLightingMode get_lightingMode() const", AS_METHODPR(Pass, GetLightingMode, () const, PassLightingMode), AS_CALL_THISCALL));

    // unsigned Pass::GetShadersLoadedFrameNumber() const
    methods.Push(RegisterObjectMethodArgs("unsigned Pass::GetShadersLoadedFrameNumber() const", "uint GetShadersLoadedFrameNumber() const", AS_METHODPR(Pass, GetShadersLoadedFrameNumber, () const, unsigned), AS_CALL_THISCALL));

    // bool Pass::GetDepthWrite() const
    methods.Push(RegisterObjectMethodArgs("bool Pass::GetDepthWrite() const", "bool GetDepthWrite() const", AS_METHODPR(Pass, GetDepthWrite, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Pass::GetDepthWrite() const", "bool get_depthWrite() const", AS_METHODPR(Pass, GetDepthWrite, () const, bool), AS_CALL_THISCALL));

    // bool Pass::GetAlphaToCoverage() const
    methods.Push(RegisterObjectMethodArgs("bool Pass::GetAlphaToCoverage() const", "bool GetAlphaToCoverage() const", AS_METHODPR(Pass, GetAlphaToCoverage, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Pass::GetAlphaToCoverage() const", "bool get_alphaToCoverage() const", AS_METHODPR(Pass, GetAlphaToCoverage, () const, bool), AS_CALL_THISCALL));

    // bool Pass::IsDesktop() const
    methods.Push(RegisterObjectMethodArgs("bool Pass::IsDesktop() const", "bool IsDesktop() const", AS_METHODPR(Pass, IsDesktop, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Pass::IsDesktop() const", "bool get_desktop() const", AS_METHODPR(Pass, IsDesktop, () const, bool), AS_CALL_THISCALL));

    // const String& Pass::GetVertexShader() const
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetVertexShader() const", "const String& GetVertexShader() const", AS_METHODPR(Pass, GetVertexShader, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetVertexShader() const", "const String& get_vertexShader() const", AS_METHODPR(Pass, GetVertexShader, () const, const String&), AS_CALL_THISCALL));

    // const String& Pass::GetPixelShader() const
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetPixelShader() const", "const String& GetPixelShader() const", AS_METHODPR(Pass, GetPixelShader, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetPixelShader() const", "const String& get_pixelShader() const", AS_METHODPR(Pass, GetPixelShader, () const, const String&), AS_CALL_THISCALL));

    // const String& Pass::GetVertexShaderDefines() const
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetVertexShaderDefines() const", "const String& GetVertexShaderDefines() const", AS_METHODPR(Pass, GetVertexShaderDefines, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetVertexShaderDefines() const", "const String& get_vertexShaderDefines() const", AS_METHODPR(Pass, GetVertexShaderDefines, () const, const String&), AS_CALL_THISCALL));

    // const String& Pass::GetPixelShaderDefines() const
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetPixelShaderDefines() const", "const String& GetPixelShaderDefines() const", AS_METHODPR(Pass, GetPixelShaderDefines, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetPixelShaderDefines() const", "const String& get_pixelShaderDefines() const", AS_METHODPR(Pass, GetPixelShaderDefines, () const, const String&), AS_CALL_THISCALL));

    // const String& Pass::GetVertexShaderDefineExcludes() const
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetVertexShaderDefineExcludes() const", "const String& GetVertexShaderDefineExcludes() const", AS_METHODPR(Pass, GetVertexShaderDefineExcludes, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetVertexShaderDefineExcludes() const", "const String& get_vertexShaderDefineExcludes() const", AS_METHODPR(Pass, GetVertexShaderDefineExcludes, () const, const String&), AS_CALL_THISCALL));

    // const String& Pass::GetPixelShaderDefineExcludes() const
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetPixelShaderDefineExcludes() const", "const String& GetPixelShaderDefineExcludes() const", AS_METHODPR(Pass, GetPixelShaderDefineExcludes, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Pass::GetPixelShaderDefineExcludes() const", "const String& get_pixelShaderDefineExcludes() const", AS_METHODPR(Pass, GetPixelShaderDefineExcludes, () const, const String&), AS_CALL_THISCALL));

    // Vector<SharedPtr<ShaderVariation>>& Pass::GetVertexShaders()
    methods.Push(RegisterObjectMethodArgs("Vector<SharedPtr<ShaderVariation>>& Pass::GetVertexShaders()", "Array<ShaderVariation@>@ GetVertexShaders()", AS_FUNCTION_OBJFIRST(Pass_GetVertexShaders_void), AS_CALL_CDECL_OBJFIRST));

    // Vector<SharedPtr<ShaderVariation>>& Pass::GetPixelShaders()
    methods.Push(RegisterObjectMethodArgs("Vector<SharedPtr<ShaderVariation>>& Pass::GetPixelShaders()", "Array<ShaderVariation@>@ GetPixelShaders()", AS_FUNCTION_OBJFIRST(Pass_GetPixelShaders_void), AS_CALL_CDECL_OBJFIRST));

    // Vector<SharedPtr<ShaderVariation>>& Pass::GetVertexShaders(const StringHash& extraDefinesHash)
    methods.Push(RegisterObjectMethodArgs("Vector<SharedPtr<ShaderVariation>>& Pass::GetVertexShaders(const StringHash& extraDefinesHash)", "Array<ShaderVariation@>@ GetVertexShaders(const StringHash&in)", AS_FUNCTION_OBJFIRST(Pass_GetVertexShaders_StringHash), AS_CALL_CDECL_OBJFIRST));

    // Vector<SharedPtr<ShaderVariation>>& Pass::GetPixelShaders(const StringHash& extraDefinesHash)
    methods.Push(RegisterObjectMethodArgs("Vector<SharedPtr<ShaderVariation>>& Pass::GetPixelShaders(const StringHash& extraDefinesHash)", "Array<ShaderVariation@>@ GetPixelShaders(const StringHash&in)", AS_FUNCTION_OBJFIRST(Pass_GetPixelShaders_StringHash), AS_CALL_CDECL_OBJFIRST));

    // String Pass::GetEffectiveVertexShaderDefines() const
    methods.Push(RegisterObjectMethodArgs("String Pass::GetEffectiveVertexShaderDefines() const", "String GetEffectiveVertexShaderDefines() const", AS_METHODPR(Pass, GetEffectiveVertexShaderDefines, () const, String), AS_CALL_THISCALL));

    // String Pass::GetEffectivePixelShaderDefines() const
    methods.Push(RegisterObjectMethodArgs("String Pass::GetEffectivePixelShaderDefines() const", "String GetEffectivePixelShaderDefines() const", AS_METHODPR(Pass, GetEffectivePixelShaderDefines, () const, String), AS_CALL_THISCALL));
}

// struct PerThreadSceneResult | File: ../Graphics/View.h
void CollectMembers_PerThreadSceneResult(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Plane | File: ../Math/Plane.h
void CollectMembers_Plane(Vector<RegisterObjectMethodArgs>& methods)
{
    // Plane& Plane::operator=(const Plane& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Plane& Plane::operator=(const Plane& rhs) noexcept=default", "Plane& opAssign(const Plane&in)", AS_METHODPR(Plane, operator=, (const Plane&), Plane&), AS_CALL_THISCALL));

    // void Plane::Define(const Vector3& v0, const Vector3& v1, const Vector3& v2)
    methods.Push(RegisterObjectMethodArgs("void Plane::Define(const Vector3& v0, const Vector3& v1, const Vector3& v2)", "void Define(const Vector3&in, const Vector3&in, const Vector3&in)", AS_METHODPR(Plane, Define, (const Vector3&, const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void Plane::Define(const Vector3& normal, const Vector3& point)
    methods.Push(RegisterObjectMethodArgs("void Plane::Define(const Vector3& normal, const Vector3& point)", "void Define(const Vector3&in, const Vector3&in)", AS_METHODPR(Plane, Define, (const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void Plane::Define(const Vector4& plane)
    methods.Push(RegisterObjectMethodArgs("void Plane::Define(const Vector4& plane)", "void Define(const Vector4&in)", AS_METHODPR(Plane, Define, (const Vector4&), void), AS_CALL_THISCALL));

    // void Plane::Transform(const Matrix3& transform)
    methods.Push(RegisterObjectMethodArgs("void Plane::Transform(const Matrix3& transform)", "void Transform(const Matrix3&in)", AS_METHODPR(Plane, Transform, (const Matrix3&), void), AS_CALL_THISCALL));

    // void Plane::Transform(const Matrix3x4& transform)
    methods.Push(RegisterObjectMethodArgs("void Plane::Transform(const Matrix3x4& transform)", "void Transform(const Matrix3x4&in)", AS_METHODPR(Plane, Transform, (const Matrix3x4&), void), AS_CALL_THISCALL));

    // void Plane::Transform(const Matrix4& transform)
    methods.Push(RegisterObjectMethodArgs("void Plane::Transform(const Matrix4& transform)", "void Transform(const Matrix4&in)", AS_METHODPR(Plane, Transform, (const Matrix4&), void), AS_CALL_THISCALL));

    // Vector3 Plane::Project(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Plane::Project(const Vector3& point) const", "Vector3 Project(const Vector3&in) const", AS_METHODPR(Plane, Project, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // float Plane::Distance(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("float Plane::Distance(const Vector3& point) const", "float Distance(const Vector3&in) const", AS_METHODPR(Plane, Distance, (const Vector3&) const, float), AS_CALL_THISCALL));

    // Vector3 Plane::Reflect(const Vector3& direction) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Plane::Reflect(const Vector3& direction) const", "Vector3 Reflect(const Vector3&in) const", AS_METHODPR(Plane, Reflect, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Matrix3x4 Plane::ReflectionMatrix() const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Plane::ReflectionMatrix() const", "Matrix3x4 ReflectionMatrix() const", AS_METHODPR(Plane, ReflectionMatrix, () const, Matrix3x4), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 Plane::ReflectionMatrix() const", "Matrix3x4 get_reflectionMatrix() const", AS_METHODPR(Plane, ReflectionMatrix, () const, Matrix3x4), AS_CALL_THISCALL));

    // Plane Plane::Transformed(const Matrix3& transform) const
    methods.Push(RegisterObjectMethodArgs("Plane Plane::Transformed(const Matrix3& transform) const", "Plane Transformed(const Matrix3&in) const", AS_METHODPR(Plane, Transformed, (const Matrix3&) const, Plane), AS_CALL_THISCALL));

    // Plane Plane::Transformed(const Matrix3x4& transform) const
    methods.Push(RegisterObjectMethodArgs("Plane Plane::Transformed(const Matrix3x4& transform) const", "Plane Transformed(const Matrix3x4&in) const", AS_METHODPR(Plane, Transformed, (const Matrix3x4&) const, Plane), AS_CALL_THISCALL));

    // Plane Plane::Transformed(const Matrix4& transform) const
    methods.Push(RegisterObjectMethodArgs("Plane Plane::Transformed(const Matrix4& transform) const", "Plane Transformed(const Matrix4&in) const", AS_METHODPR(Plane, Transformed, (const Matrix4&) const, Plane), AS_CALL_THISCALL));

    // Vector4 Plane::ToVector4() const
    methods.Push(RegisterObjectMethodArgs("Vector4 Plane::ToVector4() const", "Vector4 ToVector4() const", AS_METHODPR(Plane, ToVector4, () const, Vector4), AS_CALL_THISCALL));
}

// class PointOctreeQuery | File: ../Graphics/OctreeQuery.h
void CollectMembers_PointOctreeQuery(Vector<RegisterObjectMethodArgs>& methods)
{
    // void PointOctreeQuery::TestDrawables(Drawable** start, Drawable** end, bool inside) override
    // Error: type "Drawable**" can not automatically bind

    // Intersection PointOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override
    methods.Push(RegisterObjectMethodArgs("Intersection PointOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override", "Intersection TestOctant(const BoundingBox&in, bool)", AS_METHODPR(PointOctreeQuery, TestOctant, (const BoundingBox&, bool), Intersection), AS_CALL_THISCALL));
}

// void Polyhedron::AddFace(const PODVector<Vector3>& face)
// void Polyhedron::AddFace(const PODVector<Vector3>& face) | File: ../Math/Polyhedron.h
static void Polyhedron_AddFace_PODVectorVector3(Polyhedron* ptr, CScriptArray* face_conv)
{
    PODVector<Vector3> face = ArrayToPODVector<Vector3>(face_conv);
    ptr->AddFace(face);
}


// class Polyhedron | File: ../Math/Polyhedron.h
void CollectMembers_Polyhedron(Vector<RegisterObjectMethodArgs>& methods)
{
    // Polyhedron& Polyhedron::operator=(const Polyhedron& rhs)
    methods.Push(RegisterObjectMethodArgs("Polyhedron& Polyhedron::operator=(const Polyhedron& rhs)", "Polyhedron& opAssign(const Polyhedron&in)", AS_METHODPR(Polyhedron, operator=, (const Polyhedron&), Polyhedron&), AS_CALL_THISCALL));

    // void Polyhedron::Define(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::Define(const BoundingBox& box)", "void Define(const BoundingBox&in)", AS_METHODPR(Polyhedron, Define, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void Polyhedron::Define(const Frustum& frustum)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::Define(const Frustum& frustum)", "void Define(const Frustum&in)", AS_METHODPR(Polyhedron, Define, (const Frustum&), void), AS_CALL_THISCALL));

    // void Polyhedron::AddFace(const Vector3& v0, const Vector3& v1, const Vector3& v2)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::AddFace(const Vector3& v0, const Vector3& v1, const Vector3& v2)", "void AddFace(const Vector3&in, const Vector3&in, const Vector3&in)", AS_METHODPR(Polyhedron, AddFace, (const Vector3&, const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void Polyhedron::AddFace(const Vector3& v0, const Vector3& v1, const Vector3& v2, const Vector3& v3)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::AddFace(const Vector3& v0, const Vector3& v1, const Vector3& v2, const Vector3& v3)", "void AddFace(const Vector3&in, const Vector3&in, const Vector3&in, const Vector3&in)", AS_METHODPR(Polyhedron, AddFace, (const Vector3&, const Vector3&, const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void Polyhedron::AddFace(const PODVector<Vector3>& face)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::AddFace(const PODVector<Vector3>& face)", "void AddFace(Array<Vector3>@+)", AS_FUNCTION_OBJFIRST(Polyhedron_AddFace_PODVectorVector3), AS_CALL_CDECL_OBJFIRST));

    // void Polyhedron::Clip(const Plane& plane)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::Clip(const Plane& plane)", "void Clip(const Plane&in)", AS_METHODPR(Polyhedron, Clip, (const Plane&), void), AS_CALL_THISCALL));

    // void Polyhedron::Clip(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::Clip(const BoundingBox& box)", "void Clip(const BoundingBox&in)", AS_METHODPR(Polyhedron, Clip, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void Polyhedron::Clip(const Frustum& frustum)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::Clip(const Frustum& frustum)", "void Clip(const Frustum&in)", AS_METHODPR(Polyhedron, Clip, (const Frustum&), void), AS_CALL_THISCALL));

    // void Polyhedron::Clear()
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::Clear()", "void Clear()", AS_METHODPR(Polyhedron, Clear, (), void), AS_CALL_THISCALL));

    // void Polyhedron::Transform(const Matrix3& transform)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::Transform(const Matrix3& transform)", "void Transform(const Matrix3&in)", AS_METHODPR(Polyhedron, Transform, (const Matrix3&), void), AS_CALL_THISCALL));

    // void Polyhedron::Transform(const Matrix3x4& transform)
    methods.Push(RegisterObjectMethodArgs("void Polyhedron::Transform(const Matrix3x4& transform)", "void Transform(const Matrix3x4&in)", AS_METHODPR(Polyhedron, Transform, (const Matrix3x4&), void), AS_CALL_THISCALL));

    // Polyhedron Polyhedron::Transformed(const Matrix3& transform) const
    methods.Push(RegisterObjectMethodArgs("Polyhedron Polyhedron::Transformed(const Matrix3& transform) const", "Polyhedron Transformed(const Matrix3&in) const", AS_METHODPR(Polyhedron, Transformed, (const Matrix3&) const, Polyhedron), AS_CALL_THISCALL));

    // Polyhedron Polyhedron::Transformed(const Matrix3x4& transform) const
    methods.Push(RegisterObjectMethodArgs("Polyhedron Polyhedron::Transformed(const Matrix3x4& transform) const", "Polyhedron Transformed(const Matrix3x4&in) const", AS_METHODPR(Polyhedron, Transformed, (const Matrix3x4&) const, Polyhedron), AS_CALL_THISCALL));

    // bool Polyhedron::Empty() const
    methods.Push(RegisterObjectMethodArgs("bool Polyhedron::Empty() const", "bool Empty() const", AS_METHODPR(Polyhedron, Empty, () const, bool), AS_CALL_THISCALL));
}

// class Profiler | File: ../Core/Profiler.h
void CollectMembers_Profiler(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Profiler::BeginBlock(const char* name)
    // Error: type "const char*" can not automatically bind

    // const ProfilerBlock* Profiler::GetCurrentBlock()
    // Error: type "ProfilerBlock" can not automatically bind bacause have @nobind mark

    // const ProfilerBlock* Profiler::GetRootBlock()
    // Error: type "ProfilerBlock" can not automatically bind bacause have @nobind mark

    // void Profiler::EndBlock()
    methods.Push(RegisterObjectMethodArgs("void Profiler::EndBlock()", "void EndBlock()", AS_METHODPR(Profiler, EndBlock, (), void), AS_CALL_THISCALL));

    // void Profiler::BeginFrame()
    methods.Push(RegisterObjectMethodArgs("void Profiler::BeginFrame()", "void BeginFrame()", AS_METHODPR(Profiler, BeginFrame, (), void), AS_CALL_THISCALL));

    // void Profiler::EndFrame()
    methods.Push(RegisterObjectMethodArgs("void Profiler::EndFrame()", "void EndFrame()", AS_METHODPR(Profiler, EndFrame, (), void), AS_CALL_THISCALL));

    // void Profiler::BeginInterval()
    methods.Push(RegisterObjectMethodArgs("void Profiler::BeginInterval()", "void BeginInterval()", AS_METHODPR(Profiler, BeginInterval, (), void), AS_CALL_THISCALL));

    // const String& Profiler::PrintData(bool showUnused=false, bool showTotal=false, unsigned maxDepth=M_MAX_UNSIGNED) const
    methods.Push(RegisterObjectMethodArgs("const String& Profiler::PrintData(bool showUnused=false, bool showTotal=false, unsigned maxDepth=M_MAX_UNSIGNED) const", "const String& PrintData(bool = false, bool = false, uint = M_MAX_UNSIGNED) const", AS_METHODPR(Profiler, PrintData, (bool, bool, unsigned) const, const String&), AS_CALL_THISCALL));
}

// class ProfilerBlock | File: ../Core/Profiler.h
void CollectMembers_ProfilerBlock(Vector<RegisterObjectMethodArgs>& methods)
{
    // ProfilerBlock* ProfilerBlock::GetChild(const char* name)
    // Error: type "const char*" can not automatically bind

    // void ProfilerBlock::Begin()
    methods.Push(RegisterObjectMethodArgs("void ProfilerBlock::Begin()", "void Begin()", AS_METHODPR(ProfilerBlock, Begin, (), void), AS_CALL_THISCALL));

    // void ProfilerBlock::End()
    methods.Push(RegisterObjectMethodArgs("void ProfilerBlock::End()", "void End()", AS_METHODPR(ProfilerBlock, End, (), void), AS_CALL_THISCALL));

    // void ProfilerBlock::EndFrame()
    methods.Push(RegisterObjectMethodArgs("void ProfilerBlock::EndFrame()", "void EndFrame()", AS_METHODPR(ProfilerBlock, EndFrame, (), void), AS_CALL_THISCALL));

    // void ProfilerBlock::BeginInterval()
    methods.Push(RegisterObjectMethodArgs("void ProfilerBlock::BeginInterval()", "void BeginInterval()", AS_METHODPR(ProfilerBlock, BeginInterval, (), void), AS_CALL_THISCALL));
}

// class ProgressBar | File: ../UI/ProgressBar.h
void CollectMembers_ProgressBar(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BorderImage(methods);

    Remove(methods, "static void BorderImage::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::OnResize(const IntVector2& newSize, const IntVector2& delta)");

    // void ProgressBar::OnResize(const IntVector2& newSize, const IntVector2& delta) override
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::OnResize(const IntVector2& newSize, const IntVector2& delta) override", "void OnResize(const IntVector2&in, const IntVector2&in)", AS_METHODPR(ProgressBar, OnResize, (const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // void ProgressBar::SetOrientation(Orientation orientation)
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetOrientation(Orientation orientation)", "void SetOrientation(Orientation)", AS_METHODPR(ProgressBar, SetOrientation, (Orientation), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetOrientation(Orientation orientation)", "void set_orientation(Orientation)", AS_METHODPR(ProgressBar, SetOrientation, (Orientation), void), AS_CALL_THISCALL));

    // void ProgressBar::SetRange(float range)
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetRange(float range)", "void SetRange(float)", AS_METHODPR(ProgressBar, SetRange, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetRange(float range)", "void set_range(float)", AS_METHODPR(ProgressBar, SetRange, (float), void), AS_CALL_THISCALL));

    // void ProgressBar::SetValue(float value)
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetValue(float value)", "void SetValue(float)", AS_METHODPR(ProgressBar, SetValue, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetValue(float value)", "void set_value(float)", AS_METHODPR(ProgressBar, SetValue, (float), void), AS_CALL_THISCALL));

    // void ProgressBar::ChangeValue(float delta)
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::ChangeValue(float delta)", "void ChangeValue(float)", AS_METHODPR(ProgressBar, ChangeValue, (float), void), AS_CALL_THISCALL));

    // Orientation ProgressBar::GetOrientation() const
    methods.Push(RegisterObjectMethodArgs("Orientation ProgressBar::GetOrientation() const", "Orientation GetOrientation() const", AS_METHODPR(ProgressBar, GetOrientation, () const, Orientation), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Orientation ProgressBar::GetOrientation() const", "Orientation get_orientation() const", AS_METHODPR(ProgressBar, GetOrientation, () const, Orientation), AS_CALL_THISCALL));

    // float ProgressBar::GetRange() const
    methods.Push(RegisterObjectMethodArgs("float ProgressBar::GetRange() const", "float GetRange() const", AS_METHODPR(ProgressBar, GetRange, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ProgressBar::GetRange() const", "float get_range() const", AS_METHODPR(ProgressBar, GetRange, () const, float), AS_CALL_THISCALL));

    // float ProgressBar::GetValue() const
    methods.Push(RegisterObjectMethodArgs("float ProgressBar::GetValue() const", "float GetValue() const", AS_METHODPR(ProgressBar, GetValue, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ProgressBar::GetValue() const", "float get_value() const", AS_METHODPR(ProgressBar, GetValue, () const, float), AS_CALL_THISCALL));

    // BorderImage* ProgressBar::GetKnob() const
    methods.Push(RegisterObjectMethodArgs("BorderImage* ProgressBar::GetKnob() const", "BorderImage@+ GetKnob() const", AS_METHODPR(ProgressBar, GetKnob, () const, BorderImage*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BorderImage* ProgressBar::GetKnob() const", "BorderImage@+ get_knob() const", AS_METHODPR(ProgressBar, GetKnob, () const, BorderImage*), AS_CALL_THISCALL));

    // void ProgressBar::SetLoadingPercentStyle(const String& style)
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetLoadingPercentStyle(const String& style)", "void SetLoadingPercentStyle(const String&in)", AS_METHODPR(ProgressBar, SetLoadingPercentStyle, (const String&), void), AS_CALL_THISCALL));

    // const String& ProgressBar::GetLoadingPercentStyle() const
    methods.Push(RegisterObjectMethodArgs("const String& ProgressBar::GetLoadingPercentStyle() const", "const String& GetLoadingPercentStyle() const", AS_METHODPR(ProgressBar, GetLoadingPercentStyle, () const, const String&), AS_CALL_THISCALL));

    // void ProgressBar::SetShowPercentText(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetShowPercentText(bool enable)", "void SetShowPercentText(bool)", AS_METHODPR(ProgressBar, SetShowPercentText, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ProgressBar::SetShowPercentText(bool enable)", "void set_showPercentText(bool)", AS_METHODPR(ProgressBar, SetShowPercentText, (bool), void), AS_CALL_THISCALL));

    // bool ProgressBar::GetShowPercentText() const
    methods.Push(RegisterObjectMethodArgs("bool ProgressBar::GetShowPercentText() const", "bool GetShowPercentText() const", AS_METHODPR(ProgressBar, GetShowPercentText, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ProgressBar::GetShowPercentText() const", "bool get_showPercentText() const", AS_METHODPR(ProgressBar, GetShowPercentText, () const, bool), AS_CALL_THISCALL));
}

// class Quaternion | File: ../Math/Quaternion.h
void CollectMembers_Quaternion(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Quaternion::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Quaternion::operator!=(const Quaternion& rhs) const
    // Only operator== is needed

    // Quaternion& Quaternion::operator=(const Quaternion& rhs) noexcept
    methods.Push(RegisterObjectMethodArgs("Quaternion& Quaternion::operator=(const Quaternion& rhs) noexcept", "Quaternion& opAssign(const Quaternion&in)", AS_METHODPR(Quaternion, operator=, (const Quaternion&), Quaternion&), AS_CALL_THISCALL));

    // Quaternion& Quaternion::operator+=(const Quaternion& rhs)
    methods.Push(RegisterObjectMethodArgs("Quaternion& Quaternion::operator+=(const Quaternion& rhs)", "Quaternion& opAddAssign(const Quaternion&in)", AS_METHODPR(Quaternion, operator+=, (const Quaternion&), Quaternion&), AS_CALL_THISCALL));

    // Quaternion& Quaternion::operator*=(float rhs)
    methods.Push(RegisterObjectMethodArgs("Quaternion& Quaternion::operator*=(float rhs)", "Quaternion& opMulAssign(float)", AS_METHODPR(Quaternion, operator*=, (float), Quaternion&), AS_CALL_THISCALL));

    // bool Quaternion::operator==(const Quaternion& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Quaternion::operator==(const Quaternion& rhs) const", "bool opEquals(const Quaternion&in) const", AS_METHODPR(Quaternion, operator==, (const Quaternion&) const, bool), AS_CALL_THISCALL));

    // Quaternion Quaternion::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::operator*(float rhs) const", "Quaternion opMul(float) const", AS_METHODPR(Quaternion, operator*, (float) const, Quaternion), AS_CALL_THISCALL));

    // Quaternion Quaternion::operator-() const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::operator-() const", "Quaternion opNeg() const", AS_METHODPR(Quaternion, operator-, () const, Quaternion), AS_CALL_THISCALL));

    // Quaternion Quaternion::operator+(const Quaternion& rhs) const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::operator+(const Quaternion& rhs) const", "Quaternion opAdd(const Quaternion&in) const", AS_METHODPR(Quaternion, operator+, (const Quaternion&) const, Quaternion), AS_CALL_THISCALL));

    // Quaternion Quaternion::operator-(const Quaternion& rhs) const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::operator-(const Quaternion& rhs) const", "Quaternion opSub(const Quaternion&in) const", AS_METHODPR(Quaternion, operator-, (const Quaternion&) const, Quaternion), AS_CALL_THISCALL));

    // Quaternion Quaternion::operator*(const Quaternion& rhs) const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::operator*(const Quaternion& rhs) const", "Quaternion opMul(const Quaternion&in) const", AS_METHODPR(Quaternion, operator*, (const Quaternion&) const, Quaternion), AS_CALL_THISCALL));

    // Vector3 Quaternion::operator*(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Quaternion::operator*(const Vector3& rhs) const", "Vector3 opMul(const Vector3&in) const", AS_METHODPR(Quaternion, operator*, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // void Quaternion::FromAngleAxis(float angle, const Vector3& axis)
    methods.Push(RegisterObjectMethodArgs("void Quaternion::FromAngleAxis(float angle, const Vector3& axis)", "void FromAngleAxis(float, const Vector3&in)", AS_METHODPR(Quaternion, FromAngleAxis, (float, const Vector3&), void), AS_CALL_THISCALL));

    // void Quaternion::FromEulerAngles(float x, float y, float z)
    methods.Push(RegisterObjectMethodArgs("void Quaternion::FromEulerAngles(float x, float y, float z)", "void FromEulerAngles(float, float, float)", AS_METHODPR(Quaternion, FromEulerAngles, (float, float, float), void), AS_CALL_THISCALL));

    // void Quaternion::FromRotationTo(const Vector3& start, const Vector3& end)
    methods.Push(RegisterObjectMethodArgs("void Quaternion::FromRotationTo(const Vector3& start, const Vector3& end)", "void FromRotationTo(const Vector3&in, const Vector3&in)", AS_METHODPR(Quaternion, FromRotationTo, (const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void Quaternion::FromAxes(const Vector3& xAxis, const Vector3& yAxis, const Vector3& zAxis)
    methods.Push(RegisterObjectMethodArgs("void Quaternion::FromAxes(const Vector3& xAxis, const Vector3& yAxis, const Vector3& zAxis)", "void FromAxes(const Vector3&in, const Vector3&in, const Vector3&in)", AS_METHODPR(Quaternion, FromAxes, (const Vector3&, const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void Quaternion::FromRotationMatrix(const Matrix3& matrix)
    methods.Push(RegisterObjectMethodArgs("void Quaternion::FromRotationMatrix(const Matrix3& matrix)", "void FromRotationMatrix(const Matrix3&in)", AS_METHODPR(Quaternion, FromRotationMatrix, (const Matrix3&), void), AS_CALL_THISCALL));

    // bool Quaternion::FromLookRotation(const Vector3& direction, const Vector3& up=Vector3::UP)
    methods.Push(RegisterObjectMethodArgs("bool Quaternion::FromLookRotation(const Vector3& direction, const Vector3& up=Vector3::UP)", "bool FromLookRotation(const Vector3&in, const Vector3&in = Vector3::UP)", AS_METHODPR(Quaternion, FromLookRotation, (const Vector3&, const Vector3&), bool), AS_CALL_THISCALL));

    // void Quaternion::Normalize()
    methods.Push(RegisterObjectMethodArgs("void Quaternion::Normalize()", "void Normalize()", AS_METHODPR(Quaternion, Normalize, (), void), AS_CALL_THISCALL));

    // Quaternion Quaternion::Normalized() const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::Normalized() const", "Quaternion Normalized() const", AS_METHODPR(Quaternion, Normalized, () const, Quaternion), AS_CALL_THISCALL));

    // Quaternion Quaternion::Inverse() const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::Inverse() const", "Quaternion Inverse() const", AS_METHODPR(Quaternion, Inverse, () const, Quaternion), AS_CALL_THISCALL));

    // float Quaternion::LengthSquared() const
    methods.Push(RegisterObjectMethodArgs("float Quaternion::LengthSquared() const", "float LengthSquared() const", AS_METHODPR(Quaternion, LengthSquared, () const, float), AS_CALL_THISCALL));

    // float Quaternion::DotProduct(const Quaternion& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Quaternion::DotProduct(const Quaternion& rhs) const", "float DotProduct(const Quaternion&in) const", AS_METHODPR(Quaternion, DotProduct, (const Quaternion&) const, float), AS_CALL_THISCALL));

    // bool Quaternion::Equals(const Quaternion& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Quaternion::Equals(const Quaternion& rhs) const", "bool Equals(const Quaternion&in) const", AS_METHODPR(Quaternion, Equals, (const Quaternion&) const, bool), AS_CALL_THISCALL));

    // bool Quaternion::IsNaN() const
    methods.Push(RegisterObjectMethodArgs("bool Quaternion::IsNaN() const", "bool IsNaN() const", AS_METHODPR(Quaternion, IsNaN, () const, bool), AS_CALL_THISCALL));

    // bool Quaternion::IsInf() const
    methods.Push(RegisterObjectMethodArgs("bool Quaternion::IsInf() const", "bool IsInf() const", AS_METHODPR(Quaternion, IsInf, () const, bool), AS_CALL_THISCALL));

    // Quaternion Quaternion::Conjugate() const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::Conjugate() const", "Quaternion Conjugate() const", AS_METHODPR(Quaternion, Conjugate, () const, Quaternion), AS_CALL_THISCALL));

    // Vector3 Quaternion::EulerAngles() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Quaternion::EulerAngles() const", "Vector3 EulerAngles() const", AS_METHODPR(Quaternion, EulerAngles, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Quaternion::EulerAngles() const", "Vector3 get_eulerAngles() const", AS_METHODPR(Quaternion, EulerAngles, () const, Vector3), AS_CALL_THISCALL));

    // float Quaternion::YawAngle() const
    methods.Push(RegisterObjectMethodArgs("float Quaternion::YawAngle() const", "float YawAngle() const", AS_METHODPR(Quaternion, YawAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Quaternion::YawAngle() const", "float get_yaw() const", AS_METHODPR(Quaternion, YawAngle, () const, float), AS_CALL_THISCALL));

    // float Quaternion::PitchAngle() const
    methods.Push(RegisterObjectMethodArgs("float Quaternion::PitchAngle() const", "float PitchAngle() const", AS_METHODPR(Quaternion, PitchAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Quaternion::PitchAngle() const", "float get_pitch() const", AS_METHODPR(Quaternion, PitchAngle, () const, float), AS_CALL_THISCALL));

    // float Quaternion::RollAngle() const
    methods.Push(RegisterObjectMethodArgs("float Quaternion::RollAngle() const", "float RollAngle() const", AS_METHODPR(Quaternion, RollAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Quaternion::RollAngle() const", "float get_roll() const", AS_METHODPR(Quaternion, RollAngle, () const, float), AS_CALL_THISCALL));

    // Vector3 Quaternion::Axis() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Quaternion::Axis() const", "Vector3 Axis() const", AS_METHODPR(Quaternion, Axis, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Quaternion::Axis() const", "Vector3 get_axis() const", AS_METHODPR(Quaternion, Axis, () const, Vector3), AS_CALL_THISCALL));

    // float Quaternion::Angle() const
    methods.Push(RegisterObjectMethodArgs("float Quaternion::Angle() const", "float Angle() const", AS_METHODPR(Quaternion, Angle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Quaternion::Angle() const", "float get_angle() const", AS_METHODPR(Quaternion, Angle, () const, float), AS_CALL_THISCALL));

    // Matrix3 Quaternion::RotationMatrix() const
    methods.Push(RegisterObjectMethodArgs("Matrix3 Quaternion::RotationMatrix() const", "Matrix3 RotationMatrix() const", AS_METHODPR(Quaternion, RotationMatrix, () const, Matrix3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Matrix3 Quaternion::RotationMatrix() const", "Matrix3 get_rotationMatrix() const", AS_METHODPR(Quaternion, RotationMatrix, () const, Matrix3), AS_CALL_THISCALL));

    // Quaternion Quaternion::Slerp(const Quaternion& rhs, float t) const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::Slerp(const Quaternion& rhs, float t) const", "Quaternion Slerp(const Quaternion&in, float) const", AS_METHODPR(Quaternion, Slerp, (const Quaternion&, float) const, Quaternion), AS_CALL_THISCALL));

    // Quaternion Quaternion::Nlerp(const Quaternion& rhs, float t, bool shortestPath=false) const
    methods.Push(RegisterObjectMethodArgs("Quaternion Quaternion::Nlerp(const Quaternion& rhs, float t, bool shortestPath=false) const", "Quaternion Nlerp(const Quaternion&in, float, bool = false) const", AS_METHODPR(Quaternion, Nlerp, (const Quaternion&, float, bool) const, Quaternion), AS_CALL_THISCALL));

    // String Quaternion::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Quaternion::ToString() const", "String ToString() const", AS_METHODPR(Quaternion, ToString, () const, String), AS_CALL_THISCALL));
}

// class Ray | File: ../Math/Ray.h
void CollectMembers_Ray(Vector<RegisterObjectMethodArgs>& methods)
{
    // float Ray::HitDistance(const Vector3& v0, const Vector3& v1, const Vector3& v2, Vector3* outNormal=nullptr, Vector3* outBary=nullptr) const
    // Error: type "Vector3*" can not automatically bind

    // float Ray::HitDistance(const void* vertexData, unsigned vertexStride, const void* indexData, unsigned indexSize, unsigned indexStart, unsigned indexCount, Vector3* outNormal=nullptr, Vector2* outUV=nullptr, unsigned uvOffset=0) const
    // Error: type "const void*" can not automatically bind

    // float Ray::HitDistance(const void* vertexData, unsigned vertexStride, unsigned vertexStart, unsigned vertexCount, Vector3* outNormal=nullptr, Vector2* outUV=nullptr, unsigned uvOffset=0) const
    // Error: type "const void*" can not automatically bind

    // bool Ray::InsideGeometry(const void* vertexData, unsigned vertexSize, const void* indexData, unsigned indexSize, unsigned indexStart, unsigned indexCount) const
    // Error: type "const void*" can not automatically bind

    // bool Ray::InsideGeometry(const void* vertexData, unsigned vertexSize, unsigned vertexStart, unsigned vertexCount) const
    // Error: type "const void*" can not automatically bind

    // bool Ray::operator!=(const Ray& rhs) const
    // Only operator== is needed

    // Ray& Ray::operator=(const Ray& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Ray& Ray::operator=(const Ray& rhs) noexcept=default", "Ray& opAssign(const Ray&in)", AS_METHODPR(Ray, operator=, (const Ray&), Ray&), AS_CALL_THISCALL));

    // bool Ray::operator==(const Ray& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Ray::operator==(const Ray& rhs) const", "bool opEquals(const Ray&in) const", AS_METHODPR(Ray, operator==, (const Ray&) const, bool), AS_CALL_THISCALL));

    // void Ray::Define(const Vector3& origin, const Vector3& direction)
    methods.Push(RegisterObjectMethodArgs("void Ray::Define(const Vector3& origin, const Vector3& direction)", "void Define(const Vector3&in, const Vector3&in)", AS_METHODPR(Ray, Define, (const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // Vector3 Ray::Project(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Ray::Project(const Vector3& point) const", "Vector3 Project(const Vector3&in) const", AS_METHODPR(Ray, Project, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // float Ray::Distance(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("float Ray::Distance(const Vector3& point) const", "float Distance(const Vector3&in) const", AS_METHODPR(Ray, Distance, (const Vector3&) const, float), AS_CALL_THISCALL));

    // Vector3 Ray::ClosestPoint(const Ray& ray) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Ray::ClosestPoint(const Ray& ray) const", "Vector3 ClosestPoint(const Ray&in) const", AS_METHODPR(Ray, ClosestPoint, (const Ray&) const, Vector3), AS_CALL_THISCALL));

    // float Ray::HitDistance(const Plane& plane) const
    methods.Push(RegisterObjectMethodArgs("float Ray::HitDistance(const Plane& plane) const", "float HitDistance(const Plane&in) const", AS_METHODPR(Ray, HitDistance, (const Plane&) const, float), AS_CALL_THISCALL));

    // float Ray::HitDistance(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("float Ray::HitDistance(const BoundingBox& box) const", "float HitDistance(const BoundingBox&in) const", AS_METHODPR(Ray, HitDistance, (const BoundingBox&) const, float), AS_CALL_THISCALL));

    // float Ray::HitDistance(const Frustum& frustum, bool solidInside=true) const
    methods.Push(RegisterObjectMethodArgs("float Ray::HitDistance(const Frustum& frustum, bool solidInside=true) const", "float HitDistance(const Frustum&in, bool = true) const", AS_METHODPR(Ray, HitDistance, (const Frustum&, bool) const, float), AS_CALL_THISCALL));

    // float Ray::HitDistance(const Sphere& sphere) const
    methods.Push(RegisterObjectMethodArgs("float Ray::HitDistance(const Sphere& sphere) const", "float HitDistance(const Sphere&in) const", AS_METHODPR(Ray, HitDistance, (const Sphere&) const, float), AS_CALL_THISCALL));

    // Ray Ray::Transformed(const Matrix3x4& transform) const
    methods.Push(RegisterObjectMethodArgs("Ray Ray::Transformed(const Matrix3x4& transform) const", "Ray Transformed(const Matrix3x4&in) const", AS_METHODPR(Ray, Transformed, (const Matrix3x4&) const, Ray), AS_CALL_THISCALL));
}

// class RayOctreeQuery | File: ../Graphics/OctreeQuery.h
void CollectMembers_RayOctreeQuery(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct RayQueryResult | File: ../Graphics/OctreeQuery.h
void CollectMembers_RayQueryResult(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool RayQueryResult::operator!=(const RayQueryResult& rhs) const
    // Only operator== is needed
}

// class Rect | File: ../Math/Rect.h
void CollectMembers_Rect(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Rect::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Rect::operator!=(const Rect& rhs) const
    // Only operator== is needed

    // Rect& Rect::operator=(const Rect& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Rect& Rect::operator=(const Rect& rhs) noexcept=default", "Rect& opAssign(const Rect&in)", AS_METHODPR(Rect, operator=, (const Rect&), Rect&), AS_CALL_THISCALL));

    // bool Rect::operator==(const Rect& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Rect::operator==(const Rect& rhs) const", "bool opEquals(const Rect&in) const", AS_METHODPR(Rect, operator==, (const Rect&) const, bool), AS_CALL_THISCALL));

    // Rect& Rect::operator+=(const Rect& rhs)
    methods.Push(RegisterObjectMethodArgs("Rect& Rect::operator+=(const Rect& rhs)", "Rect& opAddAssign(const Rect&in)", AS_METHODPR(Rect, operator+=, (const Rect&), Rect&), AS_CALL_THISCALL));

    // Rect& Rect::operator-=(const Rect& rhs)
    methods.Push(RegisterObjectMethodArgs("Rect& Rect::operator-=(const Rect& rhs)", "Rect& opSubAssign(const Rect&in)", AS_METHODPR(Rect, operator-=, (const Rect&), Rect&), AS_CALL_THISCALL));

    // Rect& Rect::operator/=(float value)
    methods.Push(RegisterObjectMethodArgs("Rect& Rect::operator/=(float value)", "Rect& opDivAssign(float)", AS_METHODPR(Rect, operator/=, (float), Rect&), AS_CALL_THISCALL));

    // Rect& Rect::operator*=(float value)
    methods.Push(RegisterObjectMethodArgs("Rect& Rect::operator*=(float value)", "Rect& opMulAssign(float)", AS_METHODPR(Rect, operator*=, (float), Rect&), AS_CALL_THISCALL));

    // Rect Rect::operator/(float value) const
    methods.Push(RegisterObjectMethodArgs("Rect Rect::operator/(float value) const", "Rect opDiv(float) const", AS_METHODPR(Rect, operator/, (float) const, Rect), AS_CALL_THISCALL));

    // Rect Rect::operator*(float value) const
    methods.Push(RegisterObjectMethodArgs("Rect Rect::operator*(float value) const", "Rect opMul(float) const", AS_METHODPR(Rect, operator*, (float) const, Rect), AS_CALL_THISCALL));

    // Rect Rect::operator+(const Rect& rhs) const
    methods.Push(RegisterObjectMethodArgs("Rect Rect::operator+(const Rect& rhs) const", "Rect opAdd(const Rect&in) const", AS_METHODPR(Rect, operator+, (const Rect&) const, Rect), AS_CALL_THISCALL));

    // Rect Rect::operator-(const Rect& rhs) const
    methods.Push(RegisterObjectMethodArgs("Rect Rect::operator-(const Rect& rhs) const", "Rect opSub(const Rect&in) const", AS_METHODPR(Rect, operator-, (const Rect&) const, Rect), AS_CALL_THISCALL));

    // void Rect::Define(const Rect& rect)
    methods.Push(RegisterObjectMethodArgs("void Rect::Define(const Rect& rect)", "void Define(const Rect&in)", AS_METHODPR(Rect, Define, (const Rect&), void), AS_CALL_THISCALL));

    // void Rect::Define(const Vector2& min, const Vector2& max)
    methods.Push(RegisterObjectMethodArgs("void Rect::Define(const Vector2& min, const Vector2& max)", "void Define(const Vector2&in, const Vector2&in)", AS_METHODPR(Rect, Define, (const Vector2&, const Vector2&), void), AS_CALL_THISCALL));

    // void Rect::Define(const Vector2& point)
    methods.Push(RegisterObjectMethodArgs("void Rect::Define(const Vector2& point)", "void Define(const Vector2&in)", AS_METHODPR(Rect, Define, (const Vector2&), void), AS_CALL_THISCALL));

    // void Rect::Merge(const Vector2& point)
    methods.Push(RegisterObjectMethodArgs("void Rect::Merge(const Vector2& point)", "void Merge(const Vector2&in)", AS_METHODPR(Rect, Merge, (const Vector2&), void), AS_CALL_THISCALL));

    // void Rect::Merge(const Rect& rect)
    methods.Push(RegisterObjectMethodArgs("void Rect::Merge(const Rect& rect)", "void Merge(const Rect&in)", AS_METHODPR(Rect, Merge, (const Rect&), void), AS_CALL_THISCALL));

    // void Rect::Clear()
    methods.Push(RegisterObjectMethodArgs("void Rect::Clear()", "void Clear()", AS_METHODPR(Rect, Clear, (), void), AS_CALL_THISCALL));

    // void Rect::Clip(const Rect& rect)
    methods.Push(RegisterObjectMethodArgs("void Rect::Clip(const Rect& rect)", "void Clip(const Rect&in)", AS_METHODPR(Rect, Clip, (const Rect&), void), AS_CALL_THISCALL));

    // bool Rect::Defined() const
    methods.Push(RegisterObjectMethodArgs("bool Rect::Defined() const", "bool Defined() const", AS_METHODPR(Rect, Defined, () const, bool), AS_CALL_THISCALL));

    // Vector2 Rect::Center() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Rect::Center() const", "Vector2 Center() const", AS_METHODPR(Rect, Center, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Rect::Center() const", "Vector2 get_center() const", AS_METHODPR(Rect, Center, () const, Vector2), AS_CALL_THISCALL));

    // Vector2 Rect::Size() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Rect::Size() const", "Vector2 Size() const", AS_METHODPR(Rect, Size, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Rect::Size() const", "Vector2 get_size() const", AS_METHODPR(Rect, Size, () const, Vector2), AS_CALL_THISCALL));

    // Vector2 Rect::HalfSize() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Rect::HalfSize() const", "Vector2 HalfSize() const", AS_METHODPR(Rect, HalfSize, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Rect::HalfSize() const", "Vector2 get_halfSize() const", AS_METHODPR(Rect, HalfSize, () const, Vector2), AS_CALL_THISCALL));

    // bool Rect::Equals(const Rect& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Rect::Equals(const Rect& rhs) const", "bool Equals(const Rect&in) const", AS_METHODPR(Rect, Equals, (const Rect&) const, bool), AS_CALL_THISCALL));

    // Intersection Rect::IsInside(const Vector2& point) const
    methods.Push(RegisterObjectMethodArgs("Intersection Rect::IsInside(const Vector2& point) const", "Intersection IsInside(const Vector2&in) const", AS_METHODPR(Rect, IsInside, (const Vector2&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Rect::IsInside(const Rect& rect) const
    methods.Push(RegisterObjectMethodArgs("Intersection Rect::IsInside(const Rect& rect) const", "Intersection IsInside(const Rect&in) const", AS_METHODPR(Rect, IsInside, (const Rect&) const, Intersection), AS_CALL_THISCALL));

    // Vector4 Rect::ToVector4() const
    methods.Push(RegisterObjectMethodArgs("Vector4 Rect::ToVector4() const", "Vector4 ToVector4() const", AS_METHODPR(Rect, ToVector4, () const, Vector4), AS_CALL_THISCALL));

    // String Rect::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Rect::ToString() const", "String ToString() const", AS_METHODPR(Rect, ToString, () const, String), AS_CALL_THISCALL));

    // Vector2 Rect::Min() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Rect::Min() const", "Vector2 Min() const", AS_METHODPR(Rect, Min, () const, Vector2), AS_CALL_THISCALL));

    // Vector2 Rect::Max() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Rect::Max() const", "Vector2 Max() const", AS_METHODPR(Rect, Max, () const, Vector2), AS_CALL_THISCALL));

    // float Rect::Left() const
    methods.Push(RegisterObjectMethodArgs("float Rect::Left() const", "float Left() const", AS_METHODPR(Rect, Left, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Rect::Left() const", "float get_left() const", AS_METHODPR(Rect, Left, () const, float), AS_CALL_THISCALL));

    // float Rect::Top() const
    methods.Push(RegisterObjectMethodArgs("float Rect::Top() const", "float Top() const", AS_METHODPR(Rect, Top, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Rect::Top() const", "float get_top() const", AS_METHODPR(Rect, Top, () const, float), AS_CALL_THISCALL));

    // float Rect::Right() const
    methods.Push(RegisterObjectMethodArgs("float Rect::Right() const", "float Right() const", AS_METHODPR(Rect, Right, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Rect::Right() const", "float get_right() const", AS_METHODPR(Rect, Right, () const, float), AS_CALL_THISCALL));

    // float Rect::Bottom() const
    methods.Push(RegisterObjectMethodArgs("float Rect::Bottom() const", "float Bottom() const", AS_METHODPR(Rect, Bottom, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Rect::Bottom() const", "float get_bottom() const", AS_METHODPR(Rect, Bottom, () const, float), AS_CALL_THISCALL));
}

// struct RefCount | File: ../Container/RefCounted.h
void CollectMembers_RefCount(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class RefCounted | File: ../Container/RefCounted.h
void CollectMembers_RefCounted(Vector<RegisterObjectMethodArgs>& methods)
{
    // RefCount* RefCounted::RefCountPtr()
    // Error: type "RefCount*" can not automatically bind

    // void RefCounted::AddRef()
    methods.Push(RegisterObjectMethodArgs("void RefCounted::AddRef()", "void AddRef()", AS_METHODPR(RefCounted, AddRef, (), void), AS_CALL_THISCALL));

    // void RefCounted::ReleaseRef()
    methods.Push(RegisterObjectMethodArgs("void RefCounted::ReleaseRef()", "void ReleaseRef()", AS_METHODPR(RefCounted, ReleaseRef, (), void), AS_CALL_THISCALL));

    // int RefCounted::Refs() const
    methods.Push(RegisterObjectMethodArgs("int RefCounted::Refs() const", "int Refs() const", AS_METHODPR(RefCounted, Refs, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int RefCounted::Refs() const", "int get_refs() const", AS_METHODPR(RefCounted, Refs, () const, int), AS_CALL_THISCALL));

    // int RefCounted::WeakRefs() const
    methods.Push(RegisterObjectMethodArgs("int RefCounted::WeakRefs() const", "int WeakRefs() const", AS_METHODPR(RefCounted, WeakRefs, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int RefCounted::WeakRefs() const", "int get_weakRefs() const", AS_METHODPR(RefCounted, WeakRefs, () const, int), AS_CALL_THISCALL));
}

// SharedPtr<RenderPath> RenderPath::Clone()
// SharedPtr<RenderPath> RenderPath::Clone() | File: ../Graphics/RenderPath.h
static RenderPath* RenderPath_Clone_void(RenderPath* ptr)
{
    SharedPtr<RenderPath> result = ptr->Clone();
    return result.Detach();
}


// class RenderPath | File: ../Graphics/RenderPath.h
void CollectMembers_RenderPath(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // RenderPathCommand* RenderPath::GetCommand(unsigned index)
    // Error: type "RenderPathCommand*" can not automatically bind

    // SharedPtr<RenderPath> RenderPath::Clone()
    methods.Push(RegisterObjectMethodArgs("SharedPtr<RenderPath> RenderPath::Clone()", "RenderPath@+ Clone()", AS_FUNCTION_OBJFIRST(RenderPath_Clone_void), AS_CALL_CDECL_OBJFIRST));

    // bool RenderPath::Load(XMLFile* file)
    methods.Push(RegisterObjectMethodArgs("bool RenderPath::Load(XMLFile* file)", "bool Load(XMLFile@+)", AS_METHODPR(RenderPath, Load, (XMLFile*), bool), AS_CALL_THISCALL));

    // bool RenderPath::Append(XMLFile* file)
    methods.Push(RegisterObjectMethodArgs("bool RenderPath::Append(XMLFile* file)", "bool Append(XMLFile@+)", AS_METHODPR(RenderPath, Append, (XMLFile*), bool), AS_CALL_THISCALL));

    // void RenderPath::SetEnabled(const String& tag, bool active)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::SetEnabled(const String& tag, bool active)", "void SetEnabled(const String&in, bool)", AS_METHODPR(RenderPath, SetEnabled, (const String&, bool), void), AS_CALL_THISCALL));

    // bool RenderPath::IsEnabled(const String& tag) const
    methods.Push(RegisterObjectMethodArgs("bool RenderPath::IsEnabled(const String& tag) const", "bool IsEnabled(const String&in) const", AS_METHODPR(RenderPath, IsEnabled, (const String&) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RenderPath::IsEnabled(const String& tag) const", "bool get_enabled(const String&in) const", AS_METHODPR(RenderPath, IsEnabled, (const String&) const, bool), AS_CALL_THISCALL));

    // bool RenderPath::IsAdded(const String& tag) const
    methods.Push(RegisterObjectMethodArgs("bool RenderPath::IsAdded(const String& tag) const", "bool IsAdded(const String&in) const", AS_METHODPR(RenderPath, IsAdded, (const String&) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RenderPath::IsAdded(const String& tag) const", "bool get_added(const String&in) const", AS_METHODPR(RenderPath, IsAdded, (const String&) const, bool), AS_CALL_THISCALL));

    // void RenderPath::ToggleEnabled(const String& tag)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::ToggleEnabled(const String& tag)", "void ToggleEnabled(const String&in)", AS_METHODPR(RenderPath, ToggleEnabled, (const String&), void), AS_CALL_THISCALL));

    // void RenderPath::SetRenderTarget(unsigned index, const RenderTargetInfo& info)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::SetRenderTarget(unsigned index, const RenderTargetInfo& info)", "void SetRenderTarget(uint, const RenderTargetInfo&in)", AS_METHODPR(RenderPath, SetRenderTarget, (unsigned, const RenderTargetInfo&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPath::SetRenderTarget(unsigned index, const RenderTargetInfo& info)", "void set_renderTargets(uint, const RenderTargetInfo&in)", AS_METHODPR(RenderPath, SetRenderTarget, (unsigned, const RenderTargetInfo&), void), AS_CALL_THISCALL));

    // void RenderPath::AddRenderTarget(const RenderTargetInfo& info)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::AddRenderTarget(const RenderTargetInfo& info)", "void AddRenderTarget(const RenderTargetInfo&in)", AS_METHODPR(RenderPath, AddRenderTarget, (const RenderTargetInfo&), void), AS_CALL_THISCALL));

    // void RenderPath::RemoveRenderTarget(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::RemoveRenderTarget(unsigned index)", "void RemoveRenderTarget(uint)", AS_METHODPR(RenderPath, RemoveRenderTarget, (unsigned), void), AS_CALL_THISCALL));

    // void RenderPath::RemoveRenderTarget(const String& name)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::RemoveRenderTarget(const String& name)", "void RemoveRenderTarget(const String&in)", AS_METHODPR(RenderPath, RemoveRenderTarget, (const String&), void), AS_CALL_THISCALL));

    // void RenderPath::RemoveRenderTargets(const String& tag)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::RemoveRenderTargets(const String& tag)", "void RemoveRenderTargets(const String&in)", AS_METHODPR(RenderPath, RemoveRenderTargets, (const String&), void), AS_CALL_THISCALL));

    // void RenderPath::SetCommand(unsigned index, const RenderPathCommand& command)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::SetCommand(unsigned index, const RenderPathCommand& command)", "void SetCommand(uint, const RenderPathCommand&in)", AS_METHODPR(RenderPath, SetCommand, (unsigned, const RenderPathCommand&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPath::SetCommand(unsigned index, const RenderPathCommand& command)", "void set_commands(uint, const RenderPathCommand&in)", AS_METHODPR(RenderPath, SetCommand, (unsigned, const RenderPathCommand&), void), AS_CALL_THISCALL));

    // void RenderPath::AddCommand(const RenderPathCommand& command)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::AddCommand(const RenderPathCommand& command)", "void AddCommand(const RenderPathCommand&in)", AS_METHODPR(RenderPath, AddCommand, (const RenderPathCommand&), void), AS_CALL_THISCALL));

    // void RenderPath::InsertCommand(unsigned index, const RenderPathCommand& command)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::InsertCommand(unsigned index, const RenderPathCommand& command)", "void InsertCommand(uint, const RenderPathCommand&in)", AS_METHODPR(RenderPath, InsertCommand, (unsigned, const RenderPathCommand&), void), AS_CALL_THISCALL));

    // void RenderPath::RemoveCommand(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::RemoveCommand(unsigned index)", "void RemoveCommand(uint)", AS_METHODPR(RenderPath, RemoveCommand, (unsigned), void), AS_CALL_THISCALL));

    // void RenderPath::RemoveCommands(const String& tag)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::RemoveCommands(const String& tag)", "void RemoveCommands(const String&in)", AS_METHODPR(RenderPath, RemoveCommands, (const String&), void), AS_CALL_THISCALL));

    // void RenderPath::SetShaderParameter(const String& name, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void RenderPath::SetShaderParameter(const String& name, const Variant& value)", "void SetShaderParameter(const String&in, const Variant&in)", AS_METHODPR(RenderPath, SetShaderParameter, (const String&, const Variant&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPath::SetShaderParameter(const String& name, const Variant& value)", "void set_shaderParameters(const String&in, const Variant&in)", AS_METHODPR(RenderPath, SetShaderParameter, (const String&, const Variant&), void), AS_CALL_THISCALL));

    // unsigned RenderPath::GetNumRenderTargets() const
    methods.Push(RegisterObjectMethodArgs("unsigned RenderPath::GetNumRenderTargets() const", "uint GetNumRenderTargets() const", AS_METHODPR(RenderPath, GetNumRenderTargets, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned RenderPath::GetNumRenderTargets() const", "uint get_numRenderTargets() const", AS_METHODPR(RenderPath, GetNumRenderTargets, () const, unsigned), AS_CALL_THISCALL));

    // unsigned RenderPath::GetNumCommands() const
    methods.Push(RegisterObjectMethodArgs("unsigned RenderPath::GetNumCommands() const", "uint GetNumCommands() const", AS_METHODPR(RenderPath, GetNumCommands, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned RenderPath::GetNumCommands() const", "uint get_numCommands() const", AS_METHODPR(RenderPath, GetNumCommands, () const, unsigned), AS_CALL_THISCALL));

    // const Variant& RenderPath::GetShaderParameter(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const Variant& RenderPath::GetShaderParameter(const String& name) const", "const Variant& GetShaderParameter(const String&in) const", AS_METHODPR(RenderPath, GetShaderParameter, (const String&) const, const Variant&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Variant& RenderPath::GetShaderParameter(const String& name) const", "const Variant& get_shaderParameters(const String&in) const", AS_METHODPR(RenderPath, GetShaderParameter, (const String&) const, const Variant&), AS_CALL_THISCALL));
}

// struct RenderPathCommand | File: ../Graphics/RenderPath.h
void CollectMembers_RenderPathCommand(Vector<RegisterObjectMethodArgs>& methods)
{
    // void RenderPathCommand::Load(const XMLElement& element)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::Load(const XMLElement& element)", "void Load(const XMLElement&in)", AS_METHODPR(RenderPathCommand, Load, (const XMLElement&), void), AS_CALL_THISCALL));

    // void RenderPathCommand::SetTextureName(TextureUnit unit, const String& name)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetTextureName(TextureUnit unit, const String& name)", "void SetTextureName(TextureUnit, const String&in)", AS_METHODPR(RenderPathCommand, SetTextureName, (TextureUnit, const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetTextureName(TextureUnit unit, const String& name)", "void set_textureNames(TextureUnit, const String&in)", AS_METHODPR(RenderPathCommand, SetTextureName, (TextureUnit, const String&), void), AS_CALL_THISCALL));

    // void RenderPathCommand::SetShaderParameter(const String& name, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetShaderParameter(const String& name, const Variant& value)", "void SetShaderParameter(const String&in, const Variant&in)", AS_METHODPR(RenderPathCommand, SetShaderParameter, (const String&, const Variant&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetShaderParameter(const String& name, const Variant& value)", "void set_shaderParameters(const String&in, const Variant&in)", AS_METHODPR(RenderPathCommand, SetShaderParameter, (const String&, const Variant&), void), AS_CALL_THISCALL));

    // void RenderPathCommand::RemoveShaderParameter(const String& name)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::RemoveShaderParameter(const String& name)", "void RemoveShaderParameter(const String&in)", AS_METHODPR(RenderPathCommand, RemoveShaderParameter, (const String&), void), AS_CALL_THISCALL));

    // void RenderPathCommand::SetNumOutputs(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetNumOutputs(unsigned num)", "void SetNumOutputs(uint)", AS_METHODPR(RenderPathCommand, SetNumOutputs, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetNumOutputs(unsigned num)", "void set_numOutputs(uint)", AS_METHODPR(RenderPathCommand, SetNumOutputs, (unsigned), void), AS_CALL_THISCALL));

    // void RenderPathCommand::SetOutput(unsigned index, const String& name, CubeMapFace face=FACE_POSITIVE_X)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetOutput(unsigned index, const String& name, CubeMapFace face=FACE_POSITIVE_X)", "void SetOutput(uint, const String&in, CubeMapFace = FACE_POSITIVE_X)", AS_METHODPR(RenderPathCommand, SetOutput, (unsigned, const String&, CubeMapFace), void), AS_CALL_THISCALL));

    // void RenderPathCommand::SetOutputName(unsigned index, const String& name)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetOutputName(unsigned index, const String& name)", "void SetOutputName(uint, const String&in)", AS_METHODPR(RenderPathCommand, SetOutputName, (unsigned, const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetOutputName(unsigned index, const String& name)", "void set_outputNames(uint, const String&in)", AS_METHODPR(RenderPathCommand, SetOutputName, (unsigned, const String&), void), AS_CALL_THISCALL));

    // void RenderPathCommand::SetOutputFace(unsigned index, CubeMapFace face)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetOutputFace(unsigned index, CubeMapFace face)", "void SetOutputFace(uint, CubeMapFace)", AS_METHODPR(RenderPathCommand, SetOutputFace, (unsigned, CubeMapFace), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetOutputFace(unsigned index, CubeMapFace face)", "void set_outputFaces(uint, CubeMapFace)", AS_METHODPR(RenderPathCommand, SetOutputFace, (unsigned, CubeMapFace), void), AS_CALL_THISCALL));

    // void RenderPathCommand::SetDepthStencilName(const String& name)
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetDepthStencilName(const String& name)", "void SetDepthStencilName(const String&in)", AS_METHODPR(RenderPathCommand, SetDepthStencilName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderPathCommand::SetDepthStencilName(const String& name)", "void set_depthStencilName(const String&in)", AS_METHODPR(RenderPathCommand, SetDepthStencilName, (const String&), void), AS_CALL_THISCALL));

    // const String& RenderPathCommand::GetTextureName(TextureUnit unit) const
    methods.Push(RegisterObjectMethodArgs("const String& RenderPathCommand::GetTextureName(TextureUnit unit) const", "const String& GetTextureName(TextureUnit) const", AS_METHODPR(RenderPathCommand, GetTextureName, (TextureUnit) const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& RenderPathCommand::GetTextureName(TextureUnit unit) const", "const String& get_textureNames(TextureUnit) const", AS_METHODPR(RenderPathCommand, GetTextureName, (TextureUnit) const, const String&), AS_CALL_THISCALL));

    // const Variant& RenderPathCommand::GetShaderParameter(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const Variant& RenderPathCommand::GetShaderParameter(const String& name) const", "const Variant& GetShaderParameter(const String&in) const", AS_METHODPR(RenderPathCommand, GetShaderParameter, (const String&) const, const Variant&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Variant& RenderPathCommand::GetShaderParameter(const String& name) const", "const Variant& get_shaderParameters(const String&in) const", AS_METHODPR(RenderPathCommand, GetShaderParameter, (const String&) const, const Variant&), AS_CALL_THISCALL));

    // unsigned RenderPathCommand::GetNumOutputs() const
    methods.Push(RegisterObjectMethodArgs("unsigned RenderPathCommand::GetNumOutputs() const", "uint GetNumOutputs() const", AS_METHODPR(RenderPathCommand, GetNumOutputs, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned RenderPathCommand::GetNumOutputs() const", "uint get_numOutputs() const", AS_METHODPR(RenderPathCommand, GetNumOutputs, () const, unsigned), AS_CALL_THISCALL));

    // const String& RenderPathCommand::GetOutputName(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const String& RenderPathCommand::GetOutputName(unsigned index) const", "const String& GetOutputName(uint) const", AS_METHODPR(RenderPathCommand, GetOutputName, (unsigned) const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& RenderPathCommand::GetOutputName(unsigned index) const", "const String& get_outputNames(uint) const", AS_METHODPR(RenderPathCommand, GetOutputName, (unsigned) const, const String&), AS_CALL_THISCALL));

    // CubeMapFace RenderPathCommand::GetOutputFace(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("CubeMapFace RenderPathCommand::GetOutputFace(unsigned index) const", "CubeMapFace GetOutputFace(uint) const", AS_METHODPR(RenderPathCommand, GetOutputFace, (unsigned) const, CubeMapFace), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CubeMapFace RenderPathCommand::GetOutputFace(unsigned index) const", "CubeMapFace get_outputFaces(uint) const", AS_METHODPR(RenderPathCommand, GetOutputFace, (unsigned) const, CubeMapFace), AS_CALL_THISCALL));

    // const String& RenderPathCommand::GetDepthStencilName() const
    methods.Push(RegisterObjectMethodArgs("const String& RenderPathCommand::GetDepthStencilName() const", "const String& GetDepthStencilName() const", AS_METHODPR(RenderPathCommand, GetDepthStencilName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& RenderPathCommand::GetDepthStencilName() const", "const String& get_depthStencilName() const", AS_METHODPR(RenderPathCommand, GetDepthStencilName, () const, const String&), AS_CALL_THISCALL));
}

// class RenderSurface | File: ../Graphics/RenderSurface.h
void CollectMembers_RenderSurface(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // void* RenderSurface::GetReadOnlyView() const
    // Error: type "void*" can not automatically bind

    // void* RenderSurface::GetRenderTargetView() const
    // Error: type "void*" can not automatically bind

    // void* RenderSurface::GetSurface() const
    // Error: type "void*" can not automatically bind

    // void RenderSurface::SetNumViewports(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetNumViewports(unsigned num)", "void SetNumViewports(uint)", AS_METHODPR(RenderSurface, SetNumViewports, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetNumViewports(unsigned num)", "void set_numViewports(uint)", AS_METHODPR(RenderSurface, SetNumViewports, (unsigned), void), AS_CALL_THISCALL));

    // void RenderSurface::SetViewport(unsigned index, Viewport* viewport)
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetViewport(unsigned index, Viewport* viewport)", "void SetViewport(uint, Viewport@+)", AS_METHODPR(RenderSurface, SetViewport, (unsigned, Viewport*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetViewport(unsigned index, Viewport* viewport)", "void set_viewports(uint, Viewport@+)", AS_METHODPR(RenderSurface, SetViewport, (unsigned, Viewport*), void), AS_CALL_THISCALL));

    // void RenderSurface::SetUpdateMode(RenderSurfaceUpdateMode mode)
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetUpdateMode(RenderSurfaceUpdateMode mode)", "void SetUpdateMode(RenderSurfaceUpdateMode)", AS_METHODPR(RenderSurface, SetUpdateMode, (RenderSurfaceUpdateMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetUpdateMode(RenderSurfaceUpdateMode mode)", "void set_updateMode(RenderSurfaceUpdateMode)", AS_METHODPR(RenderSurface, SetUpdateMode, (RenderSurfaceUpdateMode), void), AS_CALL_THISCALL));

    // void RenderSurface::SetLinkedRenderTarget(RenderSurface* renderTarget)
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetLinkedRenderTarget(RenderSurface* renderTarget)", "void SetLinkedRenderTarget(RenderSurface@+)", AS_METHODPR(RenderSurface, SetLinkedRenderTarget, (RenderSurface*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetLinkedRenderTarget(RenderSurface* renderTarget)", "void set_linkedRenderTarget(RenderSurface@+)", AS_METHODPR(RenderSurface, SetLinkedRenderTarget, (RenderSurface*), void), AS_CALL_THISCALL));

    // void RenderSurface::SetLinkedDepthStencil(RenderSurface* depthStencil)
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetLinkedDepthStencil(RenderSurface* depthStencil)", "void SetLinkedDepthStencil(RenderSurface@+)", AS_METHODPR(RenderSurface, SetLinkedDepthStencil, (RenderSurface*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetLinkedDepthStencil(RenderSurface* depthStencil)", "void set_linkedDepthStencil(RenderSurface@+)", AS_METHODPR(RenderSurface, SetLinkedDepthStencil, (RenderSurface*), void), AS_CALL_THISCALL));

    // void RenderSurface::QueueUpdate()
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::QueueUpdate()", "void QueueUpdate()", AS_METHODPR(RenderSurface, QueueUpdate, (), void), AS_CALL_THISCALL));

    // void RenderSurface::Release()
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::Release()", "void Release()", AS_METHODPR(RenderSurface, Release, (), void), AS_CALL_THISCALL));

    // void RenderSurface::OnDeviceLost()
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::OnDeviceLost()", "void OnDeviceLost()", AS_METHODPR(RenderSurface, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // bool RenderSurface::CreateRenderBuffer(unsigned width, unsigned height, unsigned format, int multiSample)
    methods.Push(RegisterObjectMethodArgs("bool RenderSurface::CreateRenderBuffer(unsigned width, unsigned height, unsigned format, int multiSample)", "bool CreateRenderBuffer(uint, uint, uint, int)", AS_METHODPR(RenderSurface, CreateRenderBuffer, (unsigned, unsigned, unsigned, int), bool), AS_CALL_THISCALL));

    // int RenderSurface::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int RenderSurface::GetWidth() const", "int GetWidth() const", AS_METHODPR(RenderSurface, GetWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int RenderSurface::GetWidth() const", "int get_width() const", AS_METHODPR(RenderSurface, GetWidth, () const, int), AS_CALL_THISCALL));

    // int RenderSurface::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int RenderSurface::GetHeight() const", "int GetHeight() const", AS_METHODPR(RenderSurface, GetHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int RenderSurface::GetHeight() const", "int get_height() const", AS_METHODPR(RenderSurface, GetHeight, () const, int), AS_CALL_THISCALL));

    // TextureUsage RenderSurface::GetUsage() const
    methods.Push(RegisterObjectMethodArgs("TextureUsage RenderSurface::GetUsage() const", "TextureUsage GetUsage() const", AS_METHODPR(RenderSurface, GetUsage, () const, TextureUsage), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TextureUsage RenderSurface::GetUsage() const", "TextureUsage get_usage() const", AS_METHODPR(RenderSurface, GetUsage, () const, TextureUsage), AS_CALL_THISCALL));

    // int RenderSurface::GetMultiSample() const
    methods.Push(RegisterObjectMethodArgs("int RenderSurface::GetMultiSample() const", "int GetMultiSample() const", AS_METHODPR(RenderSurface, GetMultiSample, () const, int), AS_CALL_THISCALL));

    // bool RenderSurface::GetAutoResolve() const
    methods.Push(RegisterObjectMethodArgs("bool RenderSurface::GetAutoResolve() const", "bool GetAutoResolve() const", AS_METHODPR(RenderSurface, GetAutoResolve, () const, bool), AS_CALL_THISCALL));

    // unsigned RenderSurface::GetNumViewports() const
    methods.Push(RegisterObjectMethodArgs("unsigned RenderSurface::GetNumViewports() const", "uint GetNumViewports() const", AS_METHODPR(RenderSurface, GetNumViewports, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned RenderSurface::GetNumViewports() const", "uint get_numViewports() const", AS_METHODPR(RenderSurface, GetNumViewports, () const, unsigned), AS_CALL_THISCALL));

    // Viewport* RenderSurface::GetViewport(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Viewport* RenderSurface::GetViewport(unsigned index) const", "Viewport@+ GetViewport(uint) const", AS_METHODPR(RenderSurface, GetViewport, (unsigned) const, Viewport*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Viewport* RenderSurface::GetViewport(unsigned index) const", "Viewport@+ get_viewports(uint) const", AS_METHODPR(RenderSurface, GetViewport, (unsigned) const, Viewport*), AS_CALL_THISCALL));

    // RenderSurfaceUpdateMode RenderSurface::GetUpdateMode() const
    methods.Push(RegisterObjectMethodArgs("RenderSurfaceUpdateMode RenderSurface::GetUpdateMode() const", "RenderSurfaceUpdateMode GetUpdateMode() const", AS_METHODPR(RenderSurface, GetUpdateMode, () const, RenderSurfaceUpdateMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RenderSurfaceUpdateMode RenderSurface::GetUpdateMode() const", "RenderSurfaceUpdateMode get_updateMode() const", AS_METHODPR(RenderSurface, GetUpdateMode, () const, RenderSurfaceUpdateMode), AS_CALL_THISCALL));

    // RenderSurface* RenderSurface::GetLinkedRenderTarget() const
    methods.Push(RegisterObjectMethodArgs("RenderSurface* RenderSurface::GetLinkedRenderTarget() const", "RenderSurface@+ GetLinkedRenderTarget() const", AS_METHODPR(RenderSurface, GetLinkedRenderTarget, () const, RenderSurface*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RenderSurface* RenderSurface::GetLinkedRenderTarget() const", "RenderSurface@+ get_linkedRenderTarget() const", AS_METHODPR(RenderSurface, GetLinkedRenderTarget, () const, RenderSurface*), AS_CALL_THISCALL));

    // RenderSurface* RenderSurface::GetLinkedDepthStencil() const
    methods.Push(RegisterObjectMethodArgs("RenderSurface* RenderSurface::GetLinkedDepthStencil() const", "RenderSurface@+ GetLinkedDepthStencil() const", AS_METHODPR(RenderSurface, GetLinkedDepthStencil, () const, RenderSurface*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RenderSurface* RenderSurface::GetLinkedDepthStencil() const", "RenderSurface@+ get_linkedDepthStencil() const", AS_METHODPR(RenderSurface, GetLinkedDepthStencil, () const, RenderSurface*), AS_CALL_THISCALL));

    // bool RenderSurface::IsUpdateQueued() const
    methods.Push(RegisterObjectMethodArgs("bool RenderSurface::IsUpdateQueued() const", "bool IsUpdateQueued() const", AS_METHODPR(RenderSurface, IsUpdateQueued, () const, bool), AS_CALL_THISCALL));

    // void RenderSurface::ResetUpdateQueued()
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::ResetUpdateQueued()", "void ResetUpdateQueued()", AS_METHODPR(RenderSurface, ResetUpdateQueued, (), void), AS_CALL_THISCALL));

    // Texture* RenderSurface::GetParentTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture* RenderSurface::GetParentTexture() const", "Texture@+ GetParentTexture() const", AS_METHODPR(RenderSurface, GetParentTexture, () const, Texture*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture* RenderSurface::GetParentTexture() const", "Texture@+ get_parentTexture() const", AS_METHODPR(RenderSurface, GetParentTexture, () const, Texture*), AS_CALL_THISCALL));

    // unsigned RenderSurface::GetTarget() const
    methods.Push(RegisterObjectMethodArgs("unsigned RenderSurface::GetTarget() const", "uint GetTarget() const", AS_METHODPR(RenderSurface, GetTarget, () const, unsigned), AS_CALL_THISCALL));

    // unsigned RenderSurface::GetRenderBuffer() const
    methods.Push(RegisterObjectMethodArgs("unsigned RenderSurface::GetRenderBuffer() const", "uint GetRenderBuffer() const", AS_METHODPR(RenderSurface, GetRenderBuffer, () const, unsigned), AS_CALL_THISCALL));

    // bool RenderSurface::IsResolveDirty() const
    methods.Push(RegisterObjectMethodArgs("bool RenderSurface::IsResolveDirty() const", "bool IsResolveDirty() const", AS_METHODPR(RenderSurface, IsResolveDirty, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RenderSurface::IsResolveDirty() const", "bool get_resolveDirty() const", AS_METHODPR(RenderSurface, IsResolveDirty, () const, bool), AS_CALL_THISCALL));

    // void RenderSurface::SetResolveDirty(bool enable)
    methods.Push(RegisterObjectMethodArgs("void RenderSurface::SetResolveDirty(bool enable)", "void SetResolveDirty(bool)", AS_METHODPR(RenderSurface, SetResolveDirty, (bool), void), AS_CALL_THISCALL));
}

// struct RenderTargetInfo | File: ../Graphics/RenderPath.h
void CollectMembers_RenderTargetInfo(Vector<RegisterObjectMethodArgs>& methods)
{
    // void RenderTargetInfo::Load(const XMLElement& element)
    methods.Push(RegisterObjectMethodArgs("void RenderTargetInfo::Load(const XMLElement& element)", "void Load(const XMLElement&in)", AS_METHODPR(RenderTargetInfo, Load, (const XMLElement&), void), AS_CALL_THISCALL));
}

// class Renderer | File: ../Graphics/Renderer.h
void CollectMembers_Renderer(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Renderer::SetNumViewports(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetNumViewports(unsigned num)", "void SetNumViewports(uint)", AS_METHODPR(Renderer, SetNumViewports, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetNumViewports(unsigned num)", "void set_numViewports(uint)", AS_METHODPR(Renderer, SetNumViewports, (unsigned), void), AS_CALL_THISCALL));

    // void Renderer::SetViewport(unsigned index, Viewport* viewport)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetViewport(unsigned index, Viewport* viewport)", "void SetViewport(uint, Viewport@+)", AS_METHODPR(Renderer, SetViewport, (unsigned, Viewport*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetViewport(unsigned index, Viewport* viewport)", "void set_viewports(uint, Viewport@+)", AS_METHODPR(Renderer, SetViewport, (unsigned, Viewport*), void), AS_CALL_THISCALL));

    // void Renderer::SetDefaultRenderPath(RenderPath* renderPath)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDefaultRenderPath(RenderPath* renderPath)", "void SetDefaultRenderPath(RenderPath@+)", AS_METHODPR(Renderer, SetDefaultRenderPath, (RenderPath*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDefaultRenderPath(RenderPath* renderPath)", "void set_defaultRenderPath(RenderPath@+)", AS_METHODPR(Renderer, SetDefaultRenderPath, (RenderPath*), void), AS_CALL_THISCALL));

    // void Renderer::SetDefaultRenderPath(XMLFile* xmlFile)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDefaultRenderPath(XMLFile* xmlFile)", "void SetDefaultRenderPath(XMLFile@+)", AS_METHODPR(Renderer, SetDefaultRenderPath, (XMLFile*), void), AS_CALL_THISCALL));

    // void Renderer::SetDefaultTechnique(Technique* technique)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDefaultTechnique(Technique* technique)", "void SetDefaultTechnique(Technique@+)", AS_METHODPR(Renderer, SetDefaultTechnique, (Technique*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDefaultTechnique(Technique* technique)", "void set_defaultTechnique(Technique@+)", AS_METHODPR(Renderer, SetDefaultTechnique, (Technique*), void), AS_CALL_THISCALL));

    // void Renderer::SetHDRRendering(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetHDRRendering(bool enable)", "void SetHDRRendering(bool)", AS_METHODPR(Renderer, SetHDRRendering, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetHDRRendering(bool enable)", "void set_hdrRendering(bool)", AS_METHODPR(Renderer, SetHDRRendering, (bool), void), AS_CALL_THISCALL));

    // void Renderer::SetSpecularLighting(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetSpecularLighting(bool enable)", "void SetSpecularLighting(bool)", AS_METHODPR(Renderer, SetSpecularLighting, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetSpecularLighting(bool enable)", "void set_specularLighting(bool)", AS_METHODPR(Renderer, SetSpecularLighting, (bool), void), AS_CALL_THISCALL));

    // void Renderer::SetTextureAnisotropy(int level)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetTextureAnisotropy(int level)", "void SetTextureAnisotropy(int)", AS_METHODPR(Renderer, SetTextureAnisotropy, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetTextureAnisotropy(int level)", "void set_textureAnisotropy(int)", AS_METHODPR(Renderer, SetTextureAnisotropy, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetTextureFilterMode(TextureFilterMode mode)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetTextureFilterMode(TextureFilterMode mode)", "void SetTextureFilterMode(TextureFilterMode)", AS_METHODPR(Renderer, SetTextureFilterMode, (TextureFilterMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetTextureFilterMode(TextureFilterMode mode)", "void set_textureFilterMode(TextureFilterMode)", AS_METHODPR(Renderer, SetTextureFilterMode, (TextureFilterMode), void), AS_CALL_THISCALL));

    // void Renderer::SetTextureQuality(MaterialQuality quality)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetTextureQuality(MaterialQuality quality)", "void SetTextureQuality(MaterialQuality)", AS_METHODPR(Renderer, SetTextureQuality, (MaterialQuality), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetTextureQuality(MaterialQuality quality)", "void set_textureQuality(MaterialQuality)", AS_METHODPR(Renderer, SetTextureQuality, (MaterialQuality), void), AS_CALL_THISCALL));

    // void Renderer::SetMaterialQuality(MaterialQuality quality)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMaterialQuality(MaterialQuality quality)", "void SetMaterialQuality(MaterialQuality)", AS_METHODPR(Renderer, SetMaterialQuality, (MaterialQuality), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMaterialQuality(MaterialQuality quality)", "void set_materialQuality(MaterialQuality)", AS_METHODPR(Renderer, SetMaterialQuality, (MaterialQuality), void), AS_CALL_THISCALL));

    // void Renderer::SetDrawShadows(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDrawShadows(bool enable)", "void SetDrawShadows(bool)", AS_METHODPR(Renderer, SetDrawShadows, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDrawShadows(bool enable)", "void set_drawShadows(bool)", AS_METHODPR(Renderer, SetDrawShadows, (bool), void), AS_CALL_THISCALL));

    // void Renderer::SetShadowMapSize(int size)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetShadowMapSize(int size)", "void SetShadowMapSize(int)", AS_METHODPR(Renderer, SetShadowMapSize, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetShadowMapSize(int size)", "void set_shadowMapSize(int)", AS_METHODPR(Renderer, SetShadowMapSize, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetShadowQuality(ShadowQuality quality)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetShadowQuality(ShadowQuality quality)", "void SetShadowQuality(ShadowQuality)", AS_METHODPR(Renderer, SetShadowQuality, (ShadowQuality), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetShadowQuality(ShadowQuality quality)", "void set_shadowQuality(ShadowQuality)", AS_METHODPR(Renderer, SetShadowQuality, (ShadowQuality), void), AS_CALL_THISCALL));

    // void Renderer::SetShadowSoftness(float shadowSoftness)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetShadowSoftness(float shadowSoftness)", "void SetShadowSoftness(float)", AS_METHODPR(Renderer, SetShadowSoftness, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetShadowSoftness(float shadowSoftness)", "void set_shadowSoftness(float)", AS_METHODPR(Renderer, SetShadowSoftness, (float), void), AS_CALL_THISCALL));

    // void Renderer::SetVSMShadowParameters(float minVariance, float lightBleedingReduction)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetVSMShadowParameters(float minVariance, float lightBleedingReduction)", "void SetVSMShadowParameters(float, float)", AS_METHODPR(Renderer, SetVSMShadowParameters, (float, float), void), AS_CALL_THISCALL));

    // void Renderer::SetVSMMultiSample(int multiSample)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetVSMMultiSample(int multiSample)", "void SetVSMMultiSample(int)", AS_METHODPR(Renderer, SetVSMMultiSample, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetVSMMultiSample(int multiSample)", "void set_vsmMultiSample(int)", AS_METHODPR(Renderer, SetVSMMultiSample, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetReuseShadowMaps(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetReuseShadowMaps(bool enable)", "void SetReuseShadowMaps(bool)", AS_METHODPR(Renderer, SetReuseShadowMaps, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetReuseShadowMaps(bool enable)", "void set_reuseShadowMaps(bool)", AS_METHODPR(Renderer, SetReuseShadowMaps, (bool), void), AS_CALL_THISCALL));

    // void Renderer::SetMaxShadowMaps(int shadowMaps)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMaxShadowMaps(int shadowMaps)", "void SetMaxShadowMaps(int)", AS_METHODPR(Renderer, SetMaxShadowMaps, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMaxShadowMaps(int shadowMaps)", "void set_maxShadowMaps(int)", AS_METHODPR(Renderer, SetMaxShadowMaps, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetDynamicInstancing(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDynamicInstancing(bool enable)", "void SetDynamicInstancing(bool)", AS_METHODPR(Renderer, SetDynamicInstancing, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetDynamicInstancing(bool enable)", "void set_dynamicInstancing(bool)", AS_METHODPR(Renderer, SetDynamicInstancing, (bool), void), AS_CALL_THISCALL));

    // void Renderer::SetNumExtraInstancingBufferElements(int elements)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetNumExtraInstancingBufferElements(int elements)", "void SetNumExtraInstancingBufferElements(int)", AS_METHODPR(Renderer, SetNumExtraInstancingBufferElements, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetNumExtraInstancingBufferElements(int elements)", "void set_numExtraInstancingBufferElements(int)", AS_METHODPR(Renderer, SetNumExtraInstancingBufferElements, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetMinInstances(int instances)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMinInstances(int instances)", "void SetMinInstances(int)", AS_METHODPR(Renderer, SetMinInstances, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMinInstances(int instances)", "void set_minInstances(int)", AS_METHODPR(Renderer, SetMinInstances, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetMaxSortedInstances(int instances)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMaxSortedInstances(int instances)", "void SetMaxSortedInstances(int)", AS_METHODPR(Renderer, SetMaxSortedInstances, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMaxSortedInstances(int instances)", "void set_maxSortedInstances(int)", AS_METHODPR(Renderer, SetMaxSortedInstances, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetMaxOccluderTriangles(int triangles)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMaxOccluderTriangles(int triangles)", "void SetMaxOccluderTriangles(int)", AS_METHODPR(Renderer, SetMaxOccluderTriangles, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMaxOccluderTriangles(int triangles)", "void set_maxOccluderTriangles(int)", AS_METHODPR(Renderer, SetMaxOccluderTriangles, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetOcclusionBufferSize(int size)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetOcclusionBufferSize(int size)", "void SetOcclusionBufferSize(int)", AS_METHODPR(Renderer, SetOcclusionBufferSize, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetOcclusionBufferSize(int size)", "void set_occlusionBufferSize(int)", AS_METHODPR(Renderer, SetOcclusionBufferSize, (int), void), AS_CALL_THISCALL));

    // void Renderer::SetOccluderSizeThreshold(float screenSize)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetOccluderSizeThreshold(float screenSize)", "void SetOccluderSizeThreshold(float)", AS_METHODPR(Renderer, SetOccluderSizeThreshold, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetOccluderSizeThreshold(float screenSize)", "void set_occluderSizeThreshold(float)", AS_METHODPR(Renderer, SetOccluderSizeThreshold, (float), void), AS_CALL_THISCALL));

    // void Renderer::SetThreadedOcclusion(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetThreadedOcclusion(bool enable)", "void SetThreadedOcclusion(bool)", AS_METHODPR(Renderer, SetThreadedOcclusion, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetThreadedOcclusion(bool enable)", "void set_threadedOcclusion(bool)", AS_METHODPR(Renderer, SetThreadedOcclusion, (bool), void), AS_CALL_THISCALL));

    // void Renderer::SetMobileShadowBiasMul(float mul)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMobileShadowBiasMul(float mul)", "void SetMobileShadowBiasMul(float)", AS_METHODPR(Renderer, SetMobileShadowBiasMul, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMobileShadowBiasMul(float mul)", "void set_mobileShadowBiasMul(float)", AS_METHODPR(Renderer, SetMobileShadowBiasMul, (float), void), AS_CALL_THISCALL));

    // void Renderer::SetMobileShadowBiasAdd(float add)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMobileShadowBiasAdd(float add)", "void SetMobileShadowBiasAdd(float)", AS_METHODPR(Renderer, SetMobileShadowBiasAdd, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMobileShadowBiasAdd(float add)", "void set_mobileShadowBiasAdd(float)", AS_METHODPR(Renderer, SetMobileShadowBiasAdd, (float), void), AS_CALL_THISCALL));

    // void Renderer::SetMobileNormalOffsetMul(float mul)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMobileNormalOffsetMul(float mul)", "void SetMobileNormalOffsetMul(float)", AS_METHODPR(Renderer, SetMobileNormalOffsetMul, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetMobileNormalOffsetMul(float mul)", "void set_mobileNormalOffsetMul(float)", AS_METHODPR(Renderer, SetMobileNormalOffsetMul, (float), void), AS_CALL_THISCALL));

    // void Renderer::ReloadShaders()
    methods.Push(RegisterObjectMethodArgs("void Renderer::ReloadShaders()", "void ReloadShaders()", AS_METHODPR(Renderer, ReloadShaders, (), void), AS_CALL_THISCALL));

    // void Renderer::ApplyShadowMapFilter(View* view, Texture2D* shadowMap, float blurScale)
    methods.Push(RegisterObjectMethodArgs("void Renderer::ApplyShadowMapFilter(View* view, Texture2D* shadowMap, float blurScale)", "void ApplyShadowMapFilter(View@+, Texture2D@+, float)", AS_METHODPR(Renderer, ApplyShadowMapFilter, (View*, Texture2D*, float), void), AS_CALL_THISCALL));

    // unsigned Renderer::GetNumViewports() const
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumViewports() const", "uint GetNumViewports() const", AS_METHODPR(Renderer, GetNumViewports, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumViewports() const", "uint get_numViewports() const", AS_METHODPR(Renderer, GetNumViewports, () const, unsigned), AS_CALL_THISCALL));

    // Viewport* Renderer::GetViewport(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Viewport* Renderer::GetViewport(unsigned index) const", "Viewport@+ GetViewport(uint) const", AS_METHODPR(Renderer, GetViewport, (unsigned) const, Viewport*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Viewport* Renderer::GetViewport(unsigned index) const", "Viewport@+ get_viewports(uint) const", AS_METHODPR(Renderer, GetViewport, (unsigned) const, Viewport*), AS_CALL_THISCALL));

    // Viewport* Renderer::GetViewportForScene(Scene* scene, unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Viewport* Renderer::GetViewportForScene(Scene* scene, unsigned index) const", "Viewport@+ GetViewportForScene(Scene@+, uint) const", AS_METHODPR(Renderer, GetViewportForScene, (Scene*, unsigned) const, Viewport*), AS_CALL_THISCALL));

    // RenderPath* Renderer::GetDefaultRenderPath() const
    methods.Push(RegisterObjectMethodArgs("RenderPath* Renderer::GetDefaultRenderPath() const", "RenderPath@+ GetDefaultRenderPath() const", AS_METHODPR(Renderer, GetDefaultRenderPath, () const, RenderPath*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RenderPath* Renderer::GetDefaultRenderPath() const", "RenderPath@+ get_defaultRenderPath() const", AS_METHODPR(Renderer, GetDefaultRenderPath, () const, RenderPath*), AS_CALL_THISCALL));

    // Technique* Renderer::GetDefaultTechnique() const
    methods.Push(RegisterObjectMethodArgs("Technique* Renderer::GetDefaultTechnique() const", "Technique@+ GetDefaultTechnique() const", AS_METHODPR(Renderer, GetDefaultTechnique, () const, Technique*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Technique* Renderer::GetDefaultTechnique() const", "Technique@+ get_defaultTechnique() const", AS_METHODPR(Renderer, GetDefaultTechnique, () const, Technique*), AS_CALL_THISCALL));

    // bool Renderer::GetHDRRendering() const
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetHDRRendering() const", "bool GetHDRRendering() const", AS_METHODPR(Renderer, GetHDRRendering, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetHDRRendering() const", "bool get_hdrRendering() const", AS_METHODPR(Renderer, GetHDRRendering, () const, bool), AS_CALL_THISCALL));

    // bool Renderer::GetSpecularLighting() const
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetSpecularLighting() const", "bool GetSpecularLighting() const", AS_METHODPR(Renderer, GetSpecularLighting, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetSpecularLighting() const", "bool get_specularLighting() const", AS_METHODPR(Renderer, GetSpecularLighting, () const, bool), AS_CALL_THISCALL));

    // bool Renderer::GetDrawShadows() const
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetDrawShadows() const", "bool GetDrawShadows() const", AS_METHODPR(Renderer, GetDrawShadows, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetDrawShadows() const", "bool get_drawShadows() const", AS_METHODPR(Renderer, GetDrawShadows, () const, bool), AS_CALL_THISCALL));

    // int Renderer::GetTextureAnisotropy() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetTextureAnisotropy() const", "int GetTextureAnisotropy() const", AS_METHODPR(Renderer, GetTextureAnisotropy, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetTextureAnisotropy() const", "int get_textureAnisotropy() const", AS_METHODPR(Renderer, GetTextureAnisotropy, () const, int), AS_CALL_THISCALL));

    // TextureFilterMode Renderer::GetTextureFilterMode() const
    methods.Push(RegisterObjectMethodArgs("TextureFilterMode Renderer::GetTextureFilterMode() const", "TextureFilterMode GetTextureFilterMode() const", AS_METHODPR(Renderer, GetTextureFilterMode, () const, TextureFilterMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TextureFilterMode Renderer::GetTextureFilterMode() const", "TextureFilterMode get_textureFilterMode() const", AS_METHODPR(Renderer, GetTextureFilterMode, () const, TextureFilterMode), AS_CALL_THISCALL));

    // MaterialQuality Renderer::GetTextureQuality() const
    methods.Push(RegisterObjectMethodArgs("MaterialQuality Renderer::GetTextureQuality() const", "MaterialQuality GetTextureQuality() const", AS_METHODPR(Renderer, GetTextureQuality, () const, MaterialQuality), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("MaterialQuality Renderer::GetTextureQuality() const", "MaterialQuality get_textureQuality() const", AS_METHODPR(Renderer, GetTextureQuality, () const, MaterialQuality), AS_CALL_THISCALL));

    // MaterialQuality Renderer::GetMaterialQuality() const
    methods.Push(RegisterObjectMethodArgs("MaterialQuality Renderer::GetMaterialQuality() const", "MaterialQuality GetMaterialQuality() const", AS_METHODPR(Renderer, GetMaterialQuality, () const, MaterialQuality), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("MaterialQuality Renderer::GetMaterialQuality() const", "MaterialQuality get_materialQuality() const", AS_METHODPR(Renderer, GetMaterialQuality, () const, MaterialQuality), AS_CALL_THISCALL));

    // int Renderer::GetShadowMapSize() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetShadowMapSize() const", "int GetShadowMapSize() const", AS_METHODPR(Renderer, GetShadowMapSize, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetShadowMapSize() const", "int get_shadowMapSize() const", AS_METHODPR(Renderer, GetShadowMapSize, () const, int), AS_CALL_THISCALL));

    // ShadowQuality Renderer::GetShadowQuality() const
    methods.Push(RegisterObjectMethodArgs("ShadowQuality Renderer::GetShadowQuality() const", "ShadowQuality GetShadowQuality() const", AS_METHODPR(Renderer, GetShadowQuality, () const, ShadowQuality), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ShadowQuality Renderer::GetShadowQuality() const", "ShadowQuality get_shadowQuality() const", AS_METHODPR(Renderer, GetShadowQuality, () const, ShadowQuality), AS_CALL_THISCALL));

    // float Renderer::GetShadowSoftness() const
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetShadowSoftness() const", "float GetShadowSoftness() const", AS_METHODPR(Renderer, GetShadowSoftness, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetShadowSoftness() const", "float get_shadowSoftness() const", AS_METHODPR(Renderer, GetShadowSoftness, () const, float), AS_CALL_THISCALL));

    // Vector2 Renderer::GetVSMShadowParameters() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Renderer::GetVSMShadowParameters() const", "Vector2 GetVSMShadowParameters() const", AS_METHODPR(Renderer, GetVSMShadowParameters, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Renderer::GetVSMShadowParameters() const", "Vector2 get_vsmShadowParameters() const", AS_METHODPR(Renderer, GetVSMShadowParameters, () const, Vector2), AS_CALL_THISCALL));

    // int Renderer::GetVSMMultiSample() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetVSMMultiSample() const", "int GetVSMMultiSample() const", AS_METHODPR(Renderer, GetVSMMultiSample, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetVSMMultiSample() const", "int get_vsmMultiSample() const", AS_METHODPR(Renderer, GetVSMMultiSample, () const, int), AS_CALL_THISCALL));

    // bool Renderer::GetReuseShadowMaps() const
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetReuseShadowMaps() const", "bool GetReuseShadowMaps() const", AS_METHODPR(Renderer, GetReuseShadowMaps, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetReuseShadowMaps() const", "bool get_reuseShadowMaps() const", AS_METHODPR(Renderer, GetReuseShadowMaps, () const, bool), AS_CALL_THISCALL));

    // int Renderer::GetMaxShadowMaps() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetMaxShadowMaps() const", "int GetMaxShadowMaps() const", AS_METHODPR(Renderer, GetMaxShadowMaps, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetMaxShadowMaps() const", "int get_maxShadowMaps() const", AS_METHODPR(Renderer, GetMaxShadowMaps, () const, int), AS_CALL_THISCALL));

    // bool Renderer::GetDynamicInstancing() const
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetDynamicInstancing() const", "bool GetDynamicInstancing() const", AS_METHODPR(Renderer, GetDynamicInstancing, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetDynamicInstancing() const", "bool get_dynamicInstancing() const", AS_METHODPR(Renderer, GetDynamicInstancing, () const, bool), AS_CALL_THISCALL));

    // int Renderer::GetNumExtraInstancingBufferElements() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetNumExtraInstancingBufferElements() const", "int GetNumExtraInstancingBufferElements() const", AS_METHODPR(Renderer, GetNumExtraInstancingBufferElements, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetNumExtraInstancingBufferElements() const", "int get_numExtraInstancingBufferElements() const", AS_METHODPR(Renderer, GetNumExtraInstancingBufferElements, () const, int), AS_CALL_THISCALL));

    // int Renderer::GetMinInstances() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetMinInstances() const", "int GetMinInstances() const", AS_METHODPR(Renderer, GetMinInstances, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetMinInstances() const", "int get_minInstances() const", AS_METHODPR(Renderer, GetMinInstances, () const, int), AS_CALL_THISCALL));

    // int Renderer::GetMaxSortedInstances() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetMaxSortedInstances() const", "int GetMaxSortedInstances() const", AS_METHODPR(Renderer, GetMaxSortedInstances, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetMaxSortedInstances() const", "int get_maxSortedInstances() const", AS_METHODPR(Renderer, GetMaxSortedInstances, () const, int), AS_CALL_THISCALL));

    // int Renderer::GetMaxOccluderTriangles() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetMaxOccluderTriangles() const", "int GetMaxOccluderTriangles() const", AS_METHODPR(Renderer, GetMaxOccluderTriangles, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetMaxOccluderTriangles() const", "int get_maxOccluderTriangles() const", AS_METHODPR(Renderer, GetMaxOccluderTriangles, () const, int), AS_CALL_THISCALL));

    // int Renderer::GetOcclusionBufferSize() const
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetOcclusionBufferSize() const", "int GetOcclusionBufferSize() const", AS_METHODPR(Renderer, GetOcclusionBufferSize, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Renderer::GetOcclusionBufferSize() const", "int get_occlusionBufferSize() const", AS_METHODPR(Renderer, GetOcclusionBufferSize, () const, int), AS_CALL_THISCALL));

    // float Renderer::GetOccluderSizeThreshold() const
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetOccluderSizeThreshold() const", "float GetOccluderSizeThreshold() const", AS_METHODPR(Renderer, GetOccluderSizeThreshold, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetOccluderSizeThreshold() const", "float get_occluderSizeThreshold() const", AS_METHODPR(Renderer, GetOccluderSizeThreshold, () const, float), AS_CALL_THISCALL));

    // bool Renderer::GetThreadedOcclusion() const
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetThreadedOcclusion() const", "bool GetThreadedOcclusion() const", AS_METHODPR(Renderer, GetThreadedOcclusion, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Renderer::GetThreadedOcclusion() const", "bool get_threadedOcclusion() const", AS_METHODPR(Renderer, GetThreadedOcclusion, () const, bool), AS_CALL_THISCALL));

    // float Renderer::GetMobileShadowBiasMul() const
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetMobileShadowBiasMul() const", "float GetMobileShadowBiasMul() const", AS_METHODPR(Renderer, GetMobileShadowBiasMul, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetMobileShadowBiasMul() const", "float get_mobileShadowBiasMul() const", AS_METHODPR(Renderer, GetMobileShadowBiasMul, () const, float), AS_CALL_THISCALL));

    // float Renderer::GetMobileShadowBiasAdd() const
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetMobileShadowBiasAdd() const", "float GetMobileShadowBiasAdd() const", AS_METHODPR(Renderer, GetMobileShadowBiasAdd, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetMobileShadowBiasAdd() const", "float get_mobileShadowBiasAdd() const", AS_METHODPR(Renderer, GetMobileShadowBiasAdd, () const, float), AS_CALL_THISCALL));

    // float Renderer::GetMobileNormalOffsetMul() const
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetMobileNormalOffsetMul() const", "float GetMobileNormalOffsetMul() const", AS_METHODPR(Renderer, GetMobileNormalOffsetMul, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Renderer::GetMobileNormalOffsetMul() const", "float get_mobileNormalOffsetMul() const", AS_METHODPR(Renderer, GetMobileNormalOffsetMul, () const, float), AS_CALL_THISCALL));

    // unsigned Renderer::GetNumViews() const
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumViews() const", "uint GetNumViews() const", AS_METHODPR(Renderer, GetNumViews, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumViews() const", "uint get_numViews() const", AS_METHODPR(Renderer, GetNumViews, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Renderer::GetNumPrimitives() const
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumPrimitives() const", "uint GetNumPrimitives() const", AS_METHODPR(Renderer, GetNumPrimitives, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumPrimitives() const", "uint get_numPrimitives() const", AS_METHODPR(Renderer, GetNumPrimitives, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Renderer::GetNumBatches() const
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumBatches() const", "uint GetNumBatches() const", AS_METHODPR(Renderer, GetNumBatches, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumBatches() const", "uint get_numBatches() const", AS_METHODPR(Renderer, GetNumBatches, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Renderer::GetNumGeometries(bool allViews=false) const
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumGeometries(bool allViews=false) const", "uint GetNumGeometries(bool = false) const", AS_METHODPR(Renderer, GetNumGeometries, (bool) const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumGeometries(bool allViews=false) const", "uint get_numGeometries(bool = false) const", AS_METHODPR(Renderer, GetNumGeometries, (bool) const, unsigned), AS_CALL_THISCALL));

    // unsigned Renderer::GetNumLights(bool allViews=false) const
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumLights(bool allViews=false) const", "uint GetNumLights(bool = false) const", AS_METHODPR(Renderer, GetNumLights, (bool) const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumLights(bool allViews=false) const", "uint get_numLights(bool = false) const", AS_METHODPR(Renderer, GetNumLights, (bool) const, unsigned), AS_CALL_THISCALL));

    // unsigned Renderer::GetNumShadowMaps(bool allViews=false) const
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumShadowMaps(bool allViews=false) const", "uint GetNumShadowMaps(bool = false) const", AS_METHODPR(Renderer, GetNumShadowMaps, (bool) const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumShadowMaps(bool allViews=false) const", "uint get_numShadowMaps(bool = false) const", AS_METHODPR(Renderer, GetNumShadowMaps, (bool) const, unsigned), AS_CALL_THISCALL));

    // unsigned Renderer::GetNumOccluders(bool allViews=false) const
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumOccluders(bool allViews=false) const", "uint GetNumOccluders(bool = false) const", AS_METHODPR(Renderer, GetNumOccluders, (bool) const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Renderer::GetNumOccluders(bool allViews=false) const", "uint get_numOccluders(bool = false) const", AS_METHODPR(Renderer, GetNumOccluders, (bool) const, unsigned), AS_CALL_THISCALL));

    // Zone* Renderer::GetDefaultZone() const
    methods.Push(RegisterObjectMethodArgs("Zone* Renderer::GetDefaultZone() const", "Zone@+ GetDefaultZone() const", AS_METHODPR(Renderer, GetDefaultZone, () const, Zone*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Zone* Renderer::GetDefaultZone() const", "Zone@+ get_defaultZone() const", AS_METHODPR(Renderer, GetDefaultZone, () const, Zone*), AS_CALL_THISCALL));

    // Material* Renderer::GetDefaultMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* Renderer::GetDefaultMaterial() const", "Material@+ GetDefaultMaterial() const", AS_METHODPR(Renderer, GetDefaultMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* Renderer::GetDefaultMaterial() const", "Material@+ get_defaultMaterial() const", AS_METHODPR(Renderer, GetDefaultMaterial, () const, Material*), AS_CALL_THISCALL));

    // Texture2D* Renderer::GetDefaultLightRamp() const
    methods.Push(RegisterObjectMethodArgs("Texture2D* Renderer::GetDefaultLightRamp() const", "Texture2D@+ GetDefaultLightRamp() const", AS_METHODPR(Renderer, GetDefaultLightRamp, () const, Texture2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture2D* Renderer::GetDefaultLightRamp() const", "Texture2D@+ get_defaultLightRamp() const", AS_METHODPR(Renderer, GetDefaultLightRamp, () const, Texture2D*), AS_CALL_THISCALL));

    // Texture2D* Renderer::GetDefaultLightSpot() const
    methods.Push(RegisterObjectMethodArgs("Texture2D* Renderer::GetDefaultLightSpot() const", "Texture2D@+ GetDefaultLightSpot() const", AS_METHODPR(Renderer, GetDefaultLightSpot, () const, Texture2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture2D* Renderer::GetDefaultLightSpot() const", "Texture2D@+ get_defaultLightSpot() const", AS_METHODPR(Renderer, GetDefaultLightSpot, () const, Texture2D*), AS_CALL_THISCALL));

    // TextureCube* Renderer::GetFaceSelectCubeMap() const
    methods.Push(RegisterObjectMethodArgs("TextureCube* Renderer::GetFaceSelectCubeMap() const", "TextureCube@+ GetFaceSelectCubeMap() const", AS_METHODPR(Renderer, GetFaceSelectCubeMap, () const, TextureCube*), AS_CALL_THISCALL));

    // TextureCube* Renderer::GetIndirectionCubeMap() const
    methods.Push(RegisterObjectMethodArgs("TextureCube* Renderer::GetIndirectionCubeMap() const", "TextureCube@+ GetIndirectionCubeMap() const", AS_METHODPR(Renderer, GetIndirectionCubeMap, () const, TextureCube*), AS_CALL_THISCALL));

    // VertexBuffer* Renderer::GetInstancingBuffer() const
    methods.Push(RegisterObjectMethodArgs("VertexBuffer* Renderer::GetInstancingBuffer() const", "VertexBuffer@+ GetInstancingBuffer() const", AS_METHODPR(Renderer, GetInstancingBuffer, () const, VertexBuffer*), AS_CALL_THISCALL));

    // const FrameInfo& Renderer::GetFrameInfo() const
    methods.Push(RegisterObjectMethodArgs("const FrameInfo& Renderer::GetFrameInfo() const", "const FrameInfo& GetFrameInfo() const", AS_METHODPR(Renderer, GetFrameInfo, () const, const FrameInfo&), AS_CALL_THISCALL));

    // void Renderer::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void Renderer::Update(float timeStep)", "void Update(float)", AS_METHODPR(Renderer, Update, (float), void), AS_CALL_THISCALL));

    // void Renderer::Render()
    methods.Push(RegisterObjectMethodArgs("void Renderer::Render()", "void Render()", AS_METHODPR(Renderer, Render, (), void), AS_CALL_THISCALL));

    // void Renderer::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void Renderer::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(Renderer, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));

    // void Renderer::QueueRenderSurface(RenderSurface* renderTarget)
    methods.Push(RegisterObjectMethodArgs("void Renderer::QueueRenderSurface(RenderSurface* renderTarget)", "void QueueRenderSurface(RenderSurface@+)", AS_METHODPR(Renderer, QueueRenderSurface, (RenderSurface*), void), AS_CALL_THISCALL));

    // void Renderer::QueueViewport(RenderSurface* renderTarget, Viewport* viewport)
    methods.Push(RegisterObjectMethodArgs("void Renderer::QueueViewport(RenderSurface* renderTarget, Viewport* viewport)", "void QueueViewport(RenderSurface@+, Viewport@+)", AS_METHODPR(Renderer, QueueViewport, (RenderSurface*, Viewport*), void), AS_CALL_THISCALL));

    // Geometry* Renderer::GetLightGeometry(Light* light)
    methods.Push(RegisterObjectMethodArgs("Geometry* Renderer::GetLightGeometry(Light* light)", "Geometry@+ GetLightGeometry(Light@+)", AS_METHODPR(Renderer, GetLightGeometry, (Light*), Geometry*), AS_CALL_THISCALL));

    // Geometry* Renderer::GetQuadGeometry()
    methods.Push(RegisterObjectMethodArgs("Geometry* Renderer::GetQuadGeometry()", "Geometry@+ GetQuadGeometry()", AS_METHODPR(Renderer, GetQuadGeometry, (), Geometry*), AS_CALL_THISCALL));

    // Texture2D* Renderer::GetShadowMap(Light* light, Camera* camera, unsigned viewWidth, unsigned viewHeight)
    methods.Push(RegisterObjectMethodArgs("Texture2D* Renderer::GetShadowMap(Light* light, Camera* camera, unsigned viewWidth, unsigned viewHeight)", "Texture2D@+ GetShadowMap(Light@+, Camera@+, uint, uint)", AS_METHODPR(Renderer, GetShadowMap, (Light*, Camera*, unsigned, unsigned), Texture2D*), AS_CALL_THISCALL));

    // Texture* Renderer::GetScreenBuffer(int width, int height, unsigned format, int multiSample, bool autoResolve, bool cubemap, bool filtered, bool srgb, unsigned persistentKey=0)
    methods.Push(RegisterObjectMethodArgs("Texture* Renderer::GetScreenBuffer(int width, int height, unsigned format, int multiSample, bool autoResolve, bool cubemap, bool filtered, bool srgb, unsigned persistentKey=0)", "Texture@+ GetScreenBuffer(int, int, uint, int, bool, bool, bool, bool, uint = 0)", AS_METHODPR(Renderer, GetScreenBuffer, (int, int, unsigned, int, bool, bool, bool, bool, unsigned), Texture*), AS_CALL_THISCALL));

    // RenderSurface* Renderer::GetDepthStencil(int width, int height, int multiSample, bool autoResolve)
    methods.Push(RegisterObjectMethodArgs("RenderSurface* Renderer::GetDepthStencil(int width, int height, int multiSample, bool autoResolve)", "RenderSurface@+ GetDepthStencil(int, int, int, bool)", AS_METHODPR(Renderer, GetDepthStencil, (int, int, int, bool), RenderSurface*), AS_CALL_THISCALL));

    // OcclusionBuffer* Renderer::GetOcclusionBuffer(Camera* camera)
    methods.Push(RegisterObjectMethodArgs("OcclusionBuffer* Renderer::GetOcclusionBuffer(Camera* camera)", "OcclusionBuffer@+ GetOcclusionBuffer(Camera@+)", AS_METHODPR(Renderer, GetOcclusionBuffer, (Camera*), OcclusionBuffer*), AS_CALL_THISCALL));

    // Camera* Renderer::GetShadowCamera()
    methods.Push(RegisterObjectMethodArgs("Camera* Renderer::GetShadowCamera()", "Camera@+ GetShadowCamera()", AS_METHODPR(Renderer, GetShadowCamera, (), Camera*), AS_CALL_THISCALL));

    // void Renderer::StorePreparedView(View* view, Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void Renderer::StorePreparedView(View* view, Camera* camera)", "void StorePreparedView(View@+, Camera@+)", AS_METHODPR(Renderer, StorePreparedView, (View*, Camera*), void), AS_CALL_THISCALL));

    // View* Renderer::GetPreparedView(Camera* camera)
    methods.Push(RegisterObjectMethodArgs("View* Renderer::GetPreparedView(Camera* camera)", "View@+ GetPreparedView(Camera@+)", AS_METHODPR(Renderer, GetPreparedView, (Camera*), View*), AS_CALL_THISCALL));

    // void Renderer::SetBatchShaders(Batch& batch, Technique* tech, bool allowShadows, const BatchQueue& queue)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetBatchShaders(Batch& batch, Technique* tech, bool allowShadows, const BatchQueue& queue)", "void SetBatchShaders(Batch&, Technique@+, bool, const BatchQueue&in)", AS_METHODPR(Renderer, SetBatchShaders, (Batch&, Technique*, bool, const BatchQueue&), void), AS_CALL_THISCALL));

    // void Renderer::SetLightVolumeBatchShaders(Batch& batch, Camera* camera, const String& vsName, const String& psName, const String& vsDefines, const String& psDefines)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetLightVolumeBatchShaders(Batch& batch, Camera* camera, const String& vsName, const String& psName, const String& vsDefines, const String& psDefines)", "void SetLightVolumeBatchShaders(Batch&, Camera@+, const String&in, const String&in, const String&in, const String&in)", AS_METHODPR(Renderer, SetLightVolumeBatchShaders, (Batch&, Camera*, const String&, const String&, const String&, const String&), void), AS_CALL_THISCALL));

    // void Renderer::SetCullMode(CullMode mode, Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void Renderer::SetCullMode(CullMode mode, Camera* camera)", "void SetCullMode(CullMode, Camera@+)", AS_METHODPR(Renderer, SetCullMode, (CullMode, Camera*), void), AS_CALL_THISCALL));

    // bool Renderer::ResizeInstancingBuffer(unsigned numInstances)
    methods.Push(RegisterObjectMethodArgs("bool Renderer::ResizeInstancingBuffer(unsigned numInstances)", "bool ResizeInstancingBuffer(uint)", AS_METHODPR(Renderer, ResizeInstancingBuffer, (unsigned), bool), AS_CALL_THISCALL));

    // void Renderer::OptimizeLightByScissor(Light* light, Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void Renderer::OptimizeLightByScissor(Light* light, Camera* camera)", "void OptimizeLightByScissor(Light@+, Camera@+)", AS_METHODPR(Renderer, OptimizeLightByScissor, (Light*, Camera*), void), AS_CALL_THISCALL));

    // void Renderer::OptimizeLightByStencil(Light* light, Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void Renderer::OptimizeLightByStencil(Light* light, Camera* camera)", "void OptimizeLightByStencil(Light@+, Camera@+)", AS_METHODPR(Renderer, OptimizeLightByStencil, (Light*, Camera*), void), AS_CALL_THISCALL));

    // const Rect& Renderer::GetLightScissor(Light* light, Camera* camera)
    methods.Push(RegisterObjectMethodArgs("const Rect& Renderer::GetLightScissor(Light* light, Camera* camera)", "const Rect& GetLightScissor(Light@+, Camera@+)", AS_METHODPR(Renderer, GetLightScissor, (Light*, Camera*), const Rect&), AS_CALL_THISCALL));
}

// struct ReplicationState | File: ../Scene/ReplicationState.h
void CollectMembers_ReplicationState(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Resource | File: ../Resource/Resource.h
void CollectMembers_Resource(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // bool Resource::Load(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Resource::Load(Deserializer& source)", "bool Load(Deserializer&)", AS_METHODPR(Resource, Load, (Deserializer&), bool), AS_CALL_THISCALL));

    // virtual bool Resource::BeginLoad(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("virtual bool Resource::BeginLoad(Deserializer& source)", "bool BeginLoad(Deserializer&)", AS_METHODPR(Resource, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // virtual bool Resource::EndLoad()
    methods.Push(RegisterObjectMethodArgs("virtual bool Resource::EndLoad()", "bool EndLoad()", AS_METHODPR(Resource, EndLoad, (), bool), AS_CALL_THISCALL));

    // virtual bool Resource::Save(Serializer& dest) const
    methods.Push(RegisterObjectMethodArgs("virtual bool Resource::Save(Serializer& dest) const", "bool Save(Serializer&) const", AS_METHODPR(Resource, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool Resource::LoadFile(const String& fileName)
    methods.Push(RegisterObjectMethodArgs("bool Resource::LoadFile(const String& fileName)", "bool LoadFile(const String&in)", AS_METHODPR(Resource, LoadFile, (const String&), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Resource::LoadFile(const String& fileName)", "bool Load(const String&in)", AS_METHODPR(Resource, LoadFile, (const String&), bool), AS_CALL_THISCALL));

    // virtual bool Resource::SaveFile(const String& fileName) const
    methods.Push(RegisterObjectMethodArgs("virtual bool Resource::SaveFile(const String& fileName) const", "bool SaveFile(const String&in) const", AS_METHODPR(Resource, SaveFile, (const String&) const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual bool Resource::SaveFile(const String& fileName) const", "bool Save(const String&in) const", AS_METHODPR(Resource, SaveFile, (const String&) const, bool), AS_CALL_THISCALL));

    // void Resource::SetName(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Resource::SetName(const String& name)", "void SetName(const String&in)", AS_METHODPR(Resource, SetName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Resource::SetName(const String& name)", "void set_name(const String&in)", AS_METHODPR(Resource, SetName, (const String&), void), AS_CALL_THISCALL));

    // void Resource::SetMemoryUse(unsigned size)
    methods.Push(RegisterObjectMethodArgs("void Resource::SetMemoryUse(unsigned size)", "void SetMemoryUse(uint)", AS_METHODPR(Resource, SetMemoryUse, (unsigned), void), AS_CALL_THISCALL));

    // void Resource::ResetUseTimer()
    methods.Push(RegisterObjectMethodArgs("void Resource::ResetUseTimer()", "void ResetUseTimer()", AS_METHODPR(Resource, ResetUseTimer, (), void), AS_CALL_THISCALL));

    // void Resource::SetAsyncLoadState(AsyncLoadState newState)
    methods.Push(RegisterObjectMethodArgs("void Resource::SetAsyncLoadState(AsyncLoadState newState)", "void SetAsyncLoadState(AsyncLoadState)", AS_METHODPR(Resource, SetAsyncLoadState, (AsyncLoadState), void), AS_CALL_THISCALL));

    // const String& Resource::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& Resource::GetName() const", "const String& GetName() const", AS_METHODPR(Resource, GetName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Resource::GetName() const", "const String& get_name() const", AS_METHODPR(Resource, GetName, () const, const String&), AS_CALL_THISCALL));

    // StringHash Resource::GetNameHash() const
    methods.Push(RegisterObjectMethodArgs("StringHash Resource::GetNameHash() const", "StringHash GetNameHash() const", AS_METHODPR(Resource, GetNameHash, () const, StringHash), AS_CALL_THISCALL));

    // unsigned Resource::GetMemoryUse() const
    methods.Push(RegisterObjectMethodArgs("unsigned Resource::GetMemoryUse() const", "uint GetMemoryUse() const", AS_METHODPR(Resource, GetMemoryUse, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Resource::GetMemoryUse() const", "uint get_memoryUse() const", AS_METHODPR(Resource, GetMemoryUse, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Resource::GetUseTimer()
    methods.Push(RegisterObjectMethodArgs("unsigned Resource::GetUseTimer()", "uint GetUseTimer()", AS_METHODPR(Resource, GetUseTimer, (), unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Resource::GetUseTimer()", "uint get_useTimer()", AS_METHODPR(Resource, GetUseTimer, (), unsigned), AS_CALL_THISCALL));

    // AsyncLoadState Resource::GetAsyncLoadState() const
    methods.Push(RegisterObjectMethodArgs("AsyncLoadState Resource::GetAsyncLoadState() const", "AsyncLoadState GetAsyncLoadState() const", AS_METHODPR(Resource, GetAsyncLoadState, () const, AsyncLoadState), AS_CALL_THISCALL));
}

// SharedPtr<File> ResourceCache::GetFile(const String& name, bool sendEventOnFailure=true)
// SharedPtr<File> ResourceCache::GetFile(const String& name, bool sendEventOnFailure=true) | File: ../Resource/ResourceCache.h
static File* ResourceCache_GetFile_String_bool(ResourceCache* ptr, const String& name, bool sendEventOnFailure)
{
    SharedPtr<File> result = ptr->GetFile(name, sendEventOnFailure);
    return result.Detach();
}


// SharedPtr<Resource> ResourceCache::GetTempResource(StringHash type, const String& name, bool sendEventOnFailure=true)
// SharedPtr<Resource> ResourceCache::GetTempResource(StringHash type, const String& name, bool sendEventOnFailure=true) | File: ../Resource/ResourceCache.h
static Resource* ResourceCache_GetTempResource_StringHash_String_bool(ResourceCache* ptr, StringHash type, const String& name, bool sendEventOnFailure)
{
    SharedPtr<Resource> result = ptr->GetTempResource(type, name, sendEventOnFailure);
    return result.Detach();
}


// const Vector<String>& ResourceCache::GetResourceDirs() const
// const Vector<String>& ResourceCache::GetResourceDirs() const | File: ../Resource/ResourceCache.h
static CScriptArray* ResourceCache_GetResourceDirs_void(ResourceCache* ptr)
{
    const Vector<String>& result = ptr->GetResourceDirs();
    return VectorToArray<String>(result, "Array<String>");
}


// const Vector<SharedPtr<PackageFile>>& ResourceCache::GetPackageFiles() const
// const Vector<SharedPtr<PackageFile>>& ResourceCache::GetPackageFiles() const | File: ../Resource/ResourceCache.h
static CScriptArray* ResourceCache_GetPackageFiles_void(ResourceCache* ptr)
{
    const Vector<SharedPtr<PackageFile>>& result = ptr->GetPackageFiles();
    return VectorToHandleArray(result, "Array<PackageFile@>");
}


// class ResourceCache | File: ../Resource/ResourceCache.h
void CollectMembers_ResourceCache(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void ResourceCache::AddResourceRouter(ResourceRouter* router, bool addAsFirst=false)
    // Error: type "ResourceRouter" can not automatically bind bacause have @nobind mark

    // const HashMap<StringHash, ResourceGroup>& ResourceCache::GetAllResources() const
    // Error: type "const HashMap<StringHash, ResourceGroup>&" can not automatically bind

    // ResourceRouter* ResourceCache::GetResourceRouter(unsigned index) const
    // Error: type "ResourceRouter" can not automatically bind bacause have @nobind mark

    // void ResourceCache::GetResources(PODVector<Resource*>& result, StringHash type) const
    // Error: type "PODVector<Resource*>&" can not automatically bind

    // void ResourceCache::RemoveResourceRouter(ResourceRouter* router)
    // Error: type "ResourceRouter" can not automatically bind bacause have @nobind mark

    // bool ResourceCache::AddResourceDir(const String& pathName, unsigned priority=PRIORITY_LAST)
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::AddResourceDir(const String& pathName, unsigned priority=PRIORITY_LAST)", "bool AddResourceDir(const String&in, uint = PRIORITY_LAST)", AS_METHODPR(ResourceCache, AddResourceDir, (const String&, unsigned), bool), AS_CALL_THISCALL));

    // bool ResourceCache::AddPackageFile(PackageFile* package, unsigned priority=PRIORITY_LAST)
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::AddPackageFile(PackageFile* package, unsigned priority=PRIORITY_LAST)", "bool AddPackageFile(PackageFile@+, uint = PRIORITY_LAST)", AS_METHODPR(ResourceCache, AddPackageFile, (PackageFile*, unsigned), bool), AS_CALL_THISCALL));

    // bool ResourceCache::AddPackageFile(const String& fileName, unsigned priority=PRIORITY_LAST)
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::AddPackageFile(const String& fileName, unsigned priority=PRIORITY_LAST)", "bool AddPackageFile(const String&in, uint = PRIORITY_LAST)", AS_METHODPR(ResourceCache, AddPackageFile, (const String&, unsigned), bool), AS_CALL_THISCALL));

    // bool ResourceCache::AddManualResource(Resource* resource)
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::AddManualResource(Resource* resource)", "bool AddManualResource(Resource@+)", AS_METHODPR(ResourceCache, AddManualResource, (Resource*), bool), AS_CALL_THISCALL));

    // void ResourceCache::RemoveResourceDir(const String& pathName)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::RemoveResourceDir(const String& pathName)", "void RemoveResourceDir(const String&in)", AS_METHODPR(ResourceCache, RemoveResourceDir, (const String&), void), AS_CALL_THISCALL));

    // void ResourceCache::RemovePackageFile(PackageFile* package, bool releaseResources=true, bool forceRelease=false)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::RemovePackageFile(PackageFile* package, bool releaseResources=true, bool forceRelease=false)", "void RemovePackageFile(PackageFile@+, bool = true, bool = false)", AS_METHODPR(ResourceCache, RemovePackageFile, (PackageFile*, bool, bool), void), AS_CALL_THISCALL));

    // void ResourceCache::RemovePackageFile(const String& fileName, bool releaseResources=true, bool forceRelease=false)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::RemovePackageFile(const String& fileName, bool releaseResources=true, bool forceRelease=false)", "void RemovePackageFile(const String&in, bool = true, bool = false)", AS_METHODPR(ResourceCache, RemovePackageFile, (const String&, bool, bool), void), AS_CALL_THISCALL));

    // void ResourceCache::ReleaseResource(StringHash type, const String& name, bool force=false)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::ReleaseResource(StringHash type, const String& name, bool force=false)", "void ReleaseResource(StringHash, const String&in, bool = false)", AS_METHODPR(ResourceCache, ReleaseResource, (StringHash, const String&, bool), void), AS_CALL_THISCALL));

    // void ResourceCache::ReleaseResources(StringHash type, bool force=false)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::ReleaseResources(StringHash type, bool force=false)", "void ReleaseResources(StringHash, bool = false)", AS_METHODPR(ResourceCache, ReleaseResources, (StringHash, bool), void), AS_CALL_THISCALL));

    // void ResourceCache::ReleaseResources(StringHash type, const String& partialName, bool force=false)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::ReleaseResources(StringHash type, const String& partialName, bool force=false)", "void ReleaseResources(StringHash, const String&in, bool = false)", AS_METHODPR(ResourceCache, ReleaseResources, (StringHash, const String&, bool), void), AS_CALL_THISCALL));

    // void ResourceCache::ReleaseResources(const String& partialName, bool force=false)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::ReleaseResources(const String& partialName, bool force=false)", "void ReleaseResources(const String&in, bool = false)", AS_METHODPR(ResourceCache, ReleaseResources, (const String&, bool), void), AS_CALL_THISCALL));

    // void ResourceCache::ReleaseAllResources(bool force=false)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::ReleaseAllResources(bool force=false)", "void ReleaseAllResources(bool = false)", AS_METHODPR(ResourceCache, ReleaseAllResources, (bool), void), AS_CALL_THISCALL));

    // bool ResourceCache::ReloadResource(Resource* resource)
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::ReloadResource(Resource* resource)", "bool ReloadResource(Resource@+)", AS_METHODPR(ResourceCache, ReloadResource, (Resource*), bool), AS_CALL_THISCALL));

    // void ResourceCache::ReloadResourceWithDependencies(const String& fileName)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::ReloadResourceWithDependencies(const String& fileName)", "void ReloadResourceWithDependencies(const String&in)", AS_METHODPR(ResourceCache, ReloadResourceWithDependencies, (const String&), void), AS_CALL_THISCALL));

    // void ResourceCache::SetMemoryBudget(StringHash type, unsigned long long budget)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetMemoryBudget(StringHash type, unsigned long long budget)", "void SetMemoryBudget(StringHash, uint64)", AS_METHODPR(ResourceCache, SetMemoryBudget, (StringHash, unsigned long long), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetMemoryBudget(StringHash type, unsigned long long budget)", "void set_memoryBudget(StringHash, uint64)", AS_METHODPR(ResourceCache, SetMemoryBudget, (StringHash, unsigned long long), void), AS_CALL_THISCALL));

    // void ResourceCache::SetAutoReloadResources(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetAutoReloadResources(bool enable)", "void SetAutoReloadResources(bool)", AS_METHODPR(ResourceCache, SetAutoReloadResources, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetAutoReloadResources(bool enable)", "void set_autoReloadResources(bool)", AS_METHODPR(ResourceCache, SetAutoReloadResources, (bool), void), AS_CALL_THISCALL));

    // void ResourceCache::SetReturnFailedResources(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetReturnFailedResources(bool enable)", "void SetReturnFailedResources(bool)", AS_METHODPR(ResourceCache, SetReturnFailedResources, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetReturnFailedResources(bool enable)", "void set_returnFailedResources(bool)", AS_METHODPR(ResourceCache, SetReturnFailedResources, (bool), void), AS_CALL_THISCALL));

    // void ResourceCache::SetSearchPackagesFirst(bool value)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetSearchPackagesFirst(bool value)", "void SetSearchPackagesFirst(bool)", AS_METHODPR(ResourceCache, SetSearchPackagesFirst, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetSearchPackagesFirst(bool value)", "void set_searchPackagesFirst(bool)", AS_METHODPR(ResourceCache, SetSearchPackagesFirst, (bool), void), AS_CALL_THISCALL));

    // void ResourceCache::SetFinishBackgroundResourcesMs(int ms)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetFinishBackgroundResourcesMs(int ms)", "void SetFinishBackgroundResourcesMs(int)", AS_METHODPR(ResourceCache, SetFinishBackgroundResourcesMs, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::SetFinishBackgroundResourcesMs(int ms)", "void set_finishBackgroundResourcesMs(int)", AS_METHODPR(ResourceCache, SetFinishBackgroundResourcesMs, (int), void), AS_CALL_THISCALL));

    // SharedPtr<File> ResourceCache::GetFile(const String& name, bool sendEventOnFailure=true)
    methods.Push(RegisterObjectMethodArgs("SharedPtr<File> ResourceCache::GetFile(const String& name, bool sendEventOnFailure=true)", "File@+ GetFile(const String&in, bool = true)", AS_FUNCTION_OBJFIRST(ResourceCache_GetFile_String_bool), AS_CALL_CDECL_OBJFIRST));

    // Resource* ResourceCache::GetResource(StringHash type, const String& name, bool sendEventOnFailure=true)
    methods.Push(RegisterObjectMethodArgs("Resource* ResourceCache::GetResource(StringHash type, const String& name, bool sendEventOnFailure=true)", "Resource@+ GetResource(StringHash, const String&in, bool = true)", AS_METHODPR(ResourceCache, GetResource, (StringHash, const String&, bool), Resource*), AS_CALL_THISCALL));

    // SharedPtr<Resource> ResourceCache::GetTempResource(StringHash type, const String& name, bool sendEventOnFailure=true)
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Resource> ResourceCache::GetTempResource(StringHash type, const String& name, bool sendEventOnFailure=true)", "Resource@+ GetTempResource(StringHash, const String&in, bool = true)", AS_FUNCTION_OBJFIRST(ResourceCache_GetTempResource_StringHash_String_bool), AS_CALL_CDECL_OBJFIRST));

    // bool ResourceCache::BackgroundLoadResource(StringHash type, const String& name, bool sendEventOnFailure=true, Resource* caller=nullptr)
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::BackgroundLoadResource(StringHash type, const String& name, bool sendEventOnFailure=true, Resource* caller=nullptr)", "bool BackgroundLoadResource(StringHash, const String&in, bool = true, Resource@+ = null)", AS_METHODPR(ResourceCache, BackgroundLoadResource, (StringHash, const String&, bool, Resource*), bool), AS_CALL_THISCALL));

    // unsigned ResourceCache::GetNumBackgroundLoadResources() const
    methods.Push(RegisterObjectMethodArgs("unsigned ResourceCache::GetNumBackgroundLoadResources() const", "uint GetNumBackgroundLoadResources() const", AS_METHODPR(ResourceCache, GetNumBackgroundLoadResources, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned ResourceCache::GetNumBackgroundLoadResources() const", "uint get_numBackgroundLoadResources() const", AS_METHODPR(ResourceCache, GetNumBackgroundLoadResources, () const, unsigned), AS_CALL_THISCALL));

    // Resource* ResourceCache::GetExistingResource(StringHash type, const String& name)
    methods.Push(RegisterObjectMethodArgs("Resource* ResourceCache::GetExistingResource(StringHash type, const String& name)", "Resource@+ GetExistingResource(StringHash, const String&in)", AS_METHODPR(ResourceCache, GetExistingResource, (StringHash, const String&), Resource*), AS_CALL_THISCALL));

    // const Vector<String>& ResourceCache::GetResourceDirs() const
    methods.Push(RegisterObjectMethodArgs("const Vector<String>& ResourceCache::GetResourceDirs() const", "Array<String>@ GetResourceDirs() const", AS_FUNCTION_OBJFIRST(ResourceCache_GetResourceDirs_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("const Vector<String>& ResourceCache::GetResourceDirs() const", "Array<String>@ get_resourceDirs() const", AS_FUNCTION_OBJFIRST(ResourceCache_GetResourceDirs_void), AS_CALL_CDECL_OBJFIRST));

    // const Vector<SharedPtr<PackageFile>>& ResourceCache::GetPackageFiles() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<PackageFile>>& ResourceCache::GetPackageFiles() const", "Array<PackageFile@>@ GetPackageFiles() const", AS_FUNCTION_OBJFIRST(ResourceCache_GetPackageFiles_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<PackageFile>>& ResourceCache::GetPackageFiles() const", "Array<PackageFile@>@ get_packageFiles() const", AS_FUNCTION_OBJFIRST(ResourceCache_GetPackageFiles_void), AS_CALL_CDECL_OBJFIRST));

    // bool ResourceCache::Exists(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::Exists(const String& name) const", "bool Exists(const String&in) const", AS_METHODPR(ResourceCache, Exists, (const String&) const, bool), AS_CALL_THISCALL));

    // unsigned long long ResourceCache::GetMemoryBudget(StringHash type) const
    methods.Push(RegisterObjectMethodArgs("unsigned long long ResourceCache::GetMemoryBudget(StringHash type) const", "uint64 GetMemoryBudget(StringHash) const", AS_METHODPR(ResourceCache, GetMemoryBudget, (StringHash) const, unsigned long long), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned long long ResourceCache::GetMemoryBudget(StringHash type) const", "uint64 get_memoryBudget(StringHash) const", AS_METHODPR(ResourceCache, GetMemoryBudget, (StringHash) const, unsigned long long), AS_CALL_THISCALL));

    // unsigned long long ResourceCache::GetMemoryUse(StringHash type) const
    methods.Push(RegisterObjectMethodArgs("unsigned long long ResourceCache::GetMemoryUse(StringHash type) const", "uint64 GetMemoryUse(StringHash) const", AS_METHODPR(ResourceCache, GetMemoryUse, (StringHash) const, unsigned long long), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned long long ResourceCache::GetMemoryUse(StringHash type) const", "uint64 get_memoryUse(StringHash) const", AS_METHODPR(ResourceCache, GetMemoryUse, (StringHash) const, unsigned long long), AS_CALL_THISCALL));

    // unsigned long long ResourceCache::GetTotalMemoryUse() const
    methods.Push(RegisterObjectMethodArgs("unsigned long long ResourceCache::GetTotalMemoryUse() const", "uint64 GetTotalMemoryUse() const", AS_METHODPR(ResourceCache, GetTotalMemoryUse, () const, unsigned long long), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned long long ResourceCache::GetTotalMemoryUse() const", "uint64 get_totalMemoryUse() const", AS_METHODPR(ResourceCache, GetTotalMemoryUse, () const, unsigned long long), AS_CALL_THISCALL));

    // String ResourceCache::GetResourceFileName(const String& name) const
    methods.Push(RegisterObjectMethodArgs("String ResourceCache::GetResourceFileName(const String& name) const", "String GetResourceFileName(const String&in) const", AS_METHODPR(ResourceCache, GetResourceFileName, (const String&) const, String), AS_CALL_THISCALL));

    // bool ResourceCache::GetAutoReloadResources() const
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::GetAutoReloadResources() const", "bool GetAutoReloadResources() const", AS_METHODPR(ResourceCache, GetAutoReloadResources, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::GetAutoReloadResources() const", "bool get_autoReloadResources() const", AS_METHODPR(ResourceCache, GetAutoReloadResources, () const, bool), AS_CALL_THISCALL));

    // bool ResourceCache::GetReturnFailedResources() const
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::GetReturnFailedResources() const", "bool GetReturnFailedResources() const", AS_METHODPR(ResourceCache, GetReturnFailedResources, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::GetReturnFailedResources() const", "bool get_returnFailedResources() const", AS_METHODPR(ResourceCache, GetReturnFailedResources, () const, bool), AS_CALL_THISCALL));

    // bool ResourceCache::GetSearchPackagesFirst() const
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::GetSearchPackagesFirst() const", "bool GetSearchPackagesFirst() const", AS_METHODPR(ResourceCache, GetSearchPackagesFirst, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ResourceCache::GetSearchPackagesFirst() const", "bool get_searchPackagesFirst() const", AS_METHODPR(ResourceCache, GetSearchPackagesFirst, () const, bool), AS_CALL_THISCALL));

    // int ResourceCache::GetFinishBackgroundResourcesMs() const
    methods.Push(RegisterObjectMethodArgs("int ResourceCache::GetFinishBackgroundResourcesMs() const", "int GetFinishBackgroundResourcesMs() const", AS_METHODPR(ResourceCache, GetFinishBackgroundResourcesMs, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int ResourceCache::GetFinishBackgroundResourcesMs() const", "int get_finishBackgroundResourcesMs() const", AS_METHODPR(ResourceCache, GetFinishBackgroundResourcesMs, () const, int), AS_CALL_THISCALL));

    // String ResourceCache::GetPreferredResourceDir(const String& path) const
    methods.Push(RegisterObjectMethodArgs("String ResourceCache::GetPreferredResourceDir(const String& path) const", "String GetPreferredResourceDir(const String&in) const", AS_METHODPR(ResourceCache, GetPreferredResourceDir, (const String&) const, String), AS_CALL_THISCALL));

    // String ResourceCache::SanitateResourceName(const String& name) const
    methods.Push(RegisterObjectMethodArgs("String ResourceCache::SanitateResourceName(const String& name) const", "String SanitateResourceName(const String&in) const", AS_METHODPR(ResourceCache, SanitateResourceName, (const String&) const, String), AS_CALL_THISCALL));

    // String ResourceCache::SanitateResourceDirName(const String& name) const
    methods.Push(RegisterObjectMethodArgs("String ResourceCache::SanitateResourceDirName(const String& name) const", "String SanitateResourceDirName(const String&in) const", AS_METHODPR(ResourceCache, SanitateResourceDirName, (const String&) const, String), AS_CALL_THISCALL));

    // void ResourceCache::StoreResourceDependency(Resource* resource, const String& dependency)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::StoreResourceDependency(Resource* resource, const String& dependency)", "void StoreResourceDependency(Resource@+, const String&in)", AS_METHODPR(ResourceCache, StoreResourceDependency, (Resource*, const String&), void), AS_CALL_THISCALL));

    // void ResourceCache::ResetDependencies(Resource* resource)
    methods.Push(RegisterObjectMethodArgs("void ResourceCache::ResetDependencies(Resource* resource)", "void ResetDependencies(Resource@+)", AS_METHODPR(ResourceCache, ResetDependencies, (Resource*), void), AS_CALL_THISCALL));

    // String ResourceCache::PrintMemoryUsage() const
    methods.Push(RegisterObjectMethodArgs("String ResourceCache::PrintMemoryUsage() const", "String PrintMemoryUsage() const", AS_METHODPR(ResourceCache, PrintMemoryUsage, () const, String), AS_CALL_THISCALL));
}

// struct ResourceGroup | File: ../Resource/ResourceCache.h
void CollectMembers_ResourceGroup(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct ResourceRef | File: ../Core/Variant.h
void CollectMembers_ResourceRef(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool ResourceRef::operator!=(const ResourceRef& rhs) const
    // Only operator== is needed

    // bool ResourceRef::operator==(const ResourceRef& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool ResourceRef::operator==(const ResourceRef& rhs) const", "bool opEquals(const ResourceRef&in) const", AS_METHODPR(ResourceRef, operator==, (const ResourceRef&) const, bool), AS_CALL_THISCALL));
}

// struct ResourceRefList | File: ../Core/Variant.h
void CollectMembers_ResourceRefList(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool ResourceRefList::operator!=(const ResourceRefList& rhs) const
    // Only operator== is needed

    // bool ResourceRefList::operator==(const ResourceRefList& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool ResourceRefList::operator==(const ResourceRefList& rhs) const", "bool opEquals(const ResourceRefList&in) const", AS_METHODPR(ResourceRefList, operator==, (const ResourceRefList&) const, bool), AS_CALL_THISCALL));
}

// class ResourceRouter | File: ../Resource/ResourceCache.h
void CollectMembers_ResourceRouter(Vector<RegisterObjectMethodArgs>& methods)
{
    // virtual void ResourceRouter::Route(String& name, ResourceRequest requestType)=0
    methods.Push(RegisterObjectMethodArgs("virtual void ResourceRouter::Route(String& name, ResourceRequest requestType)=0", "void Route(String&, ResourceRequest)", AS_METHODPR(ResourceRouter, Route, (String&, ResourceRequest), void), AS_CALL_THISCALL));
}

// class ResourceWithMetadata | File: ../Resource/Resource.h
void CollectMembers_ResourceWithMetadata(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    // void ResourceWithMetadata::AddMetadata(const String& name, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void ResourceWithMetadata::AddMetadata(const String& name, const Variant& value)", "void AddMetadata(const String&in, const Variant&in)", AS_METHODPR(ResourceWithMetadata, AddMetadata, (const String&, const Variant&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ResourceWithMetadata::AddMetadata(const String& name, const Variant& value)", "void set_metadata(const String&in, const Variant&in)", AS_METHODPR(ResourceWithMetadata, AddMetadata, (const String&, const Variant&), void), AS_CALL_THISCALL));

    // void ResourceWithMetadata::RemoveMetadata(const String& name)
    methods.Push(RegisterObjectMethodArgs("void ResourceWithMetadata::RemoveMetadata(const String& name)", "void RemoveMetadata(const String&in)", AS_METHODPR(ResourceWithMetadata, RemoveMetadata, (const String&), void), AS_CALL_THISCALL));

    // void ResourceWithMetadata::RemoveAllMetadata()
    methods.Push(RegisterObjectMethodArgs("void ResourceWithMetadata::RemoveAllMetadata()", "void RemoveAllMetadata()", AS_METHODPR(ResourceWithMetadata, RemoveAllMetadata, (), void), AS_CALL_THISCALL));

    // const Variant& ResourceWithMetadata::GetMetadata(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const Variant& ResourceWithMetadata::GetMetadata(const String& name) const", "const Variant& GetMetadata(const String&in) const", AS_METHODPR(ResourceWithMetadata, GetMetadata, (const String&) const, const Variant&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Variant& ResourceWithMetadata::GetMetadata(const String& name) const", "const Variant& get_metadata(const String&in) const", AS_METHODPR(ResourceWithMetadata, GetMetadata, (const String&) const, const Variant&), AS_CALL_THISCALL));

    // bool ResourceWithMetadata::HasMetadata() const
    methods.Push(RegisterObjectMethodArgs("bool ResourceWithMetadata::HasMetadata() const", "bool HasMetadata() const", AS_METHODPR(ResourceWithMetadata, HasMetadata, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ResourceWithMetadata::HasMetadata() const", "bool get_hasMetadata() const", AS_METHODPR(ResourceWithMetadata, HasMetadata, () const, bool), AS_CALL_THISCALL));
}

// class RibbonTrail | File: ../Graphics/RibbonTrail.h
void CollectMembers_RibbonTrail(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual UpdateGeometryType Drawable::GetUpdateGeometryType()");
    Remove(methods, "virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)");
    Remove(methods, "virtual void Drawable::Update(const FrameInfo& frame)");
    Remove(methods, "virtual void Drawable::UpdateBatches(const FrameInfo& frame)");
    Remove(methods, "virtual void Drawable::UpdateGeometry(const FrameInfo& frame)");
    Remove(methods, "void Drawable::OnSetEnabled() override");

    // void RibbonTrail::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void RibbonTrail::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(RibbonTrail, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void RibbonTrail::Update(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::Update(const FrameInfo& frame) override", "void Update(const FrameInfo&in)", AS_METHODPR(RibbonTrail, Update, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void RibbonTrail::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(RibbonTrail, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void RibbonTrail::UpdateGeometry(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::UpdateGeometry(const FrameInfo& frame) override", "void UpdateGeometry(const FrameInfo&in)", AS_METHODPR(RibbonTrail, UpdateGeometry, (const FrameInfo&), void), AS_CALL_THISCALL));

    // UpdateGeometryType RibbonTrail::GetUpdateGeometryType() override
    methods.Push(RegisterObjectMethodArgs("UpdateGeometryType RibbonTrail::GetUpdateGeometryType() override", "UpdateGeometryType GetUpdateGeometryType()", AS_METHODPR(RibbonTrail, GetUpdateGeometryType, (), UpdateGeometryType), AS_CALL_THISCALL));

    // void RibbonTrail::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(RibbonTrail, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(RibbonTrail, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetMaterialAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetMaterialAttr(const ResourceRef& value)", "void SetMaterialAttr(const ResourceRef&in)", AS_METHODPR(RibbonTrail, SetMaterialAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetVertexDistance(float length)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetVertexDistance(float length)", "void SetVertexDistance(float)", AS_METHODPR(RibbonTrail, SetVertexDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetVertexDistance(float length)", "void set_vertexDistance(float)", AS_METHODPR(RibbonTrail, SetVertexDistance, (float), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetWidth(float width)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetWidth(float width)", "void SetWidth(float)", AS_METHODPR(RibbonTrail, SetWidth, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetWidth(float width)", "void set_width(float)", AS_METHODPR(RibbonTrail, SetWidth, (float), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetStartColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetStartColor(const Color& color)", "void SetStartColor(const Color&in)", AS_METHODPR(RibbonTrail, SetStartColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetStartColor(const Color& color)", "void set_startColor(const Color&in)", AS_METHODPR(RibbonTrail, SetStartColor, (const Color&), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetEndColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetEndColor(const Color& color)", "void SetEndColor(const Color&in)", AS_METHODPR(RibbonTrail, SetEndColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetEndColor(const Color& color)", "void set_endColor(const Color&in)", AS_METHODPR(RibbonTrail, SetEndColor, (const Color&), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetStartScale(float startScale)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetStartScale(float startScale)", "void SetStartScale(float)", AS_METHODPR(RibbonTrail, SetStartScale, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetStartScale(float startScale)", "void set_startScale(float)", AS_METHODPR(RibbonTrail, SetStartScale, (float), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetEndScale(float endScale)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetEndScale(float endScale)", "void SetEndScale(float)", AS_METHODPR(RibbonTrail, SetEndScale, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetEndScale(float endScale)", "void set_endScale(float)", AS_METHODPR(RibbonTrail, SetEndScale, (float), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetTrailType(TrailType type)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetTrailType(TrailType type)", "void SetTrailType(TrailType)", AS_METHODPR(RibbonTrail, SetTrailType, (TrailType), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetTrailType(TrailType type)", "void set_trailType(TrailType)", AS_METHODPR(RibbonTrail, SetTrailType, (TrailType), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetBaseVelocity(const Vector3& baseVelocity)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetBaseVelocity(const Vector3& baseVelocity)", "void SetBaseVelocity(const Vector3&in)", AS_METHODPR(RibbonTrail, SetBaseVelocity, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetBaseVelocity(const Vector3& baseVelocity)", "void set_baseVelocity(const Vector3&in)", AS_METHODPR(RibbonTrail, SetBaseVelocity, (const Vector3&), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetSorted(bool enable)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetSorted(bool enable)", "void SetSorted(bool)", AS_METHODPR(RibbonTrail, SetSorted, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetSorted(bool enable)", "void set_sorted(bool)", AS_METHODPR(RibbonTrail, SetSorted, (bool), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetLifetime(float time)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetLifetime(float time)", "void SetLifetime(float)", AS_METHODPR(RibbonTrail, SetLifetime, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetLifetime(float time)", "void set_lifetime(float)", AS_METHODPR(RibbonTrail, SetLifetime, (float), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetEmitting(bool emitting)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetEmitting(bool emitting)", "void SetEmitting(bool)", AS_METHODPR(RibbonTrail, SetEmitting, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetEmitting(bool emitting)", "void set_emitting(bool)", AS_METHODPR(RibbonTrail, SetEmitting, (bool), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetUpdateInvisible(bool enable)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetUpdateInvisible(bool enable)", "void SetUpdateInvisible(bool)", AS_METHODPR(RibbonTrail, SetUpdateInvisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetUpdateInvisible(bool enable)", "void set_updateInvisible(bool)", AS_METHODPR(RibbonTrail, SetUpdateInvisible, (bool), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetTailColumn(unsigned tailColumn)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetTailColumn(unsigned tailColumn)", "void SetTailColumn(uint)", AS_METHODPR(RibbonTrail, SetTailColumn, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetTailColumn(unsigned tailColumn)", "void set_tailColumn(uint)", AS_METHODPR(RibbonTrail, SetTailColumn, (unsigned), void), AS_CALL_THISCALL));

    // void RibbonTrail::SetAnimationLodBias(float bias)
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetAnimationLodBias(float bias)", "void SetAnimationLodBias(float)", AS_METHODPR(RibbonTrail, SetAnimationLodBias, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::SetAnimationLodBias(float bias)", "void set_animationLodBias(float)", AS_METHODPR(RibbonTrail, SetAnimationLodBias, (float), void), AS_CALL_THISCALL));

    // void RibbonTrail::Commit()
    methods.Push(RegisterObjectMethodArgs("void RibbonTrail::Commit()", "void Commit()", AS_METHODPR(RibbonTrail, Commit, (), void), AS_CALL_THISCALL));

    // Material* RibbonTrail::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* RibbonTrail::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(RibbonTrail, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* RibbonTrail::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(RibbonTrail, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // ResourceRef RibbonTrail::GetMaterialAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef RibbonTrail::GetMaterialAttr() const", "ResourceRef GetMaterialAttr() const", AS_METHODPR(RibbonTrail, GetMaterialAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // float RibbonTrail::GetVertexDistance() const
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetVertexDistance() const", "float GetVertexDistance() const", AS_METHODPR(RibbonTrail, GetVertexDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetVertexDistance() const", "float get_vertexDistance() const", AS_METHODPR(RibbonTrail, GetVertexDistance, () const, float), AS_CALL_THISCALL));

    // float RibbonTrail::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetWidth() const", "float GetWidth() const", AS_METHODPR(RibbonTrail, GetWidth, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetWidth() const", "float get_width() const", AS_METHODPR(RibbonTrail, GetWidth, () const, float), AS_CALL_THISCALL));

    // const Color& RibbonTrail::GetStartColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& RibbonTrail::GetStartColor() const", "const Color& GetStartColor() const", AS_METHODPR(RibbonTrail, GetStartColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& RibbonTrail::GetStartColor() const", "const Color& get_startColor() const", AS_METHODPR(RibbonTrail, GetStartColor, () const, const Color&), AS_CALL_THISCALL));

    // const Color& RibbonTrail::GetEndColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& RibbonTrail::GetEndColor() const", "const Color& GetEndColor() const", AS_METHODPR(RibbonTrail, GetEndColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& RibbonTrail::GetEndColor() const", "const Color& get_endColor() const", AS_METHODPR(RibbonTrail, GetEndColor, () const, const Color&), AS_CALL_THISCALL));

    // float RibbonTrail::GetStartScale() const
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetStartScale() const", "float GetStartScale() const", AS_METHODPR(RibbonTrail, GetStartScale, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetStartScale() const", "float get_startScale() const", AS_METHODPR(RibbonTrail, GetStartScale, () const, float), AS_CALL_THISCALL));

    // float RibbonTrail::GetEndScale() const
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetEndScale() const", "float GetEndScale() const", AS_METHODPR(RibbonTrail, GetEndScale, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetEndScale() const", "float get_endScale() const", AS_METHODPR(RibbonTrail, GetEndScale, () const, float), AS_CALL_THISCALL));

    // bool RibbonTrail::IsSorted() const
    methods.Push(RegisterObjectMethodArgs("bool RibbonTrail::IsSorted() const", "bool IsSorted() const", AS_METHODPR(RibbonTrail, IsSorted, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RibbonTrail::IsSorted() const", "bool get_sorted() const", AS_METHODPR(RibbonTrail, IsSorted, () const, bool), AS_CALL_THISCALL));

    // float RibbonTrail::GetLifetime() const
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetLifetime() const", "float GetLifetime() const", AS_METHODPR(RibbonTrail, GetLifetime, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetLifetime() const", "float get_lifetime() const", AS_METHODPR(RibbonTrail, GetLifetime, () const, float), AS_CALL_THISCALL));

    // float RibbonTrail::GetAnimationLodBias() const
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetAnimationLodBias() const", "float GetAnimationLodBias() const", AS_METHODPR(RibbonTrail, GetAnimationLodBias, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RibbonTrail::GetAnimationLodBias() const", "float get_animationLodBias() const", AS_METHODPR(RibbonTrail, GetAnimationLodBias, () const, float), AS_CALL_THISCALL));

    // TrailType RibbonTrail::GetTrailType() const
    methods.Push(RegisterObjectMethodArgs("TrailType RibbonTrail::GetTrailType() const", "TrailType GetTrailType() const", AS_METHODPR(RibbonTrail, GetTrailType, () const, TrailType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TrailType RibbonTrail::GetTrailType() const", "TrailType get_trailType() const", AS_METHODPR(RibbonTrail, GetTrailType, () const, TrailType), AS_CALL_THISCALL));

    // const Vector3& RibbonTrail::GetBaseVelocity() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& RibbonTrail::GetBaseVelocity() const", "const Vector3& GetBaseVelocity() const", AS_METHODPR(RibbonTrail, GetBaseVelocity, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& RibbonTrail::GetBaseVelocity() const", "const Vector3& get_baseVelocity() const", AS_METHODPR(RibbonTrail, GetBaseVelocity, () const, const Vector3&), AS_CALL_THISCALL));

    // unsigned RibbonTrail::GetTailColumn() const
    methods.Push(RegisterObjectMethodArgs("unsigned RibbonTrail::GetTailColumn() const", "uint GetTailColumn() const", AS_METHODPR(RibbonTrail, GetTailColumn, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned RibbonTrail::GetTailColumn() const", "uint get_tailColumn() const", AS_METHODPR(RibbonTrail, GetTailColumn, () const, unsigned), AS_CALL_THISCALL));

    // bool RibbonTrail::IsEmitting() const
    methods.Push(RegisterObjectMethodArgs("bool RibbonTrail::IsEmitting() const", "bool IsEmitting() const", AS_METHODPR(RibbonTrail, IsEmitting, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RibbonTrail::IsEmitting() const", "bool get_emitting() const", AS_METHODPR(RibbonTrail, IsEmitting, () const, bool), AS_CALL_THISCALL));

    // bool RibbonTrail::GetUpdateInvisible() const
    methods.Push(RegisterObjectMethodArgs("bool RibbonTrail::GetUpdateInvisible() const", "bool GetUpdateInvisible() const", AS_METHODPR(RibbonTrail, GetUpdateInvisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RibbonTrail::GetUpdateInvisible() const", "bool get_updateInvisible() const", AS_METHODPR(RibbonTrail, GetUpdateInvisible, () const, bool), AS_CALL_THISCALL));
}

// const Vector<SharedPtr<PackageFile>>& Scene::GetRequiredPackageFiles() const
// const Vector<SharedPtr<PackageFile>>& Scene::GetRequiredPackageFiles() const | File: ../Scene/Scene.h
static CScriptArray* Scene_GetRequiredPackageFiles_void(Scene* ptr)
{
    const Vector<SharedPtr<PackageFile>>& result = ptr->GetRequiredPackageFiles();
    return VectorToHandleArray(result, "Array<PackageFile@>");
}


// class Scene | File: ../Scene/Scene.h
void CollectMembers_Scene(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Node(methods);

    Remove(methods, "Component* Node::GetComponent(StringHash type, bool recursive=false) const");
    Remove(methods, "bool Node::Load(Deserializer& source) override");
    Remove(methods, "bool Node::Load(Deserializer& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)");
    Remove(methods, "bool Node::LoadJSON(const JSONValue& source) override");
    Remove(methods, "bool Node::LoadJSON(const JSONValue& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)");
    Remove(methods, "bool Node::LoadXML(const XMLElement& source) override");
    Remove(methods, "bool Node::LoadXML(const XMLElement& source, SceneResolver& resolver, bool loadChildren=true, bool rewriteIDs=false, CreateMode mode=REPLICATED)");
    Remove(methods, "bool Node::Save(Serializer& dest) const override");
    Remove(methods, "bool Node::SaveJSON(JSONValue& dest) const override");
    Remove(methods, "bool Node::SaveJSON(Serializer& dest, const String& indentation=\"\t\") const");
    Remove(methods, "bool Node::SaveXML(Serializer& dest, const String& indentation=\"\t\") const");
    Remove(methods, "bool Node::SaveXML(XMLElement& dest) const override");
    Remove(methods, "static void Node::RegisterObject(Context* context)");
    Remove(methods, "template<class T> T* Node::GetComponent(bool recursive=false) const");
    Remove(methods, "virtual void Node::AddReplicationState(NodeReplicationState* state)");
    Remove(methods, "void Node::CleanupConnection(Connection* connection)");
    Remove(methods, "void Node::MarkNetworkUpdate() override");
    Remove(methods, "void Node::MarkReplicationDirty()");
    Remove(methods, "void Node::PrepareNetworkUpdate()");

    // void Scene::AddReplicationState(NodeReplicationState* state) override
    // Error: type "NodeReplicationState*" can not automatically bind

    // bool Scene::GetNodesWithTag(PODVector<Node*>& dest, const String& tag) const
    // Error: type "PODVector<Node*>&" can not automatically bind

    // bool Scene::Load(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Scene::Load(Deserializer& source) override", "bool Load(Deserializer&)", AS_METHODPR(Scene, Load, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Scene::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool Scene::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(Scene, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool Scene::LoadXML(const XMLElement& source) override
    methods.Push(RegisterObjectMethodArgs("bool Scene::LoadXML(const XMLElement& source) override", "bool LoadXML(const XMLElement&in)", AS_METHODPR(Scene, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool Scene::LoadJSON(const JSONValue& source) override
    methods.Push(RegisterObjectMethodArgs("bool Scene::LoadJSON(const JSONValue& source) override", "bool LoadJSON(const JSONValue&in)", AS_METHODPR(Scene, LoadJSON, (const JSONValue&), bool), AS_CALL_THISCALL));

    // void Scene::MarkNetworkUpdate() override
    methods.Push(RegisterObjectMethodArgs("void Scene::MarkNetworkUpdate() override", "void MarkNetworkUpdate()", AS_METHODPR(Scene, MarkNetworkUpdate, (), void), AS_CALL_THISCALL));

    // bool Scene::LoadXML(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Scene::LoadXML(Deserializer& source)", "bool LoadXML(Deserializer&)", AS_METHODPR(Scene, LoadXML, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Scene::LoadJSON(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Scene::LoadJSON(Deserializer& source)", "bool LoadJSON(Deserializer&)", AS_METHODPR(Scene, LoadJSON, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Scene::SaveXML(Serializer& dest, const String& indentation=\"\t\") const
    methods.Push(RegisterObjectMethodArgs("bool Scene::SaveXML(Serializer& dest, const String& indentation=\"\t\") const", "bool SaveXML(Serializer&, const String&in = \"\t\") const", AS_METHODPR(Scene, SaveXML, (Serializer&, const String&) const, bool), AS_CALL_THISCALL));

    // bool Scene::SaveJSON(Serializer& dest, const String& indentation=\"\t\") const
    methods.Push(RegisterObjectMethodArgs("bool Scene::SaveJSON(Serializer& dest, const String& indentation=\"\t\") const", "bool SaveJSON(Serializer&, const String&in = \"\t\") const", AS_METHODPR(Scene, SaveJSON, (Serializer&, const String&) const, bool), AS_CALL_THISCALL));

    // bool Scene::LoadAsync(File* file, LoadMode mode=LOAD_SCENE_AND_RESOURCES)
    methods.Push(RegisterObjectMethodArgs("bool Scene::LoadAsync(File* file, LoadMode mode=LOAD_SCENE_AND_RESOURCES)", "bool LoadAsync(File@+, LoadMode = LOAD_SCENE_AND_RESOURCES)", AS_METHODPR(Scene, LoadAsync, (File*, LoadMode), bool), AS_CALL_THISCALL));

    // bool Scene::LoadAsyncXML(File* file, LoadMode mode=LOAD_SCENE_AND_RESOURCES)
    methods.Push(RegisterObjectMethodArgs("bool Scene::LoadAsyncXML(File* file, LoadMode mode=LOAD_SCENE_AND_RESOURCES)", "bool LoadAsyncXML(File@+, LoadMode = LOAD_SCENE_AND_RESOURCES)", AS_METHODPR(Scene, LoadAsyncXML, (File*, LoadMode), bool), AS_CALL_THISCALL));

    // bool Scene::LoadAsyncJSON(File* file, LoadMode mode=LOAD_SCENE_AND_RESOURCES)
    methods.Push(RegisterObjectMethodArgs("bool Scene::LoadAsyncJSON(File* file, LoadMode mode=LOAD_SCENE_AND_RESOURCES)", "bool LoadAsyncJSON(File@+, LoadMode = LOAD_SCENE_AND_RESOURCES)", AS_METHODPR(Scene, LoadAsyncJSON, (File*, LoadMode), bool), AS_CALL_THISCALL));

    // void Scene::StopAsyncLoading()
    methods.Push(RegisterObjectMethodArgs("void Scene::StopAsyncLoading()", "void StopAsyncLoading()", AS_METHODPR(Scene, StopAsyncLoading, (), void), AS_CALL_THISCALL));

    // Node* Scene::Instantiate(Deserializer& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("Node* Scene::Instantiate(Deserializer& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)", "Node@+ Instantiate(Deserializer&, const Vector3&in, const Quaternion&in, CreateMode = REPLICATED)", AS_METHODPR(Scene, Instantiate, (Deserializer&, const Vector3&, const Quaternion&, CreateMode), Node*), AS_CALL_THISCALL));

    // Node* Scene::InstantiateXML(const XMLElement& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("Node* Scene::InstantiateXML(const XMLElement& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)", "Node@+ InstantiateXML(const XMLElement&in, const Vector3&in, const Quaternion&in, CreateMode = REPLICATED)", AS_METHODPR(Scene, InstantiateXML, (const XMLElement&, const Vector3&, const Quaternion&, CreateMode), Node*), AS_CALL_THISCALL));

    // Node* Scene::InstantiateXML(Deserializer& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("Node* Scene::InstantiateXML(Deserializer& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)", "Node@+ InstantiateXML(Deserializer&, const Vector3&in, const Quaternion&in, CreateMode = REPLICATED)", AS_METHODPR(Scene, InstantiateXML, (Deserializer&, const Vector3&, const Quaternion&, CreateMode), Node*), AS_CALL_THISCALL));

    // Node* Scene::InstantiateJSON(const JSONValue& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("Node* Scene::InstantiateJSON(const JSONValue& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)", "Node@+ InstantiateJSON(const JSONValue&in, const Vector3&in, const Quaternion&in, CreateMode = REPLICATED)", AS_METHODPR(Scene, InstantiateJSON, (const JSONValue&, const Vector3&, const Quaternion&, CreateMode), Node*), AS_CALL_THISCALL));

    // Node* Scene::InstantiateJSON(Deserializer& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)
    methods.Push(RegisterObjectMethodArgs("Node* Scene::InstantiateJSON(Deserializer& source, const Vector3& position, const Quaternion& rotation, CreateMode mode=REPLICATED)", "Node@+ InstantiateJSON(Deserializer&, const Vector3&in, const Quaternion&in, CreateMode = REPLICATED)", AS_METHODPR(Scene, InstantiateJSON, (Deserializer&, const Vector3&, const Quaternion&, CreateMode), Node*), AS_CALL_THISCALL));

    // void Scene::Clear(bool clearReplicated=true, bool clearLocal=true)
    methods.Push(RegisterObjectMethodArgs("void Scene::Clear(bool clearReplicated=true, bool clearLocal=true)", "void Clear(bool = true, bool = true)", AS_METHODPR(Scene, Clear, (bool, bool), void), AS_CALL_THISCALL));

    // void Scene::SetUpdateEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Scene::SetUpdateEnabled(bool enable)", "void SetUpdateEnabled(bool)", AS_METHODPR(Scene, SetUpdateEnabled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Scene::SetUpdateEnabled(bool enable)", "void set_updateEnabled(bool)", AS_METHODPR(Scene, SetUpdateEnabled, (bool), void), AS_CALL_THISCALL));

    // void Scene::SetTimeScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Scene::SetTimeScale(float scale)", "void SetTimeScale(float)", AS_METHODPR(Scene, SetTimeScale, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Scene::SetTimeScale(float scale)", "void set_timeScale(float)", AS_METHODPR(Scene, SetTimeScale, (float), void), AS_CALL_THISCALL));

    // void Scene::SetElapsedTime(float time)
    methods.Push(RegisterObjectMethodArgs("void Scene::SetElapsedTime(float time)", "void SetElapsedTime(float)", AS_METHODPR(Scene, SetElapsedTime, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Scene::SetElapsedTime(float time)", "void set_elapsedTime(float)", AS_METHODPR(Scene, SetElapsedTime, (float), void), AS_CALL_THISCALL));

    // void Scene::SetSmoothingConstant(float constant)
    methods.Push(RegisterObjectMethodArgs("void Scene::SetSmoothingConstant(float constant)", "void SetSmoothingConstant(float)", AS_METHODPR(Scene, SetSmoothingConstant, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Scene::SetSmoothingConstant(float constant)", "void set_smoothingConstant(float)", AS_METHODPR(Scene, SetSmoothingConstant, (float), void), AS_CALL_THISCALL));

    // void Scene::SetSnapThreshold(float threshold)
    methods.Push(RegisterObjectMethodArgs("void Scene::SetSnapThreshold(float threshold)", "void SetSnapThreshold(float)", AS_METHODPR(Scene, SetSnapThreshold, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Scene::SetSnapThreshold(float threshold)", "void set_snapThreshold(float)", AS_METHODPR(Scene, SetSnapThreshold, (float), void), AS_CALL_THISCALL));

    // void Scene::SetAsyncLoadingMs(int ms)
    methods.Push(RegisterObjectMethodArgs("void Scene::SetAsyncLoadingMs(int ms)", "void SetAsyncLoadingMs(int)", AS_METHODPR(Scene, SetAsyncLoadingMs, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Scene::SetAsyncLoadingMs(int ms)", "void set_asyncLoadingMs(int)", AS_METHODPR(Scene, SetAsyncLoadingMs, (int), void), AS_CALL_THISCALL));

    // void Scene::AddRequiredPackageFile(PackageFile* package)
    methods.Push(RegisterObjectMethodArgs("void Scene::AddRequiredPackageFile(PackageFile* package)", "void AddRequiredPackageFile(PackageFile@+)", AS_METHODPR(Scene, AddRequiredPackageFile, (PackageFile*), void), AS_CALL_THISCALL));

    // void Scene::ClearRequiredPackageFiles()
    methods.Push(RegisterObjectMethodArgs("void Scene::ClearRequiredPackageFiles()", "void ClearRequiredPackageFiles()", AS_METHODPR(Scene, ClearRequiredPackageFiles, (), void), AS_CALL_THISCALL));

    // void Scene::RegisterVar(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Scene::RegisterVar(const String& name)", "void RegisterVar(const String&in)", AS_METHODPR(Scene, RegisterVar, (const String&), void), AS_CALL_THISCALL));

    // void Scene::UnregisterVar(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Scene::UnregisterVar(const String& name)", "void UnregisterVar(const String&in)", AS_METHODPR(Scene, UnregisterVar, (const String&), void), AS_CALL_THISCALL));

    // void Scene::UnregisterAllVars()
    methods.Push(RegisterObjectMethodArgs("void Scene::UnregisterAllVars()", "void UnregisterAllVars()", AS_METHODPR(Scene, UnregisterAllVars, (), void), AS_CALL_THISCALL));

    // Node* Scene::GetNode(unsigned id) const
    methods.Push(RegisterObjectMethodArgs("Node* Scene::GetNode(unsigned id) const", "Node@+ GetNode(uint) const", AS_METHODPR(Scene, GetNode, (unsigned) const, Node*), AS_CALL_THISCALL));

    // Component* Scene::GetComponent(unsigned id) const
    methods.Push(RegisterObjectMethodArgs("Component* Scene::GetComponent(unsigned id) const", "Component@+ GetComponent(uint) const", AS_METHODPR(Scene, GetComponent, (unsigned) const, Component*), AS_CALL_THISCALL));

    // bool Scene::IsUpdateEnabled() const
    methods.Push(RegisterObjectMethodArgs("bool Scene::IsUpdateEnabled() const", "bool IsUpdateEnabled() const", AS_METHODPR(Scene, IsUpdateEnabled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Scene::IsUpdateEnabled() const", "bool get_updateEnabled() const", AS_METHODPR(Scene, IsUpdateEnabled, () const, bool), AS_CALL_THISCALL));

    // bool Scene::IsAsyncLoading() const
    methods.Push(RegisterObjectMethodArgs("bool Scene::IsAsyncLoading() const", "bool IsAsyncLoading() const", AS_METHODPR(Scene, IsAsyncLoading, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Scene::IsAsyncLoading() const", "bool get_asyncLoading() const", AS_METHODPR(Scene, IsAsyncLoading, () const, bool), AS_CALL_THISCALL));

    // float Scene::GetAsyncProgress() const
    methods.Push(RegisterObjectMethodArgs("float Scene::GetAsyncProgress() const", "float GetAsyncProgress() const", AS_METHODPR(Scene, GetAsyncProgress, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Scene::GetAsyncProgress() const", "float get_asyncProgress() const", AS_METHODPR(Scene, GetAsyncProgress, () const, float), AS_CALL_THISCALL));

    // LoadMode Scene::GetAsyncLoadMode() const
    methods.Push(RegisterObjectMethodArgs("LoadMode Scene::GetAsyncLoadMode() const", "LoadMode GetAsyncLoadMode() const", AS_METHODPR(Scene, GetAsyncLoadMode, () const, LoadMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("LoadMode Scene::GetAsyncLoadMode() const", "LoadMode get_asyncLoadMode() const", AS_METHODPR(Scene, GetAsyncLoadMode, () const, LoadMode), AS_CALL_THISCALL));

    // const String& Scene::GetFileName() const
    methods.Push(RegisterObjectMethodArgs("const String& Scene::GetFileName() const", "const String& GetFileName() const", AS_METHODPR(Scene, GetFileName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Scene::GetFileName() const", "const String& get_fileName() const", AS_METHODPR(Scene, GetFileName, () const, const String&), AS_CALL_THISCALL));

    // unsigned Scene::GetChecksum() const
    methods.Push(RegisterObjectMethodArgs("unsigned Scene::GetChecksum() const", "uint GetChecksum() const", AS_METHODPR(Scene, GetChecksum, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Scene::GetChecksum() const", "uint get_checksum() const", AS_METHODPR(Scene, GetChecksum, () const, unsigned), AS_CALL_THISCALL));

    // float Scene::GetTimeScale() const
    methods.Push(RegisterObjectMethodArgs("float Scene::GetTimeScale() const", "float GetTimeScale() const", AS_METHODPR(Scene, GetTimeScale, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Scene::GetTimeScale() const", "float get_timeScale() const", AS_METHODPR(Scene, GetTimeScale, () const, float), AS_CALL_THISCALL));

    // float Scene::GetElapsedTime() const
    methods.Push(RegisterObjectMethodArgs("float Scene::GetElapsedTime() const", "float GetElapsedTime() const", AS_METHODPR(Scene, GetElapsedTime, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Scene::GetElapsedTime() const", "float get_elapsedTime() const", AS_METHODPR(Scene, GetElapsedTime, () const, float), AS_CALL_THISCALL));

    // float Scene::GetSmoothingConstant() const
    methods.Push(RegisterObjectMethodArgs("float Scene::GetSmoothingConstant() const", "float GetSmoothingConstant() const", AS_METHODPR(Scene, GetSmoothingConstant, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Scene::GetSmoothingConstant() const", "float get_smoothingConstant() const", AS_METHODPR(Scene, GetSmoothingConstant, () const, float), AS_CALL_THISCALL));

    // float Scene::GetSnapThreshold() const
    methods.Push(RegisterObjectMethodArgs("float Scene::GetSnapThreshold() const", "float GetSnapThreshold() const", AS_METHODPR(Scene, GetSnapThreshold, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Scene::GetSnapThreshold() const", "float get_snapThreshold() const", AS_METHODPR(Scene, GetSnapThreshold, () const, float), AS_CALL_THISCALL));

    // int Scene::GetAsyncLoadingMs() const
    methods.Push(RegisterObjectMethodArgs("int Scene::GetAsyncLoadingMs() const", "int GetAsyncLoadingMs() const", AS_METHODPR(Scene, GetAsyncLoadingMs, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Scene::GetAsyncLoadingMs() const", "int get_asyncLoadingMs() const", AS_METHODPR(Scene, GetAsyncLoadingMs, () const, int), AS_CALL_THISCALL));

    // const Vector<SharedPtr<PackageFile>>& Scene::GetRequiredPackageFiles() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<PackageFile>>& Scene::GetRequiredPackageFiles() const", "Array<PackageFile@>@ GetRequiredPackageFiles() const", AS_FUNCTION_OBJFIRST(Scene_GetRequiredPackageFiles_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<PackageFile>>& Scene::GetRequiredPackageFiles() const", "Array<PackageFile@>@ get_requiredPackageFiles() const", AS_FUNCTION_OBJFIRST(Scene_GetRequiredPackageFiles_void), AS_CALL_CDECL_OBJFIRST));

    // const String& Scene::GetVarName(StringHash hash) const
    methods.Push(RegisterObjectMethodArgs("const String& Scene::GetVarName(StringHash hash) const", "const String& GetVarName(StringHash) const", AS_METHODPR(Scene, GetVarName, (StringHash) const, const String&), AS_CALL_THISCALL));

    // void Scene::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void Scene::Update(float timeStep)", "void Update(float)", AS_METHODPR(Scene, Update, (float), void), AS_CALL_THISCALL));

    // void Scene::BeginThreadedUpdate()
    methods.Push(RegisterObjectMethodArgs("void Scene::BeginThreadedUpdate()", "void BeginThreadedUpdate()", AS_METHODPR(Scene, BeginThreadedUpdate, (), void), AS_CALL_THISCALL));

    // void Scene::EndThreadedUpdate()
    methods.Push(RegisterObjectMethodArgs("void Scene::EndThreadedUpdate()", "void EndThreadedUpdate()", AS_METHODPR(Scene, EndThreadedUpdate, (), void), AS_CALL_THISCALL));

    // void Scene::DelayedMarkedDirty(Component* component)
    methods.Push(RegisterObjectMethodArgs("void Scene::DelayedMarkedDirty(Component* component)", "void DelayedMarkedDirty(Component@+)", AS_METHODPR(Scene, DelayedMarkedDirty, (Component*), void), AS_CALL_THISCALL));

    // bool Scene::IsThreadedUpdate() const
    methods.Push(RegisterObjectMethodArgs("bool Scene::IsThreadedUpdate() const", "bool IsThreadedUpdate() const", AS_METHODPR(Scene, IsThreadedUpdate, () const, bool), AS_CALL_THISCALL));

    // unsigned Scene::GetFreeNodeID(CreateMode mode)
    methods.Push(RegisterObjectMethodArgs("unsigned Scene::GetFreeNodeID(CreateMode mode)", "uint GetFreeNodeID(CreateMode)", AS_METHODPR(Scene, GetFreeNodeID, (CreateMode), unsigned), AS_CALL_THISCALL));

    // unsigned Scene::GetFreeComponentID(CreateMode mode)
    methods.Push(RegisterObjectMethodArgs("unsigned Scene::GetFreeComponentID(CreateMode mode)", "uint GetFreeComponentID(CreateMode)", AS_METHODPR(Scene, GetFreeComponentID, (CreateMode), unsigned), AS_CALL_THISCALL));

    // void Scene::NodeTagAdded(Node* node, const String& tag)
    methods.Push(RegisterObjectMethodArgs("void Scene::NodeTagAdded(Node* node, const String& tag)", "void NodeTagAdded(Node@+, const String&in)", AS_METHODPR(Scene, NodeTagAdded, (Node*, const String&), void), AS_CALL_THISCALL));

    // void Scene::NodeTagRemoved(Node* node, const String& tag)
    methods.Push(RegisterObjectMethodArgs("void Scene::NodeTagRemoved(Node* node, const String& tag)", "void NodeTagRemoved(Node@+, const String&in)", AS_METHODPR(Scene, NodeTagRemoved, (Node*, const String&), void), AS_CALL_THISCALL));

    // void Scene::NodeAdded(Node* node)
    methods.Push(RegisterObjectMethodArgs("void Scene::NodeAdded(Node* node)", "void NodeAdded(Node@+)", AS_METHODPR(Scene, NodeAdded, (Node*), void), AS_CALL_THISCALL));

    // void Scene::NodeRemoved(Node* node)
    methods.Push(RegisterObjectMethodArgs("void Scene::NodeRemoved(Node* node)", "void NodeRemoved(Node@+)", AS_METHODPR(Scene, NodeRemoved, (Node*), void), AS_CALL_THISCALL));

    // void Scene::ComponentAdded(Component* component)
    methods.Push(RegisterObjectMethodArgs("void Scene::ComponentAdded(Component* component)", "void ComponentAdded(Component@+)", AS_METHODPR(Scene, ComponentAdded, (Component*), void), AS_CALL_THISCALL));

    // void Scene::ComponentRemoved(Component* component)
    methods.Push(RegisterObjectMethodArgs("void Scene::ComponentRemoved(Component* component)", "void ComponentRemoved(Component@+)", AS_METHODPR(Scene, ComponentRemoved, (Component*), void), AS_CALL_THISCALL));

    // void Scene::SetVarNamesAttr(const String& value)
    methods.Push(RegisterObjectMethodArgs("void Scene::SetVarNamesAttr(const String& value)", "void SetVarNamesAttr(const String&in)", AS_METHODPR(Scene, SetVarNamesAttr, (const String&), void), AS_CALL_THISCALL));

    // String Scene::GetVarNamesAttr() const
    methods.Push(RegisterObjectMethodArgs("String Scene::GetVarNamesAttr() const", "String GetVarNamesAttr() const", AS_METHODPR(Scene, GetVarNamesAttr, () const, String), AS_CALL_THISCALL));

    // void Scene::PrepareNetworkUpdate()
    methods.Push(RegisterObjectMethodArgs("void Scene::PrepareNetworkUpdate()", "void PrepareNetworkUpdate()", AS_METHODPR(Scene, PrepareNetworkUpdate, (), void), AS_CALL_THISCALL));

    // void Scene::MarkNetworkUpdate(Node* node)
    methods.Push(RegisterObjectMethodArgs("void Scene::MarkNetworkUpdate(Node* node)", "void MarkNetworkUpdate(Node@+)", AS_METHODPR(Scene, MarkNetworkUpdate, (Node*), void), AS_CALL_THISCALL));

    // void Scene::MarkNetworkUpdate(Component* component)
    methods.Push(RegisterObjectMethodArgs("void Scene::MarkNetworkUpdate(Component* component)", "void MarkNetworkUpdate(Component@+)", AS_METHODPR(Scene, MarkNetworkUpdate, (Component*), void), AS_CALL_THISCALL));

    // void Scene::MarkReplicationDirty(Node* node)
    methods.Push(RegisterObjectMethodArgs("void Scene::MarkReplicationDirty(Node* node)", "void MarkReplicationDirty(Node@+)", AS_METHODPR(Scene, MarkReplicationDirty, (Node*), void), AS_CALL_THISCALL));
}

// struct ScenePassInfo | File: ../Graphics/View.h
void CollectMembers_ScenePassInfo(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct SceneReplicationState | File: ../Scene/ReplicationState.h
void CollectMembers_SceneReplicationState(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ReplicationState(methods);

    // void SceneReplicationState::Clear()
    methods.Push(RegisterObjectMethodArgs("void SceneReplicationState::Clear()", "void Clear()", AS_METHODPR(SceneReplicationState, Clear, (), void), AS_CALL_THISCALL));
}

// class SceneResolver | File: ../Scene/SceneResolver.h
void CollectMembers_SceneResolver(Vector<RegisterObjectMethodArgs>& methods)
{
    // void SceneResolver::Reset()
    methods.Push(RegisterObjectMethodArgs("void SceneResolver::Reset()", "void Reset()", AS_METHODPR(SceneResolver, Reset, (), void), AS_CALL_THISCALL));

    // void SceneResolver::AddNode(unsigned oldID, Node* node)
    methods.Push(RegisterObjectMethodArgs("void SceneResolver::AddNode(unsigned oldID, Node* node)", "void AddNode(uint, Node@+)", AS_METHODPR(SceneResolver, AddNode, (unsigned, Node*), void), AS_CALL_THISCALL));

    // void SceneResolver::AddComponent(unsigned oldID, Component* component)
    methods.Push(RegisterObjectMethodArgs("void SceneResolver::AddComponent(unsigned oldID, Component* component)", "void AddComponent(uint, Component@+)", AS_METHODPR(SceneResolver, AddComponent, (unsigned, Component*), void), AS_CALL_THISCALL));

    // void SceneResolver::Resolve()
    methods.Push(RegisterObjectMethodArgs("void SceneResolver::Resolve()", "void Resolve()", AS_METHODPR(SceneResolver, Resolve, (), void), AS_CALL_THISCALL));
}

// struct ScratchBuffer | File: ../Graphics/Graphics.h
void CollectMembers_ScratchBuffer(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct ScreenModeParams | File: ../Graphics/Graphics.h
void CollectMembers_ScreenModeParams(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool ScreenModeParams::operator!=(const ScreenModeParams& rhs) const
    // Only operator== is needed

    // bool ScreenModeParams::EqualsExceptVSync(const ScreenModeParams& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool ScreenModeParams::EqualsExceptVSync(const ScreenModeParams& rhs) const", "bool EqualsExceptVSync(const ScreenModeParams&in) const", AS_METHODPR(ScreenModeParams, EqualsExceptVSync, (const ScreenModeParams&) const, bool), AS_CALL_THISCALL));

    // bool ScreenModeParams::operator==(const ScreenModeParams& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool ScreenModeParams::operator==(const ScreenModeParams& rhs) const", "bool opEquals(const ScreenModeParams&in) const", AS_METHODPR(ScreenModeParams, operator==, (const ScreenModeParams&) const, bool), AS_CALL_THISCALL));
}

// class ScrollBar | File: ../UI/ScrollBar.h
void CollectMembers_ScrollBar(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BorderImage(methods);

    Remove(methods, "static void BorderImage::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::OnResize(const IntVector2& newSize, const IntVector2& delta)");
    Remove(methods, "virtual void UIElement::OnSetEditable()");
    Remove(methods, "void UIElement::ApplyAttributes() override");

    // void ScrollBar::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(ScrollBar, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void ScrollBar::OnResize(const IntVector2& newSize, const IntVector2& delta) override
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::OnResize(const IntVector2& newSize, const IntVector2& delta) override", "void OnResize(const IntVector2&in, const IntVector2&in)", AS_METHODPR(ScrollBar, OnResize, (const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // void ScrollBar::OnSetEditable() override
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::OnSetEditable() override", "void OnSetEditable()", AS_METHODPR(ScrollBar, OnSetEditable, (), void), AS_CALL_THISCALL));

    // void ScrollBar::SetOrientation(Orientation orientation)
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetOrientation(Orientation orientation)", "void SetOrientation(Orientation)", AS_METHODPR(ScrollBar, SetOrientation, (Orientation), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetOrientation(Orientation orientation)", "void set_orientation(Orientation)", AS_METHODPR(ScrollBar, SetOrientation, (Orientation), void), AS_CALL_THISCALL));

    // void ScrollBar::SetRange(float range)
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetRange(float range)", "void SetRange(float)", AS_METHODPR(ScrollBar, SetRange, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetRange(float range)", "void set_range(float)", AS_METHODPR(ScrollBar, SetRange, (float), void), AS_CALL_THISCALL));

    // void ScrollBar::SetValue(float value)
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetValue(float value)", "void SetValue(float)", AS_METHODPR(ScrollBar, SetValue, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetValue(float value)", "void set_value(float)", AS_METHODPR(ScrollBar, SetValue, (float), void), AS_CALL_THISCALL));

    // void ScrollBar::ChangeValue(float delta)
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::ChangeValue(float delta)", "void ChangeValue(float)", AS_METHODPR(ScrollBar, ChangeValue, (float), void), AS_CALL_THISCALL));

    // void ScrollBar::SetScrollStep(float step)
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetScrollStep(float step)", "void SetScrollStep(float)", AS_METHODPR(ScrollBar, SetScrollStep, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetScrollStep(float step)", "void set_scrollStep(float)", AS_METHODPR(ScrollBar, SetScrollStep, (float), void), AS_CALL_THISCALL));

    // void ScrollBar::SetStepFactor(float factor)
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetStepFactor(float factor)", "void SetStepFactor(float)", AS_METHODPR(ScrollBar, SetStepFactor, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::SetStepFactor(float factor)", "void set_stepFactor(float)", AS_METHODPR(ScrollBar, SetStepFactor, (float), void), AS_CALL_THISCALL));

    // void ScrollBar::StepBack()
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::StepBack()", "void StepBack()", AS_METHODPR(ScrollBar, StepBack, (), void), AS_CALL_THISCALL));

    // void ScrollBar::StepForward()
    methods.Push(RegisterObjectMethodArgs("void ScrollBar::StepForward()", "void StepForward()", AS_METHODPR(ScrollBar, StepForward, (), void), AS_CALL_THISCALL));

    // Orientation ScrollBar::GetOrientation() const
    methods.Push(RegisterObjectMethodArgs("Orientation ScrollBar::GetOrientation() const", "Orientation GetOrientation() const", AS_METHODPR(ScrollBar, GetOrientation, () const, Orientation), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Orientation ScrollBar::GetOrientation() const", "Orientation get_orientation() const", AS_METHODPR(ScrollBar, GetOrientation, () const, Orientation), AS_CALL_THISCALL));

    // float ScrollBar::GetRange() const
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetRange() const", "float GetRange() const", AS_METHODPR(ScrollBar, GetRange, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetRange() const", "float get_range() const", AS_METHODPR(ScrollBar, GetRange, () const, float), AS_CALL_THISCALL));

    // float ScrollBar::GetValue() const
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetValue() const", "float GetValue() const", AS_METHODPR(ScrollBar, GetValue, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetValue() const", "float get_value() const", AS_METHODPR(ScrollBar, GetValue, () const, float), AS_CALL_THISCALL));

    // float ScrollBar::GetScrollStep() const
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetScrollStep() const", "float GetScrollStep() const", AS_METHODPR(ScrollBar, GetScrollStep, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetScrollStep() const", "float get_scrollStep() const", AS_METHODPR(ScrollBar, GetScrollStep, () const, float), AS_CALL_THISCALL));

    // float ScrollBar::GetStepFactor() const
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetStepFactor() const", "float GetStepFactor() const", AS_METHODPR(ScrollBar, GetStepFactor, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetStepFactor() const", "float get_stepFactor() const", AS_METHODPR(ScrollBar, GetStepFactor, () const, float), AS_CALL_THISCALL));

    // float ScrollBar::GetEffectiveScrollStep() const
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetEffectiveScrollStep() const", "float GetEffectiveScrollStep() const", AS_METHODPR(ScrollBar, GetEffectiveScrollStep, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollBar::GetEffectiveScrollStep() const", "float get_effectiveScrollStep() const", AS_METHODPR(ScrollBar, GetEffectiveScrollStep, () const, float), AS_CALL_THISCALL));

    // Button* ScrollBar::GetBackButton() const
    methods.Push(RegisterObjectMethodArgs("Button* ScrollBar::GetBackButton() const", "Button@+ GetBackButton() const", AS_METHODPR(ScrollBar, GetBackButton, () const, Button*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Button* ScrollBar::GetBackButton() const", "Button@+ get_backButton() const", AS_METHODPR(ScrollBar, GetBackButton, () const, Button*), AS_CALL_THISCALL));

    // Button* ScrollBar::GetForwardButton() const
    methods.Push(RegisterObjectMethodArgs("Button* ScrollBar::GetForwardButton() const", "Button@+ GetForwardButton() const", AS_METHODPR(ScrollBar, GetForwardButton, () const, Button*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Button* ScrollBar::GetForwardButton() const", "Button@+ get_forwardButton() const", AS_METHODPR(ScrollBar, GetForwardButton, () const, Button*), AS_CALL_THISCALL));

    // Slider* ScrollBar::GetSlider() const
    methods.Push(RegisterObjectMethodArgs("Slider* ScrollBar::GetSlider() const", "Slider@+ GetSlider() const", AS_METHODPR(ScrollBar, GetSlider, () const, Slider*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Slider* ScrollBar::GetSlider() const", "Slider@+ get_slider() const", AS_METHODPR(ScrollBar, GetSlider, () const, Slider*), AS_CALL_THISCALL));
}

// class ScrollView | File: ../UI/ScrollView.h
void CollectMembers_ScrollView(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_UIElement(methods);

    Remove(methods, "static void UIElement::RegisterObject(Context* context)");
    Remove(methods, "virtual bool UIElement::IsWheelHandler() const");
    Remove(methods, "virtual void UIElement::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers)");
    Remove(methods, "virtual void UIElement::OnResize(const IntVector2& newSize, const IntVector2& delta)");
    Remove(methods, "virtual void UIElement::OnWheel(int delta, MouseButtonFlags buttons, QualifierFlags qualifiers)");
    Remove(methods, "virtual void UIElement::Update(float timeStep)");
    Remove(methods, "void UIElement::ApplyAttributes() override");

    // void ScrollView::Update(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void ScrollView::Update(float timeStep) override", "void Update(float)", AS_METHODPR(ScrollView, Update, (float), void), AS_CALL_THISCALL));

    // void ScrollView::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void ScrollView::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(ScrollView, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void ScrollView::OnWheel(int delta, MouseButtonFlags buttons, QualifierFlags qualifiers) override
    methods.Push(RegisterObjectMethodArgs("void ScrollView::OnWheel(int delta, MouseButtonFlags buttons, QualifierFlags qualifiers) override", "void OnWheel(int, MouseButtonFlags, QualifierFlags)", AS_METHODPR(ScrollView, OnWheel, (int, MouseButtonFlags, QualifierFlags), void), AS_CALL_THISCALL));

    // void ScrollView::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override
    methods.Push(RegisterObjectMethodArgs("void ScrollView::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers) override", "void OnKey(Key, MouseButtonFlags, QualifierFlags)", AS_METHODPR(ScrollView, OnKey, (Key, MouseButtonFlags, QualifierFlags), void), AS_CALL_THISCALL));

    // void ScrollView::OnResize(const IntVector2& newSize, const IntVector2& delta) override
    methods.Push(RegisterObjectMethodArgs("void ScrollView::OnResize(const IntVector2& newSize, const IntVector2& delta) override", "void OnResize(const IntVector2&in, const IntVector2&in)", AS_METHODPR(ScrollView, OnResize, (const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // bool ScrollView::IsWheelHandler() const override
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::IsWheelHandler() const override", "bool IsWheelHandler() const", AS_METHODPR(ScrollView, IsWheelHandler, () const, bool), AS_CALL_THISCALL));

    // void ScrollView::SetContentElement(UIElement* element)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetContentElement(UIElement* element)", "void SetContentElement(UIElement@+)", AS_METHODPR(ScrollView, SetContentElement, (UIElement*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetContentElement(UIElement* element)", "void set_contentElement(UIElement@+)", AS_METHODPR(ScrollView, SetContentElement, (UIElement*), void), AS_CALL_THISCALL));

    // void ScrollView::SetViewPosition(const IntVector2& position)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetViewPosition(const IntVector2& position)", "void SetViewPosition(const IntVector2&in)", AS_METHODPR(ScrollView, SetViewPosition, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetViewPosition(const IntVector2& position)", "void set_viewPosition(const IntVector2&in)", AS_METHODPR(ScrollView, SetViewPosition, (const IntVector2&), void), AS_CALL_THISCALL));

    // void ScrollView::SetViewPosition(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetViewPosition(int x, int y)", "void SetViewPosition(int, int)", AS_METHODPR(ScrollView, SetViewPosition, (int, int), void), AS_CALL_THISCALL));

    // void ScrollView::SetScrollBarsVisible(bool horizontal, bool vertical)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollBarsVisible(bool horizontal, bool vertical)", "void SetScrollBarsVisible(bool, bool)", AS_METHODPR(ScrollView, SetScrollBarsVisible, (bool, bool), void), AS_CALL_THISCALL));

    // void ScrollView::SetHorizontalScrollBarVisible(bool visible)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetHorizontalScrollBarVisible(bool visible)", "void SetHorizontalScrollBarVisible(bool)", AS_METHODPR(ScrollView, SetHorizontalScrollBarVisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetHorizontalScrollBarVisible(bool visible)", "void set_horizontalScrollBarVisible(bool)", AS_METHODPR(ScrollView, SetHorizontalScrollBarVisible, (bool), void), AS_CALL_THISCALL));

    // void ScrollView::SetVerticalScrollBarVisible(bool visible)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetVerticalScrollBarVisible(bool visible)", "void SetVerticalScrollBarVisible(bool)", AS_METHODPR(ScrollView, SetVerticalScrollBarVisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetVerticalScrollBarVisible(bool visible)", "void set_verticalScrollBarVisible(bool)", AS_METHODPR(ScrollView, SetVerticalScrollBarVisible, (bool), void), AS_CALL_THISCALL));

    // void ScrollView::SetScrollBarsAutoVisible(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollBarsAutoVisible(bool enable)", "void SetScrollBarsAutoVisible(bool)", AS_METHODPR(ScrollView, SetScrollBarsAutoVisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollBarsAutoVisible(bool enable)", "void set_scrollBarsAutoVisible(bool)", AS_METHODPR(ScrollView, SetScrollBarsAutoVisible, (bool), void), AS_CALL_THISCALL));

    // void ScrollView::SetScrollStep(float step)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollStep(float step)", "void SetScrollStep(float)", AS_METHODPR(ScrollView, SetScrollStep, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollStep(float step)", "void set_scrollStep(float)", AS_METHODPR(ScrollView, SetScrollStep, (float), void), AS_CALL_THISCALL));

    // void ScrollView::SetPageStep(float step)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetPageStep(float step)", "void SetPageStep(float)", AS_METHODPR(ScrollView, SetPageStep, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetPageStep(float step)", "void set_pageStep(float)", AS_METHODPR(ScrollView, SetPageStep, (float), void), AS_CALL_THISCALL));

    // void ScrollView::SetScrollDeceleration(float deceleration)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollDeceleration(float deceleration)", "void SetScrollDeceleration(float)", AS_METHODPR(ScrollView, SetScrollDeceleration, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollDeceleration(float deceleration)", "void set_scrollDeceleration(float)", AS_METHODPR(ScrollView, SetScrollDeceleration, (float), void), AS_CALL_THISCALL));

    // void ScrollView::SetScrollSnapEpsilon(float snap)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollSnapEpsilon(float snap)", "void SetScrollSnapEpsilon(float)", AS_METHODPR(ScrollView, SetScrollSnapEpsilon, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetScrollSnapEpsilon(float snap)", "void set_scrollSnapEpsilon(float)", AS_METHODPR(ScrollView, SetScrollSnapEpsilon, (float), void), AS_CALL_THISCALL));

    // void ScrollView::SetAutoDisableChildren(bool disable)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetAutoDisableChildren(bool disable)", "void SetAutoDisableChildren(bool)", AS_METHODPR(ScrollView, SetAutoDisableChildren, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetAutoDisableChildren(bool disable)", "void set_autoDisableChildren(bool)", AS_METHODPR(ScrollView, SetAutoDisableChildren, (bool), void), AS_CALL_THISCALL));

    // void ScrollView::SetAutoDisableThreshold(float amount)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetAutoDisableThreshold(float amount)", "void SetAutoDisableThreshold(float)", AS_METHODPR(ScrollView, SetAutoDisableThreshold, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetAutoDisableThreshold(float amount)", "void set_autoDisableThreshold(float)", AS_METHODPR(ScrollView, SetAutoDisableThreshold, (float), void), AS_CALL_THISCALL));

    // const IntVector2& ScrollView::GetViewPosition() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& ScrollView::GetViewPosition() const", "const IntVector2& GetViewPosition() const", AS_METHODPR(ScrollView, GetViewPosition, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& ScrollView::GetViewPosition() const", "const IntVector2& get_viewPosition() const", AS_METHODPR(ScrollView, GetViewPosition, () const, const IntVector2&), AS_CALL_THISCALL));

    // UIElement* ScrollView::GetContentElement() const
    methods.Push(RegisterObjectMethodArgs("UIElement* ScrollView::GetContentElement() const", "UIElement@+ GetContentElement() const", AS_METHODPR(ScrollView, GetContentElement, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* ScrollView::GetContentElement() const", "UIElement@+ get_contentElement() const", AS_METHODPR(ScrollView, GetContentElement, () const, UIElement*), AS_CALL_THISCALL));

    // ScrollBar* ScrollView::GetHorizontalScrollBar() const
    methods.Push(RegisterObjectMethodArgs("ScrollBar* ScrollView::GetHorizontalScrollBar() const", "ScrollBar@+ GetHorizontalScrollBar() const", AS_METHODPR(ScrollView, GetHorizontalScrollBar, () const, ScrollBar*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ScrollBar* ScrollView::GetHorizontalScrollBar() const", "ScrollBar@+ get_horizontalScrollBar() const", AS_METHODPR(ScrollView, GetHorizontalScrollBar, () const, ScrollBar*), AS_CALL_THISCALL));

    // ScrollBar* ScrollView::GetVerticalScrollBar() const
    methods.Push(RegisterObjectMethodArgs("ScrollBar* ScrollView::GetVerticalScrollBar() const", "ScrollBar@+ GetVerticalScrollBar() const", AS_METHODPR(ScrollView, GetVerticalScrollBar, () const, ScrollBar*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ScrollBar* ScrollView::GetVerticalScrollBar() const", "ScrollBar@+ get_verticalScrollBar() const", AS_METHODPR(ScrollView, GetVerticalScrollBar, () const, ScrollBar*), AS_CALL_THISCALL));

    // BorderImage* ScrollView::GetScrollPanel() const
    methods.Push(RegisterObjectMethodArgs("BorderImage* ScrollView::GetScrollPanel() const", "BorderImage@+ GetScrollPanel() const", AS_METHODPR(ScrollView, GetScrollPanel, () const, BorderImage*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BorderImage* ScrollView::GetScrollPanel() const", "BorderImage@+ get_scrollPanel() const", AS_METHODPR(ScrollView, GetScrollPanel, () const, BorderImage*), AS_CALL_THISCALL));

    // bool ScrollView::GetScrollBarsAutoVisible() const
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::GetScrollBarsAutoVisible() const", "bool GetScrollBarsAutoVisible() const", AS_METHODPR(ScrollView, GetScrollBarsAutoVisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::GetScrollBarsAutoVisible() const", "bool get_scrollBarsAutoVisible() const", AS_METHODPR(ScrollView, GetScrollBarsAutoVisible, () const, bool), AS_CALL_THISCALL));

    // bool ScrollView::GetHorizontalScrollBarVisible() const
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::GetHorizontalScrollBarVisible() const", "bool GetHorizontalScrollBarVisible() const", AS_METHODPR(ScrollView, GetHorizontalScrollBarVisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::GetHorizontalScrollBarVisible() const", "bool get_horizontalScrollBarVisible() const", AS_METHODPR(ScrollView, GetHorizontalScrollBarVisible, () const, bool), AS_CALL_THISCALL));

    // bool ScrollView::GetVerticalScrollBarVisible() const
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::GetVerticalScrollBarVisible() const", "bool GetVerticalScrollBarVisible() const", AS_METHODPR(ScrollView, GetVerticalScrollBarVisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::GetVerticalScrollBarVisible() const", "bool get_verticalScrollBarVisible() const", AS_METHODPR(ScrollView, GetVerticalScrollBarVisible, () const, bool), AS_CALL_THISCALL));

    // float ScrollView::GetScrollStep() const
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetScrollStep() const", "float GetScrollStep() const", AS_METHODPR(ScrollView, GetScrollStep, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetScrollStep() const", "float get_scrollStep() const", AS_METHODPR(ScrollView, GetScrollStep, () const, float), AS_CALL_THISCALL));

    // float ScrollView::GetPageStep() const
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetPageStep() const", "float GetPageStep() const", AS_METHODPR(ScrollView, GetPageStep, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetPageStep() const", "float get_pageStep() const", AS_METHODPR(ScrollView, GetPageStep, () const, float), AS_CALL_THISCALL));

    // float ScrollView::GetScrollDeceleration() const
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetScrollDeceleration() const", "float GetScrollDeceleration() const", AS_METHODPR(ScrollView, GetScrollDeceleration, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetScrollDeceleration() const", "float get_scrollDeceleration() const", AS_METHODPR(ScrollView, GetScrollDeceleration, () const, float), AS_CALL_THISCALL));

    // float ScrollView::GetScrollSnapEpsilon() const
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetScrollSnapEpsilon() const", "float GetScrollSnapEpsilon() const", AS_METHODPR(ScrollView, GetScrollSnapEpsilon, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetScrollSnapEpsilon() const", "float get_scrollSnapEpsilon() const", AS_METHODPR(ScrollView, GetScrollSnapEpsilon, () const, float), AS_CALL_THISCALL));

    // bool ScrollView::GetAutoDisableChildren() const
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::GetAutoDisableChildren() const", "bool GetAutoDisableChildren() const", AS_METHODPR(ScrollView, GetAutoDisableChildren, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ScrollView::GetAutoDisableChildren() const", "bool get_autoDisableChildren() const", AS_METHODPR(ScrollView, GetAutoDisableChildren, () const, bool), AS_CALL_THISCALL));

    // float ScrollView::GetAutoDisableThreshold() const
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetAutoDisableThreshold() const", "float GetAutoDisableThreshold() const", AS_METHODPR(ScrollView, GetAutoDisableThreshold, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ScrollView::GetAutoDisableThreshold() const", "float get_autoDisableThreshold() const", AS_METHODPR(ScrollView, GetAutoDisableThreshold, () const, float), AS_CALL_THISCALL));

    // void ScrollView::SetViewPositionAttr(const IntVector2& value)
    methods.Push(RegisterObjectMethodArgs("void ScrollView::SetViewPositionAttr(const IntVector2& value)", "void SetViewPositionAttr(const IntVector2&in)", AS_METHODPR(ScrollView, SetViewPositionAttr, (const IntVector2&), void), AS_CALL_THISCALL));
}

// class Serializable | File: ../Scene/Serializable.h
void CollectMembers_Serializable(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // virtual const Vector<AttributeInfo>* Serializable::GetAttributes() const
    // Error: type "const Vector<AttributeInfo>*" can not automatically bind

    // virtual const Vector<AttributeInfo>* Serializable::GetNetworkAttributes() const
    // Error: type "const Vector<AttributeInfo>*" can not automatically bind

    // NetworkState* Serializable::GetNetworkState() const
    // Error: type "NetworkState*" can not automatically bind

    // virtual void Serializable::OnSetAttribute(const AttributeInfo& attr, const Variant& src)
    methods.Push(RegisterObjectMethodArgs("virtual void Serializable::OnSetAttribute(const AttributeInfo& attr, const Variant& src)", "void OnSetAttribute(const AttributeInfo&in, const Variant&in)", AS_METHODPR(Serializable, OnSetAttribute, (const AttributeInfo&, const Variant&), void), AS_CALL_THISCALL));

    // virtual void Serializable::OnGetAttribute(const AttributeInfo& attr, Variant& dest) const
    methods.Push(RegisterObjectMethodArgs("virtual void Serializable::OnGetAttribute(const AttributeInfo& attr, Variant& dest) const", "void OnGetAttribute(const AttributeInfo&in, Variant&) const", AS_METHODPR(Serializable, OnGetAttribute, (const AttributeInfo&, Variant&) const, void), AS_CALL_THISCALL));

    // virtual bool Serializable::Load(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("virtual bool Serializable::Load(Deserializer& source)", "bool Load(Deserializer&)", AS_METHODPR(Serializable, Load, (Deserializer&), bool), AS_CALL_THISCALL));

    // virtual bool Serializable::Save(Serializer& dest) const
    methods.Push(RegisterObjectMethodArgs("virtual bool Serializable::Save(Serializer& dest) const", "bool Save(Serializer&) const", AS_METHODPR(Serializable, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // virtual bool Serializable::LoadXML(const XMLElement& source)
    methods.Push(RegisterObjectMethodArgs("virtual bool Serializable::LoadXML(const XMLElement& source)", "bool LoadXML(const XMLElement&in)", AS_METHODPR(Serializable, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // virtual bool Serializable::SaveXML(XMLElement& dest) const
    methods.Push(RegisterObjectMethodArgs("virtual bool Serializable::SaveXML(XMLElement& dest) const", "bool SaveXML(XMLElement&) const", AS_METHODPR(Serializable, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // virtual bool Serializable::LoadJSON(const JSONValue& source)
    methods.Push(RegisterObjectMethodArgs("virtual bool Serializable::LoadJSON(const JSONValue& source)", "bool LoadJSON(const JSONValue&in)", AS_METHODPR(Serializable, LoadJSON, (const JSONValue&), bool), AS_CALL_THISCALL));

    // virtual bool Serializable::SaveJSON(JSONValue& dest) const
    methods.Push(RegisterObjectMethodArgs("virtual bool Serializable::SaveJSON(JSONValue& dest) const", "bool SaveJSON(JSONValue&) const", AS_METHODPR(Serializable, SaveJSON, (JSONValue&) const, bool), AS_CALL_THISCALL));

    // virtual void Serializable::ApplyAttributes()
    methods.Push(RegisterObjectMethodArgs("virtual void Serializable::ApplyAttributes()", "void ApplyAttributes()", AS_METHODPR(Serializable, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // virtual bool Serializable::SaveDefaultAttributes() const
    methods.Push(RegisterObjectMethodArgs("virtual bool Serializable::SaveDefaultAttributes() const", "bool SaveDefaultAttributes() const", AS_METHODPR(Serializable, SaveDefaultAttributes, () const, bool), AS_CALL_THISCALL));

    // virtual void Serializable::MarkNetworkUpdate()
    methods.Push(RegisterObjectMethodArgs("virtual void Serializable::MarkNetworkUpdate()", "void MarkNetworkUpdate()", AS_METHODPR(Serializable, MarkNetworkUpdate, (), void), AS_CALL_THISCALL));

    // bool Serializable::SetAttribute(unsigned index, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializable::SetAttribute(unsigned index, const Variant& value)", "bool SetAttribute(uint, const Variant&in)", AS_METHODPR(Serializable, SetAttribute, (unsigned, const Variant&), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Serializable::SetAttribute(unsigned index, const Variant& value)", "bool set_attributes(uint, const Variant&in)", AS_METHODPR(Serializable, SetAttribute, (unsigned, const Variant&), bool), AS_CALL_THISCALL));

    // bool Serializable::SetAttribute(const String& name, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializable::SetAttribute(const String& name, const Variant& value)", "bool SetAttribute(const String&in, const Variant&in)", AS_METHODPR(Serializable, SetAttribute, (const String&, const Variant&), bool), AS_CALL_THISCALL));

    // void Serializable::SetInstanceDefault(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Serializable::SetInstanceDefault(bool enable)", "void SetInstanceDefault(bool)", AS_METHODPR(Serializable, SetInstanceDefault, (bool), void), AS_CALL_THISCALL));

    // void Serializable::ResetToDefault()
    methods.Push(RegisterObjectMethodArgs("void Serializable::ResetToDefault()", "void ResetToDefault()", AS_METHODPR(Serializable, ResetToDefault, (), void), AS_CALL_THISCALL));

    // void Serializable::RemoveInstanceDefault()
    methods.Push(RegisterObjectMethodArgs("void Serializable::RemoveInstanceDefault()", "void RemoveInstanceDefault()", AS_METHODPR(Serializable, RemoveInstanceDefault, (), void), AS_CALL_THISCALL));

    // void Serializable::SetTemporary(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Serializable::SetTemporary(bool enable)", "void SetTemporary(bool)", AS_METHODPR(Serializable, SetTemporary, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Serializable::SetTemporary(bool enable)", "void set_temporary(bool)", AS_METHODPR(Serializable, SetTemporary, (bool), void), AS_CALL_THISCALL));

    // void Serializable::SetInterceptNetworkUpdate(const String& attributeName, bool enable)
    methods.Push(RegisterObjectMethodArgs("void Serializable::SetInterceptNetworkUpdate(const String& attributeName, bool enable)", "void SetInterceptNetworkUpdate(const String&in, bool)", AS_METHODPR(Serializable, SetInterceptNetworkUpdate, (const String&, bool), void), AS_CALL_THISCALL));

    // void Serializable::AllocateNetworkState()
    methods.Push(RegisterObjectMethodArgs("void Serializable::AllocateNetworkState()", "void AllocateNetworkState()", AS_METHODPR(Serializable, AllocateNetworkState, (), void), AS_CALL_THISCALL));

    // void Serializable::WriteInitialDeltaUpdate(Serializer& dest, unsigned char timeStamp)
    methods.Push(RegisterObjectMethodArgs("void Serializable::WriteInitialDeltaUpdate(Serializer& dest, unsigned char timeStamp)", "void WriteInitialDeltaUpdate(Serializer&, uint8)", AS_METHODPR(Serializable, WriteInitialDeltaUpdate, (Serializer&, unsigned char), void), AS_CALL_THISCALL));

    // void Serializable::WriteDeltaUpdate(Serializer& dest, const DirtyBits& attributeBits, unsigned char timeStamp)
    methods.Push(RegisterObjectMethodArgs("void Serializable::WriteDeltaUpdate(Serializer& dest, const DirtyBits& attributeBits, unsigned char timeStamp)", "void WriteDeltaUpdate(Serializer&, const DirtyBits&in, uint8)", AS_METHODPR(Serializable, WriteDeltaUpdate, (Serializer&, const DirtyBits&, unsigned char), void), AS_CALL_THISCALL));

    // void Serializable::WriteLatestDataUpdate(Serializer& dest, unsigned char timeStamp)
    methods.Push(RegisterObjectMethodArgs("void Serializable::WriteLatestDataUpdate(Serializer& dest, unsigned char timeStamp)", "void WriteLatestDataUpdate(Serializer&, uint8)", AS_METHODPR(Serializable, WriteLatestDataUpdate, (Serializer&, unsigned char), void), AS_CALL_THISCALL));

    // bool Serializable::ReadDeltaUpdate(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Serializable::ReadDeltaUpdate(Deserializer& source)", "bool ReadDeltaUpdate(Deserializer&)", AS_METHODPR(Serializable, ReadDeltaUpdate, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Serializable::ReadLatestDataUpdate(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Serializable::ReadLatestDataUpdate(Deserializer& source)", "bool ReadLatestDataUpdate(Deserializer&)", AS_METHODPR(Serializable, ReadLatestDataUpdate, (Deserializer&), bool), AS_CALL_THISCALL));

    // Variant Serializable::GetAttribute(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Variant Serializable::GetAttribute(unsigned index) const", "Variant GetAttribute(uint) const", AS_METHODPR(Serializable, GetAttribute, (unsigned) const, Variant), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Variant Serializable::GetAttribute(unsigned index) const", "Variant get_attributes(uint) const", AS_METHODPR(Serializable, GetAttribute, (unsigned) const, Variant), AS_CALL_THISCALL));

    // Variant Serializable::GetAttribute(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Variant Serializable::GetAttribute(const String& name) const", "Variant GetAttribute(const String&in) const", AS_METHODPR(Serializable, GetAttribute, (const String&) const, Variant), AS_CALL_THISCALL));

    // Variant Serializable::GetAttributeDefault(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Variant Serializable::GetAttributeDefault(unsigned index) const", "Variant GetAttributeDefault(uint) const", AS_METHODPR(Serializable, GetAttributeDefault, (unsigned) const, Variant), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Variant Serializable::GetAttributeDefault(unsigned index) const", "Variant get_attributeDefaults(uint) const", AS_METHODPR(Serializable, GetAttributeDefault, (unsigned) const, Variant), AS_CALL_THISCALL));

    // Variant Serializable::GetAttributeDefault(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Variant Serializable::GetAttributeDefault(const String& name) const", "Variant GetAttributeDefault(const String&in) const", AS_METHODPR(Serializable, GetAttributeDefault, (const String&) const, Variant), AS_CALL_THISCALL));

    // unsigned Serializable::GetNumAttributes() const
    methods.Push(RegisterObjectMethodArgs("unsigned Serializable::GetNumAttributes() const", "uint GetNumAttributes() const", AS_METHODPR(Serializable, GetNumAttributes, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Serializable::GetNumAttributes() const", "uint get_numAttributes() const", AS_METHODPR(Serializable, GetNumAttributes, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Serializable::GetNumNetworkAttributes() const
    methods.Push(RegisterObjectMethodArgs("unsigned Serializable::GetNumNetworkAttributes() const", "uint GetNumNetworkAttributes() const", AS_METHODPR(Serializable, GetNumNetworkAttributes, () const, unsigned), AS_CALL_THISCALL));

    // bool Serializable::IsTemporary() const
    methods.Push(RegisterObjectMethodArgs("bool Serializable::IsTemporary() const", "bool IsTemporary() const", AS_METHODPR(Serializable, IsTemporary, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Serializable::IsTemporary() const", "bool get_temporary() const", AS_METHODPR(Serializable, IsTemporary, () const, bool), AS_CALL_THISCALL));

    // bool Serializable::GetInterceptNetworkUpdate(const String& attributeName) const
    methods.Push(RegisterObjectMethodArgs("bool Serializable::GetInterceptNetworkUpdate(const String& attributeName) const", "bool GetInterceptNetworkUpdate(const String&in) const", AS_METHODPR(Serializable, GetInterceptNetworkUpdate, (const String&) const, bool), AS_CALL_THISCALL));
}

// bool Serializer::WriteStringVector(const StringVector& value)
// bool Serializer::WriteStringVector(const StringVector& value) | File: ../IO/Serializer.h
static bool Serializer_WriteStringVector_StringVector(Serializer* ptr, CScriptArray* value_conv)
{
    StringVector value = ArrayToVector<String>(value_conv);
    bool result = ptr->WriteStringVector(value);
    return result;
}


// class Serializer | File: ../IO/Serializer.h
void CollectMembers_Serializer(Vector<RegisterObjectMethodArgs>& methods)
{
    // virtual unsigned Serializer::Write(const void* data, unsigned size)=0
    // Error: type "const void*" can not automatically bind

    // bool Serializer::WriteBuffer(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // bool Serializer::WriteVariantVector(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // bool Serializer::WriteInt64(long long value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteInt64(long long value)", "bool WriteInt64(int64)", AS_METHODPR(Serializer, WriteInt64, (long long), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteInt(int value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteInt(int value)", "bool WriteInt(int)", AS_METHODPR(Serializer, WriteInt, (int), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteShort(short value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteShort(short value)", "bool WriteShort(int16)", AS_METHODPR(Serializer, WriteShort, (short), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteByte(signed char value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteByte(signed char value)", "bool WriteByte(int8)", AS_METHODPR(Serializer, WriteByte, (signed char), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteUInt64(unsigned long long value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteUInt64(unsigned long long value)", "bool WriteUInt64(uint64)", AS_METHODPR(Serializer, WriteUInt64, (unsigned long long), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteUInt(unsigned value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteUInt(unsigned value)", "bool WriteUInt(uint)", AS_METHODPR(Serializer, WriteUInt, (unsigned), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteUShort(unsigned short value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteUShort(unsigned short value)", "bool WriteUShort(uint16)", AS_METHODPR(Serializer, WriteUShort, (unsigned short), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteUByte(unsigned char value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteUByte(unsigned char value)", "bool WriteUByte(uint8)", AS_METHODPR(Serializer, WriteUByte, (unsigned char), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteBool(bool value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteBool(bool value)", "bool WriteBool(bool)", AS_METHODPR(Serializer, WriteBool, (bool), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteFloat(float value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteFloat(float value)", "bool WriteFloat(float)", AS_METHODPR(Serializer, WriteFloat, (float), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteDouble(double value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteDouble(double value)", "bool WriteDouble(double)", AS_METHODPR(Serializer, WriteDouble, (double), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteIntRect(const IntRect& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteIntRect(const IntRect& value)", "bool WriteIntRect(const IntRect&in)", AS_METHODPR(Serializer, WriteIntRect, (const IntRect&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteIntVector2(const IntVector2& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteIntVector2(const IntVector2& value)", "bool WriteIntVector2(const IntVector2&in)", AS_METHODPR(Serializer, WriteIntVector2, (const IntVector2&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteIntVector3(const IntVector3& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteIntVector3(const IntVector3& value)", "bool WriteIntVector3(const IntVector3&in)", AS_METHODPR(Serializer, WriteIntVector3, (const IntVector3&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteRect(const Rect& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteRect(const Rect& value)", "bool WriteRect(const Rect&in)", AS_METHODPR(Serializer, WriteRect, (const Rect&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteVector2(const Vector2& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteVector2(const Vector2& value)", "bool WriteVector2(const Vector2&in)", AS_METHODPR(Serializer, WriteVector2, (const Vector2&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteVector3(const Vector3& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteVector3(const Vector3& value)", "bool WriteVector3(const Vector3&in)", AS_METHODPR(Serializer, WriteVector3, (const Vector3&), bool), AS_CALL_THISCALL));

    // bool Serializer::WritePackedVector3(const Vector3& value, float maxAbsCoord)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WritePackedVector3(const Vector3& value, float maxAbsCoord)", "bool WritePackedVector3(const Vector3&in, float)", AS_METHODPR(Serializer, WritePackedVector3, (const Vector3&, float), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteVector4(const Vector4& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteVector4(const Vector4& value)", "bool WriteVector4(const Vector4&in)", AS_METHODPR(Serializer, WriteVector4, (const Vector4&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteQuaternion(const Quaternion& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteQuaternion(const Quaternion& value)", "bool WriteQuaternion(const Quaternion&in)", AS_METHODPR(Serializer, WriteQuaternion, (const Quaternion&), bool), AS_CALL_THISCALL));

    // bool Serializer::WritePackedQuaternion(const Quaternion& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WritePackedQuaternion(const Quaternion& value)", "bool WritePackedQuaternion(const Quaternion&in)", AS_METHODPR(Serializer, WritePackedQuaternion, (const Quaternion&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteMatrix3(const Matrix3& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteMatrix3(const Matrix3& value)", "bool WriteMatrix3(const Matrix3&in)", AS_METHODPR(Serializer, WriteMatrix3, (const Matrix3&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteMatrix3x4(const Matrix3x4& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteMatrix3x4(const Matrix3x4& value)", "bool WriteMatrix3x4(const Matrix3x4&in)", AS_METHODPR(Serializer, WriteMatrix3x4, (const Matrix3x4&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteMatrix4(const Matrix4& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteMatrix4(const Matrix4& value)", "bool WriteMatrix4(const Matrix4&in)", AS_METHODPR(Serializer, WriteMatrix4, (const Matrix4&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteColor(const Color& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteColor(const Color& value)", "bool WriteColor(const Color&in)", AS_METHODPR(Serializer, WriteColor, (const Color&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteBoundingBox(const BoundingBox& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteBoundingBox(const BoundingBox& value)", "bool WriteBoundingBox(const BoundingBox&in)", AS_METHODPR(Serializer, WriteBoundingBox, (const BoundingBox&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteString(const String& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteString(const String& value)", "bool WriteString(const String&in)", AS_METHODPR(Serializer, WriteString, (const String&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteFileID(const String& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteFileID(const String& value)", "bool WriteFileID(const String&in)", AS_METHODPR(Serializer, WriteFileID, (const String&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteStringHash(const StringHash& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteStringHash(const StringHash& value)", "bool WriteStringHash(const StringHash&in)", AS_METHODPR(Serializer, WriteStringHash, (const StringHash&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteResourceRef(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteResourceRef(const ResourceRef& value)", "bool WriteResourceRef(const ResourceRef&in)", AS_METHODPR(Serializer, WriteResourceRef, (const ResourceRef&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteResourceRefList(const ResourceRefList& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteResourceRefList(const ResourceRefList& value)", "bool WriteResourceRefList(const ResourceRefList&in)", AS_METHODPR(Serializer, WriteResourceRefList, (const ResourceRefList&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteVariant(const Variant& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteVariant(const Variant& value)", "bool WriteVariant(const Variant&in)", AS_METHODPR(Serializer, WriteVariant, (const Variant&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteVariantData(const Variant& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteVariantData(const Variant& value)", "bool WriteVariantData(const Variant&in)", AS_METHODPR(Serializer, WriteVariantData, (const Variant&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteStringVector(const StringVector& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteStringVector(const StringVector& value)", "bool WriteStringVector(Array<String>@+)", AS_FUNCTION_OBJFIRST(Serializer_WriteStringVector_StringVector), AS_CALL_CDECL_OBJFIRST));

    // bool Serializer::WriteVariantMap(const VariantMap& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteVariantMap(const VariantMap& value)", "bool WriteVariantMap(const VariantMap&in)", AS_METHODPR(Serializer, WriteVariantMap, (const VariantMap&), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteVLE(unsigned value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteVLE(unsigned value)", "bool WriteVLE(uint)", AS_METHODPR(Serializer, WriteVLE, (unsigned), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteNetID(unsigned value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteNetID(unsigned value)", "bool WriteNetID(uint)", AS_METHODPR(Serializer, WriteNetID, (unsigned), bool), AS_CALL_THISCALL));

    // bool Serializer::WriteLine(const String& value)
    methods.Push(RegisterObjectMethodArgs("bool Serializer::WriteLine(const String& value)", "bool WriteLine(const String&in)", AS_METHODPR(Serializer, WriteLine, (const String&), bool), AS_CALL_THISCALL));
}

// class Shader | File: ../Graphics/Shader.h
void CollectMembers_Shader(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");

    // ShaderVariation* Shader::GetVariation(ShaderType type, const char* defines)
    // Error: type "const char*" can not automatically bind

    // bool Shader::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Shader::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Shader, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Shader::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool Shader::EndLoad() override", "bool EndLoad()", AS_METHODPR(Shader, EndLoad, (), bool), AS_CALL_THISCALL));

    // ShaderVariation* Shader::GetVariation(ShaderType type, const String& defines)
    methods.Push(RegisterObjectMethodArgs("ShaderVariation* Shader::GetVariation(ShaderType type, const String& defines)", "ShaderVariation@+ GetVariation(ShaderType, const String&in)", AS_METHODPR(Shader, GetVariation, (ShaderType, const String&), ShaderVariation*), AS_CALL_THISCALL));

    // const String& Shader::GetSourceCode(ShaderType type) const
    methods.Push(RegisterObjectMethodArgs("const String& Shader::GetSourceCode(ShaderType type) const", "const String& GetSourceCode(ShaderType) const", AS_METHODPR(Shader, GetSourceCode, (ShaderType) const, const String&), AS_CALL_THISCALL));

    // unsigned Shader::GetTimeStamp() const
    methods.Push(RegisterObjectMethodArgs("unsigned Shader::GetTimeStamp() const", "uint GetTimeStamp() const", AS_METHODPR(Shader, GetTimeStamp, () const, unsigned), AS_CALL_THISCALL));
}

// struct ShaderParameter | File: ../Graphics/ShaderVariation.h
void CollectMembers_ShaderParameter(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class ShaderParameterAnimationInfo | File: ../Graphics/Material.h
void CollectMembers_ShaderParameterAnimationInfo(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ValueAnimationInfo(methods);

    // const String& ShaderParameterAnimationInfo::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& ShaderParameterAnimationInfo::GetName() const", "const String& GetName() const", AS_METHODPR(ShaderParameterAnimationInfo, GetName, () const, const String&), AS_CALL_THISCALL));
}

// class ShaderPrecache | File: ../Graphics/ShaderPrecache.h
void CollectMembers_ShaderPrecache(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void ShaderPrecache::StoreShaders(ShaderVariation* vs, ShaderVariation* ps)
    methods.Push(RegisterObjectMethodArgs("void ShaderPrecache::StoreShaders(ShaderVariation* vs, ShaderVariation* ps)", "void StoreShaders(ShaderVariation@+, ShaderVariation@+)", AS_METHODPR(ShaderPrecache, StoreShaders, (ShaderVariation*, ShaderVariation*), void), AS_CALL_THISCALL));
}

// class ShaderVariation | File: ../Graphics/ShaderVariation.h
void CollectMembers_ShaderVariation(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);
    CollectMembers_GPUObject(methods);

    Remove(methods, "virtual void GPUObject::OnDeviceLost()");
    Remove(methods, "virtual void GPUObject::Release()");

    // const PODVector<unsigned char>& ShaderVariation::GetByteCode() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // const unsigned* ShaderVariation::GetConstantBufferSizes() const
    // Error: type "const unsigned*" can not automatically bind

    // const HashMap<StringHash, ShaderParameter>& ShaderVariation::GetParameters() const
    // Error: type "const HashMap<StringHash, ShaderParameter>&" can not automatically bind

    // void ShaderVariation::OnDeviceLost() override
    methods.Push(RegisterObjectMethodArgs("void ShaderVariation::OnDeviceLost() override", "void OnDeviceLost()", AS_METHODPR(ShaderVariation, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // void ShaderVariation::Release() override
    methods.Push(RegisterObjectMethodArgs("void ShaderVariation::Release() override", "void Release()", AS_METHODPR(ShaderVariation, Release, (), void), AS_CALL_THISCALL));

    // bool ShaderVariation::Create()
    methods.Push(RegisterObjectMethodArgs("bool ShaderVariation::Create()", "bool Create()", AS_METHODPR(ShaderVariation, Create, (), bool), AS_CALL_THISCALL));

    // void ShaderVariation::SetName(const String& name)
    methods.Push(RegisterObjectMethodArgs("void ShaderVariation::SetName(const String& name)", "void SetName(const String&in)", AS_METHODPR(ShaderVariation, SetName, (const String&), void), AS_CALL_THISCALL));

    // void ShaderVariation::SetDefines(const String& defines)
    methods.Push(RegisterObjectMethodArgs("void ShaderVariation::SetDefines(const String& defines)", "void SetDefines(const String&in)", AS_METHODPR(ShaderVariation, SetDefines, (const String&), void), AS_CALL_THISCALL));

    // Shader* ShaderVariation::GetOwner() const
    methods.Push(RegisterObjectMethodArgs("Shader* ShaderVariation::GetOwner() const", "Shader@+ GetOwner() const", AS_METHODPR(ShaderVariation, GetOwner, () const, Shader*), AS_CALL_THISCALL));

    // ShaderType ShaderVariation::GetShaderType() const
    methods.Push(RegisterObjectMethodArgs("ShaderType ShaderVariation::GetShaderType() const", "ShaderType GetShaderType() const", AS_METHODPR(ShaderVariation, GetShaderType, () const, ShaderType), AS_CALL_THISCALL));

    // const String& ShaderVariation::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& ShaderVariation::GetName() const", "const String& GetName() const", AS_METHODPR(ShaderVariation, GetName, () const, const String&), AS_CALL_THISCALL));

    // String ShaderVariation::GetFullName() const
    methods.Push(RegisterObjectMethodArgs("String ShaderVariation::GetFullName() const", "String GetFullName() const", AS_METHODPR(ShaderVariation, GetFullName, () const, String), AS_CALL_THISCALL));

    // bool ShaderVariation::HasParameter(StringHash param) const
    methods.Push(RegisterObjectMethodArgs("bool ShaderVariation::HasParameter(StringHash param) const", "bool HasParameter(StringHash) const", AS_METHODPR(ShaderVariation, HasParameter, (StringHash) const, bool), AS_CALL_THISCALL));

    // bool ShaderVariation::HasTextureUnit(TextureUnit unit) const
    methods.Push(RegisterObjectMethodArgs("bool ShaderVariation::HasTextureUnit(TextureUnit unit) const", "bool HasTextureUnit(TextureUnit) const", AS_METHODPR(ShaderVariation, HasTextureUnit, (TextureUnit) const, bool), AS_CALL_THISCALL));

    // unsigned long long ShaderVariation::GetElementHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned long long ShaderVariation::GetElementHash() const", "uint64 GetElementHash() const", AS_METHODPR(ShaderVariation, GetElementHash, () const, unsigned long long), AS_CALL_THISCALL));

    // const String& ShaderVariation::GetDefines() const
    methods.Push(RegisterObjectMethodArgs("const String& ShaderVariation::GetDefines() const", "const String& GetDefines() const", AS_METHODPR(ShaderVariation, GetDefines, () const, const String&), AS_CALL_THISCALL));

    // const String& ShaderVariation::GetCompilerOutput() const
    methods.Push(RegisterObjectMethodArgs("const String& ShaderVariation::GetCompilerOutput() const", "const String& GetCompilerOutput() const", AS_METHODPR(ShaderVariation, GetCompilerOutput, () const, const String&), AS_CALL_THISCALL));

    // const String& ShaderVariation::GetDefinesClipPlane()
    methods.Push(RegisterObjectMethodArgs("const String& ShaderVariation::GetDefinesClipPlane()", "const String& GetDefinesClipPlane()", AS_METHODPR(ShaderVariation, GetDefinesClipPlane, (), const String&), AS_CALL_THISCALL));
}

// struct ShadowBatchQueue | File: ../Graphics/Batch.h
void CollectMembers_ShadowBatchQueue(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Skeleton | File: ../Graphics/Skeleton.h
void CollectMembers_Skeleton(Vector<RegisterObjectMethodArgs>& methods)
{
    // Bone* Skeleton::GetBone(const char* name)
    // Error: type "const char*" can not automatically bind

    // const Vector<Bone>& Skeleton::GetBones() const
    // Error: type "const Vector<Bone>&" can not automatically bind

    // Vector<Bone>& Skeleton::GetModifiableBones()
    // Error: type "Vector<Bone>&" can not automatically bind

    // bool Skeleton::Load(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Skeleton::Load(Deserializer& source)", "bool Load(Deserializer&)", AS_METHODPR(Skeleton, Load, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Skeleton::Save(Serializer& dest) const
    methods.Push(RegisterObjectMethodArgs("bool Skeleton::Save(Serializer& dest) const", "bool Save(Serializer&) const", AS_METHODPR(Skeleton, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // void Skeleton::Define(const Skeleton& src)
    methods.Push(RegisterObjectMethodArgs("void Skeleton::Define(const Skeleton& src)", "void Define(const Skeleton&in)", AS_METHODPR(Skeleton, Define, (const Skeleton&), void), AS_CALL_THISCALL));

    // void Skeleton::SetRootBoneIndex(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void Skeleton::SetRootBoneIndex(unsigned index)", "void SetRootBoneIndex(uint)", AS_METHODPR(Skeleton, SetRootBoneIndex, (unsigned), void), AS_CALL_THISCALL));

    // void Skeleton::ClearBones()
    methods.Push(RegisterObjectMethodArgs("void Skeleton::ClearBones()", "void ClearBones()", AS_METHODPR(Skeleton, ClearBones, (), void), AS_CALL_THISCALL));

    // void Skeleton::Reset()
    methods.Push(RegisterObjectMethodArgs("void Skeleton::Reset()", "void Reset()", AS_METHODPR(Skeleton, Reset, (), void), AS_CALL_THISCALL));

    // unsigned Skeleton::GetNumBones() const
    methods.Push(RegisterObjectMethodArgs("unsigned Skeleton::GetNumBones() const", "uint GetNumBones() const", AS_METHODPR(Skeleton, GetNumBones, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Skeleton::GetNumBones() const", "uint get_numBones() const", AS_METHODPR(Skeleton, GetNumBones, () const, unsigned), AS_CALL_THISCALL));

    // Bone* Skeleton::GetRootBone()
    methods.Push(RegisterObjectMethodArgs("Bone* Skeleton::GetRootBone()", "Bone@+ GetRootBone()", AS_METHODPR(Skeleton, GetRootBone, (), Bone*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Bone* Skeleton::GetRootBone()", "Bone@+ get_rootBone()", AS_METHODPR(Skeleton, GetRootBone, (), Bone*), AS_CALL_THISCALL));

    // unsigned Skeleton::GetBoneIndex(const String& boneName) const
    methods.Push(RegisterObjectMethodArgs("unsigned Skeleton::GetBoneIndex(const String& boneName) const", "uint GetBoneIndex(const String&in) const", AS_METHODPR(Skeleton, GetBoneIndex, (const String&) const, unsigned), AS_CALL_THISCALL));

    // unsigned Skeleton::GetBoneIndex(const StringHash& boneNameHash) const
    methods.Push(RegisterObjectMethodArgs("unsigned Skeleton::GetBoneIndex(const StringHash& boneNameHash) const", "uint GetBoneIndex(const StringHash&in) const", AS_METHODPR(Skeleton, GetBoneIndex, (const StringHash&) const, unsigned), AS_CALL_THISCALL));

    // unsigned Skeleton::GetBoneIndex(const Bone* bone) const
    methods.Push(RegisterObjectMethodArgs("unsigned Skeleton::GetBoneIndex(const Bone* bone) const", "uint GetBoneIndex(Bone@+) const", AS_METHODPR(Skeleton, GetBoneIndex, (const Bone*) const, unsigned), AS_CALL_THISCALL));

    // Bone* Skeleton::GetBoneParent(const Bone* bone)
    methods.Push(RegisterObjectMethodArgs("Bone* Skeleton::GetBoneParent(const Bone* bone)", "Bone@+ GetBoneParent(Bone@+)", AS_METHODPR(Skeleton, GetBoneParent, (const Bone*), Bone*), AS_CALL_THISCALL));

    // Bone* Skeleton::GetBone(unsigned index)
    methods.Push(RegisterObjectMethodArgs("Bone* Skeleton::GetBone(unsigned index)", "Bone@+ GetBone(uint)", AS_METHODPR(Skeleton, GetBone, (unsigned), Bone*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Bone* Skeleton::GetBone(unsigned index)", "Bone@+ get_bones(uint)", AS_METHODPR(Skeleton, GetBone, (unsigned), Bone*), AS_CALL_THISCALL));

    // Bone* Skeleton::GetBone(const String& name)
    methods.Push(RegisterObjectMethodArgs("Bone* Skeleton::GetBone(const String& name)", "Bone@+ GetBone(const String&in)", AS_METHODPR(Skeleton, GetBone, (const String&), Bone*), AS_CALL_THISCALL));

    // Bone* Skeleton::GetBone(const StringHash& boneNameHash)
    methods.Push(RegisterObjectMethodArgs("Bone* Skeleton::GetBone(const StringHash& boneNameHash)", "Bone@+ GetBone(const StringHash&in)", AS_METHODPR(Skeleton, GetBone, (const StringHash&), Bone*), AS_CALL_THISCALL));

    // void Skeleton::ResetSilent()
    methods.Push(RegisterObjectMethodArgs("void Skeleton::ResetSilent()", "void ResetSilent()", AS_METHODPR(Skeleton, ResetSilent, (), void), AS_CALL_THISCALL));
}

// class Skybox | File: ../Graphics/Skybox.h
void CollectMembers_Skybox(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_StaticModel(methods);

    Remove(methods, "static void StaticModel::RegisterObject(Context* context)");
    Remove(methods, "void StaticModel::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override");
    Remove(methods, "void StaticModel::UpdateBatches(const FrameInfo& frame) override");

    // void Skybox::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void Skybox::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void Skybox::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(Skybox, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));
}

// class Slider | File: ../UI/Slider.h
void CollectMembers_Slider(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BorderImage(methods);

    Remove(methods, "static void BorderImage::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnClickEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor, UIElement* beginElement)");
    Remove(methods, "virtual void UIElement::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnDragEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags releaseButtons, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnResize(const IntVector2& newSize, const IntVector2& delta)");
    Remove(methods, "virtual void UIElement::Update(float timeStep)");

    // void Slider::Update(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void Slider::Update(float timeStep) override", "void Update(float)", AS_METHODPR(Slider, Update, (float), void), AS_CALL_THISCALL));

    // void Slider::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Slider::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnHover(const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Slider, OnHover, (const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Slider::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Slider::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnClickBegin(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Slider, OnClickBegin, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Slider::OnClickEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor, UIElement* beginElement) override
    methods.Push(RegisterObjectMethodArgs("void Slider::OnClickEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor, UIElement* beginElement) override", "void OnClickEnd(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+, UIElement@+)", AS_METHODPR(Slider, OnClickEnd, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*, UIElement*), void), AS_CALL_THISCALL));

    // void Slider::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Slider::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnDragBegin(const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Slider, OnDragBegin, (const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Slider::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Slider::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnDragMove(const IntVector2&in, const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Slider, OnDragMove, (const IntVector2&, const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Slider::OnDragEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags releaseButtons, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Slider::OnDragEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags releaseButtons, Cursor* cursor) override", "void OnDragEnd(const IntVector2&in, const IntVector2&in, MouseButtonFlags, MouseButtonFlags, Cursor@+)", AS_METHODPR(Slider, OnDragEnd, (const IntVector2&, const IntVector2&, MouseButtonFlags, MouseButtonFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Slider::OnResize(const IntVector2& newSize, const IntVector2& delta) override
    methods.Push(RegisterObjectMethodArgs("void Slider::OnResize(const IntVector2& newSize, const IntVector2& delta) override", "void OnResize(const IntVector2&in, const IntVector2&in)", AS_METHODPR(Slider, OnResize, (const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // void Slider::SetOrientation(Orientation orientation)
    methods.Push(RegisterObjectMethodArgs("void Slider::SetOrientation(Orientation orientation)", "void SetOrientation(Orientation)", AS_METHODPR(Slider, SetOrientation, (Orientation), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Slider::SetOrientation(Orientation orientation)", "void set_orientation(Orientation)", AS_METHODPR(Slider, SetOrientation, (Orientation), void), AS_CALL_THISCALL));

    // void Slider::SetRange(float range)
    methods.Push(RegisterObjectMethodArgs("void Slider::SetRange(float range)", "void SetRange(float)", AS_METHODPR(Slider, SetRange, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Slider::SetRange(float range)", "void set_range(float)", AS_METHODPR(Slider, SetRange, (float), void), AS_CALL_THISCALL));

    // void Slider::SetValue(float value)
    methods.Push(RegisterObjectMethodArgs("void Slider::SetValue(float value)", "void SetValue(float)", AS_METHODPR(Slider, SetValue, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Slider::SetValue(float value)", "void set_value(float)", AS_METHODPR(Slider, SetValue, (float), void), AS_CALL_THISCALL));

    // void Slider::ChangeValue(float delta)
    methods.Push(RegisterObjectMethodArgs("void Slider::ChangeValue(float delta)", "void ChangeValue(float)", AS_METHODPR(Slider, ChangeValue, (float), void), AS_CALL_THISCALL));

    // void Slider::SetRepeatRate(float rate)
    methods.Push(RegisterObjectMethodArgs("void Slider::SetRepeatRate(float rate)", "void SetRepeatRate(float)", AS_METHODPR(Slider, SetRepeatRate, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Slider::SetRepeatRate(float rate)", "void set_repeatRate(float)", AS_METHODPR(Slider, SetRepeatRate, (float), void), AS_CALL_THISCALL));

    // Orientation Slider::GetOrientation() const
    methods.Push(RegisterObjectMethodArgs("Orientation Slider::GetOrientation() const", "Orientation GetOrientation() const", AS_METHODPR(Slider, GetOrientation, () const, Orientation), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Orientation Slider::GetOrientation() const", "Orientation get_orientation() const", AS_METHODPR(Slider, GetOrientation, () const, Orientation), AS_CALL_THISCALL));

    // float Slider::GetRange() const
    methods.Push(RegisterObjectMethodArgs("float Slider::GetRange() const", "float GetRange() const", AS_METHODPR(Slider, GetRange, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Slider::GetRange() const", "float get_range() const", AS_METHODPR(Slider, GetRange, () const, float), AS_CALL_THISCALL));

    // float Slider::GetValue() const
    methods.Push(RegisterObjectMethodArgs("float Slider::GetValue() const", "float GetValue() const", AS_METHODPR(Slider, GetValue, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Slider::GetValue() const", "float get_value() const", AS_METHODPR(Slider, GetValue, () const, float), AS_CALL_THISCALL));

    // BorderImage* Slider::GetKnob() const
    methods.Push(RegisterObjectMethodArgs("BorderImage* Slider::GetKnob() const", "BorderImage@+ GetKnob() const", AS_METHODPR(Slider, GetKnob, () const, BorderImage*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BorderImage* Slider::GetKnob() const", "BorderImage@+ get_knob() const", AS_METHODPR(Slider, GetKnob, () const, BorderImage*), AS_CALL_THISCALL));

    // float Slider::GetRepeatRate() const
    methods.Push(RegisterObjectMethodArgs("float Slider::GetRepeatRate() const", "float GetRepeatRate() const", AS_METHODPR(Slider, GetRepeatRate, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Slider::GetRepeatRate() const", "float get_repeatRate() const", AS_METHODPR(Slider, GetRepeatRate, () const, float), AS_CALL_THISCALL));
}

// class SmoothedTransform | File: ../Scene/SmoothedTransform.h
void CollectMembers_SmoothedTransform(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");

    // void SmoothedTransform::Update(float constant, float squaredSnapThreshold)
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::Update(float constant, float squaredSnapThreshold)", "void Update(float, float)", AS_METHODPR(SmoothedTransform, Update, (float, float), void), AS_CALL_THISCALL));

    // void SmoothedTransform::SetTargetPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::SetTargetPosition(const Vector3& position)", "void SetTargetPosition(const Vector3&in)", AS_METHODPR(SmoothedTransform, SetTargetPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::SetTargetPosition(const Vector3& position)", "void set_targetPosition(const Vector3&in)", AS_METHODPR(SmoothedTransform, SetTargetPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void SmoothedTransform::SetTargetRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::SetTargetRotation(const Quaternion& rotation)", "void SetTargetRotation(const Quaternion&in)", AS_METHODPR(SmoothedTransform, SetTargetRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::SetTargetRotation(const Quaternion& rotation)", "void set_targetRotation(const Quaternion&in)", AS_METHODPR(SmoothedTransform, SetTargetRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // void SmoothedTransform::SetTargetWorldPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::SetTargetWorldPosition(const Vector3& position)", "void SetTargetWorldPosition(const Vector3&in)", AS_METHODPR(SmoothedTransform, SetTargetWorldPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::SetTargetWorldPosition(const Vector3& position)", "void set_targetWorldPosition(const Vector3&in)", AS_METHODPR(SmoothedTransform, SetTargetWorldPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void SmoothedTransform::SetTargetWorldRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::SetTargetWorldRotation(const Quaternion& rotation)", "void SetTargetWorldRotation(const Quaternion&in)", AS_METHODPR(SmoothedTransform, SetTargetWorldRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SmoothedTransform::SetTargetWorldRotation(const Quaternion& rotation)", "void set_targetWorldRotation(const Quaternion&in)", AS_METHODPR(SmoothedTransform, SetTargetWorldRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // const Vector3& SmoothedTransform::GetTargetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& SmoothedTransform::GetTargetPosition() const", "const Vector3& GetTargetPosition() const", AS_METHODPR(SmoothedTransform, GetTargetPosition, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& SmoothedTransform::GetTargetPosition() const", "const Vector3& get_targetPosition() const", AS_METHODPR(SmoothedTransform, GetTargetPosition, () const, const Vector3&), AS_CALL_THISCALL));

    // const Quaternion& SmoothedTransform::GetTargetRotation() const
    methods.Push(RegisterObjectMethodArgs("const Quaternion& SmoothedTransform::GetTargetRotation() const", "const Quaternion& GetTargetRotation() const", AS_METHODPR(SmoothedTransform, GetTargetRotation, () const, const Quaternion&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Quaternion& SmoothedTransform::GetTargetRotation() const", "const Quaternion& get_targetRotation() const", AS_METHODPR(SmoothedTransform, GetTargetRotation, () const, const Quaternion&), AS_CALL_THISCALL));

    // Vector3 SmoothedTransform::GetTargetWorldPosition() const
    methods.Push(RegisterObjectMethodArgs("Vector3 SmoothedTransform::GetTargetWorldPosition() const", "Vector3 GetTargetWorldPosition() const", AS_METHODPR(SmoothedTransform, GetTargetWorldPosition, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 SmoothedTransform::GetTargetWorldPosition() const", "Vector3 get_targetWorldPosition() const", AS_METHODPR(SmoothedTransform, GetTargetWorldPosition, () const, Vector3), AS_CALL_THISCALL));

    // Quaternion SmoothedTransform::GetTargetWorldRotation() const
    methods.Push(RegisterObjectMethodArgs("Quaternion SmoothedTransform::GetTargetWorldRotation() const", "Quaternion GetTargetWorldRotation() const", AS_METHODPR(SmoothedTransform, GetTargetWorldRotation, () const, Quaternion), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Quaternion SmoothedTransform::GetTargetWorldRotation() const", "Quaternion get_targetWorldRotation() const", AS_METHODPR(SmoothedTransform, GetTargetWorldRotation, () const, Quaternion), AS_CALL_THISCALL));

    // bool SmoothedTransform::IsInProgress() const
    methods.Push(RegisterObjectMethodArgs("bool SmoothedTransform::IsInProgress() const", "bool IsInProgress() const", AS_METHODPR(SmoothedTransform, IsInProgress, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool SmoothedTransform::IsInProgress() const", "bool get_inProgress() const", AS_METHODPR(SmoothedTransform, IsInProgress, () const, bool), AS_CALL_THISCALL));
}

// SharedPtr<SoundStream> Sound::GetDecoderStream() const
// SharedPtr<SoundStream> Sound::GetDecoderStream() const | File: ../Audio/Sound.h
static SoundStream* Sound_GetDecoderStream_void(Sound* ptr)
{
    SharedPtr<SoundStream> result = ptr->GetDecoderStream();
    return result.Detach();
}


// class Sound | File: ../Audio/Sound.h
void CollectMembers_Sound(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ResourceWithMetadata(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");

    // SharedArrayPtr<signed char> Sound::GetData() const
    // Error: type "SharedArrayPtr<signed char>" can not automatically bind

    // signed char* Sound::GetEnd() const
    // Error: type "signed char*" can not automatically bind

    // signed char* Sound::GetRepeat() const
    // Error: type "signed char*" can not automatically bind

    // signed char* Sound::GetStart() const
    // Error: type "signed char*" can not automatically bind

    // void Sound::SetData(const void* data, unsigned dataSize)
    // Error: type "const void*" can not automatically bind

    // bool Sound::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Sound::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Sound, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Sound::LoadRaw(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Sound::LoadRaw(Deserializer& source)", "bool LoadRaw(Deserializer&)", AS_METHODPR(Sound, LoadRaw, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Sound::LoadWav(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Sound::LoadWav(Deserializer& source)", "bool LoadWav(Deserializer&)", AS_METHODPR(Sound, LoadWav, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Sound::LoadOggVorbis(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Sound::LoadOggVorbis(Deserializer& source)", "bool LoadOggVorbis(Deserializer&)", AS_METHODPR(Sound, LoadOggVorbis, (Deserializer&), bool), AS_CALL_THISCALL));

    // void Sound::SetSize(unsigned dataSize)
    methods.Push(RegisterObjectMethodArgs("void Sound::SetSize(unsigned dataSize)", "void SetSize(uint)", AS_METHODPR(Sound, SetSize, (unsigned), void), AS_CALL_THISCALL));

    // void Sound::SetFormat(unsigned frequency, bool sixteenBit, bool stereo)
    methods.Push(RegisterObjectMethodArgs("void Sound::SetFormat(unsigned frequency, bool sixteenBit, bool stereo)", "void SetFormat(uint, bool, bool)", AS_METHODPR(Sound, SetFormat, (unsigned, bool, bool), void), AS_CALL_THISCALL));

    // void Sound::SetLooped(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Sound::SetLooped(bool enable)", "void SetLooped(bool)", AS_METHODPR(Sound, SetLooped, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sound::SetLooped(bool enable)", "void set_looped(bool)", AS_METHODPR(Sound, SetLooped, (bool), void), AS_CALL_THISCALL));

    // void Sound::SetLoop(unsigned repeatOffset, unsigned endOffset)
    methods.Push(RegisterObjectMethodArgs("void Sound::SetLoop(unsigned repeatOffset, unsigned endOffset)", "void SetLoop(uint, uint)", AS_METHODPR(Sound, SetLoop, (unsigned, unsigned), void), AS_CALL_THISCALL));

    // SharedPtr<SoundStream> Sound::GetDecoderStream() const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<SoundStream> Sound::GetDecoderStream() const", "SoundStream@+ GetDecoderStream() const", AS_FUNCTION_OBJFIRST(Sound_GetDecoderStream_void), AS_CALL_CDECL_OBJFIRST));

    // float Sound::GetLength() const
    methods.Push(RegisterObjectMethodArgs("float Sound::GetLength() const", "float GetLength() const", AS_METHODPR(Sound, GetLength, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Sound::GetLength() const", "float get_length() const", AS_METHODPR(Sound, GetLength, () const, float), AS_CALL_THISCALL));

    // unsigned Sound::GetDataSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned Sound::GetDataSize() const", "uint GetDataSize() const", AS_METHODPR(Sound, GetDataSize, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Sound::GetSampleSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned Sound::GetSampleSize() const", "uint GetSampleSize() const", AS_METHODPR(Sound, GetSampleSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Sound::GetSampleSize() const", "uint get_sampleSize() const", AS_METHODPR(Sound, GetSampleSize, () const, unsigned), AS_CALL_THISCALL));

    // float Sound::GetFrequency() const
    methods.Push(RegisterObjectMethodArgs("float Sound::GetFrequency() const", "float GetFrequency() const", AS_METHODPR(Sound, GetFrequency, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Sound::GetFrequency() const", "float get_frequency() const", AS_METHODPR(Sound, GetFrequency, () const, float), AS_CALL_THISCALL));

    // unsigned Sound::GetIntFrequency() const
    methods.Push(RegisterObjectMethodArgs("unsigned Sound::GetIntFrequency() const", "uint GetIntFrequency() const", AS_METHODPR(Sound, GetIntFrequency, () const, unsigned), AS_CALL_THISCALL));

    // bool Sound::IsLooped() const
    methods.Push(RegisterObjectMethodArgs("bool Sound::IsLooped() const", "bool IsLooped() const", AS_METHODPR(Sound, IsLooped, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Sound::IsLooped() const", "bool get_looped() const", AS_METHODPR(Sound, IsLooped, () const, bool), AS_CALL_THISCALL));

    // bool Sound::IsSixteenBit() const
    methods.Push(RegisterObjectMethodArgs("bool Sound::IsSixteenBit() const", "bool IsSixteenBit() const", AS_METHODPR(Sound, IsSixteenBit, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Sound::IsSixteenBit() const", "bool get_sixteenBit() const", AS_METHODPR(Sound, IsSixteenBit, () const, bool), AS_CALL_THISCALL));

    // bool Sound::IsStereo() const
    methods.Push(RegisterObjectMethodArgs("bool Sound::IsStereo() const", "bool IsStereo() const", AS_METHODPR(Sound, IsStereo, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Sound::IsStereo() const", "bool get_stereo() const", AS_METHODPR(Sound, IsStereo, () const, bool), AS_CALL_THISCALL));

    // bool Sound::IsCompressed() const
    methods.Push(RegisterObjectMethodArgs("bool Sound::IsCompressed() const", "bool IsCompressed() const", AS_METHODPR(Sound, IsCompressed, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Sound::IsCompressed() const", "bool get_compressed() const", AS_METHODPR(Sound, IsCompressed, () const, bool), AS_CALL_THISCALL));

    // void Sound::FixInterpolation()
    methods.Push(RegisterObjectMethodArgs("void Sound::FixInterpolation()", "void FixInterpolation()", AS_METHODPR(Sound, FixInterpolation, (), void), AS_CALL_THISCALL));
}

// class SoundListener | File: ../Audio/SoundListener.h
void CollectMembers_SoundListener(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
}

// class SoundSource | File: ../Audio/SoundSource.h
void CollectMembers_SoundSource(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");

    // volatile signed char* SoundSource::GetPlayPosition() const
    // Error: type "signed char*" can not automatically bind

    // void SoundSource::Mix(int* dest, unsigned samples, int mixRate, bool stereo, bool interpolation)
    // Error: type "int*" can not automatically bind

    // void SoundSource::SetPlayPosition(signed char* pos)
    // Error: type "signed char*" can not automatically bind

    // void SoundSource::Seek(float seekTime)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::Seek(float seekTime)", "void Seek(float)", AS_METHODPR(SoundSource, Seek, (float), void), AS_CALL_THISCALL));

    // void SoundSource::Play(Sound* sound)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::Play(Sound* sound)", "void Play(Sound@+)", AS_METHODPR(SoundSource, Play, (Sound*), void), AS_CALL_THISCALL));

    // void SoundSource::Play(Sound* sound, float frequency)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::Play(Sound* sound, float frequency)", "void Play(Sound@+, float)", AS_METHODPR(SoundSource, Play, (Sound*, float), void), AS_CALL_THISCALL));

    // void SoundSource::Play(Sound* sound, float frequency, float gain)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::Play(Sound* sound, float frequency, float gain)", "void Play(Sound@+, float, float)", AS_METHODPR(SoundSource, Play, (Sound*, float, float), void), AS_CALL_THISCALL));

    // void SoundSource::Play(Sound* sound, float frequency, float gain, float panning)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::Play(Sound* sound, float frequency, float gain, float panning)", "void Play(Sound@+, float, float, float)", AS_METHODPR(SoundSource, Play, (Sound*, float, float, float), void), AS_CALL_THISCALL));

    // void SoundSource::Play(SoundStream* stream)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::Play(SoundStream* stream)", "void Play(SoundStream@+)", AS_METHODPR(SoundSource, Play, (SoundStream*), void), AS_CALL_THISCALL));

    // void SoundSource::Stop()
    methods.Push(RegisterObjectMethodArgs("void SoundSource::Stop()", "void Stop()", AS_METHODPR(SoundSource, Stop, (), void), AS_CALL_THISCALL));

    // void SoundSource::SetSoundType(const String& type)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetSoundType(const String& type)", "void SetSoundType(const String&in)", AS_METHODPR(SoundSource, SetSoundType, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetSoundType(const String& type)", "void set_soundType(const String&in)", AS_METHODPR(SoundSource, SetSoundType, (const String&), void), AS_CALL_THISCALL));

    // void SoundSource::SetFrequency(float frequency)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetFrequency(float frequency)", "void SetFrequency(float)", AS_METHODPR(SoundSource, SetFrequency, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetFrequency(float frequency)", "void set_frequency(float)", AS_METHODPR(SoundSource, SetFrequency, (float), void), AS_CALL_THISCALL));

    // void SoundSource::SetGain(float gain)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetGain(float gain)", "void SetGain(float)", AS_METHODPR(SoundSource, SetGain, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetGain(float gain)", "void set_gain(float)", AS_METHODPR(SoundSource, SetGain, (float), void), AS_CALL_THISCALL));

    // void SoundSource::SetAttenuation(float attenuation)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetAttenuation(float attenuation)", "void SetAttenuation(float)", AS_METHODPR(SoundSource, SetAttenuation, (float), void), AS_CALL_THISCALL));

    // void SoundSource::SetPanning(float panning)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetPanning(float panning)", "void SetPanning(float)", AS_METHODPR(SoundSource, SetPanning, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetPanning(float panning)", "void set_panning(float)", AS_METHODPR(SoundSource, SetPanning, (float), void), AS_CALL_THISCALL));

    // void SoundSource::SetAutoRemoveMode(AutoRemoveMode mode)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetAutoRemoveMode(AutoRemoveMode mode)", "void SetAutoRemoveMode(AutoRemoveMode)", AS_METHODPR(SoundSource, SetAutoRemoveMode, (AutoRemoveMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetAutoRemoveMode(AutoRemoveMode mode)", "void set_autoRemoveMode(AutoRemoveMode)", AS_METHODPR(SoundSource, SetAutoRemoveMode, (AutoRemoveMode), void), AS_CALL_THISCALL));

    // Sound* SoundSource::GetSound() const
    methods.Push(RegisterObjectMethodArgs("Sound* SoundSource::GetSound() const", "Sound@+ GetSound() const", AS_METHODPR(SoundSource, GetSound, () const, Sound*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Sound* SoundSource::GetSound() const", "Sound@+ get_sound() const", AS_METHODPR(SoundSource, GetSound, () const, Sound*), AS_CALL_THISCALL));

    // String SoundSource::GetSoundType() const
    methods.Push(RegisterObjectMethodArgs("String SoundSource::GetSoundType() const", "String GetSoundType() const", AS_METHODPR(SoundSource, GetSoundType, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String SoundSource::GetSoundType() const", "String get_soundType() const", AS_METHODPR(SoundSource, GetSoundType, () const, String), AS_CALL_THISCALL));

    // float SoundSource::GetTimePosition() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetTimePosition() const", "float GetTimePosition() const", AS_METHODPR(SoundSource, GetTimePosition, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetTimePosition() const", "float get_timePosition() const", AS_METHODPR(SoundSource, GetTimePosition, () const, float), AS_CALL_THISCALL));

    // float SoundSource::GetFrequency() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetFrequency() const", "float GetFrequency() const", AS_METHODPR(SoundSource, GetFrequency, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetFrequency() const", "float get_frequency() const", AS_METHODPR(SoundSource, GetFrequency, () const, float), AS_CALL_THISCALL));

    // float SoundSource::GetGain() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetGain() const", "float GetGain() const", AS_METHODPR(SoundSource, GetGain, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetGain() const", "float get_gain() const", AS_METHODPR(SoundSource, GetGain, () const, float), AS_CALL_THISCALL));

    // float SoundSource::GetAttenuation() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetAttenuation() const", "float GetAttenuation() const", AS_METHODPR(SoundSource, GetAttenuation, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetAttenuation() const", "float get_attenuation() const", AS_METHODPR(SoundSource, GetAttenuation, () const, float), AS_CALL_THISCALL));

    // float SoundSource::GetPanning() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetPanning() const", "float GetPanning() const", AS_METHODPR(SoundSource, GetPanning, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource::GetPanning() const", "float get_panning() const", AS_METHODPR(SoundSource, GetPanning, () const, float), AS_CALL_THISCALL));

    // AutoRemoveMode SoundSource::GetAutoRemoveMode() const
    methods.Push(RegisterObjectMethodArgs("AutoRemoveMode SoundSource::GetAutoRemoveMode() const", "AutoRemoveMode GetAutoRemoveMode() const", AS_METHODPR(SoundSource, GetAutoRemoveMode, () const, AutoRemoveMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("AutoRemoveMode SoundSource::GetAutoRemoveMode() const", "AutoRemoveMode get_autoRemoveMode() const", AS_METHODPR(SoundSource, GetAutoRemoveMode, () const, AutoRemoveMode), AS_CALL_THISCALL));

    // bool SoundSource::IsPlaying() const
    methods.Push(RegisterObjectMethodArgs("bool SoundSource::IsPlaying() const", "bool IsPlaying() const", AS_METHODPR(SoundSource, IsPlaying, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool SoundSource::IsPlaying() const", "bool get_playing() const", AS_METHODPR(SoundSource, IsPlaying, () const, bool), AS_CALL_THISCALL));

    // virtual void SoundSource::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("virtual void SoundSource::Update(float timeStep)", "void Update(float)", AS_METHODPR(SoundSource, Update, (float), void), AS_CALL_THISCALL));

    // void SoundSource::UpdateMasterGain()
    methods.Push(RegisterObjectMethodArgs("void SoundSource::UpdateMasterGain()", "void UpdateMasterGain()", AS_METHODPR(SoundSource, UpdateMasterGain, (), void), AS_CALL_THISCALL));

    // void SoundSource::SetSoundAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetSoundAttr(const ResourceRef& value)", "void SetSoundAttr(const ResourceRef&in)", AS_METHODPR(SoundSource, SetSoundAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // void SoundSource::SetPositionAttr(int value)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetPositionAttr(int value)", "void SetPositionAttr(int)", AS_METHODPR(SoundSource, SetPositionAttr, (int), void), AS_CALL_THISCALL));

    // ResourceRef SoundSource::GetSoundAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef SoundSource::GetSoundAttr() const", "ResourceRef GetSoundAttr() const", AS_METHODPR(SoundSource, GetSoundAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void SoundSource::SetPlayingAttr(bool value)
    methods.Push(RegisterObjectMethodArgs("void SoundSource::SetPlayingAttr(bool value)", "void SetPlayingAttr(bool)", AS_METHODPR(SoundSource, SetPlayingAttr, (bool), void), AS_CALL_THISCALL));

    // int SoundSource::GetPositionAttr() const
    methods.Push(RegisterObjectMethodArgs("int SoundSource::GetPositionAttr() const", "int GetPositionAttr() const", AS_METHODPR(SoundSource, GetPositionAttr, () const, int), AS_CALL_THISCALL));
}

// class SoundSource3D | File: ../Audio/SoundSource3D.h
void CollectMembers_SoundSource3D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_SoundSource(methods);

    Remove(methods, "static void SoundSource::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void SoundSource::Update(float timeStep)");

    // void SoundSource3D::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(SoundSource3D, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void SoundSource3D::Update(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::Update(float timeStep) override", "void Update(float)", AS_METHODPR(SoundSource3D, Update, (float), void), AS_CALL_THISCALL));

    // void SoundSource3D::SetDistanceAttenuation(float nearDistance, float farDistance, float rolloffFactor)
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetDistanceAttenuation(float nearDistance, float farDistance, float rolloffFactor)", "void SetDistanceAttenuation(float, float, float)", AS_METHODPR(SoundSource3D, SetDistanceAttenuation, (float, float, float), void), AS_CALL_THISCALL));

    // void SoundSource3D::SetAngleAttenuation(float innerAngle, float outerAngle)
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetAngleAttenuation(float innerAngle, float outerAngle)", "void SetAngleAttenuation(float, float)", AS_METHODPR(SoundSource3D, SetAngleAttenuation, (float, float), void), AS_CALL_THISCALL));

    // void SoundSource3D::SetNearDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetNearDistance(float distance)", "void SetNearDistance(float)", AS_METHODPR(SoundSource3D, SetNearDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetNearDistance(float distance)", "void set_nearDistance(float)", AS_METHODPR(SoundSource3D, SetNearDistance, (float), void), AS_CALL_THISCALL));

    // void SoundSource3D::SetFarDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetFarDistance(float distance)", "void SetFarDistance(float)", AS_METHODPR(SoundSource3D, SetFarDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetFarDistance(float distance)", "void set_farDistance(float)", AS_METHODPR(SoundSource3D, SetFarDistance, (float), void), AS_CALL_THISCALL));

    // void SoundSource3D::SetInnerAngle(float angle)
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetInnerAngle(float angle)", "void SetInnerAngle(float)", AS_METHODPR(SoundSource3D, SetInnerAngle, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetInnerAngle(float angle)", "void set_innerAngle(float)", AS_METHODPR(SoundSource3D, SetInnerAngle, (float), void), AS_CALL_THISCALL));

    // void SoundSource3D::SetOuterAngle(float angle)
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetOuterAngle(float angle)", "void SetOuterAngle(float)", AS_METHODPR(SoundSource3D, SetOuterAngle, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetOuterAngle(float angle)", "void set_outerAngle(float)", AS_METHODPR(SoundSource3D, SetOuterAngle, (float), void), AS_CALL_THISCALL));

    // void SoundSource3D::SetRolloffFactor(float factor)
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetRolloffFactor(float factor)", "void SetRolloffFactor(float)", AS_METHODPR(SoundSource3D, SetRolloffFactor, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::SetRolloffFactor(float factor)", "void set_rolloffFactor(float)", AS_METHODPR(SoundSource3D, SetRolloffFactor, (float), void), AS_CALL_THISCALL));

    // void SoundSource3D::CalculateAttenuation()
    methods.Push(RegisterObjectMethodArgs("void SoundSource3D::CalculateAttenuation()", "void CalculateAttenuation()", AS_METHODPR(SoundSource3D, CalculateAttenuation, (), void), AS_CALL_THISCALL));

    // float SoundSource3D::GetNearDistance() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::GetNearDistance() const", "float GetNearDistance() const", AS_METHODPR(SoundSource3D, GetNearDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::GetNearDistance() const", "float get_nearDistance() const", AS_METHODPR(SoundSource3D, GetNearDistance, () const, float), AS_CALL_THISCALL));

    // float SoundSource3D::GetFarDistance() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::GetFarDistance() const", "float GetFarDistance() const", AS_METHODPR(SoundSource3D, GetFarDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::GetFarDistance() const", "float get_farDistance() const", AS_METHODPR(SoundSource3D, GetFarDistance, () const, float), AS_CALL_THISCALL));

    // float SoundSource3D::GetInnerAngle() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::GetInnerAngle() const", "float GetInnerAngle() const", AS_METHODPR(SoundSource3D, GetInnerAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::GetInnerAngle() const", "float get_innerAngle() const", AS_METHODPR(SoundSource3D, GetInnerAngle, () const, float), AS_CALL_THISCALL));

    // float SoundSource3D::GetOuterAngle() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::GetOuterAngle() const", "float GetOuterAngle() const", AS_METHODPR(SoundSource3D, GetOuterAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::GetOuterAngle() const", "float get_outerAngle() const", AS_METHODPR(SoundSource3D, GetOuterAngle, () const, float), AS_CALL_THISCALL));

    // float SoundSource3D::RollAngleoffFactor() const
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::RollAngleoffFactor() const", "float RollAngleoffFactor() const", AS_METHODPR(SoundSource3D, RollAngleoffFactor, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SoundSource3D::RollAngleoffFactor() const", "float get_rolloffFactor() const", AS_METHODPR(SoundSource3D, RollAngleoffFactor, () const, float), AS_CALL_THISCALL));
}

// class SoundStream | File: ../Audio/SoundStream.h
void CollectMembers_SoundStream(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // virtual unsigned SoundStream::GetData(signed char* dest, unsigned numBytes)=0
    // Error: type "signed char*" can not automatically bind

    // virtual bool SoundStream::Seek(unsigned sample_number)
    methods.Push(RegisterObjectMethodArgs("virtual bool SoundStream::Seek(unsigned sample_number)", "bool Seek(uint)", AS_METHODPR(SoundStream, Seek, (unsigned), bool), AS_CALL_THISCALL));

    // void SoundStream::SetFormat(unsigned frequency, bool sixteenBit, bool stereo)
    methods.Push(RegisterObjectMethodArgs("void SoundStream::SetFormat(unsigned frequency, bool sixteenBit, bool stereo)", "void SetFormat(uint, bool, bool)", AS_METHODPR(SoundStream, SetFormat, (unsigned, bool, bool), void), AS_CALL_THISCALL));

    // void SoundStream::SetStopAtEnd(bool enable)
    methods.Push(RegisterObjectMethodArgs("void SoundStream::SetStopAtEnd(bool enable)", "void SetStopAtEnd(bool)", AS_METHODPR(SoundStream, SetStopAtEnd, (bool), void), AS_CALL_THISCALL));

    // unsigned SoundStream::GetSampleSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned SoundStream::GetSampleSize() const", "uint GetSampleSize() const", AS_METHODPR(SoundStream, GetSampleSize, () const, unsigned), AS_CALL_THISCALL));

    // float SoundStream::GetFrequency() const
    methods.Push(RegisterObjectMethodArgs("float SoundStream::GetFrequency() const", "float GetFrequency() const", AS_METHODPR(SoundStream, GetFrequency, () const, float), AS_CALL_THISCALL));

    // unsigned SoundStream::GetIntFrequency() const
    methods.Push(RegisterObjectMethodArgs("unsigned SoundStream::GetIntFrequency() const", "uint GetIntFrequency() const", AS_METHODPR(SoundStream, GetIntFrequency, () const, unsigned), AS_CALL_THISCALL));

    // bool SoundStream::GetStopAtEnd() const
    methods.Push(RegisterObjectMethodArgs("bool SoundStream::GetStopAtEnd() const", "bool GetStopAtEnd() const", AS_METHODPR(SoundStream, GetStopAtEnd, () const, bool), AS_CALL_THISCALL));

    // bool SoundStream::IsSixteenBit() const
    methods.Push(RegisterObjectMethodArgs("bool SoundStream::IsSixteenBit() const", "bool IsSixteenBit() const", AS_METHODPR(SoundStream, IsSixteenBit, () const, bool), AS_CALL_THISCALL));

    // bool SoundStream::IsStereo() const
    methods.Push(RegisterObjectMethodArgs("bool SoundStream::IsStereo() const", "bool IsStereo() const", AS_METHODPR(SoundStream, IsStereo, () const, bool), AS_CALL_THISCALL));
}

// struct SourceBatch | File: ../Graphics/Drawable.h
void CollectMembers_SourceBatch(Vector<RegisterObjectMethodArgs>& methods)
{
    // SourceBatch& SourceBatch::operator=(const SourceBatch& rhs)
    methods.Push(RegisterObjectMethodArgs("SourceBatch& SourceBatch::operator=(const SourceBatch& rhs)", "SourceBatch& opAssign(const SourceBatch&in)", AS_METHODPR(SourceBatch, operator=, (const SourceBatch&), SourceBatch&), AS_CALL_THISCALL));
}

// class Sphere | File: ../Math/Sphere.h
void CollectMembers_Sphere(Vector<RegisterObjectMethodArgs>& methods)
{
    // void Sphere::Define(const Vector3* vertices, unsigned count)
    // Error: type "const Vector3*" can not automatically bind

    // void Sphere::Merge(const Vector3* vertices, unsigned count)
    // Error: type "const Vector3*" can not automatically bind

    // bool Sphere::operator!=(const Sphere& rhs) const
    // Only operator== is needed

    // Sphere& Sphere::operator=(const Sphere& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Sphere& Sphere::operator=(const Sphere& rhs) noexcept=default", "Sphere& opAssign(const Sphere&in)", AS_METHODPR(Sphere, operator=, (const Sphere&), Sphere&), AS_CALL_THISCALL));

    // bool Sphere::operator==(const Sphere& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Sphere::operator==(const Sphere& rhs) const", "bool opEquals(const Sphere&in) const", AS_METHODPR(Sphere, operator==, (const Sphere&) const, bool), AS_CALL_THISCALL));

    // void Sphere::Define(const Sphere& sphere)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Define(const Sphere& sphere)", "void Define(const Sphere&in)", AS_METHODPR(Sphere, Define, (const Sphere&), void), AS_CALL_THISCALL));

    // void Sphere::Define(const Vector3& center, float radius)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Define(const Vector3& center, float radius)", "void Define(const Vector3&in, float)", AS_METHODPR(Sphere, Define, (const Vector3&, float), void), AS_CALL_THISCALL));

    // void Sphere::Define(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Define(const BoundingBox& box)", "void Define(const BoundingBox&in)", AS_METHODPR(Sphere, Define, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void Sphere::Define(const Frustum& frustum)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Define(const Frustum& frustum)", "void Define(const Frustum&in)", AS_METHODPR(Sphere, Define, (const Frustum&), void), AS_CALL_THISCALL));

    // void Sphere::Define(const Polyhedron& poly)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Define(const Polyhedron& poly)", "void Define(const Polyhedron&in)", AS_METHODPR(Sphere, Define, (const Polyhedron&), void), AS_CALL_THISCALL));

    // void Sphere::Merge(const Vector3& point)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Merge(const Vector3& point)", "void Merge(const Vector3&in)", AS_METHODPR(Sphere, Merge, (const Vector3&), void), AS_CALL_THISCALL));

    // void Sphere::Merge(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Merge(const BoundingBox& box)", "void Merge(const BoundingBox&in)", AS_METHODPR(Sphere, Merge, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void Sphere::Merge(const Frustum& frustum)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Merge(const Frustum& frustum)", "void Merge(const Frustum&in)", AS_METHODPR(Sphere, Merge, (const Frustum&), void), AS_CALL_THISCALL));

    // void Sphere::Merge(const Polyhedron& poly)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Merge(const Polyhedron& poly)", "void Merge(const Polyhedron&in)", AS_METHODPR(Sphere, Merge, (const Polyhedron&), void), AS_CALL_THISCALL));

    // void Sphere::Merge(const Sphere& sphere)
    methods.Push(RegisterObjectMethodArgs("void Sphere::Merge(const Sphere& sphere)", "void Merge(const Sphere&in)", AS_METHODPR(Sphere, Merge, (const Sphere&), void), AS_CALL_THISCALL));

    // void Sphere::Clear()
    methods.Push(RegisterObjectMethodArgs("void Sphere::Clear()", "void Clear()", AS_METHODPR(Sphere, Clear, (), void), AS_CALL_THISCALL));

    // bool Sphere::Defined() const
    methods.Push(RegisterObjectMethodArgs("bool Sphere::Defined() const", "bool Defined() const", AS_METHODPR(Sphere, Defined, () const, bool), AS_CALL_THISCALL));

    // Intersection Sphere::IsInside(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("Intersection Sphere::IsInside(const Vector3& point) const", "Intersection IsInside(const Vector3&in) const", AS_METHODPR(Sphere, IsInside, (const Vector3&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Sphere::IsInside(const Sphere& sphere) const
    methods.Push(RegisterObjectMethodArgs("Intersection Sphere::IsInside(const Sphere& sphere) const", "Intersection IsInside(const Sphere&in) const", AS_METHODPR(Sphere, IsInside, (const Sphere&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Sphere::IsInsideFast(const Sphere& sphere) const
    methods.Push(RegisterObjectMethodArgs("Intersection Sphere::IsInsideFast(const Sphere& sphere) const", "Intersection IsInsideFast(const Sphere&in) const", AS_METHODPR(Sphere, IsInsideFast, (const Sphere&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Sphere::IsInside(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("Intersection Sphere::IsInside(const BoundingBox& box) const", "Intersection IsInside(const BoundingBox&in) const", AS_METHODPR(Sphere, IsInside, (const BoundingBox&) const, Intersection), AS_CALL_THISCALL));

    // Intersection Sphere::IsInsideFast(const BoundingBox& box) const
    methods.Push(RegisterObjectMethodArgs("Intersection Sphere::IsInsideFast(const BoundingBox& box) const", "Intersection IsInsideFast(const BoundingBox&in) const", AS_METHODPR(Sphere, IsInsideFast, (const BoundingBox&) const, Intersection), AS_CALL_THISCALL));

    // float Sphere::Distance(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("float Sphere::Distance(const Vector3& point) const", "float Distance(const Vector3&in) const", AS_METHODPR(Sphere, Distance, (const Vector3&) const, float), AS_CALL_THISCALL));

    // Vector3 Sphere::GetLocalPoint(float theta, float phi) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Sphere::GetLocalPoint(float theta, float phi) const", "Vector3 GetLocalPoint(float, float) const", AS_METHODPR(Sphere, GetLocalPoint, (float, float) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Sphere::GetPoint(float theta, float phi) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Sphere::GetPoint(float theta, float phi) const", "Vector3 GetPoint(float, float) const", AS_METHODPR(Sphere, GetPoint, (float, float) const, Vector3), AS_CALL_THISCALL));
}

// class SphereOctreeQuery | File: ../Graphics/OctreeQuery.h
void CollectMembers_SphereOctreeQuery(Vector<RegisterObjectMethodArgs>& methods)
{
    // void SphereOctreeQuery::TestDrawables(Drawable** start, Drawable** end, bool inside) override
    // Error: type "Drawable**" can not automatically bind

    // Intersection SphereOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override
    methods.Push(RegisterObjectMethodArgs("Intersection SphereOctreeQuery::TestOctant(const BoundingBox& box, bool inside) override", "Intersection TestOctant(const BoundingBox&in, bool)", AS_METHODPR(SphereOctreeQuery, TestOctant, (const BoundingBox&, bool), Intersection), AS_CALL_THISCALL));
}

// class Spline | File: ../Core/Spline.h
void CollectMembers_Spline(Vector<RegisterObjectMethodArgs>& methods)
{
    // const VariantVector& Spline::GetKnots() const
    // Error: type "const VariantVector&" can not automatically bind

    // void Spline::SetKnots(const Vector<Variant>& knots)
    // Error: type "const Vector<Variant>&" can not automatically bind

    // bool Spline::operator!=(const Spline& rhs) const
    // Only operator== is needed

    // Spline& Spline::operator=(const Spline& rhs)=default
    methods.Push(RegisterObjectMethodArgs("Spline& Spline::operator=(const Spline& rhs)=default", "Spline& opAssign(const Spline&in)", AS_METHODPR(Spline, operator=, (const Spline&), Spline&), AS_CALL_THISCALL));

    // bool Spline::operator==(const Spline& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Spline::operator==(const Spline& rhs) const", "bool opEquals(const Spline&in) const", AS_METHODPR(Spline, operator==, (const Spline&) const, bool), AS_CALL_THISCALL));

    // InterpolationMode Spline::GetInterpolationMode() const
    methods.Push(RegisterObjectMethodArgs("InterpolationMode Spline::GetInterpolationMode() const", "InterpolationMode GetInterpolationMode() const", AS_METHODPR(Spline, GetInterpolationMode, () const, InterpolationMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("InterpolationMode Spline::GetInterpolationMode() const", "InterpolationMode get_interpolationMode() const", AS_METHODPR(Spline, GetInterpolationMode, () const, InterpolationMode), AS_CALL_THISCALL));

    // Variant Spline::GetKnot(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Variant Spline::GetKnot(unsigned index) const", "Variant GetKnot(uint) const", AS_METHODPR(Spline, GetKnot, (unsigned) const, Variant), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Variant Spline::GetKnot(unsigned index) const", "Variant get_knot(uint) const", AS_METHODPR(Spline, GetKnot, (unsigned) const, Variant), AS_CALL_THISCALL));

    // Variant Spline::GetPoint(float f) const
    methods.Push(RegisterObjectMethodArgs("Variant Spline::GetPoint(float f) const", "Variant GetPoint(float) const", AS_METHODPR(Spline, GetPoint, (float) const, Variant), AS_CALL_THISCALL));

    // void Spline::SetInterpolationMode(InterpolationMode interpolationMode)
    methods.Push(RegisterObjectMethodArgs("void Spline::SetInterpolationMode(InterpolationMode interpolationMode)", "void SetInterpolationMode(InterpolationMode)", AS_METHODPR(Spline, SetInterpolationMode, (InterpolationMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Spline::SetInterpolationMode(InterpolationMode interpolationMode)", "void set_interpolationMode(InterpolationMode)", AS_METHODPR(Spline, SetInterpolationMode, (InterpolationMode), void), AS_CALL_THISCALL));

    // void Spline::SetKnot(const Variant& knot, unsigned index)
    methods.Push(RegisterObjectMethodArgs("void Spline::SetKnot(const Variant& knot, unsigned index)", "void SetKnot(const Variant&in, uint)", AS_METHODPR(Spline, SetKnot, (const Variant&, unsigned), void), AS_CALL_THISCALL));

    // void Spline::AddKnot(const Variant& knot)
    methods.Push(RegisterObjectMethodArgs("void Spline::AddKnot(const Variant& knot)", "void AddKnot(const Variant&in)", AS_METHODPR(Spline, AddKnot, (const Variant&), void), AS_CALL_THISCALL));

    // void Spline::AddKnot(const Variant& knot, unsigned index)
    methods.Push(RegisterObjectMethodArgs("void Spline::AddKnot(const Variant& knot, unsigned index)", "void AddKnot(const Variant&in, uint)", AS_METHODPR(Spline, AddKnot, (const Variant&, unsigned), void), AS_CALL_THISCALL));

    // void Spline::RemoveKnot()
    methods.Push(RegisterObjectMethodArgs("void Spline::RemoveKnot()", "void RemoveKnot()", AS_METHODPR(Spline, RemoveKnot, (), void), AS_CALL_THISCALL));

    // void Spline::RemoveKnot(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void Spline::RemoveKnot(unsigned index)", "void RemoveKnot(uint)", AS_METHODPR(Spline, RemoveKnot, (unsigned), void), AS_CALL_THISCALL));

    // void Spline::Clear()
    methods.Push(RegisterObjectMethodArgs("void Spline::Clear()", "void Clear()", AS_METHODPR(Spline, Clear, (), void), AS_CALL_THISCALL));
}

// class SplinePath | File: ../Scene/SplinePath.h
void CollectMembers_SplinePath(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // const VariantVector& SplinePath::GetControlPointIdsAttr() const
    // Error: type "const VariantVector&" can not automatically bind

    // void SplinePath::SetControlPointIdsAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void SplinePath::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void SplinePath::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(SplinePath, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void SplinePath::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void SplinePath::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(SplinePath, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void SplinePath::AddControlPoint(Node* point, unsigned index=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void SplinePath::AddControlPoint(Node* point, unsigned index=M_MAX_UNSIGNED)", "void AddControlPoint(Node@+, uint = M_MAX_UNSIGNED)", AS_METHODPR(SplinePath, AddControlPoint, (Node*, unsigned), void), AS_CALL_THISCALL));

    // void SplinePath::RemoveControlPoint(Node* point)
    methods.Push(RegisterObjectMethodArgs("void SplinePath::RemoveControlPoint(Node* point)", "void RemoveControlPoint(Node@+)", AS_METHODPR(SplinePath, RemoveControlPoint, (Node*), void), AS_CALL_THISCALL));

    // void SplinePath::ClearControlPoints()
    methods.Push(RegisterObjectMethodArgs("void SplinePath::ClearControlPoints()", "void ClearControlPoints()", AS_METHODPR(SplinePath, ClearControlPoints, (), void), AS_CALL_THISCALL));

    // void SplinePath::SetInterpolationMode(InterpolationMode interpolationMode)
    methods.Push(RegisterObjectMethodArgs("void SplinePath::SetInterpolationMode(InterpolationMode interpolationMode)", "void SetInterpolationMode(InterpolationMode)", AS_METHODPR(SplinePath, SetInterpolationMode, (InterpolationMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SplinePath::SetInterpolationMode(InterpolationMode interpolationMode)", "void set_interpolationMode(InterpolationMode)", AS_METHODPR(SplinePath, SetInterpolationMode, (InterpolationMode), void), AS_CALL_THISCALL));

    // void SplinePath::SetSpeed(float speed)
    methods.Push(RegisterObjectMethodArgs("void SplinePath::SetSpeed(float speed)", "void SetSpeed(float)", AS_METHODPR(SplinePath, SetSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SplinePath::SetSpeed(float speed)", "void set_speed(float)", AS_METHODPR(SplinePath, SetSpeed, (float), void), AS_CALL_THISCALL));

    // void SplinePath::SetPosition(float factor)
    methods.Push(RegisterObjectMethodArgs("void SplinePath::SetPosition(float factor)", "void SetPosition(float)", AS_METHODPR(SplinePath, SetPosition, (float), void), AS_CALL_THISCALL));

    // void SplinePath::SetControlledNode(Node* controlled)
    methods.Push(RegisterObjectMethodArgs("void SplinePath::SetControlledNode(Node* controlled)", "void SetControlledNode(Node@+)", AS_METHODPR(SplinePath, SetControlledNode, (Node*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SplinePath::SetControlledNode(Node* controlled)", "void set_controlledNode(Node@+)", AS_METHODPR(SplinePath, SetControlledNode, (Node*), void), AS_CALL_THISCALL));

    // InterpolationMode SplinePath::GetInterpolationMode() const
    methods.Push(RegisterObjectMethodArgs("InterpolationMode SplinePath::GetInterpolationMode() const", "InterpolationMode GetInterpolationMode() const", AS_METHODPR(SplinePath, GetInterpolationMode, () const, InterpolationMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("InterpolationMode SplinePath::GetInterpolationMode() const", "InterpolationMode get_interpolationMode() const", AS_METHODPR(SplinePath, GetInterpolationMode, () const, InterpolationMode), AS_CALL_THISCALL));

    // float SplinePath::GetSpeed() const
    methods.Push(RegisterObjectMethodArgs("float SplinePath::GetSpeed() const", "float GetSpeed() const", AS_METHODPR(SplinePath, GetSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SplinePath::GetSpeed() const", "float get_speed() const", AS_METHODPR(SplinePath, GetSpeed, () const, float), AS_CALL_THISCALL));

    // float SplinePath::GetLength() const
    methods.Push(RegisterObjectMethodArgs("float SplinePath::GetLength() const", "float GetLength() const", AS_METHODPR(SplinePath, GetLength, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float SplinePath::GetLength() const", "float get_length() const", AS_METHODPR(SplinePath, GetLength, () const, float), AS_CALL_THISCALL));

    // Vector3 SplinePath::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("Vector3 SplinePath::GetPosition() const", "Vector3 GetPosition() const", AS_METHODPR(SplinePath, GetPosition, () const, Vector3), AS_CALL_THISCALL));

    // Node* SplinePath::GetControlledNode() const
    methods.Push(RegisterObjectMethodArgs("Node* SplinePath::GetControlledNode() const", "Node@+ GetControlledNode() const", AS_METHODPR(SplinePath, GetControlledNode, () const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* SplinePath::GetControlledNode() const", "Node@+ get_controlledNode() const", AS_METHODPR(SplinePath, GetControlledNode, () const, Node*), AS_CALL_THISCALL));

    // Vector3 SplinePath::GetPoint(float factor) const
    methods.Push(RegisterObjectMethodArgs("Vector3 SplinePath::GetPoint(float factor) const", "Vector3 GetPoint(float) const", AS_METHODPR(SplinePath, GetPoint, (float) const, Vector3), AS_CALL_THISCALL));

    // void SplinePath::Move(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void SplinePath::Move(float timeStep)", "void Move(float)", AS_METHODPR(SplinePath, Move, (float), void), AS_CALL_THISCALL));

    // void SplinePath::Reset()
    methods.Push(RegisterObjectMethodArgs("void SplinePath::Reset()", "void Reset()", AS_METHODPR(SplinePath, Reset, (), void), AS_CALL_THISCALL));

    // bool SplinePath::IsFinished() const
    methods.Push(RegisterObjectMethodArgs("bool SplinePath::IsFinished() const", "bool IsFinished() const", AS_METHODPR(SplinePath, IsFinished, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool SplinePath::IsFinished() const", "bool get_isFinished() const", AS_METHODPR(SplinePath, IsFinished, () const, bool), AS_CALL_THISCALL));

    // void SplinePath::SetControlledIdAttr(unsigned value)
    methods.Push(RegisterObjectMethodArgs("void SplinePath::SetControlledIdAttr(unsigned value)", "void SetControlledIdAttr(uint)", AS_METHODPR(SplinePath, SetControlledIdAttr, (unsigned), void), AS_CALL_THISCALL));

    // unsigned SplinePath::GetControlledIdAttr() const
    methods.Push(RegisterObjectMethodArgs("unsigned SplinePath::GetControlledIdAttr() const", "uint GetControlledIdAttr() const", AS_METHODPR(SplinePath, GetControlledIdAttr, () const, unsigned), AS_CALL_THISCALL));
}

// class Sprite | File: ../UI/Sprite.h
void CollectMembers_Sprite(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_UIElement(methods);

    Remove(methods, "const IntVector2& UIElement::GetPosition() const");
    Remove(methods, "static void UIElement::RegisterObject(Context* context)");
    Remove(methods, "virtual IntVector2 UIElement::ElementToScreen(const IntVector2& position)");
    Remove(methods, "virtual IntVector2 UIElement::ScreenToElement(const IntVector2& screenPosition)");
    Remove(methods, "virtual bool UIElement::IsWithinScissor(const IntRect& currentScissor)");
    Remove(methods, "virtual const IntVector2& UIElement::GetScreenPosition() const");
    Remove(methods, "virtual void UIElement::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor)");
    Remove(methods, "virtual void UIElement::OnPositionSet(const IntVector2& newPosition)");
    Remove(methods, "void UIElement::SetPosition(const IntVector2& position)");
    Remove(methods, "void UIElement::SetPosition(int x, int y)");

    // void Sprite::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // bool Sprite::IsWithinScissor(const IntRect& currentScissor) override
    methods.Push(RegisterObjectMethodArgs("bool Sprite::IsWithinScissor(const IntRect& currentScissor) override", "bool IsWithinScissor(const IntRect&in)", AS_METHODPR(Sprite, IsWithinScissor, (const IntRect&), bool), AS_CALL_THISCALL));

    // const IntVector2& Sprite::GetScreenPosition() const override
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Sprite::GetScreenPosition() const override", "const IntVector2& GetScreenPosition() const", AS_METHODPR(Sprite, GetScreenPosition, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Sprite::GetScreenPosition() const override", "const IntVector2& get_screenPosition() const", AS_METHODPR(Sprite, GetScreenPosition, () const, const IntVector2&), AS_CALL_THISCALL));

    // void Sprite::OnPositionSet(const IntVector2& newPosition) override
    methods.Push(RegisterObjectMethodArgs("void Sprite::OnPositionSet(const IntVector2& newPosition) override", "void OnPositionSet(const IntVector2&in)", AS_METHODPR(Sprite, OnPositionSet, (const IntVector2&), void), AS_CALL_THISCALL));

    // IntVector2 Sprite::ScreenToElement(const IntVector2& screenPosition) override
    methods.Push(RegisterObjectMethodArgs("IntVector2 Sprite::ScreenToElement(const IntVector2& screenPosition) override", "IntVector2 ScreenToElement(const IntVector2&in)", AS_METHODPR(Sprite, ScreenToElement, (const IntVector2&), IntVector2), AS_CALL_THISCALL));

    // IntVector2 Sprite::ElementToScreen(const IntVector2& position) override
    methods.Push(RegisterObjectMethodArgs("IntVector2 Sprite::ElementToScreen(const IntVector2& position) override", "IntVector2 ElementToScreen(const IntVector2&in)", AS_METHODPR(Sprite, ElementToScreen, (const IntVector2&), IntVector2), AS_CALL_THISCALL));

    // void Sprite::SetPosition(const Vector2& position)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetPosition(const Vector2& position)", "void SetPosition(const Vector2&in)", AS_METHODPR(Sprite, SetPosition, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetPosition(const Vector2& position)", "void set_position(const Vector2&in)", AS_METHODPR(Sprite, SetPosition, (const Vector2&), void), AS_CALL_THISCALL));

    // void Sprite::SetPosition(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetPosition(float x, float y)", "void SetPosition(float, float)", AS_METHODPR(Sprite, SetPosition, (float, float), void), AS_CALL_THISCALL));

    // void Sprite::SetHotSpot(const IntVector2& hotSpot)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetHotSpot(const IntVector2& hotSpot)", "void SetHotSpot(const IntVector2&in)", AS_METHODPR(Sprite, SetHotSpot, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetHotSpot(const IntVector2& hotSpot)", "void set_hotSpot(const IntVector2&in)", AS_METHODPR(Sprite, SetHotSpot, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Sprite::SetHotSpot(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetHotSpot(int x, int y)", "void SetHotSpot(int, int)", AS_METHODPR(Sprite, SetHotSpot, (int, int), void), AS_CALL_THISCALL));

    // void Sprite::SetScale(const Vector2& scale)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetScale(const Vector2& scale)", "void SetScale(const Vector2&in)", AS_METHODPR(Sprite, SetScale, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetScale(const Vector2& scale)", "void set_scale(const Vector2&in)", AS_METHODPR(Sprite, SetScale, (const Vector2&), void), AS_CALL_THISCALL));

    // void Sprite::SetScale(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetScale(float x, float y)", "void SetScale(float, float)", AS_METHODPR(Sprite, SetScale, (float, float), void), AS_CALL_THISCALL));

    // void Sprite::SetScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetScale(float scale)", "void SetScale(float)", AS_METHODPR(Sprite, SetScale, (float), void), AS_CALL_THISCALL));

    // void Sprite::SetRotation(float angle)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetRotation(float angle)", "void SetRotation(float)", AS_METHODPR(Sprite, SetRotation, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetRotation(float angle)", "void set_rotation(float)", AS_METHODPR(Sprite, SetRotation, (float), void), AS_CALL_THISCALL));

    // void Sprite::SetTexture(Texture* texture)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetTexture(Texture* texture)", "void SetTexture(Texture@+)", AS_METHODPR(Sprite, SetTexture, (Texture*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetTexture(Texture* texture)", "void set_texture(Texture@+)", AS_METHODPR(Sprite, SetTexture, (Texture*), void), AS_CALL_THISCALL));

    // void Sprite::SetImageRect(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetImageRect(const IntRect& rect)", "void SetImageRect(const IntRect&in)", AS_METHODPR(Sprite, SetImageRect, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetImageRect(const IntRect& rect)", "void set_imageRect(const IntRect&in)", AS_METHODPR(Sprite, SetImageRect, (const IntRect&), void), AS_CALL_THISCALL));

    // void Sprite::SetFullImageRect()
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetFullImageRect()", "void SetFullImageRect()", AS_METHODPR(Sprite, SetFullImageRect, (), void), AS_CALL_THISCALL));

    // void Sprite::SetBlendMode(BlendMode mode)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetBlendMode(BlendMode mode)", "void SetBlendMode(BlendMode)", AS_METHODPR(Sprite, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetBlendMode(BlendMode mode)", "void set_blendMode(BlendMode)", AS_METHODPR(Sprite, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));

    // const Vector2& Sprite::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& Sprite::GetPosition() const", "const Vector2& GetPosition() const", AS_METHODPR(Sprite, GetPosition, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& Sprite::GetPosition() const", "const Vector2& get_position() const", AS_METHODPR(Sprite, GetPosition, () const, const Vector2&), AS_CALL_THISCALL));

    // const IntVector2& Sprite::GetHotSpot() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Sprite::GetHotSpot() const", "const IntVector2& GetHotSpot() const", AS_METHODPR(Sprite, GetHotSpot, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Sprite::GetHotSpot() const", "const IntVector2& get_hotSpot() const", AS_METHODPR(Sprite, GetHotSpot, () const, const IntVector2&), AS_CALL_THISCALL));

    // const Vector2& Sprite::GetScale() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& Sprite::GetScale() const", "const Vector2& GetScale() const", AS_METHODPR(Sprite, GetScale, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& Sprite::GetScale() const", "const Vector2& get_scale() const", AS_METHODPR(Sprite, GetScale, () const, const Vector2&), AS_CALL_THISCALL));

    // float Sprite::GetRotation() const
    methods.Push(RegisterObjectMethodArgs("float Sprite::GetRotation() const", "float GetRotation() const", AS_METHODPR(Sprite, GetRotation, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Sprite::GetRotation() const", "float get_rotation() const", AS_METHODPR(Sprite, GetRotation, () const, float), AS_CALL_THISCALL));

    // Texture* Sprite::GetTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture* Sprite::GetTexture() const", "Texture@+ GetTexture() const", AS_METHODPR(Sprite, GetTexture, () const, Texture*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture* Sprite::GetTexture() const", "Texture@+ get_texture() const", AS_METHODPR(Sprite, GetTexture, () const, Texture*), AS_CALL_THISCALL));

    // const IntRect& Sprite::GetImageRect() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& Sprite::GetImageRect() const", "const IntRect& GetImageRect() const", AS_METHODPR(Sprite, GetImageRect, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& Sprite::GetImageRect() const", "const IntRect& get_imageRect() const", AS_METHODPR(Sprite, GetImageRect, () const, const IntRect&), AS_CALL_THISCALL));

    // BlendMode Sprite::GetBlendMode() const
    methods.Push(RegisterObjectMethodArgs("BlendMode Sprite::GetBlendMode() const", "BlendMode GetBlendMode() const", AS_METHODPR(Sprite, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BlendMode Sprite::GetBlendMode() const", "BlendMode get_blendMode() const", AS_METHODPR(Sprite, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));

    // void Sprite::SetTextureAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Sprite::SetTextureAttr(const ResourceRef& value)", "void SetTextureAttr(const ResourceRef&in)", AS_METHODPR(Sprite, SetTextureAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef Sprite::GetTextureAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Sprite::GetTextureAttr() const", "ResourceRef GetTextureAttr() const", AS_METHODPR(Sprite, GetTextureAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // const Matrix3x4& Sprite::GetTransform() const
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Sprite::GetTransform() const", "const Matrix3x4& GetTransform() const", AS_METHODPR(Sprite, GetTransform, () const, const Matrix3x4&), AS_CALL_THISCALL));
}

// class StaticModel | File: ../Graphics/StaticModel.h
void CollectMembers_StaticModel(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual Geometry* Drawable::GetLodGeometry(unsigned batchIndex, unsigned level)");
    Remove(methods, "virtual bool Drawable::DrawOcclusion(OcclusionBuffer* buffer)");
    Remove(methods, "virtual unsigned Drawable::GetNumOccluderTriangles()");
    Remove(methods, "virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)");
    Remove(methods, "virtual void Drawable::UpdateBatches(const FrameInfo& frame)");

    // void StaticModel::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void StaticModel::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void StaticModel::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(StaticModel, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // Geometry* StaticModel::GetLodGeometry(unsigned batchIndex, unsigned level) override
    methods.Push(RegisterObjectMethodArgs("Geometry* StaticModel::GetLodGeometry(unsigned batchIndex, unsigned level) override", "Geometry@+ GetLodGeometry(uint, uint)", AS_METHODPR(StaticModel, GetLodGeometry, (unsigned, unsigned), Geometry*), AS_CALL_THISCALL));

    // unsigned StaticModel::GetNumOccluderTriangles() override
    methods.Push(RegisterObjectMethodArgs("unsigned StaticModel::GetNumOccluderTriangles() override", "uint GetNumOccluderTriangles()", AS_METHODPR(StaticModel, GetNumOccluderTriangles, (), unsigned), AS_CALL_THISCALL));

    // bool StaticModel::DrawOcclusion(OcclusionBuffer* buffer) override
    methods.Push(RegisterObjectMethodArgs("bool StaticModel::DrawOcclusion(OcclusionBuffer* buffer) override", "bool DrawOcclusion(OcclusionBuffer@+)", AS_METHODPR(StaticModel, DrawOcclusion, (OcclusionBuffer*), bool), AS_CALL_THISCALL));

    // virtual void StaticModel::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("virtual void StaticModel::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(StaticModel, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual void StaticModel::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(StaticModel, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // virtual bool StaticModel::SetMaterial(unsigned index, Material* material)
    methods.Push(RegisterObjectMethodArgs("virtual bool StaticModel::SetMaterial(unsigned index, Material* material)", "bool SetMaterial(uint, Material@+)", AS_METHODPR(StaticModel, SetMaterial, (unsigned, Material*), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual bool StaticModel::SetMaterial(unsigned index, Material* material)", "bool set_materials(uint, Material@+)", AS_METHODPR(StaticModel, SetMaterial, (unsigned, Material*), bool), AS_CALL_THISCALL));

    // void StaticModel::SetOcclusionLodLevel(unsigned level)
    methods.Push(RegisterObjectMethodArgs("void StaticModel::SetOcclusionLodLevel(unsigned level)", "void SetOcclusionLodLevel(uint)", AS_METHODPR(StaticModel, SetOcclusionLodLevel, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticModel::SetOcclusionLodLevel(unsigned level)", "void set_occlusionLodLevel(uint)", AS_METHODPR(StaticModel, SetOcclusionLodLevel, (unsigned), void), AS_CALL_THISCALL));

    // void StaticModel::ApplyMaterialList(const String& fileName=String::EMPTY)
    methods.Push(RegisterObjectMethodArgs("void StaticModel::ApplyMaterialList(const String& fileName=String::EMPTY)", "void ApplyMaterialList(const String&in = String::EMPTY)", AS_METHODPR(StaticModel, ApplyMaterialList, (const String&), void), AS_CALL_THISCALL));

    // Model* StaticModel::GetModel() const
    methods.Push(RegisterObjectMethodArgs("Model* StaticModel::GetModel() const", "Model@+ GetModel() const", AS_METHODPR(StaticModel, GetModel, () const, Model*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Model* StaticModel::GetModel() const", "Model@+ get_model() const", AS_METHODPR(StaticModel, GetModel, () const, Model*), AS_CALL_THISCALL));

    // unsigned StaticModel::GetNumGeometries() const
    methods.Push(RegisterObjectMethodArgs("unsigned StaticModel::GetNumGeometries() const", "uint GetNumGeometries() const", AS_METHODPR(StaticModel, GetNumGeometries, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned StaticModel::GetNumGeometries() const", "uint get_numGeometries() const", AS_METHODPR(StaticModel, GetNumGeometries, () const, unsigned), AS_CALL_THISCALL));

    // virtual Material* StaticModel::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("virtual Material* StaticModel::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(StaticModel, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual Material* StaticModel::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(StaticModel, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // virtual Material* StaticModel::GetMaterial(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("virtual Material* StaticModel::GetMaterial(unsigned index) const", "Material@+ GetMaterial(uint) const", AS_METHODPR(StaticModel, GetMaterial, (unsigned) const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual Material* StaticModel::GetMaterial(unsigned index) const", "Material@+ get_materials(uint) const", AS_METHODPR(StaticModel, GetMaterial, (unsigned) const, Material*), AS_CALL_THISCALL));

    // unsigned StaticModel::GetOcclusionLodLevel() const
    methods.Push(RegisterObjectMethodArgs("unsigned StaticModel::GetOcclusionLodLevel() const", "uint GetOcclusionLodLevel() const", AS_METHODPR(StaticModel, GetOcclusionLodLevel, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned StaticModel::GetOcclusionLodLevel() const", "uint get_occlusionLodLevel() const", AS_METHODPR(StaticModel, GetOcclusionLodLevel, () const, unsigned), AS_CALL_THISCALL));

    // bool StaticModel::IsInside(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("bool StaticModel::IsInside(const Vector3& point) const", "bool IsInside(const Vector3&in) const", AS_METHODPR(StaticModel, IsInside, (const Vector3&) const, bool), AS_CALL_THISCALL));

    // bool StaticModel::IsInsideLocal(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("bool StaticModel::IsInsideLocal(const Vector3& point) const", "bool IsInsideLocal(const Vector3&in) const", AS_METHODPR(StaticModel, IsInsideLocal, (const Vector3&) const, bool), AS_CALL_THISCALL));

    // void StaticModel::SetModelAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void StaticModel::SetModelAttr(const ResourceRef& value)", "void SetModelAttr(const ResourceRef&in)", AS_METHODPR(StaticModel, SetModelAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // void StaticModel::SetMaterialsAttr(const ResourceRefList& value)
    methods.Push(RegisterObjectMethodArgs("void StaticModel::SetMaterialsAttr(const ResourceRefList& value)", "void SetMaterialsAttr(const ResourceRefList&in)", AS_METHODPR(StaticModel, SetMaterialsAttr, (const ResourceRefList&), void), AS_CALL_THISCALL));

    // ResourceRef StaticModel::GetModelAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef StaticModel::GetModelAttr() const", "ResourceRef GetModelAttr() const", AS_METHODPR(StaticModel, GetModelAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // const ResourceRefList& StaticModel::GetMaterialsAttr() const
    methods.Push(RegisterObjectMethodArgs("const ResourceRefList& StaticModel::GetMaterialsAttr() const", "const ResourceRefList& GetMaterialsAttr() const", AS_METHODPR(StaticModel, GetMaterialsAttr, () const, const ResourceRefList&), AS_CALL_THISCALL));
}

// struct StaticModelGeometryData | File: ../Graphics/StaticModel.h
void CollectMembers_StaticModelGeometryData(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class StaticModelGroup | File: ../Graphics/StaticModelGroup.h
void CollectMembers_StaticModelGroup(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_StaticModel(methods);

    Remove(methods, "bool StaticModel::DrawOcclusion(OcclusionBuffer* buffer) override");
    Remove(methods, "static void StaticModel::RegisterObject(Context* context)");
    Remove(methods, "unsigned StaticModel::GetNumOccluderTriangles() override");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");
    Remove(methods, "void StaticModel::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override");
    Remove(methods, "void StaticModel::UpdateBatches(const FrameInfo& frame) override");

    // const VariantVector& StaticModelGroup::GetNodeIDsAttr() const
    // Error: type "const VariantVector&" can not automatically bind

    // void StaticModelGroup::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void StaticModelGroup::SetNodeIDsAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void StaticModelGroup::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void StaticModelGroup::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(StaticModelGroup, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void StaticModelGroup::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void StaticModelGroup::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(StaticModelGroup, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // unsigned StaticModelGroup::GetNumOccluderTriangles() override
    methods.Push(RegisterObjectMethodArgs("unsigned StaticModelGroup::GetNumOccluderTriangles() override", "uint GetNumOccluderTriangles()", AS_METHODPR(StaticModelGroup, GetNumOccluderTriangles, (), unsigned), AS_CALL_THISCALL));

    // bool StaticModelGroup::DrawOcclusion(OcclusionBuffer* buffer) override
    methods.Push(RegisterObjectMethodArgs("bool StaticModelGroup::DrawOcclusion(OcclusionBuffer* buffer) override", "bool DrawOcclusion(OcclusionBuffer@+)", AS_METHODPR(StaticModelGroup, DrawOcclusion, (OcclusionBuffer*), bool), AS_CALL_THISCALL));

    // void StaticModelGroup::AddInstanceNode(Node* node)
    methods.Push(RegisterObjectMethodArgs("void StaticModelGroup::AddInstanceNode(Node* node)", "void AddInstanceNode(Node@+)", AS_METHODPR(StaticModelGroup, AddInstanceNode, (Node*), void), AS_CALL_THISCALL));

    // void StaticModelGroup::RemoveInstanceNode(Node* node)
    methods.Push(RegisterObjectMethodArgs("void StaticModelGroup::RemoveInstanceNode(Node* node)", "void RemoveInstanceNode(Node@+)", AS_METHODPR(StaticModelGroup, RemoveInstanceNode, (Node*), void), AS_CALL_THISCALL));

    // void StaticModelGroup::RemoveAllInstanceNodes()
    methods.Push(RegisterObjectMethodArgs("void StaticModelGroup::RemoveAllInstanceNodes()", "void RemoveAllInstanceNodes()", AS_METHODPR(StaticModelGroup, RemoveAllInstanceNodes, (), void), AS_CALL_THISCALL));

    // unsigned StaticModelGroup::GetNumInstanceNodes() const
    methods.Push(RegisterObjectMethodArgs("unsigned StaticModelGroup::GetNumInstanceNodes() const", "uint GetNumInstanceNodes() const", AS_METHODPR(StaticModelGroup, GetNumInstanceNodes, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned StaticModelGroup::GetNumInstanceNodes() const", "uint get_numInstanceNodes() const", AS_METHODPR(StaticModelGroup, GetNumInstanceNodes, () const, unsigned), AS_CALL_THISCALL));

    // Node* StaticModelGroup::GetInstanceNode(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Node* StaticModelGroup::GetInstanceNode(unsigned index) const", "Node@+ GetInstanceNode(uint) const", AS_METHODPR(StaticModelGroup, GetInstanceNode, (unsigned) const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* StaticModelGroup::GetInstanceNode(unsigned index) const", "Node@+ get_instanceNodes(uint) const", AS_METHODPR(StaticModelGroup, GetInstanceNode, (unsigned) const, Node*), AS_CALL_THISCALL));
}

// struct StoredLogMessage | File: ../IO/Log.h
void CollectMembers_StoredLogMessage(Vector<RegisterObjectMethodArgs>& methods)
{
}

// Vector<String> String::Split(char separator, bool keepEmptyStrings=false) const
// Vector<String> String::Split(char separator, bool keepEmptyStrings=false) const | File: ../Container/Str.h
static CScriptArray* String_Split_char_bool(String* ptr, char separator, bool keepEmptyStrings)
{
    Vector<String> result = ptr->Split(separator, keepEmptyStrings);
    return VectorToArray<String>(result, "Array<String>");
}


// void String::Join(const Vector<String>& subStrings, const String& glue)
// void String::Join(const Vector<String>& subStrings, const String& glue) | File: ../Container/Str.h
static void String_Join_VectorString_String(String* ptr, CScriptArray* subStrings_conv, const String& glue)
{
    Vector<String> subStrings = ArrayToVector<String>(subStrings_conv);
    ptr->Join(subStrings, glue);
}


// class String | File: ../Container/Str.h
void CollectMembers_String(Vector<RegisterObjectMethodArgs>& methods)
{
    // String& String::Append(const char* str)
    // Error: type "const char*" can not automatically bind

    // String& String::Append(const char* str, unsigned length)
    // Error: type "const char*" can not automatically bind

    // String& String::AppendWithFormat(const char* formatString,...)
    // Error: type "const char*" can not automatically bind

    // String& String::AppendWithFormatArgs(const char* formatString, va_list args)
    // Error: type "const char*" can not automatically bind

    // ConstIterator String::Begin() const
    // Error: type "ConstIterator" can not automatically bind

    // Iterator String::Begin()
    // Error: type "Iterator" can not automatically bind

    // const char* String::CString() const
    // Error: type "const char*" can not automatically bind

    // int String::Compare(const char* str, bool caseSensitive=true) const
    // Error: type "const char*" can not automatically bind

    // ConstIterator String::End() const
    // Error: type "ConstIterator" can not automatically bind

    // Iterator String::End()
    // Error: type "Iterator" can not automatically bind

    // Iterator String::Erase(const Iterator& it)
    // Error: type "const Iterator&" can not automatically bind

    // Iterator String::Erase(const Iterator& start, const Iterator& end)
    // Error: type "const Iterator&" can not automatically bind

    // Iterator String::Insert(const Iterator& dest, char c)
    // Error: type "const Iterator&" can not automatically bind

    // Iterator String::Insert(const Iterator& dest, const Iterator& start, const Iterator& end)
    // Error: type "const Iterator&" can not automatically bind

    // Iterator String::Insert(const Iterator& dest, const String& str)
    // Error: type "const Iterator&" can not automatically bind

    // Iterator String::Replace(const Iterator& start, const Iterator& end, const String& replaceWith)
    // Error: type "const Iterator&" can not automatically bind

    // void String::Replace(unsigned pos, unsigned length, const char* replaceWith)
    // Error: type "const char*" can not automatically bind

    // void String::SetUTF8FromLatin1(const char* str)
    // Error: type "const char*" can not automatically bind

    // void String::SetUTF8FromWChar(const wchar_t* str)
    // Error: type "const wchar_t*" can not automatically bind

    // bool String::operator!=(const String& rhs) const
    // Only operator== is needed

    // bool String::operator!=(const char* rhs) const
    // Error: type "const char*" can not automatically bind

    // String String::operator+(const char* rhs) const
    // Error: type "const char*" can not automatically bind

    // String& String::operator+=(const char* rhs)
    // Error: type "const char*" can not automatically bind

    // bool String::operator<(const String& rhs) const
    // Registerd as opCmp separately

    // bool String::operator<(const char* rhs) const
    // Error: type "const char*" can not automatically bind

    // String& String::operator=(String&& rhs) noexcept
    // Error: type "String&&" can not automatically bind

    // String& String::operator=(const char* rhs)
    // Error: type "const char*" can not automatically bind

    // bool String::operator==(const char* rhs) const
    // Error: type "const char*" can not automatically bind

    // bool String::operator>(const String& rhs) const
    // Registerd as opCmp separately

    // bool String::operator>(const char* rhs) const
    // Error: type "const char*" can not automatically bind

    // String& String::operator=(const String& rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator=(const String& rhs)", "String& opAssign(const String&in)", AS_METHODPR(String, operator=, (const String&), String&), AS_CALL_THISCALL));

    // String& String::operator+=(const String& rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(const String& rhs)", "String& opAddAssign(const String&in)", AS_METHODPR(String, operator+=, (const String&), String&), AS_CALL_THISCALL));

    // String& String::operator+=(char rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(char rhs)", "String& opAddAssign(int8)", AS_METHODPR(String, operator+=, (char), String&), AS_CALL_THISCALL));

    // String& String::operator+=(int rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(int rhs)", "String& opAddAssign(int)", AS_METHODPR(String, operator+=, (int), String&), AS_CALL_THISCALL));

    // String& String::operator+=(short rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(short rhs)", "String& opAddAssign(int16)", AS_METHODPR(String, operator+=, (short), String&), AS_CALL_THISCALL));

    // String& String::operator+=(long long rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(long long rhs)", "String& opAddAssign(int64)", AS_METHODPR(String, operator+=, (long long), String&), AS_CALL_THISCALL));

    // String& String::operator+=(unsigned rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(unsigned rhs)", "String& opAddAssign(uint)", AS_METHODPR(String, operator+=, (unsigned), String&), AS_CALL_THISCALL));

    // String& String::operator+=(unsigned short rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(unsigned short rhs)", "String& opAddAssign(uint16)", AS_METHODPR(String, operator+=, (unsigned short), String&), AS_CALL_THISCALL));

    // String& String::operator+=(unsigned long long rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(unsigned long long rhs)", "String& opAddAssign(uint64)", AS_METHODPR(String, operator+=, (unsigned long long), String&), AS_CALL_THISCALL));

    // String& String::operator+=(float rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(float rhs)", "String& opAddAssign(float)", AS_METHODPR(String, operator+=, (float), String&), AS_CALL_THISCALL));

    // String& String::operator+=(bool rhs)
    methods.Push(RegisterObjectMethodArgs("String& String::operator+=(bool rhs)", "String& opAddAssign(bool)", AS_METHODPR(String, operator+=, (bool), String&), AS_CALL_THISCALL));

    // String String::operator+(const String& rhs) const
    methods.Push(RegisterObjectMethodArgs("String String::operator+(const String& rhs) const", "String opAdd(const String&in) const", AS_METHODPR(String, operator+, (const String&) const, String), AS_CALL_THISCALL));

    // bool String::operator==(const String& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool String::operator==(const String& rhs) const", "bool opEquals(const String&in) const", AS_METHODPR(String, operator==, (const String&) const, bool), AS_CALL_THISCALL));

    // char& String::operator[](unsigned index)
    methods.Push(RegisterObjectMethodArgs("char& String::operator[](unsigned index)", "int8& opIndex(uint)", AS_METHODPR(String, operator[], (unsigned), char&), AS_CALL_THISCALL));

    // const char& String::operator[](unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const char& String::operator[](unsigned index) const", "const int8& opIndex(uint) const", AS_METHODPR(String, operator[], (unsigned) const, const char&), AS_CALL_THISCALL));

    // char& String::At(unsigned index)
    methods.Push(RegisterObjectMethodArgs("char& String::At(unsigned index)", "int8& At(uint)", AS_METHODPR(String, At, (unsigned), char&), AS_CALL_THISCALL));

    // const char& String::At(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const char& String::At(unsigned index) const", "const int8& At(uint) const", AS_METHODPR(String, At, (unsigned) const, const char&), AS_CALL_THISCALL));

    // void String::Replace(char replaceThis, char replaceWith, bool caseSensitive=true)
    methods.Push(RegisterObjectMethodArgs("void String::Replace(char replaceThis, char replaceWith, bool caseSensitive=true)", "void Replace(int8, int8, bool = true)", AS_METHODPR(String, Replace, (char, char, bool), void), AS_CALL_THISCALL));

    // void String::Replace(const String& replaceThis, const String& replaceWith, bool caseSensitive=true)
    methods.Push(RegisterObjectMethodArgs("void String::Replace(const String& replaceThis, const String& replaceWith, bool caseSensitive=true)", "void Replace(const String&in, const String&in, bool = true)", AS_METHODPR(String, Replace, (const String&, const String&, bool), void), AS_CALL_THISCALL));

    // void String::Replace(unsigned pos, unsigned length, const String& replaceWith)
    methods.Push(RegisterObjectMethodArgs("void String::Replace(unsigned pos, unsigned length, const String& replaceWith)", "void Replace(uint, uint, const String&in)", AS_METHODPR(String, Replace, (unsigned, unsigned, const String&), void), AS_CALL_THISCALL));

    // String String::Replaced(char replaceThis, char replaceWith, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("String String::Replaced(char replaceThis, char replaceWith, bool caseSensitive=true) const", "String Replaced(int8, int8, bool = true) const", AS_METHODPR(String, Replaced, (char, char, bool) const, String), AS_CALL_THISCALL));

    // String String::Replaced(const String& replaceThis, const String& replaceWith, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("String String::Replaced(const String& replaceThis, const String& replaceWith, bool caseSensitive=true) const", "String Replaced(const String&in, const String&in, bool = true) const", AS_METHODPR(String, Replaced, (const String&, const String&, bool) const, String), AS_CALL_THISCALL));

    // String& String::Append(const String& str)
    methods.Push(RegisterObjectMethodArgs("String& String::Append(const String& str)", "String& Append(const String&in)", AS_METHODPR(String, Append, (const String&), String&), AS_CALL_THISCALL));

    // String& String::Append(char c)
    methods.Push(RegisterObjectMethodArgs("String& String::Append(char c)", "String& Append(int8)", AS_METHODPR(String, Append, (char), String&), AS_CALL_THISCALL));

    // void String::Insert(unsigned pos, const String& str)
    methods.Push(RegisterObjectMethodArgs("void String::Insert(unsigned pos, const String& str)", "void Insert(uint, const String&in)", AS_METHODPR(String, Insert, (unsigned, const String&), void), AS_CALL_THISCALL));

    // void String::Insert(unsigned pos, char c)
    methods.Push(RegisterObjectMethodArgs("void String::Insert(unsigned pos, char c)", "void Insert(uint, int8)", AS_METHODPR(String, Insert, (unsigned, char), void), AS_CALL_THISCALL));

    // void String::Erase(unsigned pos, unsigned length=1)
    methods.Push(RegisterObjectMethodArgs("void String::Erase(unsigned pos, unsigned length=1)", "void Erase(uint, uint = 1)", AS_METHODPR(String, Erase, (unsigned, unsigned), void), AS_CALL_THISCALL));

    // void String::Resize(unsigned newLength)
    methods.Push(RegisterObjectMethodArgs("void String::Resize(unsigned newLength)", "void Resize(uint)", AS_METHODPR(String, Resize, (unsigned), void), AS_CALL_THISCALL));

    // void String::Reserve(unsigned newCapacity)
    methods.Push(RegisterObjectMethodArgs("void String::Reserve(unsigned newCapacity)", "void Reserve(uint)", AS_METHODPR(String, Reserve, (unsigned), void), AS_CALL_THISCALL));

    // void String::Compact()
    methods.Push(RegisterObjectMethodArgs("void String::Compact()", "void Compact()", AS_METHODPR(String, Compact, (), void), AS_CALL_THISCALL));

    // void String::Clear()
    methods.Push(RegisterObjectMethodArgs("void String::Clear()", "void Clear()", AS_METHODPR(String, Clear, (), void), AS_CALL_THISCALL));

    // void String::Swap(String& str)
    methods.Push(RegisterObjectMethodArgs("void String::Swap(String& str)", "void Swap(String&)", AS_METHODPR(String, Swap, (String&), void), AS_CALL_THISCALL));

    // char String::Front() const
    methods.Push(RegisterObjectMethodArgs("char String::Front() const", "int8 Front() const", AS_METHODPR(String, Front, () const, char), AS_CALL_THISCALL));

    // char String::Back() const
    methods.Push(RegisterObjectMethodArgs("char String::Back() const", "int8 Back() const", AS_METHODPR(String, Back, () const, char), AS_CALL_THISCALL));

    // String String::Substring(unsigned pos) const
    methods.Push(RegisterObjectMethodArgs("String String::Substring(unsigned pos) const", "String Substring(uint) const", AS_METHODPR(String, Substring, (unsigned) const, String), AS_CALL_THISCALL));

    // String String::Substring(unsigned pos, unsigned length) const
    methods.Push(RegisterObjectMethodArgs("String String::Substring(unsigned pos, unsigned length) const", "String Substring(uint, uint) const", AS_METHODPR(String, Substring, (unsigned, unsigned) const, String), AS_CALL_THISCALL));

    // String String::Trimmed() const
    methods.Push(RegisterObjectMethodArgs("String String::Trimmed() const", "String Trimmed() const", AS_METHODPR(String, Trimmed, () const, String), AS_CALL_THISCALL));

    // String String::ToUpper() const
    methods.Push(RegisterObjectMethodArgs("String String::ToUpper() const", "String ToUpper() const", AS_METHODPR(String, ToUpper, () const, String), AS_CALL_THISCALL));

    // String String::ToLower() const
    methods.Push(RegisterObjectMethodArgs("String String::ToLower() const", "String ToLower() const", AS_METHODPR(String, ToLower, () const, String), AS_CALL_THISCALL));

    // Vector<String> String::Split(char separator, bool keepEmptyStrings=false) const
    methods.Push(RegisterObjectMethodArgs("Vector<String> String::Split(char separator, bool keepEmptyStrings=false) const", "Array<String>@ Split(int8, bool = false) const", AS_FUNCTION_OBJFIRST(String_Split_char_bool), AS_CALL_CDECL_OBJFIRST));

    // void String::Join(const Vector<String>& subStrings, const String& glue)
    methods.Push(RegisterObjectMethodArgs("void String::Join(const Vector<String>& subStrings, const String& glue)", "void Join(Array<String>@+, const String&in)", AS_FUNCTION_OBJFIRST(String_Join_VectorString_String), AS_CALL_CDECL_OBJFIRST));

    // unsigned String::Find(const String& str, unsigned startPos=0, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("unsigned String::Find(const String& str, unsigned startPos=0, bool caseSensitive=true) const", "uint Find(const String&in, uint = 0, bool = true) const", AS_METHODPR(String, Find, (const String&, unsigned, bool) const, unsigned), AS_CALL_THISCALL));

    // unsigned String::Find(char c, unsigned startPos=0, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("unsigned String::Find(char c, unsigned startPos=0, bool caseSensitive=true) const", "uint Find(int8, uint = 0, bool = true) const", AS_METHODPR(String, Find, (char, unsigned, bool) const, unsigned), AS_CALL_THISCALL));

    // unsigned String::FindLast(const String& str, unsigned startPos=NPOS, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("unsigned String::FindLast(const String& str, unsigned startPos=NPOS, bool caseSensitive=true) const", "uint FindLast(const String&in, uint = String::NPOS, bool = true) const", AS_METHODPR(String, FindLast, (const String&, unsigned, bool) const, unsigned), AS_CALL_THISCALL));

    // unsigned String::FindLast(char c, unsigned startPos=NPOS, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("unsigned String::FindLast(char c, unsigned startPos=NPOS, bool caseSensitive=true) const", "uint FindLast(int8, uint = String::NPOS, bool = true) const", AS_METHODPR(String, FindLast, (char, unsigned, bool) const, unsigned), AS_CALL_THISCALL));

    // bool String::StartsWith(const String& str, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("bool String::StartsWith(const String& str, bool caseSensitive=true) const", "bool StartsWith(const String&in, bool = true) const", AS_METHODPR(String, StartsWith, (const String&, bool) const, bool), AS_CALL_THISCALL));

    // bool String::EndsWith(const String& str, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("bool String::EndsWith(const String& str, bool caseSensitive=true) const", "bool EndsWith(const String&in, bool = true) const", AS_METHODPR(String, EndsWith, (const String&, bool) const, bool), AS_CALL_THISCALL));

    // unsigned String::Length() const
    methods.Push(RegisterObjectMethodArgs("unsigned String::Length() const", "uint Length() const", AS_METHODPR(String, Length, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned String::Length() const", "uint get_length() const", AS_METHODPR(String, Length, () const, unsigned), AS_CALL_THISCALL));

    // unsigned String::Capacity() const
    methods.Push(RegisterObjectMethodArgs("unsigned String::Capacity() const", "uint Capacity() const", AS_METHODPR(String, Capacity, () const, unsigned), AS_CALL_THISCALL));

    // bool String::Empty() const
    methods.Push(RegisterObjectMethodArgs("bool String::Empty() const", "bool Empty() const", AS_METHODPR(String, Empty, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool String::Empty() const", "bool get_empty() const", AS_METHODPR(String, Empty, () const, bool), AS_CALL_THISCALL));

    // int String::Compare(const String& str, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("int String::Compare(const String& str, bool caseSensitive=true) const", "int Compare(const String&in, bool = true) const", AS_METHODPR(String, Compare, (const String&, bool) const, int), AS_CALL_THISCALL));

    // bool String::Contains(const String& str, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("bool String::Contains(const String& str, bool caseSensitive=true) const", "bool Contains(const String&in, bool = true) const", AS_METHODPR(String, Contains, (const String&, bool) const, bool), AS_CALL_THISCALL));

    // bool String::Contains(char c, bool caseSensitive=true) const
    methods.Push(RegisterObjectMethodArgs("bool String::Contains(char c, bool caseSensitive=true) const", "bool Contains(int8, bool = true) const", AS_METHODPR(String, Contains, (char, bool) const, bool), AS_CALL_THISCALL));

    // unsigned String::LengthUTF8() const
    methods.Push(RegisterObjectMethodArgs("unsigned String::LengthUTF8() const", "uint LengthUTF8() const", AS_METHODPR(String, LengthUTF8, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned String::LengthUTF8() const", "uint get_utf8Length() const", AS_METHODPR(String, LengthUTF8, () const, unsigned), AS_CALL_THISCALL));

    // unsigned String::ByteOffsetUTF8(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("unsigned String::ByteOffsetUTF8(unsigned index) const", "uint ByteOffsetUTF8(uint) const", AS_METHODPR(String, ByteOffsetUTF8, (unsigned) const, unsigned), AS_CALL_THISCALL));

    // unsigned String::NextUTF8Char(unsigned& byteOffset) const
    methods.Push(RegisterObjectMethodArgs("unsigned String::NextUTF8Char(unsigned& byteOffset) const", "uint NextUTF8Char(uint&) const", AS_METHODPR(String, NextUTF8Char, (unsigned&) const, unsigned), AS_CALL_THISCALL));

    // unsigned String::AtUTF8(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("unsigned String::AtUTF8(unsigned index) const", "uint AtUTF8(uint) const", AS_METHODPR(String, AtUTF8, (unsigned) const, unsigned), AS_CALL_THISCALL));

    // void String::ReplaceUTF8(unsigned index, unsigned unicodeChar)
    methods.Push(RegisterObjectMethodArgs("void String::ReplaceUTF8(unsigned index, unsigned unicodeChar)", "void ReplaceUTF8(uint, uint)", AS_METHODPR(String, ReplaceUTF8, (unsigned, unsigned), void), AS_CALL_THISCALL));

    // String& String::AppendUTF8(unsigned unicodeChar)
    methods.Push(RegisterObjectMethodArgs("String& String::AppendUTF8(unsigned unicodeChar)", "String& AppendUTF8(uint)", AS_METHODPR(String, AppendUTF8, (unsigned), String&), AS_CALL_THISCALL));

    // String String::SubstringUTF8(unsigned pos) const
    methods.Push(RegisterObjectMethodArgs("String String::SubstringUTF8(unsigned pos) const", "String SubstringUTF8(uint) const", AS_METHODPR(String, SubstringUTF8, (unsigned) const, String), AS_CALL_THISCALL));

    // String String::SubstringUTF8(unsigned pos, unsigned length) const
    methods.Push(RegisterObjectMethodArgs("String String::SubstringUTF8(unsigned pos, unsigned length) const", "String SubstringUTF8(uint, uint) const", AS_METHODPR(String, SubstringUTF8, (unsigned, unsigned) const, String), AS_CALL_THISCALL));

    // unsigned String::ToHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned String::ToHash() const", "uint ToHash() const", AS_METHODPR(String, ToHash, () const, unsigned), AS_CALL_THISCALL));
}

// class StringHash | File: ../Math/StringHash.h
void CollectMembers_StringHash(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool StringHash::operator!=(const StringHash& rhs) const
    // Only operator== is needed

    // bool StringHash::operator<(const StringHash& rhs) const
    // Registerd as opCmp separately

    // bool StringHash::operator>(const StringHash& rhs) const
    // Registerd as opCmp separately

    // StringHash& StringHash::operator=(const StringHash& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("StringHash& StringHash::operator=(const StringHash& rhs) noexcept=default", "StringHash& opAssign(const StringHash&in)", AS_METHODPR(StringHash, operator=, (const StringHash&), StringHash&), AS_CALL_THISCALL));

    // StringHash StringHash::operator+(const StringHash& rhs) const
    methods.Push(RegisterObjectMethodArgs("StringHash StringHash::operator+(const StringHash& rhs) const", "StringHash opAdd(const StringHash&in) const", AS_METHODPR(StringHash, operator+, (const StringHash&) const, StringHash), AS_CALL_THISCALL));

    // StringHash& StringHash::operator+=(const StringHash& rhs)
    methods.Push(RegisterObjectMethodArgs("StringHash& StringHash::operator+=(const StringHash& rhs)", "StringHash& opAddAssign(const StringHash&in)", AS_METHODPR(StringHash, operator+=, (const StringHash&), StringHash&), AS_CALL_THISCALL));

    // bool StringHash::operator==(const StringHash& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool StringHash::operator==(const StringHash& rhs) const", "bool opEquals(const StringHash&in) const", AS_METHODPR(StringHash, operator==, (const StringHash&) const, bool), AS_CALL_THISCALL));

    // explicit StringHash::operator bool() const
    methods.Push(RegisterObjectMethodArgs("explicit StringHash::operator bool() const", "bool opConv() const", AS_METHODPR(StringHash, operator bool, () const, bool), AS_CALL_THISCALL));

    // unsigned StringHash::Value() const
    methods.Push(RegisterObjectMethodArgs("unsigned StringHash::Value() const", "uint Value() const", AS_METHODPR(StringHash, Value, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned StringHash::Value() const", "uint get_value() const", AS_METHODPR(StringHash, Value, () const, unsigned), AS_CALL_THISCALL));

    // String StringHash::ToString() const
    methods.Push(RegisterObjectMethodArgs("String StringHash::ToString() const", "String ToString() const", AS_METHODPR(StringHash, ToString, () const, String), AS_CALL_THISCALL));

    // String StringHash::Reverse() const
    methods.Push(RegisterObjectMethodArgs("String StringHash::Reverse() const", "String Reverse() const", AS_METHODPR(StringHash, Reverse, () const, String), AS_CALL_THISCALL));

    // unsigned StringHash::ToHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned StringHash::ToHash() const", "uint ToHash() const", AS_METHODPR(StringHash, ToHash, () const, unsigned), AS_CALL_THISCALL));
}

// class StringHashRegister | File: ../Core/StringHashRegister.h
void CollectMembers_StringHashRegister(Vector<RegisterObjectMethodArgs>& methods)
{
    // const StringMap& StringHashRegister::GetInternalMap() const
    // Error: type "const StringMap&" can not automatically bind

    // StringHash StringHashRegister::RegisterString(const StringHash& hash, const char* string)
    // Error: type "const char*" can not automatically bind

    // StringHash StringHashRegister::RegisterString(const char* string)
    // Error: type "const char*" can not automatically bind

    // String StringHashRegister::GetStringCopy(const StringHash& hash) const
    methods.Push(RegisterObjectMethodArgs("String StringHashRegister::GetStringCopy(const StringHash& hash) const", "String GetStringCopy(const StringHash&in) const", AS_METHODPR(StringHashRegister, GetStringCopy, (const StringHash&) const, String), AS_CALL_THISCALL));

    // bool StringHashRegister::Contains(const StringHash& hash) const
    methods.Push(RegisterObjectMethodArgs("bool StringHashRegister::Contains(const StringHash& hash) const", "bool Contains(const StringHash&in) const", AS_METHODPR(StringHashRegister, Contains, (const StringHash&) const, bool), AS_CALL_THISCALL));

    // const String& StringHashRegister::GetString(const StringHash& hash) const
    methods.Push(RegisterObjectMethodArgs("const String& StringHashRegister::GetString(const StringHash& hash) const", "const String& GetString(const StringHash&in) const", AS_METHODPR(StringHashRegister, GetString, (const StringHash&) const, const String&), AS_CALL_THISCALL));
}

// SharedPtr<Technique> Technique::Clone(const String& cloneName=String::EMPTY) const
// SharedPtr<Technique> Technique::Clone(const String& cloneName=String::EMPTY) const | File: ../Graphics/Technique.h
static Technique* Technique_Clone_String(Technique* ptr, const String& cloneName)
{
    SharedPtr<Technique> result = ptr->Clone(cloneName);
    return result.Detach();
}


// Vector<String> Technique::GetPassNames() const
// Vector<String> Technique::GetPassNames() const | File: ../Graphics/Technique.h
static CScriptArray* Technique_GetPassNames_void(Technique* ptr)
{
    Vector<String> result = ptr->GetPassNames();
    return VectorToArray<String>(result, "Array<String>");
}


// PODVector<Pass*> Technique::GetPasses() const
// PODVector<Pass*> Technique::GetPasses() const | File: ../Graphics/Technique.h
static CScriptArray* Technique_GetPasses_void(Technique* ptr)
{
    PODVector<Pass*> result = ptr->GetPasses();
    return VectorToHandleArray(result, "Array<Pass@>");
}


// SharedPtr<Technique> Technique::CloneWithDefines(const String& vsDefines, const String& psDefines)
// SharedPtr<Technique> Technique::CloneWithDefines(const String& vsDefines, const String& psDefines) | File: ../Graphics/Technique.h
static Technique* Technique_CloneWithDefines_String_String(Technique* ptr, const String& vsDefines, const String& psDefines)
{
    SharedPtr<Technique> result = ptr->CloneWithDefines(vsDefines, psDefines);
    return result.Detach();
}


// class Technique | File: ../Graphics/Technique.h
void CollectMembers_Technique(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");

    // bool Technique::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Technique::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Technique, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // void Technique::SetIsDesktop(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Technique::SetIsDesktop(bool enable)", "void SetIsDesktop(bool)", AS_METHODPR(Technique, SetIsDesktop, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Technique::SetIsDesktop(bool enable)", "void set_desktop(bool)", AS_METHODPR(Technique, SetIsDesktop, (bool), void), AS_CALL_THISCALL));

    // Pass* Technique::CreatePass(const String& name)
    methods.Push(RegisterObjectMethodArgs("Pass* Technique::CreatePass(const String& name)", "Pass@+ CreatePass(const String&in)", AS_METHODPR(Technique, CreatePass, (const String&), Pass*), AS_CALL_THISCALL));

    // void Technique::RemovePass(const String& name)
    methods.Push(RegisterObjectMethodArgs("void Technique::RemovePass(const String& name)", "void RemovePass(const String&in)", AS_METHODPR(Technique, RemovePass, (const String&), void), AS_CALL_THISCALL));

    // void Technique::ReleaseShaders()
    methods.Push(RegisterObjectMethodArgs("void Technique::ReleaseShaders()", "void ReleaseShaders()", AS_METHODPR(Technique, ReleaseShaders, (), void), AS_CALL_THISCALL));

    // SharedPtr<Technique> Technique::Clone(const String& cloneName=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Technique> Technique::Clone(const String& cloneName=String::EMPTY) const", "Technique@+ Clone(const String&in = String::EMPTY) const", AS_FUNCTION_OBJFIRST(Technique_Clone_String), AS_CALL_CDECL_OBJFIRST));

    // bool Technique::IsDesktop() const
    methods.Push(RegisterObjectMethodArgs("bool Technique::IsDesktop() const", "bool IsDesktop() const", AS_METHODPR(Technique, IsDesktop, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Technique::IsDesktop() const", "bool get_desktop() const", AS_METHODPR(Technique, IsDesktop, () const, bool), AS_CALL_THISCALL));

    // bool Technique::IsSupported() const
    methods.Push(RegisterObjectMethodArgs("bool Technique::IsSupported() const", "bool IsSupported() const", AS_METHODPR(Technique, IsSupported, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Technique::IsSupported() const", "bool get_supported() const", AS_METHODPR(Technique, IsSupported, () const, bool), AS_CALL_THISCALL));

    // bool Technique::HasPass(unsigned passIndex) const
    methods.Push(RegisterObjectMethodArgs("bool Technique::HasPass(unsigned passIndex) const", "bool HasPass(uint) const", AS_METHODPR(Technique, HasPass, (unsigned) const, bool), AS_CALL_THISCALL));

    // bool Technique::HasPass(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool Technique::HasPass(const String& name) const", "bool HasPass(const String&in) const", AS_METHODPR(Technique, HasPass, (const String&) const, bool), AS_CALL_THISCALL));

    // Pass* Technique::GetPass(unsigned passIndex) const
    methods.Push(RegisterObjectMethodArgs("Pass* Technique::GetPass(unsigned passIndex) const", "Pass@+ GetPass(uint) const", AS_METHODPR(Technique, GetPass, (unsigned) const, Pass*), AS_CALL_THISCALL));

    // Pass* Technique::GetPass(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Pass* Technique::GetPass(const String& name) const", "Pass@+ GetPass(const String&in) const", AS_METHODPR(Technique, GetPass, (const String&) const, Pass*), AS_CALL_THISCALL));

    // Pass* Technique::GetSupportedPass(unsigned passIndex) const
    methods.Push(RegisterObjectMethodArgs("Pass* Technique::GetSupportedPass(unsigned passIndex) const", "Pass@+ GetSupportedPass(uint) const", AS_METHODPR(Technique, GetSupportedPass, (unsigned) const, Pass*), AS_CALL_THISCALL));

    // Pass* Technique::GetSupportedPass(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Pass* Technique::GetSupportedPass(const String& name) const", "Pass@+ GetSupportedPass(const String&in) const", AS_METHODPR(Technique, GetSupportedPass, (const String&) const, Pass*), AS_CALL_THISCALL));

    // unsigned Technique::GetNumPasses() const
    methods.Push(RegisterObjectMethodArgs("unsigned Technique::GetNumPasses() const", "uint GetNumPasses() const", AS_METHODPR(Technique, GetNumPasses, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Technique::GetNumPasses() const", "uint get_numPasses() const", AS_METHODPR(Technique, GetNumPasses, () const, unsigned), AS_CALL_THISCALL));

    // Vector<String> Technique::GetPassNames() const
    methods.Push(RegisterObjectMethodArgs("Vector<String> Technique::GetPassNames() const", "Array<String>@ GetPassNames() const", AS_FUNCTION_OBJFIRST(Technique_GetPassNames_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("Vector<String> Technique::GetPassNames() const", "Array<String>@ get_passNames() const", AS_FUNCTION_OBJFIRST(Technique_GetPassNames_void), AS_CALL_CDECL_OBJFIRST));

    // PODVector<Pass*> Technique::GetPasses() const
    methods.Push(RegisterObjectMethodArgs("PODVector<Pass*> Technique::GetPasses() const", "Array<Pass@>@ GetPasses() const", AS_FUNCTION_OBJFIRST(Technique_GetPasses_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("PODVector<Pass*> Technique::GetPasses() const", "Array<Pass@>@ get_passes() const", AS_FUNCTION_OBJFIRST(Technique_GetPasses_void), AS_CALL_CDECL_OBJFIRST));

    // SharedPtr<Technique> Technique::CloneWithDefines(const String& vsDefines, const String& psDefines)
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Technique> Technique::CloneWithDefines(const String& vsDefines, const String& psDefines)", "Technique@+ CloneWithDefines(const String&in, const String&in)", AS_FUNCTION_OBJFIRST(Technique_CloneWithDefines_String_String), AS_CALL_CDECL_OBJFIRST));
}

// struct TechniqueEntry | File: ../Graphics/Material.h
void CollectMembers_TechniqueEntry(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Terrain | File: ../Graphics/Terrain.h
void CollectMembers_Terrain(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::OnSetEnabled()");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // SharedArrayPtr<float> Terrain::GetHeightData() const
    // Error: type "SharedArrayPtr<float>" can not automatically bind

    // void Terrain::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void Terrain::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(Terrain, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void Terrain::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void Terrain::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(Terrain, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void Terrain::SetPatchSize(int size)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetPatchSize(int size)", "void SetPatchSize(int)", AS_METHODPR(Terrain, SetPatchSize, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetPatchSize(int size)", "void set_patchSize(int)", AS_METHODPR(Terrain, SetPatchSize, (int), void), AS_CALL_THISCALL));

    // void Terrain::SetSpacing(const Vector3& spacing)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetSpacing(const Vector3& spacing)", "void SetSpacing(const Vector3&in)", AS_METHODPR(Terrain, SetSpacing, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetSpacing(const Vector3& spacing)", "void set_spacing(const Vector3&in)", AS_METHODPR(Terrain, SetSpacing, (const Vector3&), void), AS_CALL_THISCALL));

    // void Terrain::SetMaxLodLevels(unsigned levels)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetMaxLodLevels(unsigned levels)", "void SetMaxLodLevels(uint)", AS_METHODPR(Terrain, SetMaxLodLevels, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetMaxLodLevels(unsigned levels)", "void set_maxLodLevels(uint)", AS_METHODPR(Terrain, SetMaxLodLevels, (unsigned), void), AS_CALL_THISCALL));

    // void Terrain::SetOcclusionLodLevel(unsigned level)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetOcclusionLodLevel(unsigned level)", "void SetOcclusionLodLevel(uint)", AS_METHODPR(Terrain, SetOcclusionLodLevel, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetOcclusionLodLevel(unsigned level)", "void set_occlusionLodLevel(uint)", AS_METHODPR(Terrain, SetOcclusionLodLevel, (unsigned), void), AS_CALL_THISCALL));

    // void Terrain::SetSmoothing(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetSmoothing(bool enable)", "void SetSmoothing(bool)", AS_METHODPR(Terrain, SetSmoothing, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetSmoothing(bool enable)", "void set_smoothing(bool)", AS_METHODPR(Terrain, SetSmoothing, (bool), void), AS_CALL_THISCALL));

    // bool Terrain::SetHeightMap(Image* image)
    methods.Push(RegisterObjectMethodArgs("bool Terrain::SetHeightMap(Image* image)", "bool SetHeightMap(Image@+)", AS_METHODPR(Terrain, SetHeightMap, (Image*), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Terrain::SetHeightMap(Image* image)", "bool set_heightMap(Image@+)", AS_METHODPR(Terrain, SetHeightMap, (Image*), bool), AS_CALL_THISCALL));

    // void Terrain::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(Terrain, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(Terrain, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // void Terrain::SetNorthNeighbor(Terrain* north)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetNorthNeighbor(Terrain* north)", "void SetNorthNeighbor(Terrain@+)", AS_METHODPR(Terrain, SetNorthNeighbor, (Terrain*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetNorthNeighbor(Terrain* north)", "void set_northNeighbor(Terrain@+)", AS_METHODPR(Terrain, SetNorthNeighbor, (Terrain*), void), AS_CALL_THISCALL));

    // void Terrain::SetSouthNeighbor(Terrain* south)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetSouthNeighbor(Terrain* south)", "void SetSouthNeighbor(Terrain@+)", AS_METHODPR(Terrain, SetSouthNeighbor, (Terrain*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetSouthNeighbor(Terrain* south)", "void set_southNeighbor(Terrain@+)", AS_METHODPR(Terrain, SetSouthNeighbor, (Terrain*), void), AS_CALL_THISCALL));

    // void Terrain::SetWestNeighbor(Terrain* west)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetWestNeighbor(Terrain* west)", "void SetWestNeighbor(Terrain@+)", AS_METHODPR(Terrain, SetWestNeighbor, (Terrain*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetWestNeighbor(Terrain* west)", "void set_westNeighbor(Terrain@+)", AS_METHODPR(Terrain, SetWestNeighbor, (Terrain*), void), AS_CALL_THISCALL));

    // void Terrain::SetEastNeighbor(Terrain* east)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetEastNeighbor(Terrain* east)", "void SetEastNeighbor(Terrain@+)", AS_METHODPR(Terrain, SetEastNeighbor, (Terrain*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetEastNeighbor(Terrain* east)", "void set_eastNeighbor(Terrain@+)", AS_METHODPR(Terrain, SetEastNeighbor, (Terrain*), void), AS_CALL_THISCALL));

    // void Terrain::SetNeighbors(Terrain* north, Terrain* south, Terrain* west, Terrain* east)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetNeighbors(Terrain* north, Terrain* south, Terrain* west, Terrain* east)", "void SetNeighbors(Terrain@+, Terrain@+, Terrain@+, Terrain@+)", AS_METHODPR(Terrain, SetNeighbors, (Terrain*, Terrain*, Terrain*, Terrain*), void), AS_CALL_THISCALL));

    // void Terrain::SetDrawDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetDrawDistance(float distance)", "void SetDrawDistance(float)", AS_METHODPR(Terrain, SetDrawDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetDrawDistance(float distance)", "void set_drawDistance(float)", AS_METHODPR(Terrain, SetDrawDistance, (float), void), AS_CALL_THISCALL));

    // void Terrain::SetShadowDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetShadowDistance(float distance)", "void SetShadowDistance(float)", AS_METHODPR(Terrain, SetShadowDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetShadowDistance(float distance)", "void set_shadowDistance(float)", AS_METHODPR(Terrain, SetShadowDistance, (float), void), AS_CALL_THISCALL));

    // void Terrain::SetLodBias(float bias)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetLodBias(float bias)", "void SetLodBias(float)", AS_METHODPR(Terrain, SetLodBias, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetLodBias(float bias)", "void set_lodBias(float)", AS_METHODPR(Terrain, SetLodBias, (float), void), AS_CALL_THISCALL));

    // void Terrain::SetViewMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetViewMask(unsigned mask)", "void SetViewMask(uint)", AS_METHODPR(Terrain, SetViewMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetViewMask(unsigned mask)", "void set_viewMask(uint)", AS_METHODPR(Terrain, SetViewMask, (unsigned), void), AS_CALL_THISCALL));

    // void Terrain::SetLightMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetLightMask(unsigned mask)", "void SetLightMask(uint)", AS_METHODPR(Terrain, SetLightMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetLightMask(unsigned mask)", "void set_lightMask(uint)", AS_METHODPR(Terrain, SetLightMask, (unsigned), void), AS_CALL_THISCALL));

    // void Terrain::SetShadowMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetShadowMask(unsigned mask)", "void SetShadowMask(uint)", AS_METHODPR(Terrain, SetShadowMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetShadowMask(unsigned mask)", "void set_shadowMask(uint)", AS_METHODPR(Terrain, SetShadowMask, (unsigned), void), AS_CALL_THISCALL));

    // void Terrain::SetZoneMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetZoneMask(unsigned mask)", "void SetZoneMask(uint)", AS_METHODPR(Terrain, SetZoneMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetZoneMask(unsigned mask)", "void set_zoneMask(uint)", AS_METHODPR(Terrain, SetZoneMask, (unsigned), void), AS_CALL_THISCALL));

    // void Terrain::SetMaxLights(unsigned num)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetMaxLights(unsigned num)", "void SetMaxLights(uint)", AS_METHODPR(Terrain, SetMaxLights, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetMaxLights(unsigned num)", "void set_maxLights(uint)", AS_METHODPR(Terrain, SetMaxLights, (unsigned), void), AS_CALL_THISCALL));

    // void Terrain::SetCastShadows(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetCastShadows(bool enable)", "void SetCastShadows(bool)", AS_METHODPR(Terrain, SetCastShadows, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetCastShadows(bool enable)", "void set_castShadows(bool)", AS_METHODPR(Terrain, SetCastShadows, (bool), void), AS_CALL_THISCALL));

    // void Terrain::SetOccluder(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetOccluder(bool enable)", "void SetOccluder(bool)", AS_METHODPR(Terrain, SetOccluder, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetOccluder(bool enable)", "void set_occluder(bool)", AS_METHODPR(Terrain, SetOccluder, (bool), void), AS_CALL_THISCALL));

    // void Terrain::SetOccludee(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetOccludee(bool enable)", "void SetOccludee(bool)", AS_METHODPR(Terrain, SetOccludee, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetOccludee(bool enable)", "void set_occludee(bool)", AS_METHODPR(Terrain, SetOccludee, (bool), void), AS_CALL_THISCALL));

    // void Terrain::ApplyHeightMap()
    methods.Push(RegisterObjectMethodArgs("void Terrain::ApplyHeightMap()", "void ApplyHeightMap()", AS_METHODPR(Terrain, ApplyHeightMap, (), void), AS_CALL_THISCALL));

    // int Terrain::GetPatchSize() const
    methods.Push(RegisterObjectMethodArgs("int Terrain::GetPatchSize() const", "int GetPatchSize() const", AS_METHODPR(Terrain, GetPatchSize, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Terrain::GetPatchSize() const", "int get_patchSize() const", AS_METHODPR(Terrain, GetPatchSize, () const, int), AS_CALL_THISCALL));

    // const Vector3& Terrain::GetSpacing() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Terrain::GetSpacing() const", "const Vector3& GetSpacing() const", AS_METHODPR(Terrain, GetSpacing, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& Terrain::GetSpacing() const", "const Vector3& get_spacing() const", AS_METHODPR(Terrain, GetSpacing, () const, const Vector3&), AS_CALL_THISCALL));

    // const IntVector2& Terrain::GetNumVertices() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Terrain::GetNumVertices() const", "const IntVector2& GetNumVertices() const", AS_METHODPR(Terrain, GetNumVertices, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Terrain::GetNumVertices() const", "const IntVector2& get_numVertices() const", AS_METHODPR(Terrain, GetNumVertices, () const, const IntVector2&), AS_CALL_THISCALL));

    // const IntVector2& Terrain::GetNumPatches() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Terrain::GetNumPatches() const", "const IntVector2& GetNumPatches() const", AS_METHODPR(Terrain, GetNumPatches, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Terrain::GetNumPatches() const", "const IntVector2& get_numPatches() const", AS_METHODPR(Terrain, GetNumPatches, () const, const IntVector2&), AS_CALL_THISCALL));

    // unsigned Terrain::GetMaxLodLevels() const
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetMaxLodLevels() const", "uint GetMaxLodLevels() const", AS_METHODPR(Terrain, GetMaxLodLevels, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetMaxLodLevels() const", "uint get_maxLodLevels() const", AS_METHODPR(Terrain, GetMaxLodLevels, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Terrain::GetOcclusionLodLevel() const
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetOcclusionLodLevel() const", "uint GetOcclusionLodLevel() const", AS_METHODPR(Terrain, GetOcclusionLodLevel, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetOcclusionLodLevel() const", "uint get_occlusionLodLevel() const", AS_METHODPR(Terrain, GetOcclusionLodLevel, () const, unsigned), AS_CALL_THISCALL));

    // bool Terrain::GetSmoothing() const
    methods.Push(RegisterObjectMethodArgs("bool Terrain::GetSmoothing() const", "bool GetSmoothing() const", AS_METHODPR(Terrain, GetSmoothing, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Terrain::GetSmoothing() const", "bool get_smoothing() const", AS_METHODPR(Terrain, GetSmoothing, () const, bool), AS_CALL_THISCALL));

    // Image* Terrain::GetHeightMap() const
    methods.Push(RegisterObjectMethodArgs("Image* Terrain::GetHeightMap() const", "Image@+ GetHeightMap() const", AS_METHODPR(Terrain, GetHeightMap, () const, Image*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Image* Terrain::GetHeightMap() const", "Image@+ get_heightMap() const", AS_METHODPR(Terrain, GetHeightMap, () const, Image*), AS_CALL_THISCALL));

    // Material* Terrain::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* Terrain::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(Terrain, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* Terrain::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(Terrain, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // TerrainPatch* Terrain::GetPatch(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("TerrainPatch* Terrain::GetPatch(unsigned index) const", "TerrainPatch@+ GetPatch(uint) const", AS_METHODPR(Terrain, GetPatch, (unsigned) const, TerrainPatch*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TerrainPatch* Terrain::GetPatch(unsigned index) const", "TerrainPatch@+ get_patches(uint) const", AS_METHODPR(Terrain, GetPatch, (unsigned) const, TerrainPatch*), AS_CALL_THISCALL));

    // TerrainPatch* Terrain::GetPatch(int x, int z) const
    methods.Push(RegisterObjectMethodArgs("TerrainPatch* Terrain::GetPatch(int x, int z) const", "TerrainPatch@+ GetPatch(int, int) const", AS_METHODPR(Terrain, GetPatch, (int, int) const, TerrainPatch*), AS_CALL_THISCALL));

    // TerrainPatch* Terrain::GetNeighborPatch(int x, int z) const
    methods.Push(RegisterObjectMethodArgs("TerrainPatch* Terrain::GetNeighborPatch(int x, int z) const", "TerrainPatch@+ GetNeighborPatch(int, int) const", AS_METHODPR(Terrain, GetNeighborPatch, (int, int) const, TerrainPatch*), AS_CALL_THISCALL));

    // float Terrain::GetHeight(const Vector3& worldPosition) const
    methods.Push(RegisterObjectMethodArgs("float Terrain::GetHeight(const Vector3& worldPosition) const", "float GetHeight(const Vector3&in) const", AS_METHODPR(Terrain, GetHeight, (const Vector3&) const, float), AS_CALL_THISCALL));

    // Vector3 Terrain::GetNormal(const Vector3& worldPosition) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Terrain::GetNormal(const Vector3& worldPosition) const", "Vector3 GetNormal(const Vector3&in) const", AS_METHODPR(Terrain, GetNormal, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // IntVector2 Terrain::WorldToHeightMap(const Vector3& worldPosition) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Terrain::WorldToHeightMap(const Vector3& worldPosition) const", "IntVector2 WorldToHeightMap(const Vector3&in) const", AS_METHODPR(Terrain, WorldToHeightMap, (const Vector3&) const, IntVector2), AS_CALL_THISCALL));

    // Vector3 Terrain::HeightMapToWorld(const IntVector2& pixelPosition) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Terrain::HeightMapToWorld(const IntVector2& pixelPosition) const", "Vector3 HeightMapToWorld(const IntVector2&in) const", AS_METHODPR(Terrain, HeightMapToWorld, (const IntVector2&) const, Vector3), AS_CALL_THISCALL));

    // Terrain* Terrain::GetNorthNeighbor() const
    methods.Push(RegisterObjectMethodArgs("Terrain* Terrain::GetNorthNeighbor() const", "Terrain@+ GetNorthNeighbor() const", AS_METHODPR(Terrain, GetNorthNeighbor, () const, Terrain*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Terrain* Terrain::GetNorthNeighbor() const", "Terrain@+ get_northNeighbor() const", AS_METHODPR(Terrain, GetNorthNeighbor, () const, Terrain*), AS_CALL_THISCALL));

    // Terrain* Terrain::GetSouthNeighbor() const
    methods.Push(RegisterObjectMethodArgs("Terrain* Terrain::GetSouthNeighbor() const", "Terrain@+ GetSouthNeighbor() const", AS_METHODPR(Terrain, GetSouthNeighbor, () const, Terrain*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Terrain* Terrain::GetSouthNeighbor() const", "Terrain@+ get_southNeighbor() const", AS_METHODPR(Terrain, GetSouthNeighbor, () const, Terrain*), AS_CALL_THISCALL));

    // Terrain* Terrain::GetWestNeighbor() const
    methods.Push(RegisterObjectMethodArgs("Terrain* Terrain::GetWestNeighbor() const", "Terrain@+ GetWestNeighbor() const", AS_METHODPR(Terrain, GetWestNeighbor, () const, Terrain*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Terrain* Terrain::GetWestNeighbor() const", "Terrain@+ get_westNeighbor() const", AS_METHODPR(Terrain, GetWestNeighbor, () const, Terrain*), AS_CALL_THISCALL));

    // Terrain* Terrain::GetEastNeighbor() const
    methods.Push(RegisterObjectMethodArgs("Terrain* Terrain::GetEastNeighbor() const", "Terrain@+ GetEastNeighbor() const", AS_METHODPR(Terrain, GetEastNeighbor, () const, Terrain*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Terrain* Terrain::GetEastNeighbor() const", "Terrain@+ get_eastNeighbor() const", AS_METHODPR(Terrain, GetEastNeighbor, () const, Terrain*), AS_CALL_THISCALL));

    // float Terrain::GetDrawDistance() const
    methods.Push(RegisterObjectMethodArgs("float Terrain::GetDrawDistance() const", "float GetDrawDistance() const", AS_METHODPR(Terrain, GetDrawDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Terrain::GetDrawDistance() const", "float get_drawDistance() const", AS_METHODPR(Terrain, GetDrawDistance, () const, float), AS_CALL_THISCALL));

    // float Terrain::GetShadowDistance() const
    methods.Push(RegisterObjectMethodArgs("float Terrain::GetShadowDistance() const", "float GetShadowDistance() const", AS_METHODPR(Terrain, GetShadowDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Terrain::GetShadowDistance() const", "float get_shadowDistance() const", AS_METHODPR(Terrain, GetShadowDistance, () const, float), AS_CALL_THISCALL));

    // float Terrain::GetLodBias() const
    methods.Push(RegisterObjectMethodArgs("float Terrain::GetLodBias() const", "float GetLodBias() const", AS_METHODPR(Terrain, GetLodBias, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Terrain::GetLodBias() const", "float get_lodBias() const", AS_METHODPR(Terrain, GetLodBias, () const, float), AS_CALL_THISCALL));

    // unsigned Terrain::GetViewMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetViewMask() const", "uint GetViewMask() const", AS_METHODPR(Terrain, GetViewMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetViewMask() const", "uint get_viewMask() const", AS_METHODPR(Terrain, GetViewMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Terrain::GetLightMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetLightMask() const", "uint GetLightMask() const", AS_METHODPR(Terrain, GetLightMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetLightMask() const", "uint get_lightMask() const", AS_METHODPR(Terrain, GetLightMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Terrain::GetShadowMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetShadowMask() const", "uint GetShadowMask() const", AS_METHODPR(Terrain, GetShadowMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetShadowMask() const", "uint get_shadowMask() const", AS_METHODPR(Terrain, GetShadowMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Terrain::GetZoneMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetZoneMask() const", "uint GetZoneMask() const", AS_METHODPR(Terrain, GetZoneMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetZoneMask() const", "uint get_zoneMask() const", AS_METHODPR(Terrain, GetZoneMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Terrain::GetMaxLights() const
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetMaxLights() const", "uint GetMaxLights() const", AS_METHODPR(Terrain, GetMaxLights, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Terrain::GetMaxLights() const", "uint get_maxLights() const", AS_METHODPR(Terrain, GetMaxLights, () const, unsigned), AS_CALL_THISCALL));

    // bool Terrain::IsVisible() const
    methods.Push(RegisterObjectMethodArgs("bool Terrain::IsVisible() const", "bool IsVisible() const", AS_METHODPR(Terrain, IsVisible, () const, bool), AS_CALL_THISCALL));

    // bool Terrain::GetCastShadows() const
    methods.Push(RegisterObjectMethodArgs("bool Terrain::GetCastShadows() const", "bool GetCastShadows() const", AS_METHODPR(Terrain, GetCastShadows, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Terrain::GetCastShadows() const", "bool get_castShadows() const", AS_METHODPR(Terrain, GetCastShadows, () const, bool), AS_CALL_THISCALL));

    // bool Terrain::IsOccluder() const
    methods.Push(RegisterObjectMethodArgs("bool Terrain::IsOccluder() const", "bool IsOccluder() const", AS_METHODPR(Terrain, IsOccluder, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Terrain::IsOccluder() const", "bool get_occluder() const", AS_METHODPR(Terrain, IsOccluder, () const, bool), AS_CALL_THISCALL));

    // bool Terrain::IsOccludee() const
    methods.Push(RegisterObjectMethodArgs("bool Terrain::IsOccludee() const", "bool IsOccludee() const", AS_METHODPR(Terrain, IsOccludee, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Terrain::IsOccludee() const", "bool get_occludee() const", AS_METHODPR(Terrain, IsOccludee, () const, bool), AS_CALL_THISCALL));

    // void Terrain::CreatePatchGeometry(TerrainPatch* patch)
    methods.Push(RegisterObjectMethodArgs("void Terrain::CreatePatchGeometry(TerrainPatch* patch)", "void CreatePatchGeometry(TerrainPatch@+)", AS_METHODPR(Terrain, CreatePatchGeometry, (TerrainPatch*), void), AS_CALL_THISCALL));

    // void Terrain::UpdatePatchLod(TerrainPatch* patch)
    methods.Push(RegisterObjectMethodArgs("void Terrain::UpdatePatchLod(TerrainPatch* patch)", "void UpdatePatchLod(TerrainPatch@+)", AS_METHODPR(Terrain, UpdatePatchLod, (TerrainPatch*), void), AS_CALL_THISCALL));

    // void Terrain::SetHeightMapAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetHeightMapAttr(const ResourceRef& value)", "void SetHeightMapAttr(const ResourceRef&in)", AS_METHODPR(Terrain, SetHeightMapAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // void Terrain::SetMaterialAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetMaterialAttr(const ResourceRef& value)", "void SetMaterialAttr(const ResourceRef&in)", AS_METHODPR(Terrain, SetMaterialAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // void Terrain::SetPatchSizeAttr(int value)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetPatchSizeAttr(int value)", "void SetPatchSizeAttr(int)", AS_METHODPR(Terrain, SetPatchSizeAttr, (int), void), AS_CALL_THISCALL));

    // void Terrain::SetMaxLodLevelsAttr(unsigned value)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetMaxLodLevelsAttr(unsigned value)", "void SetMaxLodLevelsAttr(uint)", AS_METHODPR(Terrain, SetMaxLodLevelsAttr, (unsigned), void), AS_CALL_THISCALL));

    // void Terrain::SetOcclusionLodLevelAttr(unsigned value)
    methods.Push(RegisterObjectMethodArgs("void Terrain::SetOcclusionLodLevelAttr(unsigned value)", "void SetOcclusionLodLevelAttr(uint)", AS_METHODPR(Terrain, SetOcclusionLodLevelAttr, (unsigned), void), AS_CALL_THISCALL));

    // ResourceRef Terrain::GetHeightMapAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Terrain::GetHeightMapAttr() const", "ResourceRef GetHeightMapAttr() const", AS_METHODPR(Terrain, GetHeightMapAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // ResourceRef Terrain::GetMaterialAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Terrain::GetMaterialAttr() const", "ResourceRef GetMaterialAttr() const", AS_METHODPR(Terrain, GetMaterialAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

// class TerrainPatch | File: ../Graphics/TerrainPatch.h
void CollectMembers_TerrainPatch(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual Geometry* Drawable::GetLodGeometry(unsigned batchIndex, unsigned level)");
    Remove(methods, "virtual UpdateGeometryType Drawable::GetUpdateGeometryType()");
    Remove(methods, "virtual bool Drawable::DrawOcclusion(OcclusionBuffer* buffer)");
    Remove(methods, "virtual unsigned Drawable::GetNumOccluderTriangles()");
    Remove(methods, "virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)");
    Remove(methods, "virtual void Drawable::UpdateBatches(const FrameInfo& frame)");
    Remove(methods, "virtual void Drawable::UpdateGeometry(const FrameInfo& frame)");
    Remove(methods, "void Drawable::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override");

    // PODVector<float>& TerrainPatch::GetLodErrors()
    // Error: type "PODVector<float>&" can not automatically bind

    // void TerrainPatch::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void TerrainPatch::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(TerrainPatch, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void TerrainPatch::UpdateGeometry(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::UpdateGeometry(const FrameInfo& frame) override", "void UpdateGeometry(const FrameInfo&in)", AS_METHODPR(TerrainPatch, UpdateGeometry, (const FrameInfo&), void), AS_CALL_THISCALL));

    // UpdateGeometryType TerrainPatch::GetUpdateGeometryType() override
    methods.Push(RegisterObjectMethodArgs("UpdateGeometryType TerrainPatch::GetUpdateGeometryType() override", "UpdateGeometryType GetUpdateGeometryType()", AS_METHODPR(TerrainPatch, GetUpdateGeometryType, (), UpdateGeometryType), AS_CALL_THISCALL));

    // Geometry* TerrainPatch::GetLodGeometry(unsigned batchIndex, unsigned level) override
    methods.Push(RegisterObjectMethodArgs("Geometry* TerrainPatch::GetLodGeometry(unsigned batchIndex, unsigned level) override", "Geometry@+ GetLodGeometry(uint, uint)", AS_METHODPR(TerrainPatch, GetLodGeometry, (unsigned, unsigned), Geometry*), AS_CALL_THISCALL));

    // unsigned TerrainPatch::GetNumOccluderTriangles() override
    methods.Push(RegisterObjectMethodArgs("unsigned TerrainPatch::GetNumOccluderTriangles() override", "uint GetNumOccluderTriangles()", AS_METHODPR(TerrainPatch, GetNumOccluderTriangles, (), unsigned), AS_CALL_THISCALL));

    // bool TerrainPatch::DrawOcclusion(OcclusionBuffer* buffer) override
    methods.Push(RegisterObjectMethodArgs("bool TerrainPatch::DrawOcclusion(OcclusionBuffer* buffer) override", "bool DrawOcclusion(OcclusionBuffer@+)", AS_METHODPR(TerrainPatch, DrawOcclusion, (OcclusionBuffer*), bool), AS_CALL_THISCALL));

    // void TerrainPatch::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(TerrainPatch, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void TerrainPatch::SetOwner(Terrain* terrain)
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::SetOwner(Terrain* terrain)", "void SetOwner(Terrain@+)", AS_METHODPR(TerrainPatch, SetOwner, (Terrain*), void), AS_CALL_THISCALL));

    // void TerrainPatch::SetNeighbors(TerrainPatch* north, TerrainPatch* south, TerrainPatch* west, TerrainPatch* east)
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::SetNeighbors(TerrainPatch* north, TerrainPatch* south, TerrainPatch* west, TerrainPatch* east)", "void SetNeighbors(TerrainPatch@+, TerrainPatch@+, TerrainPatch@+, TerrainPatch@+)", AS_METHODPR(TerrainPatch, SetNeighbors, (TerrainPatch*, TerrainPatch*, TerrainPatch*, TerrainPatch*), void), AS_CALL_THISCALL));

    // void TerrainPatch::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(TerrainPatch, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // void TerrainPatch::SetBoundingBox(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::SetBoundingBox(const BoundingBox& box)", "void SetBoundingBox(const BoundingBox&in)", AS_METHODPR(TerrainPatch, SetBoundingBox, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void TerrainPatch::SetCoordinates(const IntVector2& coordinates)
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::SetCoordinates(const IntVector2& coordinates)", "void SetCoordinates(const IntVector2&in)", AS_METHODPR(TerrainPatch, SetCoordinates, (const IntVector2&), void), AS_CALL_THISCALL));

    // void TerrainPatch::ResetLod()
    methods.Push(RegisterObjectMethodArgs("void TerrainPatch::ResetLod()", "void ResetLod()", AS_METHODPR(TerrainPatch, ResetLod, (), void), AS_CALL_THISCALL));

    // Geometry* TerrainPatch::GetGeometry() const
    methods.Push(RegisterObjectMethodArgs("Geometry* TerrainPatch::GetGeometry() const", "Geometry@+ GetGeometry() const", AS_METHODPR(TerrainPatch, GetGeometry, () const, Geometry*), AS_CALL_THISCALL));

    // Geometry* TerrainPatch::GetMaxLodGeometry() const
    methods.Push(RegisterObjectMethodArgs("Geometry* TerrainPatch::GetMaxLodGeometry() const", "Geometry@+ GetMaxLodGeometry() const", AS_METHODPR(TerrainPatch, GetMaxLodGeometry, () const, Geometry*), AS_CALL_THISCALL));

    // Geometry* TerrainPatch::GetOcclusionGeometry() const
    methods.Push(RegisterObjectMethodArgs("Geometry* TerrainPatch::GetOcclusionGeometry() const", "Geometry@+ GetOcclusionGeometry() const", AS_METHODPR(TerrainPatch, GetOcclusionGeometry, () const, Geometry*), AS_CALL_THISCALL));

    // VertexBuffer* TerrainPatch::GetVertexBuffer() const
    methods.Push(RegisterObjectMethodArgs("VertexBuffer* TerrainPatch::GetVertexBuffer() const", "VertexBuffer@+ GetVertexBuffer() const", AS_METHODPR(TerrainPatch, GetVertexBuffer, () const, VertexBuffer*), AS_CALL_THISCALL));

    // Terrain* TerrainPatch::GetOwner() const
    methods.Push(RegisterObjectMethodArgs("Terrain* TerrainPatch::GetOwner() const", "Terrain@+ GetOwner() const", AS_METHODPR(TerrainPatch, GetOwner, () const, Terrain*), AS_CALL_THISCALL));

    // TerrainPatch* TerrainPatch::GetNorthPatch() const
    methods.Push(RegisterObjectMethodArgs("TerrainPatch* TerrainPatch::GetNorthPatch() const", "TerrainPatch@+ GetNorthPatch() const", AS_METHODPR(TerrainPatch, GetNorthPatch, () const, TerrainPatch*), AS_CALL_THISCALL));

    // TerrainPatch* TerrainPatch::GetSouthPatch() const
    methods.Push(RegisterObjectMethodArgs("TerrainPatch* TerrainPatch::GetSouthPatch() const", "TerrainPatch@+ GetSouthPatch() const", AS_METHODPR(TerrainPatch, GetSouthPatch, () const, TerrainPatch*), AS_CALL_THISCALL));

    // TerrainPatch* TerrainPatch::GetWestPatch() const
    methods.Push(RegisterObjectMethodArgs("TerrainPatch* TerrainPatch::GetWestPatch() const", "TerrainPatch@+ GetWestPatch() const", AS_METHODPR(TerrainPatch, GetWestPatch, () const, TerrainPatch*), AS_CALL_THISCALL));

    // TerrainPatch* TerrainPatch::GetEastPatch() const
    methods.Push(RegisterObjectMethodArgs("TerrainPatch* TerrainPatch::GetEastPatch() const", "TerrainPatch@+ GetEastPatch() const", AS_METHODPR(TerrainPatch, GetEastPatch, () const, TerrainPatch*), AS_CALL_THISCALL));

    // const IntVector2& TerrainPatch::GetCoordinates() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& TerrainPatch::GetCoordinates() const", "const IntVector2& GetCoordinates() const", AS_METHODPR(TerrainPatch, GetCoordinates, () const, const IntVector2&), AS_CALL_THISCALL));

    // unsigned TerrainPatch::GetLodLevel() const
    methods.Push(RegisterObjectMethodArgs("unsigned TerrainPatch::GetLodLevel() const", "uint GetLodLevel() const", AS_METHODPR(TerrainPatch, GetLodLevel, () const, unsigned), AS_CALL_THISCALL));
}

// class Text | File: ../UI/Text.h
void CollectMembers_Text(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_UISelectable(methods);

    Remove(methods, "UISelectable::URHO3D_OBJECT(UISelectable, UIElement)");
    Remove(methods, "static void UISelectable::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::OnIndentSet()");
    Remove(methods, "virtual void UIElement::OnResize(const IntVector2& newSize, const IntVector2& delta)");
    Remove(methods, "void UIElement::ApplyAttributes() override");
    Remove(methods, "void UISelectable::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override");

    // void Text::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void Text::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void Text::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(Text, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void Text::OnResize(const IntVector2& newSize, const IntVector2& delta) override
    methods.Push(RegisterObjectMethodArgs("void Text::OnResize(const IntVector2& newSize, const IntVector2& delta) override", "void OnResize(const IntVector2&in, const IntVector2&in)", AS_METHODPR(Text, OnResize, (const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // void Text::OnIndentSet() override
    methods.Push(RegisterObjectMethodArgs("void Text::OnIndentSet() override", "void OnIndentSet()", AS_METHODPR(Text, OnIndentSet, (), void), AS_CALL_THISCALL));

    // bool Text::SetFont(const String& fontName, float size=DEFAULT_FONT_SIZE)
    methods.Push(RegisterObjectMethodArgs("bool Text::SetFont(const String& fontName, float size=DEFAULT_FONT_SIZE)", "bool SetFont(const String&in, float = DEFAULT_FONT_SIZE)", AS_METHODPR(Text, SetFont, (const String&, float), bool), AS_CALL_THISCALL));

    // bool Text::SetFont(Font* font, float size=DEFAULT_FONT_SIZE)
    methods.Push(RegisterObjectMethodArgs("bool Text::SetFont(Font* font, float size=DEFAULT_FONT_SIZE)", "bool SetFont(Font@+, float = DEFAULT_FONT_SIZE)", AS_METHODPR(Text, SetFont, (Font*, float), bool), AS_CALL_THISCALL));

    // bool Text::SetFontSize(float size)
    methods.Push(RegisterObjectMethodArgs("bool Text::SetFontSize(float size)", "bool SetFontSize(float)", AS_METHODPR(Text, SetFontSize, (float), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Text::SetFontSize(float size)", "bool set_fontSize(float)", AS_METHODPR(Text, SetFontSize, (float), bool), AS_CALL_THISCALL));

    // void Text::SetText(const String& text)
    methods.Push(RegisterObjectMethodArgs("void Text::SetText(const String& text)", "void SetText(const String&in)", AS_METHODPR(Text, SetText, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetText(const String& text)", "void set_text(const String&in)", AS_METHODPR(Text, SetText, (const String&), void), AS_CALL_THISCALL));

    // void Text::SetTextAlignment(HorizontalAlignment align)
    methods.Push(RegisterObjectMethodArgs("void Text::SetTextAlignment(HorizontalAlignment align)", "void SetTextAlignment(HorizontalAlignment)", AS_METHODPR(Text, SetTextAlignment, (HorizontalAlignment), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetTextAlignment(HorizontalAlignment align)", "void set_textAlignment(HorizontalAlignment)", AS_METHODPR(Text, SetTextAlignment, (HorizontalAlignment), void), AS_CALL_THISCALL));

    // void Text::SetRowSpacing(float spacing)
    methods.Push(RegisterObjectMethodArgs("void Text::SetRowSpacing(float spacing)", "void SetRowSpacing(float)", AS_METHODPR(Text, SetRowSpacing, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetRowSpacing(float spacing)", "void set_rowSpacing(float)", AS_METHODPR(Text, SetRowSpacing, (float), void), AS_CALL_THISCALL));

    // void Text::SetWordwrap(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Text::SetWordwrap(bool enable)", "void SetWordwrap(bool)", AS_METHODPR(Text, SetWordwrap, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetWordwrap(bool enable)", "void set_wordwrap(bool)", AS_METHODPR(Text, SetWordwrap, (bool), void), AS_CALL_THISCALL));

    // void Text::SetAutoLocalizable(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Text::SetAutoLocalizable(bool enable)", "void SetAutoLocalizable(bool)", AS_METHODPR(Text, SetAutoLocalizable, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetAutoLocalizable(bool enable)", "void set_autoLocalizable(bool)", AS_METHODPR(Text, SetAutoLocalizable, (bool), void), AS_CALL_THISCALL));

    // void Text::SetSelection(unsigned start, unsigned length=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void Text::SetSelection(unsigned start, unsigned length=M_MAX_UNSIGNED)", "void SetSelection(uint, uint = M_MAX_UNSIGNED)", AS_METHODPR(Text, SetSelection, (unsigned, unsigned), void), AS_CALL_THISCALL));

    // void Text::ClearSelection()
    methods.Push(RegisterObjectMethodArgs("void Text::ClearSelection()", "void ClearSelection()", AS_METHODPR(Text, ClearSelection, (), void), AS_CALL_THISCALL));

    // void Text::SetTextEffect(TextEffect textEffect)
    methods.Push(RegisterObjectMethodArgs("void Text::SetTextEffect(TextEffect textEffect)", "void SetTextEffect(TextEffect)", AS_METHODPR(Text, SetTextEffect, (TextEffect), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetTextEffect(TextEffect textEffect)", "void set_textEffect(TextEffect)", AS_METHODPR(Text, SetTextEffect, (TextEffect), void), AS_CALL_THISCALL));

    // void Text::SetEffectShadowOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectShadowOffset(const IntVector2& offset)", "void SetEffectShadowOffset(const IntVector2&in)", AS_METHODPR(Text, SetEffectShadowOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectShadowOffset(const IntVector2& offset)", "void set_effectShadowOffset(const IntVector2&in)", AS_METHODPR(Text, SetEffectShadowOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Text::SetEffectStrokeThickness(int thickness)
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectStrokeThickness(int thickness)", "void SetEffectStrokeThickness(int)", AS_METHODPR(Text, SetEffectStrokeThickness, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectStrokeThickness(int thickness)", "void set_effectStrokeThickness(int)", AS_METHODPR(Text, SetEffectStrokeThickness, (int), void), AS_CALL_THISCALL));

    // void Text::SetEffectRoundStroke(bool roundStroke)
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectRoundStroke(bool roundStroke)", "void SetEffectRoundStroke(bool)", AS_METHODPR(Text, SetEffectRoundStroke, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectRoundStroke(bool roundStroke)", "void set_effectRoundStroke(bool)", AS_METHODPR(Text, SetEffectRoundStroke, (bool), void), AS_CALL_THISCALL));

    // void Text::SetEffectColor(const Color& effectColor)
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectColor(const Color& effectColor)", "void SetEffectColor(const Color&in)", AS_METHODPR(Text, SetEffectColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectColor(const Color& effectColor)", "void set_effectColor(const Color&in)", AS_METHODPR(Text, SetEffectColor, (const Color&), void), AS_CALL_THISCALL));

    // Font* Text::GetFont() const
    methods.Push(RegisterObjectMethodArgs("Font* Text::GetFont() const", "Font@+ GetFont() const", AS_METHODPR(Text, GetFont, () const, Font*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Font* Text::GetFont() const", "Font@+ get_font() const", AS_METHODPR(Text, GetFont, () const, Font*), AS_CALL_THISCALL));

    // float Text::GetFontSize() const
    methods.Push(RegisterObjectMethodArgs("float Text::GetFontSize() const", "float GetFontSize() const", AS_METHODPR(Text, GetFontSize, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Text::GetFontSize() const", "float get_fontSize() const", AS_METHODPR(Text, GetFontSize, () const, float), AS_CALL_THISCALL));

    // const String& Text::GetText() const
    methods.Push(RegisterObjectMethodArgs("const String& Text::GetText() const", "const String& GetText() const", AS_METHODPR(Text, GetText, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Text::GetText() const", "const String& get_text() const", AS_METHODPR(Text, GetText, () const, const String&), AS_CALL_THISCALL));

    // HorizontalAlignment Text::GetTextAlignment() const
    methods.Push(RegisterObjectMethodArgs("HorizontalAlignment Text::GetTextAlignment() const", "HorizontalAlignment GetTextAlignment() const", AS_METHODPR(Text, GetTextAlignment, () const, HorizontalAlignment), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("HorizontalAlignment Text::GetTextAlignment() const", "HorizontalAlignment get_textAlignment() const", AS_METHODPR(Text, GetTextAlignment, () const, HorizontalAlignment), AS_CALL_THISCALL));

    // float Text::GetRowSpacing() const
    methods.Push(RegisterObjectMethodArgs("float Text::GetRowSpacing() const", "float GetRowSpacing() const", AS_METHODPR(Text, GetRowSpacing, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Text::GetRowSpacing() const", "float get_rowSpacing() const", AS_METHODPR(Text, GetRowSpacing, () const, float), AS_CALL_THISCALL));

    // bool Text::GetWordwrap() const
    methods.Push(RegisterObjectMethodArgs("bool Text::GetWordwrap() const", "bool GetWordwrap() const", AS_METHODPR(Text, GetWordwrap, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Text::GetWordwrap() const", "bool get_wordwrap() const", AS_METHODPR(Text, GetWordwrap, () const, bool), AS_CALL_THISCALL));

    // bool Text::GetAutoLocalizable() const
    methods.Push(RegisterObjectMethodArgs("bool Text::GetAutoLocalizable() const", "bool GetAutoLocalizable() const", AS_METHODPR(Text, GetAutoLocalizable, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Text::GetAutoLocalizable() const", "bool get_autoLocalizable() const", AS_METHODPR(Text, GetAutoLocalizable, () const, bool), AS_CALL_THISCALL));

    // unsigned Text::GetSelectionStart() const
    methods.Push(RegisterObjectMethodArgs("unsigned Text::GetSelectionStart() const", "uint GetSelectionStart() const", AS_METHODPR(Text, GetSelectionStart, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Text::GetSelectionStart() const", "uint get_selectionStart() const", AS_METHODPR(Text, GetSelectionStart, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Text::GetSelectionLength() const
    methods.Push(RegisterObjectMethodArgs("unsigned Text::GetSelectionLength() const", "uint GetSelectionLength() const", AS_METHODPR(Text, GetSelectionLength, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Text::GetSelectionLength() const", "uint get_selectionLength() const", AS_METHODPR(Text, GetSelectionLength, () const, unsigned), AS_CALL_THISCALL));

    // TextEffect Text::GetTextEffect() const
    methods.Push(RegisterObjectMethodArgs("TextEffect Text::GetTextEffect() const", "TextEffect GetTextEffect() const", AS_METHODPR(Text, GetTextEffect, () const, TextEffect), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TextEffect Text::GetTextEffect() const", "TextEffect get_textEffect() const", AS_METHODPR(Text, GetTextEffect, () const, TextEffect), AS_CALL_THISCALL));

    // const IntVector2& Text::GetEffectShadowOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Text::GetEffectShadowOffset() const", "const IntVector2& GetEffectShadowOffset() const", AS_METHODPR(Text, GetEffectShadowOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Text::GetEffectShadowOffset() const", "const IntVector2& get_effectShadowOffset() const", AS_METHODPR(Text, GetEffectShadowOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // int Text::GetEffectStrokeThickness() const
    methods.Push(RegisterObjectMethodArgs("int Text::GetEffectStrokeThickness() const", "int GetEffectStrokeThickness() const", AS_METHODPR(Text, GetEffectStrokeThickness, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Text::GetEffectStrokeThickness() const", "int get_effectStrokeThickness() const", AS_METHODPR(Text, GetEffectStrokeThickness, () const, int), AS_CALL_THISCALL));

    // bool Text::GetEffectRoundStroke() const
    methods.Push(RegisterObjectMethodArgs("bool Text::GetEffectRoundStroke() const", "bool GetEffectRoundStroke() const", AS_METHODPR(Text, GetEffectRoundStroke, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Text::GetEffectRoundStroke() const", "bool get_effectRoundStroke() const", AS_METHODPR(Text, GetEffectRoundStroke, () const, bool), AS_CALL_THISCALL));

    // const Color& Text::GetEffectColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Text::GetEffectColor() const", "const Color& GetEffectColor() const", AS_METHODPR(Text, GetEffectColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Text::GetEffectColor() const", "const Color& get_effectColor() const", AS_METHODPR(Text, GetEffectColor, () const, const Color&), AS_CALL_THISCALL));

    // float Text::GetRowHeight() const
    methods.Push(RegisterObjectMethodArgs("float Text::GetRowHeight() const", "float GetRowHeight() const", AS_METHODPR(Text, GetRowHeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Text::GetRowHeight() const", "float get_rowHeight() const", AS_METHODPR(Text, GetRowHeight, () const, float), AS_CALL_THISCALL));

    // unsigned Text::GetNumRows() const
    methods.Push(RegisterObjectMethodArgs("unsigned Text::GetNumRows() const", "uint GetNumRows() const", AS_METHODPR(Text, GetNumRows, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Text::GetNumRows() const", "uint get_numRows() const", AS_METHODPR(Text, GetNumRows, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Text::GetNumChars() const
    methods.Push(RegisterObjectMethodArgs("unsigned Text::GetNumChars() const", "uint GetNumChars() const", AS_METHODPR(Text, GetNumChars, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Text::GetNumChars() const", "uint get_numChars() const", AS_METHODPR(Text, GetNumChars, () const, unsigned), AS_CALL_THISCALL));

    // float Text::GetRowWidth(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("float Text::GetRowWidth(unsigned index) const", "float GetRowWidth(uint) const", AS_METHODPR(Text, GetRowWidth, (unsigned) const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Text::GetRowWidth(unsigned index) const", "float get_rowWidths(uint) const", AS_METHODPR(Text, GetRowWidth, (unsigned) const, float), AS_CALL_THISCALL));

    // Vector2 Text::GetCharPosition(unsigned index)
    methods.Push(RegisterObjectMethodArgs("Vector2 Text::GetCharPosition(unsigned index)", "Vector2 GetCharPosition(uint)", AS_METHODPR(Text, GetCharPosition, (unsigned), Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Text::GetCharPosition(unsigned index)", "Vector2 get_charPositions(uint)", AS_METHODPR(Text, GetCharPosition, (unsigned), Vector2), AS_CALL_THISCALL));

    // Vector2 Text::GetCharSize(unsigned index)
    methods.Push(RegisterObjectMethodArgs("Vector2 Text::GetCharSize(unsigned index)", "Vector2 GetCharSize(uint)", AS_METHODPR(Text, GetCharSize, (unsigned), Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Text::GetCharSize(unsigned index)", "Vector2 get_charSizes(uint)", AS_METHODPR(Text, GetCharSize, (unsigned), Vector2), AS_CALL_THISCALL));

    // void Text::SetEffectDepthBias(float bias)
    methods.Push(RegisterObjectMethodArgs("void Text::SetEffectDepthBias(float bias)", "void SetEffectDepthBias(float)", AS_METHODPR(Text, SetEffectDepthBias, (float), void), AS_CALL_THISCALL));

    // float Text::GetEffectDepthBias() const
    methods.Push(RegisterObjectMethodArgs("float Text::GetEffectDepthBias() const", "float GetEffectDepthBias() const", AS_METHODPR(Text, GetEffectDepthBias, () const, float), AS_CALL_THISCALL));

    // void Text::SetFontAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Text::SetFontAttr(const ResourceRef& value)", "void SetFontAttr(const ResourceRef&in)", AS_METHODPR(Text, SetFontAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef Text::GetFontAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Text::GetFontAttr() const", "ResourceRef GetFontAttr() const", AS_METHODPR(Text, GetFontAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void Text::SetTextAttr(const String& value)
    methods.Push(RegisterObjectMethodArgs("void Text::SetTextAttr(const String& value)", "void SetTextAttr(const String&in)", AS_METHODPR(Text, SetTextAttr, (const String&), void), AS_CALL_THISCALL));

    // String Text::GetTextAttr() const
    methods.Push(RegisterObjectMethodArgs("String Text::GetTextAttr() const", "String GetTextAttr() const", AS_METHODPR(Text, GetTextAttr, () const, String), AS_CALL_THISCALL));
}

// class Text3D | File: ../UI/Text3D.h
void CollectMembers_Text3D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual UpdateGeometryType Drawable::GetUpdateGeometryType()");
    Remove(methods, "virtual void Drawable::UpdateBatches(const FrameInfo& frame)");
    Remove(methods, "virtual void Drawable::UpdateGeometry(const FrameInfo& frame)");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // void Text3D::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void Text3D::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(Text3D, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void Text3D::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void Text3D::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(Text3D, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void Text3D::UpdateGeometry(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void Text3D::UpdateGeometry(const FrameInfo& frame) override", "void UpdateGeometry(const FrameInfo&in)", AS_METHODPR(Text3D, UpdateGeometry, (const FrameInfo&), void), AS_CALL_THISCALL));

    // UpdateGeometryType Text3D::GetUpdateGeometryType() override
    methods.Push(RegisterObjectMethodArgs("UpdateGeometryType Text3D::GetUpdateGeometryType() override", "UpdateGeometryType GetUpdateGeometryType()", AS_METHODPR(Text3D, GetUpdateGeometryType, (), UpdateGeometryType), AS_CALL_THISCALL));

    // bool Text3D::SetFont(const String& fontName, float size=DEFAULT_FONT_SIZE)
    methods.Push(RegisterObjectMethodArgs("bool Text3D::SetFont(const String& fontName, float size=DEFAULT_FONT_SIZE)", "bool SetFont(const String&in, float = DEFAULT_FONT_SIZE)", AS_METHODPR(Text3D, SetFont, (const String&, float), bool), AS_CALL_THISCALL));

    // bool Text3D::SetFont(Font* font, float size=DEFAULT_FONT_SIZE)
    methods.Push(RegisterObjectMethodArgs("bool Text3D::SetFont(Font* font, float size=DEFAULT_FONT_SIZE)", "bool SetFont(Font@+, float = DEFAULT_FONT_SIZE)", AS_METHODPR(Text3D, SetFont, (Font*, float), bool), AS_CALL_THISCALL));

    // bool Text3D::SetFontSize(float size)
    methods.Push(RegisterObjectMethodArgs("bool Text3D::SetFontSize(float size)", "bool SetFontSize(float)", AS_METHODPR(Text3D, SetFontSize, (float), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Text3D::SetFontSize(float size)", "bool set_fontSize(float)", AS_METHODPR(Text3D, SetFontSize, (float), bool), AS_CALL_THISCALL));

    // void Text3D::SetMaterial(Material* material)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetMaterial(Material* material)", "void SetMaterial(Material@+)", AS_METHODPR(Text3D, SetMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetMaterial(Material* material)", "void set_material(Material@+)", AS_METHODPR(Text3D, SetMaterial, (Material*), void), AS_CALL_THISCALL));

    // void Text3D::SetText(const String& text)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetText(const String& text)", "void SetText(const String&in)", AS_METHODPR(Text3D, SetText, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetText(const String& text)", "void set_text(const String&in)", AS_METHODPR(Text3D, SetText, (const String&), void), AS_CALL_THISCALL));

    // void Text3D::SetAlignment(HorizontalAlignment hAlign, VerticalAlignment vAlign)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetAlignment(HorizontalAlignment hAlign, VerticalAlignment vAlign)", "void SetAlignment(HorizontalAlignment, VerticalAlignment)", AS_METHODPR(Text3D, SetAlignment, (HorizontalAlignment, VerticalAlignment), void), AS_CALL_THISCALL));

    // void Text3D::SetHorizontalAlignment(HorizontalAlignment align)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetHorizontalAlignment(HorizontalAlignment align)", "void SetHorizontalAlignment(HorizontalAlignment)", AS_METHODPR(Text3D, SetHorizontalAlignment, (HorizontalAlignment), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetHorizontalAlignment(HorizontalAlignment align)", "void set_horizontalAlignment(HorizontalAlignment)", AS_METHODPR(Text3D, SetHorizontalAlignment, (HorizontalAlignment), void), AS_CALL_THISCALL));

    // void Text3D::SetVerticalAlignment(VerticalAlignment align)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetVerticalAlignment(VerticalAlignment align)", "void SetVerticalAlignment(VerticalAlignment)", AS_METHODPR(Text3D, SetVerticalAlignment, (VerticalAlignment), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetVerticalAlignment(VerticalAlignment align)", "void set_verticalAlignment(VerticalAlignment)", AS_METHODPR(Text3D, SetVerticalAlignment, (VerticalAlignment), void), AS_CALL_THISCALL));

    // void Text3D::SetTextAlignment(HorizontalAlignment align)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetTextAlignment(HorizontalAlignment align)", "void SetTextAlignment(HorizontalAlignment)", AS_METHODPR(Text3D, SetTextAlignment, (HorizontalAlignment), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetTextAlignment(HorizontalAlignment align)", "void set_textAlignment(HorizontalAlignment)", AS_METHODPR(Text3D, SetTextAlignment, (HorizontalAlignment), void), AS_CALL_THISCALL));

    // void Text3D::SetRowSpacing(float spacing)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetRowSpacing(float spacing)", "void SetRowSpacing(float)", AS_METHODPR(Text3D, SetRowSpacing, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetRowSpacing(float spacing)", "void set_rowSpacing(float)", AS_METHODPR(Text3D, SetRowSpacing, (float), void), AS_CALL_THISCALL));

    // void Text3D::SetWordwrap(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetWordwrap(bool enable)", "void SetWordwrap(bool)", AS_METHODPR(Text3D, SetWordwrap, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetWordwrap(bool enable)", "void set_wordwrap(bool)", AS_METHODPR(Text3D, SetWordwrap, (bool), void), AS_CALL_THISCALL));

    // void Text3D::SetTextEffect(TextEffect textEffect)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetTextEffect(TextEffect textEffect)", "void SetTextEffect(TextEffect)", AS_METHODPR(Text3D, SetTextEffect, (TextEffect), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetTextEffect(TextEffect textEffect)", "void set_textEffect(TextEffect)", AS_METHODPR(Text3D, SetTextEffect, (TextEffect), void), AS_CALL_THISCALL));

    // void Text3D::SetEffectShadowOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectShadowOffset(const IntVector2& offset)", "void SetEffectShadowOffset(const IntVector2&in)", AS_METHODPR(Text3D, SetEffectShadowOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectShadowOffset(const IntVector2& offset)", "void set_effectShadowOffset(const IntVector2&in)", AS_METHODPR(Text3D, SetEffectShadowOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Text3D::SetEffectStrokeThickness(int thickness)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectStrokeThickness(int thickness)", "void SetEffectStrokeThickness(int)", AS_METHODPR(Text3D, SetEffectStrokeThickness, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectStrokeThickness(int thickness)", "void set_effectStrokeThickness(int)", AS_METHODPR(Text3D, SetEffectStrokeThickness, (int), void), AS_CALL_THISCALL));

    // void Text3D::SetEffectRoundStroke(bool roundStroke)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectRoundStroke(bool roundStroke)", "void SetEffectRoundStroke(bool)", AS_METHODPR(Text3D, SetEffectRoundStroke, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectRoundStroke(bool roundStroke)", "void set_effectRoundStroke(bool)", AS_METHODPR(Text3D, SetEffectRoundStroke, (bool), void), AS_CALL_THISCALL));

    // void Text3D::SetEffectColor(const Color& effectColor)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectColor(const Color& effectColor)", "void SetEffectColor(const Color&in)", AS_METHODPR(Text3D, SetEffectColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectColor(const Color& effectColor)", "void set_effectColor(const Color&in)", AS_METHODPR(Text3D, SetEffectColor, (const Color&), void), AS_CALL_THISCALL));

    // void Text3D::SetEffectDepthBias(float bias)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectDepthBias(float bias)", "void SetEffectDepthBias(float)", AS_METHODPR(Text3D, SetEffectDepthBias, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetEffectDepthBias(float bias)", "void set_effectDepthBias(float)", AS_METHODPR(Text3D, SetEffectDepthBias, (float), void), AS_CALL_THISCALL));

    // void Text3D::SetWidth(int width)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetWidth(int width)", "void SetWidth(int)", AS_METHODPR(Text3D, SetWidth, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetWidth(int width)", "void set_width(int)", AS_METHODPR(Text3D, SetWidth, (int), void), AS_CALL_THISCALL));

    // void Text3D::SetColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetColor(const Color& color)", "void SetColor(const Color&in)", AS_METHODPR(Text3D, SetColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetColor(const Color& color)", "void set_color(const Color&in)", AS_METHODPR(Text3D, SetColor, (const Color&), void), AS_CALL_THISCALL));

    // void Text3D::SetColor(Corner corner, const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetColor(Corner corner, const Color& color)", "void SetColor(Corner, const Color&in)", AS_METHODPR(Text3D, SetColor, (Corner, const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetColor(Corner corner, const Color& color)", "void set_colors(Corner, const Color&in)", AS_METHODPR(Text3D, SetColor, (Corner, const Color&), void), AS_CALL_THISCALL));

    // void Text3D::SetOpacity(float opacity)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetOpacity(float opacity)", "void SetOpacity(float)", AS_METHODPR(Text3D, SetOpacity, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetOpacity(float opacity)", "void set_opacity(float)", AS_METHODPR(Text3D, SetOpacity, (float), void), AS_CALL_THISCALL));

    // void Text3D::SetFixedScreenSize(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetFixedScreenSize(bool enable)", "void SetFixedScreenSize(bool)", AS_METHODPR(Text3D, SetFixedScreenSize, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetFixedScreenSize(bool enable)", "void set_fixedScreenSize(bool)", AS_METHODPR(Text3D, SetFixedScreenSize, (bool), void), AS_CALL_THISCALL));

    // void Text3D::SetFaceCameraMode(FaceCameraMode mode)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetFaceCameraMode(FaceCameraMode mode)", "void SetFaceCameraMode(FaceCameraMode)", AS_METHODPR(Text3D, SetFaceCameraMode, (FaceCameraMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetFaceCameraMode(FaceCameraMode mode)", "void set_faceCameraMode(FaceCameraMode)", AS_METHODPR(Text3D, SetFaceCameraMode, (FaceCameraMode), void), AS_CALL_THISCALL));

    // Font* Text3D::GetFont() const
    methods.Push(RegisterObjectMethodArgs("Font* Text3D::GetFont() const", "Font@+ GetFont() const", AS_METHODPR(Text3D, GetFont, () const, Font*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Font* Text3D::GetFont() const", "Font@+ get_font() const", AS_METHODPR(Text3D, GetFont, () const, Font*), AS_CALL_THISCALL));

    // float Text3D::GetFontSize() const
    methods.Push(RegisterObjectMethodArgs("float Text3D::GetFontSize() const", "float GetFontSize() const", AS_METHODPR(Text3D, GetFontSize, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Text3D::GetFontSize() const", "float get_fontSize() const", AS_METHODPR(Text3D, GetFontSize, () const, float), AS_CALL_THISCALL));

    // Material* Text3D::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* Text3D::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(Text3D, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* Text3D::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(Text3D, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // const String& Text3D::GetText() const
    methods.Push(RegisterObjectMethodArgs("const String& Text3D::GetText() const", "const String& GetText() const", AS_METHODPR(Text3D, GetText, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Text3D::GetText() const", "const String& get_text() const", AS_METHODPR(Text3D, GetText, () const, const String&), AS_CALL_THISCALL));

    // HorizontalAlignment Text3D::GetTextAlignment() const
    methods.Push(RegisterObjectMethodArgs("HorizontalAlignment Text3D::GetTextAlignment() const", "HorizontalAlignment GetTextAlignment() const", AS_METHODPR(Text3D, GetTextAlignment, () const, HorizontalAlignment), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("HorizontalAlignment Text3D::GetTextAlignment() const", "HorizontalAlignment get_textAlignment() const", AS_METHODPR(Text3D, GetTextAlignment, () const, HorizontalAlignment), AS_CALL_THISCALL));

    // HorizontalAlignment Text3D::GetHorizontalAlignment() const
    methods.Push(RegisterObjectMethodArgs("HorizontalAlignment Text3D::GetHorizontalAlignment() const", "HorizontalAlignment GetHorizontalAlignment() const", AS_METHODPR(Text3D, GetHorizontalAlignment, () const, HorizontalAlignment), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("HorizontalAlignment Text3D::GetHorizontalAlignment() const", "HorizontalAlignment get_horizontalAlignment() const", AS_METHODPR(Text3D, GetHorizontalAlignment, () const, HorizontalAlignment), AS_CALL_THISCALL));

    // VerticalAlignment Text3D::GetVerticalAlignment() const
    methods.Push(RegisterObjectMethodArgs("VerticalAlignment Text3D::GetVerticalAlignment() const", "VerticalAlignment GetVerticalAlignment() const", AS_METHODPR(Text3D, GetVerticalAlignment, () const, VerticalAlignment), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("VerticalAlignment Text3D::GetVerticalAlignment() const", "VerticalAlignment get_verticalAlignment() const", AS_METHODPR(Text3D, GetVerticalAlignment, () const, VerticalAlignment), AS_CALL_THISCALL));

    // float Text3D::GetRowSpacing() const
    methods.Push(RegisterObjectMethodArgs("float Text3D::GetRowSpacing() const", "float GetRowSpacing() const", AS_METHODPR(Text3D, GetRowSpacing, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Text3D::GetRowSpacing() const", "float get_rowSpacing() const", AS_METHODPR(Text3D, GetRowSpacing, () const, float), AS_CALL_THISCALL));

    // bool Text3D::GetWordwrap() const
    methods.Push(RegisterObjectMethodArgs("bool Text3D::GetWordwrap() const", "bool GetWordwrap() const", AS_METHODPR(Text3D, GetWordwrap, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Text3D::GetWordwrap() const", "bool get_wordwrap() const", AS_METHODPR(Text3D, GetWordwrap, () const, bool), AS_CALL_THISCALL));

    // TextEffect Text3D::GetTextEffect() const
    methods.Push(RegisterObjectMethodArgs("TextEffect Text3D::GetTextEffect() const", "TextEffect GetTextEffect() const", AS_METHODPR(Text3D, GetTextEffect, () const, TextEffect), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TextEffect Text3D::GetTextEffect() const", "TextEffect get_textEffect() const", AS_METHODPR(Text3D, GetTextEffect, () const, TextEffect), AS_CALL_THISCALL));

    // const IntVector2& Text3D::GetEffectShadowOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Text3D::GetEffectShadowOffset() const", "const IntVector2& GetEffectShadowOffset() const", AS_METHODPR(Text3D, GetEffectShadowOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Text3D::GetEffectShadowOffset() const", "const IntVector2& get_effectShadowOffset() const", AS_METHODPR(Text3D, GetEffectShadowOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // int Text3D::GetEffectStrokeThickness() const
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetEffectStrokeThickness() const", "int GetEffectStrokeThickness() const", AS_METHODPR(Text3D, GetEffectStrokeThickness, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetEffectStrokeThickness() const", "int get_effectStrokeThickness() const", AS_METHODPR(Text3D, GetEffectStrokeThickness, () const, int), AS_CALL_THISCALL));

    // bool Text3D::GetEffectRoundStroke() const
    methods.Push(RegisterObjectMethodArgs("bool Text3D::GetEffectRoundStroke() const", "bool GetEffectRoundStroke() const", AS_METHODPR(Text3D, GetEffectRoundStroke, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Text3D::GetEffectRoundStroke() const", "bool get_effectRoundStroke() const", AS_METHODPR(Text3D, GetEffectRoundStroke, () const, bool), AS_CALL_THISCALL));

    // const Color& Text3D::GetEffectColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Text3D::GetEffectColor() const", "const Color& GetEffectColor() const", AS_METHODPR(Text3D, GetEffectColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Text3D::GetEffectColor() const", "const Color& get_effectColor() const", AS_METHODPR(Text3D, GetEffectColor, () const, const Color&), AS_CALL_THISCALL));

    // float Text3D::GetEffectDepthBias() const
    methods.Push(RegisterObjectMethodArgs("float Text3D::GetEffectDepthBias() const", "float GetEffectDepthBias() const", AS_METHODPR(Text3D, GetEffectDepthBias, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Text3D::GetEffectDepthBias() const", "float get_effectDepthBias() const", AS_METHODPR(Text3D, GetEffectDepthBias, () const, float), AS_CALL_THISCALL));

    // int Text3D::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetWidth() const", "int GetWidth() const", AS_METHODPR(Text3D, GetWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetWidth() const", "int get_width() const", AS_METHODPR(Text3D, GetWidth, () const, int), AS_CALL_THISCALL));

    // int Text3D::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetHeight() const", "int GetHeight() const", AS_METHODPR(Text3D, GetHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetHeight() const", "int get_height() const", AS_METHODPR(Text3D, GetHeight, () const, int), AS_CALL_THISCALL));

    // int Text3D::GetRowHeight() const
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetRowHeight() const", "int GetRowHeight() const", AS_METHODPR(Text3D, GetRowHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetRowHeight() const", "int get_rowHeight() const", AS_METHODPR(Text3D, GetRowHeight, () const, int), AS_CALL_THISCALL));

    // unsigned Text3D::GetNumRows() const
    methods.Push(RegisterObjectMethodArgs("unsigned Text3D::GetNumRows() const", "uint GetNumRows() const", AS_METHODPR(Text3D, GetNumRows, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Text3D::GetNumRows() const", "uint get_numRows() const", AS_METHODPR(Text3D, GetNumRows, () const, unsigned), AS_CALL_THISCALL));

    // unsigned Text3D::GetNumChars() const
    methods.Push(RegisterObjectMethodArgs("unsigned Text3D::GetNumChars() const", "uint GetNumChars() const", AS_METHODPR(Text3D, GetNumChars, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Text3D::GetNumChars() const", "uint get_numChars() const", AS_METHODPR(Text3D, GetNumChars, () const, unsigned), AS_CALL_THISCALL));

    // int Text3D::GetRowWidth(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetRowWidth(unsigned index) const", "int GetRowWidth(uint) const", AS_METHODPR(Text3D, GetRowWidth, (unsigned) const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Text3D::GetRowWidth(unsigned index) const", "int get_rowWidths(uint) const", AS_METHODPR(Text3D, GetRowWidth, (unsigned) const, int), AS_CALL_THISCALL));

    // Vector2 Text3D::GetCharPosition(unsigned index)
    methods.Push(RegisterObjectMethodArgs("Vector2 Text3D::GetCharPosition(unsigned index)", "Vector2 GetCharPosition(uint)", AS_METHODPR(Text3D, GetCharPosition, (unsigned), Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Text3D::GetCharPosition(unsigned index)", "Vector2 get_charPositions(uint)", AS_METHODPR(Text3D, GetCharPosition, (unsigned), Vector2), AS_CALL_THISCALL));

    // Vector2 Text3D::GetCharSize(unsigned index)
    methods.Push(RegisterObjectMethodArgs("Vector2 Text3D::GetCharSize(unsigned index)", "Vector2 GetCharSize(uint)", AS_METHODPR(Text3D, GetCharSize, (unsigned), Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 Text3D::GetCharSize(unsigned index)", "Vector2 get_charSizes(uint)", AS_METHODPR(Text3D, GetCharSize, (unsigned), Vector2), AS_CALL_THISCALL));

    // const Color& Text3D::GetColor(Corner corner) const
    methods.Push(RegisterObjectMethodArgs("const Color& Text3D::GetColor(Corner corner) const", "const Color& GetColor(Corner) const", AS_METHODPR(Text3D, GetColor, (Corner) const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Text3D::GetColor(Corner corner) const", "const Color& get_colors(Corner) const", AS_METHODPR(Text3D, GetColor, (Corner) const, const Color&), AS_CALL_THISCALL));

    // float Text3D::GetOpacity() const
    methods.Push(RegisterObjectMethodArgs("float Text3D::GetOpacity() const", "float GetOpacity() const", AS_METHODPR(Text3D, GetOpacity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Text3D::GetOpacity() const", "float get_opacity() const", AS_METHODPR(Text3D, GetOpacity, () const, float), AS_CALL_THISCALL));

    // bool Text3D::IsFixedScreenSize() const
    methods.Push(RegisterObjectMethodArgs("bool Text3D::IsFixedScreenSize() const", "bool IsFixedScreenSize() const", AS_METHODPR(Text3D, IsFixedScreenSize, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Text3D::IsFixedScreenSize() const", "bool get_fixedScreenSize() const", AS_METHODPR(Text3D, IsFixedScreenSize, () const, bool), AS_CALL_THISCALL));

    // FaceCameraMode Text3D::GetFaceCameraMode() const
    methods.Push(RegisterObjectMethodArgs("FaceCameraMode Text3D::GetFaceCameraMode() const", "FaceCameraMode GetFaceCameraMode() const", AS_METHODPR(Text3D, GetFaceCameraMode, () const, FaceCameraMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FaceCameraMode Text3D::GetFaceCameraMode() const", "FaceCameraMode get_faceCameraMode() const", AS_METHODPR(Text3D, GetFaceCameraMode, () const, FaceCameraMode), AS_CALL_THISCALL));

    // void Text3D::SetFontAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetFontAttr(const ResourceRef& value)", "void SetFontAttr(const ResourceRef&in)", AS_METHODPR(Text3D, SetFontAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef Text3D::GetFontAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Text3D::GetFontAttr() const", "ResourceRef GetFontAttr() const", AS_METHODPR(Text3D, GetFontAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void Text3D::SetMaterialAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetMaterialAttr(const ResourceRef& value)", "void SetMaterialAttr(const ResourceRef&in)", AS_METHODPR(Text3D, SetMaterialAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef Text3D::GetMaterialAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Text3D::GetMaterialAttr() const", "ResourceRef GetMaterialAttr() const", AS_METHODPR(Text3D, GetMaterialAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void Text3D::SetTextAttr(const String& value)
    methods.Push(RegisterObjectMethodArgs("void Text3D::SetTextAttr(const String& value)", "void SetTextAttr(const String&in)", AS_METHODPR(Text3D, SetTextAttr, (const String&), void), AS_CALL_THISCALL));

    // String Text3D::GetTextAttr() const
    methods.Push(RegisterObjectMethodArgs("String Text3D::GetTextAttr() const", "String GetTextAttr() const", AS_METHODPR(Text3D, GetTextAttr, () const, String), AS_CALL_THISCALL));

    // const Color& Text3D::GetColorAttr() const
    methods.Push(RegisterObjectMethodArgs("const Color& Text3D::GetColorAttr() const", "const Color& GetColorAttr() const", AS_METHODPR(Text3D, GetColorAttr, () const, const Color&), AS_CALL_THISCALL));
}

// class Texture | File: ../Graphics/Texture.h
void CollectMembers_Texture(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_ResourceWithMetadata(methods);
    CollectMembers_GPUObject(methods);

    // void* Texture::GetResolveTexture() const
    // Error: type "void*" can not automatically bind

    // void* Texture::GetSampler() const
    // Error: type "void*" can not automatically bind

    // void* Texture::GetShaderResourceView() const
    // Error: type "void*" can not automatically bind

    // void Texture::SetNumLevels(unsigned levels)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetNumLevels(unsigned levels)", "void SetNumLevels(uint)", AS_METHODPR(Texture, SetNumLevels, (unsigned), void), AS_CALL_THISCALL));

    // void Texture::SetFilterMode(TextureFilterMode mode)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetFilterMode(TextureFilterMode mode)", "void SetFilterMode(TextureFilterMode)", AS_METHODPR(Texture, SetFilterMode, (TextureFilterMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Texture::SetFilterMode(TextureFilterMode mode)", "void set_filterMode(TextureFilterMode)", AS_METHODPR(Texture, SetFilterMode, (TextureFilterMode), void), AS_CALL_THISCALL));

    // void Texture::SetAddressMode(TextureCoordinate coord, TextureAddressMode mode)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetAddressMode(TextureCoordinate coord, TextureAddressMode mode)", "void SetAddressMode(TextureCoordinate, TextureAddressMode)", AS_METHODPR(Texture, SetAddressMode, (TextureCoordinate, TextureAddressMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Texture::SetAddressMode(TextureCoordinate coord, TextureAddressMode mode)", "void set_addressMode(TextureCoordinate, TextureAddressMode)", AS_METHODPR(Texture, SetAddressMode, (TextureCoordinate, TextureAddressMode), void), AS_CALL_THISCALL));

    // void Texture::SetAnisotropy(unsigned level)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetAnisotropy(unsigned level)", "void SetAnisotropy(uint)", AS_METHODPR(Texture, SetAnisotropy, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Texture::SetAnisotropy(unsigned level)", "void set_anisotropy(uint)", AS_METHODPR(Texture, SetAnisotropy, (unsigned), void), AS_CALL_THISCALL));

    // void Texture::SetShadowCompare(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetShadowCompare(bool enable)", "void SetShadowCompare(bool)", AS_METHODPR(Texture, SetShadowCompare, (bool), void), AS_CALL_THISCALL));

    // void Texture::SetBorderColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetBorderColor(const Color& color)", "void SetBorderColor(const Color&in)", AS_METHODPR(Texture, SetBorderColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Texture::SetBorderColor(const Color& color)", "void set_borderColor(const Color&in)", AS_METHODPR(Texture, SetBorderColor, (const Color&), void), AS_CALL_THISCALL));

    // void Texture::SetSRGB(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetSRGB(bool enable)", "void SetSRGB(bool)", AS_METHODPR(Texture, SetSRGB, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Texture::SetSRGB(bool enable)", "void set_sRGB(bool)", AS_METHODPR(Texture, SetSRGB, (bool), void), AS_CALL_THISCALL));

    // void Texture::SetBackupTexture(Texture* texture)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetBackupTexture(Texture* texture)", "void SetBackupTexture(Texture@+)", AS_METHODPR(Texture, SetBackupTexture, (Texture*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Texture::SetBackupTexture(Texture* texture)", "void set_backupTexture(Texture@+)", AS_METHODPR(Texture, SetBackupTexture, (Texture*), void), AS_CALL_THISCALL));

    // void Texture::SetMipsToSkip(MaterialQuality quality, int toSkip)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetMipsToSkip(MaterialQuality quality, int toSkip)", "void SetMipsToSkip(MaterialQuality, int)", AS_METHODPR(Texture, SetMipsToSkip, (MaterialQuality, int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Texture::SetMipsToSkip(MaterialQuality quality, int toSkip)", "void set_mipsToSkip(MaterialQuality, int)", AS_METHODPR(Texture, SetMipsToSkip, (MaterialQuality, int), void), AS_CALL_THISCALL));

    // unsigned Texture::GetFormat() const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetFormat() const", "uint GetFormat() const", AS_METHODPR(Texture, GetFormat, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetFormat() const", "uint get_format() const", AS_METHODPR(Texture, GetFormat, () const, unsigned), AS_CALL_THISCALL));

    // bool Texture::IsCompressed() const
    methods.Push(RegisterObjectMethodArgs("bool Texture::IsCompressed() const", "bool IsCompressed() const", AS_METHODPR(Texture, IsCompressed, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Texture::IsCompressed() const", "bool get_compressed() const", AS_METHODPR(Texture, IsCompressed, () const, bool), AS_CALL_THISCALL));

    // unsigned Texture::GetLevels() const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetLevels() const", "uint GetLevels() const", AS_METHODPR(Texture, GetLevels, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetLevels() const", "uint get_levels() const", AS_METHODPR(Texture, GetLevels, () const, unsigned), AS_CALL_THISCALL));

    // int Texture::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int Texture::GetWidth() const", "int GetWidth() const", AS_METHODPR(Texture, GetWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Texture::GetWidth() const", "int get_width() const", AS_METHODPR(Texture, GetWidth, () const, int), AS_CALL_THISCALL));

    // int Texture::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int Texture::GetHeight() const", "int GetHeight() const", AS_METHODPR(Texture, GetHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Texture::GetHeight() const", "int get_height() const", AS_METHODPR(Texture, GetHeight, () const, int), AS_CALL_THISCALL));

    // int Texture::GetDepth() const
    methods.Push(RegisterObjectMethodArgs("int Texture::GetDepth() const", "int GetDepth() const", AS_METHODPR(Texture, GetDepth, () const, int), AS_CALL_THISCALL));

    // TextureFilterMode Texture::GetFilterMode() const
    methods.Push(RegisterObjectMethodArgs("TextureFilterMode Texture::GetFilterMode() const", "TextureFilterMode GetFilterMode() const", AS_METHODPR(Texture, GetFilterMode, () const, TextureFilterMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TextureFilterMode Texture::GetFilterMode() const", "TextureFilterMode get_filterMode() const", AS_METHODPR(Texture, GetFilterMode, () const, TextureFilterMode), AS_CALL_THISCALL));

    // TextureAddressMode Texture::GetAddressMode(TextureCoordinate coord) const
    methods.Push(RegisterObjectMethodArgs("TextureAddressMode Texture::GetAddressMode(TextureCoordinate coord) const", "TextureAddressMode GetAddressMode(TextureCoordinate) const", AS_METHODPR(Texture, GetAddressMode, (TextureCoordinate) const, TextureAddressMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TextureAddressMode Texture::GetAddressMode(TextureCoordinate coord) const", "TextureAddressMode get_addressMode(TextureCoordinate) const", AS_METHODPR(Texture, GetAddressMode, (TextureCoordinate) const, TextureAddressMode), AS_CALL_THISCALL));

    // unsigned Texture::GetAnisotropy() const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetAnisotropy() const", "uint GetAnisotropy() const", AS_METHODPR(Texture, GetAnisotropy, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetAnisotropy() const", "uint get_anisotropy() const", AS_METHODPR(Texture, GetAnisotropy, () const, unsigned), AS_CALL_THISCALL));

    // bool Texture::GetShadowCompare() const
    methods.Push(RegisterObjectMethodArgs("bool Texture::GetShadowCompare() const", "bool GetShadowCompare() const", AS_METHODPR(Texture, GetShadowCompare, () const, bool), AS_CALL_THISCALL));

    // const Color& Texture::GetBorderColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Texture::GetBorderColor() const", "const Color& GetBorderColor() const", AS_METHODPR(Texture, GetBorderColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Texture::GetBorderColor() const", "const Color& get_borderColor() const", AS_METHODPR(Texture, GetBorderColor, () const, const Color&), AS_CALL_THISCALL));

    // bool Texture::GetSRGB() const
    methods.Push(RegisterObjectMethodArgs("bool Texture::GetSRGB() const", "bool GetSRGB() const", AS_METHODPR(Texture, GetSRGB, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Texture::GetSRGB() const", "bool get_sRGB() const", AS_METHODPR(Texture, GetSRGB, () const, bool), AS_CALL_THISCALL));

    // int Texture::GetMultiSample() const
    methods.Push(RegisterObjectMethodArgs("int Texture::GetMultiSample() const", "int GetMultiSample() const", AS_METHODPR(Texture, GetMultiSample, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Texture::GetMultiSample() const", "int get_multiSample() const", AS_METHODPR(Texture, GetMultiSample, () const, int), AS_CALL_THISCALL));

    // bool Texture::GetAutoResolve() const
    methods.Push(RegisterObjectMethodArgs("bool Texture::GetAutoResolve() const", "bool GetAutoResolve() const", AS_METHODPR(Texture, GetAutoResolve, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Texture::GetAutoResolve() const", "bool get_autoResolve() const", AS_METHODPR(Texture, GetAutoResolve, () const, bool), AS_CALL_THISCALL));

    // bool Texture::IsResolveDirty() const
    methods.Push(RegisterObjectMethodArgs("bool Texture::IsResolveDirty() const", "bool IsResolveDirty() const", AS_METHODPR(Texture, IsResolveDirty, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Texture::IsResolveDirty() const", "bool get_resolveDirty() const", AS_METHODPR(Texture, IsResolveDirty, () const, bool), AS_CALL_THISCALL));

    // bool Texture::GetLevelsDirty() const
    methods.Push(RegisterObjectMethodArgs("bool Texture::GetLevelsDirty() const", "bool GetLevelsDirty() const", AS_METHODPR(Texture, GetLevelsDirty, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Texture::GetLevelsDirty() const", "bool get_levelsDirty() const", AS_METHODPR(Texture, GetLevelsDirty, () const, bool), AS_CALL_THISCALL));

    // Texture* Texture::GetBackupTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture* Texture::GetBackupTexture() const", "Texture@+ GetBackupTexture() const", AS_METHODPR(Texture, GetBackupTexture, () const, Texture*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture* Texture::GetBackupTexture() const", "Texture@+ get_backupTexture() const", AS_METHODPR(Texture, GetBackupTexture, () const, Texture*), AS_CALL_THISCALL));

    // int Texture::GetMipsToSkip(MaterialQuality quality) const
    methods.Push(RegisterObjectMethodArgs("int Texture::GetMipsToSkip(MaterialQuality quality) const", "int GetMipsToSkip(MaterialQuality) const", AS_METHODPR(Texture, GetMipsToSkip, (MaterialQuality) const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Texture::GetMipsToSkip(MaterialQuality quality) const", "int get_mipsToSkip(MaterialQuality) const", AS_METHODPR(Texture, GetMipsToSkip, (MaterialQuality) const, int), AS_CALL_THISCALL));

    // int Texture::GetLevelWidth(unsigned level) const
    methods.Push(RegisterObjectMethodArgs("int Texture::GetLevelWidth(unsigned level) const", "int GetLevelWidth(uint) const", AS_METHODPR(Texture, GetLevelWidth, (unsigned) const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Texture::GetLevelWidth(unsigned level) const", "int get_levelWidth(uint) const", AS_METHODPR(Texture, GetLevelWidth, (unsigned) const, int), AS_CALL_THISCALL));

    // int Texture::GetLevelHeight(unsigned level) const
    methods.Push(RegisterObjectMethodArgs("int Texture::GetLevelHeight(unsigned level) const", "int GetLevelHeight(uint) const", AS_METHODPR(Texture, GetLevelHeight, (unsigned) const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Texture::GetLevelHeight(unsigned level) const", "int get_levelHeight(uint) const", AS_METHODPR(Texture, GetLevelHeight, (unsigned) const, int), AS_CALL_THISCALL));

    // int Texture::GetLevelDepth(unsigned level) const
    methods.Push(RegisterObjectMethodArgs("int Texture::GetLevelDepth(unsigned level) const", "int GetLevelDepth(uint) const", AS_METHODPR(Texture, GetLevelDepth, (unsigned) const, int), AS_CALL_THISCALL));

    // TextureUsage Texture::GetUsage() const
    methods.Push(RegisterObjectMethodArgs("TextureUsage Texture::GetUsage() const", "TextureUsage GetUsage() const", AS_METHODPR(Texture, GetUsage, () const, TextureUsage), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TextureUsage Texture::GetUsage() const", "TextureUsage get_usage() const", AS_METHODPR(Texture, GetUsage, () const, TextureUsage), AS_CALL_THISCALL));

    // unsigned Texture::GetDataSize(int width, int height) const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetDataSize(int width, int height) const", "uint GetDataSize(int, int) const", AS_METHODPR(Texture, GetDataSize, (int, int) const, unsigned), AS_CALL_THISCALL));

    // unsigned Texture::GetDataSize(int width, int height, int depth) const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetDataSize(int width, int height, int depth) const", "uint GetDataSize(int, int, int) const", AS_METHODPR(Texture, GetDataSize, (int, int, int) const, unsigned), AS_CALL_THISCALL));

    // unsigned Texture::GetRowDataSize(int width) const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetRowDataSize(int width) const", "uint GetRowDataSize(int) const", AS_METHODPR(Texture, GetRowDataSize, (int) const, unsigned), AS_CALL_THISCALL));

    // unsigned Texture::GetComponents() const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetComponents() const", "uint GetComponents() const", AS_METHODPR(Texture, GetComponents, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetComponents() const", "uint get_components() const", AS_METHODPR(Texture, GetComponents, () const, unsigned), AS_CALL_THISCALL));

    // bool Texture::GetParametersDirty() const
    methods.Push(RegisterObjectMethodArgs("bool Texture::GetParametersDirty() const", "bool GetParametersDirty() const", AS_METHODPR(Texture, GetParametersDirty, () const, bool), AS_CALL_THISCALL));

    // void Texture::SetParameters(XMLFile* file)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetParameters(XMLFile* file)", "void SetParameters(XMLFile@+)", AS_METHODPR(Texture, SetParameters, (XMLFile*), void), AS_CALL_THISCALL));

    // void Texture::SetParameters(const XMLElement& element)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetParameters(const XMLElement& element)", "void SetParameters(const XMLElement&in)", AS_METHODPR(Texture, SetParameters, (const XMLElement&), void), AS_CALL_THISCALL));

    // void Texture::SetParametersDirty()
    methods.Push(RegisterObjectMethodArgs("void Texture::SetParametersDirty()", "void SetParametersDirty()", AS_METHODPR(Texture, SetParametersDirty, (), void), AS_CALL_THISCALL));

    // void Texture::UpdateParameters()
    methods.Push(RegisterObjectMethodArgs("void Texture::UpdateParameters()", "void UpdateParameters()", AS_METHODPR(Texture, UpdateParameters, (), void), AS_CALL_THISCALL));

    // unsigned Texture::GetTarget() const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture::GetTarget() const", "uint GetTarget() const", AS_METHODPR(Texture, GetTarget, () const, unsigned), AS_CALL_THISCALL));

    // void Texture::SetResolveDirty(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Texture::SetResolveDirty(bool enable)", "void SetResolveDirty(bool)", AS_METHODPR(Texture, SetResolveDirty, (bool), void), AS_CALL_THISCALL));

    // void Texture::SetLevelsDirty()
    methods.Push(RegisterObjectMethodArgs("void Texture::SetLevelsDirty()", "void SetLevelsDirty()", AS_METHODPR(Texture, SetLevelsDirty, (), void), AS_CALL_THISCALL));

    // void Texture::RegenerateLevels()
    methods.Push(RegisterObjectMethodArgs("void Texture::RegenerateLevels()", "void RegenerateLevels()", AS_METHODPR(Texture, RegenerateLevels, (), void), AS_CALL_THISCALL));
}

// SharedPtr<Image> Texture2D::GetImage() const
// SharedPtr<Image> Texture2D::GetImage() const | File: ../Graphics/Texture2D.h
static Image* Texture2D_GetImage_void(Texture2D* ptr)
{
    SharedPtr<Image> result = ptr->GetImage();
    return result.Detach();
}


// class Texture2D | File: ../Graphics/Texture2D.h
void CollectMembers_Texture2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Texture(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");
    Remove(methods, "virtual void GPUObject::OnDeviceLost()");
    Remove(methods, "virtual void GPUObject::OnDeviceReset()");
    Remove(methods, "virtual void GPUObject::Release()");

    // bool Texture2D::GetData(unsigned level, void* dest) const
    // Error: type "void*" can not automatically bind

    // bool Texture2D::SetData(unsigned level, int x, int y, int width, int height, const void* data)
    // Error: type "const void*" can not automatically bind

    // bool Texture2D::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Texture2D::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Texture2D, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Texture2D::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool Texture2D::EndLoad() override", "bool EndLoad()", AS_METHODPR(Texture2D, EndLoad, (), bool), AS_CALL_THISCALL));

    // void Texture2D::OnDeviceLost() override
    methods.Push(RegisterObjectMethodArgs("void Texture2D::OnDeviceLost() override", "void OnDeviceLost()", AS_METHODPR(Texture2D, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // void Texture2D::OnDeviceReset() override
    methods.Push(RegisterObjectMethodArgs("void Texture2D::OnDeviceReset() override", "void OnDeviceReset()", AS_METHODPR(Texture2D, OnDeviceReset, (), void), AS_CALL_THISCALL));

    // void Texture2D::Release() override
    methods.Push(RegisterObjectMethodArgs("void Texture2D::Release() override", "void Release()", AS_METHODPR(Texture2D, Release, (), void), AS_CALL_THISCALL));

    // bool Texture2D::SetSize(int width, int height, unsigned format, TextureUsage usage=TEXTURE_STATIC, int multiSample=1, bool autoResolve=true)
    methods.Push(RegisterObjectMethodArgs("bool Texture2D::SetSize(int width, int height, unsigned format, TextureUsage usage=TEXTURE_STATIC, int multiSample=1, bool autoResolve=true)", "bool SetSize(int, int, uint, TextureUsage = TEXTURE_STATIC, int = 1, bool = true)", AS_METHODPR(Texture2D, SetSize, (int, int, unsigned, TextureUsage, int, bool), bool), AS_CALL_THISCALL));

    // bool Texture2D::SetData(Image* image, bool useAlpha=false)
    methods.Push(RegisterObjectMethodArgs("bool Texture2D::SetData(Image* image, bool useAlpha=false)", "bool SetData(Image@+, bool = false)", AS_METHODPR(Texture2D, SetData, (Image*, bool), bool), AS_CALL_THISCALL));

    // bool Texture2D::GetImage(Image& image) const
    methods.Push(RegisterObjectMethodArgs("bool Texture2D::GetImage(Image& image) const", "bool GetImage(Image&) const", AS_METHODPR(Texture2D, GetImage, (Image&) const, bool), AS_CALL_THISCALL));

    // SharedPtr<Image> Texture2D::GetImage() const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Image> Texture2D::GetImage() const", "Image@+ GetImage() const", AS_FUNCTION_OBJFIRST(Texture2D_GetImage_void), AS_CALL_CDECL_OBJFIRST));

    // RenderSurface* Texture2D::GetRenderSurface() const
    methods.Push(RegisterObjectMethodArgs("RenderSurface* Texture2D::GetRenderSurface() const", "RenderSurface@+ GetRenderSurface() const", AS_METHODPR(Texture2D, GetRenderSurface, () const, RenderSurface*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RenderSurface* Texture2D::GetRenderSurface() const", "RenderSurface@+ get_renderSurface() const", AS_METHODPR(Texture2D, GetRenderSurface, () const, RenderSurface*), AS_CALL_THISCALL));
}

// class Texture2DArray | File: ../Graphics/Texture2DArray.h
void CollectMembers_Texture2DArray(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Texture(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");
    Remove(methods, "virtual void GPUObject::OnDeviceLost()");
    Remove(methods, "virtual void GPUObject::OnDeviceReset()");
    Remove(methods, "virtual void GPUObject::Release()");

    // bool Texture2DArray::GetData(unsigned layer, unsigned level, void* dest) const
    // Error: type "void*" can not automatically bind

    // bool Texture2DArray::SetData(unsigned layer, unsigned level, int x, int y, int width, int height, const void* data)
    // Error: type "const void*" can not automatically bind

    // bool Texture2DArray::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Texture2DArray::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Texture2DArray, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Texture2DArray::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool Texture2DArray::EndLoad() override", "bool EndLoad()", AS_METHODPR(Texture2DArray, EndLoad, (), bool), AS_CALL_THISCALL));

    // void Texture2DArray::OnDeviceLost() override
    methods.Push(RegisterObjectMethodArgs("void Texture2DArray::OnDeviceLost() override", "void OnDeviceLost()", AS_METHODPR(Texture2DArray, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // void Texture2DArray::OnDeviceReset() override
    methods.Push(RegisterObjectMethodArgs("void Texture2DArray::OnDeviceReset() override", "void OnDeviceReset()", AS_METHODPR(Texture2DArray, OnDeviceReset, (), void), AS_CALL_THISCALL));

    // void Texture2DArray::Release() override
    methods.Push(RegisterObjectMethodArgs("void Texture2DArray::Release() override", "void Release()", AS_METHODPR(Texture2DArray, Release, (), void), AS_CALL_THISCALL));

    // void Texture2DArray::SetLayers(unsigned layers)
    methods.Push(RegisterObjectMethodArgs("void Texture2DArray::SetLayers(unsigned layers)", "void SetLayers(uint)", AS_METHODPR(Texture2DArray, SetLayers, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Texture2DArray::SetLayers(unsigned layers)", "void set_layers(uint)", AS_METHODPR(Texture2DArray, SetLayers, (unsigned), void), AS_CALL_THISCALL));

    // bool Texture2DArray::SetSize(unsigned layers, int width, int height, unsigned format, TextureUsage usage=TEXTURE_STATIC)
    methods.Push(RegisterObjectMethodArgs("bool Texture2DArray::SetSize(unsigned layers, int width, int height, unsigned format, TextureUsage usage=TEXTURE_STATIC)", "bool SetSize(uint, int, int, uint, TextureUsage = TEXTURE_STATIC)", AS_METHODPR(Texture2DArray, SetSize, (unsigned, int, int, unsigned, TextureUsage), bool), AS_CALL_THISCALL));

    // bool Texture2DArray::SetData(unsigned layer, Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool Texture2DArray::SetData(unsigned layer, Deserializer& source)", "bool SetData(uint, Deserializer&)", AS_METHODPR(Texture2DArray, SetData, (unsigned, Deserializer&), bool), AS_CALL_THISCALL));

    // bool Texture2DArray::SetData(unsigned layer, Image* image, bool useAlpha=false)
    methods.Push(RegisterObjectMethodArgs("bool Texture2DArray::SetData(unsigned layer, Image* image, bool useAlpha=false)", "bool SetData(uint, Image@+, bool = false)", AS_METHODPR(Texture2DArray, SetData, (unsigned, Image*, bool), bool), AS_CALL_THISCALL));

    // unsigned Texture2DArray::GetLayers() const
    methods.Push(RegisterObjectMethodArgs("unsigned Texture2DArray::GetLayers() const", "uint GetLayers() const", AS_METHODPR(Texture2DArray, GetLayers, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Texture2DArray::GetLayers() const", "uint get_layers() const", AS_METHODPR(Texture2DArray, GetLayers, () const, unsigned), AS_CALL_THISCALL));

    // RenderSurface* Texture2DArray::GetRenderSurface() const
    methods.Push(RegisterObjectMethodArgs("RenderSurface* Texture2DArray::GetRenderSurface() const", "RenderSurface@+ GetRenderSurface() const", AS_METHODPR(Texture2DArray, GetRenderSurface, () const, RenderSurface*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RenderSurface* Texture2DArray::GetRenderSurface() const", "RenderSurface@+ get_renderSurface() const", AS_METHODPR(Texture2DArray, GetRenderSurface, () const, RenderSurface*), AS_CALL_THISCALL));
}

// class Texture3D | File: ../Graphics/Texture3D.h
void CollectMembers_Texture3D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Texture(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");
    Remove(methods, "virtual void GPUObject::OnDeviceLost()");
    Remove(methods, "virtual void GPUObject::OnDeviceReset()");
    Remove(methods, "virtual void GPUObject::Release()");

    // bool Texture3D::GetData(unsigned level, void* dest) const
    // Error: type "void*" can not automatically bind

    // bool Texture3D::SetData(unsigned level, int x, int y, int z, int width, int height, int depth, const void* data)
    // Error: type "const void*" can not automatically bind

    // bool Texture3D::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Texture3D::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Texture3D, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Texture3D::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool Texture3D::EndLoad() override", "bool EndLoad()", AS_METHODPR(Texture3D, EndLoad, (), bool), AS_CALL_THISCALL));

    // void Texture3D::OnDeviceLost() override
    methods.Push(RegisterObjectMethodArgs("void Texture3D::OnDeviceLost() override", "void OnDeviceLost()", AS_METHODPR(Texture3D, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // void Texture3D::OnDeviceReset() override
    methods.Push(RegisterObjectMethodArgs("void Texture3D::OnDeviceReset() override", "void OnDeviceReset()", AS_METHODPR(Texture3D, OnDeviceReset, (), void), AS_CALL_THISCALL));

    // void Texture3D::Release() override
    methods.Push(RegisterObjectMethodArgs("void Texture3D::Release() override", "void Release()", AS_METHODPR(Texture3D, Release, (), void), AS_CALL_THISCALL));

    // bool Texture3D::SetSize(int width, int height, int depth, unsigned format, TextureUsage usage=TEXTURE_STATIC)
    methods.Push(RegisterObjectMethodArgs("bool Texture3D::SetSize(int width, int height, int depth, unsigned format, TextureUsage usage=TEXTURE_STATIC)", "bool SetSize(int, int, int, uint, TextureUsage = TEXTURE_STATIC)", AS_METHODPR(Texture3D, SetSize, (int, int, int, unsigned, TextureUsage), bool), AS_CALL_THISCALL));

    // bool Texture3D::SetData(Image* image, bool useAlpha=false)
    methods.Push(RegisterObjectMethodArgs("bool Texture3D::SetData(Image* image, bool useAlpha=false)", "bool SetData(Image@+, bool = false)", AS_METHODPR(Texture3D, SetData, (Image*, bool), bool), AS_CALL_THISCALL));
}

// SharedPtr<Image> TextureCube::GetImage(CubeMapFace face) const
// SharedPtr<Image> TextureCube::GetImage(CubeMapFace face) const | File: ../Graphics/TextureCube.h
static Image* TextureCube_GetImage_CubeMapFace(TextureCube* ptr, CubeMapFace face)
{
    SharedPtr<Image> result = ptr->GetImage(face);
    return result.Detach();
}


// class TextureCube | File: ../Graphics/TextureCube.h
void CollectMembers_TextureCube(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Texture(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");
    Remove(methods, "virtual void GPUObject::OnDeviceLost()");
    Remove(methods, "virtual void GPUObject::OnDeviceReset()");
    Remove(methods, "virtual void GPUObject::Release()");

    // bool TextureCube::GetData(CubeMapFace face, unsigned level, void* dest) const
    // Error: type "void*" can not automatically bind

    // bool TextureCube::SetData(CubeMapFace face, unsigned level, int x, int y, int width, int height, const void* data)
    // Error: type "const void*" can not automatically bind

    // bool TextureCube::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool TextureCube::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(TextureCube, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool TextureCube::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool TextureCube::EndLoad() override", "bool EndLoad()", AS_METHODPR(TextureCube, EndLoad, (), bool), AS_CALL_THISCALL));

    // void TextureCube::OnDeviceLost() override
    methods.Push(RegisterObjectMethodArgs("void TextureCube::OnDeviceLost() override", "void OnDeviceLost()", AS_METHODPR(TextureCube, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // void TextureCube::OnDeviceReset() override
    methods.Push(RegisterObjectMethodArgs("void TextureCube::OnDeviceReset() override", "void OnDeviceReset()", AS_METHODPR(TextureCube, OnDeviceReset, (), void), AS_CALL_THISCALL));

    // void TextureCube::Release() override
    methods.Push(RegisterObjectMethodArgs("void TextureCube::Release() override", "void Release()", AS_METHODPR(TextureCube, Release, (), void), AS_CALL_THISCALL));

    // bool TextureCube::SetSize(int size, unsigned format, TextureUsage usage=TEXTURE_STATIC, int multiSample=1)
    methods.Push(RegisterObjectMethodArgs("bool TextureCube::SetSize(int size, unsigned format, TextureUsage usage=TEXTURE_STATIC, int multiSample=1)", "bool SetSize(int, uint, TextureUsage = TEXTURE_STATIC, int = 1)", AS_METHODPR(TextureCube, SetSize, (int, unsigned, TextureUsage, int), bool), AS_CALL_THISCALL));

    // bool TextureCube::SetData(CubeMapFace face, Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool TextureCube::SetData(CubeMapFace face, Deserializer& source)", "bool SetData(CubeMapFace, Deserializer&)", AS_METHODPR(TextureCube, SetData, (CubeMapFace, Deserializer&), bool), AS_CALL_THISCALL));

    // bool TextureCube::SetData(CubeMapFace face, Image* image, bool useAlpha=false)
    methods.Push(RegisterObjectMethodArgs("bool TextureCube::SetData(CubeMapFace face, Image* image, bool useAlpha=false)", "bool SetData(CubeMapFace, Image@+, bool = false)", AS_METHODPR(TextureCube, SetData, (CubeMapFace, Image*, bool), bool), AS_CALL_THISCALL));

    // SharedPtr<Image> TextureCube::GetImage(CubeMapFace face) const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<Image> TextureCube::GetImage(CubeMapFace face) const", "Image@+ GetImage(CubeMapFace) const", AS_FUNCTION_OBJFIRST(TextureCube_GetImage_CubeMapFace), AS_CALL_CDECL_OBJFIRST));

    // RenderSurface* TextureCube::GetRenderSurface(CubeMapFace face) const
    methods.Push(RegisterObjectMethodArgs("RenderSurface* TextureCube::GetRenderSurface(CubeMapFace face) const", "RenderSurface@+ GetRenderSurface(CubeMapFace) const", AS_METHODPR(TextureCube, GetRenderSurface, (CubeMapFace) const, RenderSurface*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RenderSurface* TextureCube::GetRenderSurface(CubeMapFace face) const", "RenderSurface@+ get_renderSurfaces(CubeMapFace) const", AS_METHODPR(TextureCube, GetRenderSurface, (CubeMapFace) const, RenderSurface*), AS_CALL_THISCALL));
}

// struct TextureFrame | File: ../Graphics/ParticleEffect.h
void CollectMembers_TextureFrame(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Thread | File: ../Core/Thread.h
void CollectMembers_Thread(Vector<RegisterObjectMethodArgs>& methods)
{
    // virtual void Thread::ThreadFunction()=0
    methods.Push(RegisterObjectMethodArgs("virtual void Thread::ThreadFunction()=0", "void ThreadFunction()", AS_METHODPR(Thread, ThreadFunction, (), void), AS_CALL_THISCALL));

    // bool Thread::Run()
    methods.Push(RegisterObjectMethodArgs("bool Thread::Run()", "bool Run()", AS_METHODPR(Thread, Run, (), bool), AS_CALL_THISCALL));

    // void Thread::Stop()
    methods.Push(RegisterObjectMethodArgs("void Thread::Stop()", "void Stop()", AS_METHODPR(Thread, Stop, (), void), AS_CALL_THISCALL));

    // void Thread::SetPriority(int priority)
    methods.Push(RegisterObjectMethodArgs("void Thread::SetPriority(int priority)", "void SetPriority(int)", AS_METHODPR(Thread, SetPriority, (int), void), AS_CALL_THISCALL));

    // bool Thread::IsStarted() const
    methods.Push(RegisterObjectMethodArgs("bool Thread::IsStarted() const", "bool IsStarted() const", AS_METHODPR(Thread, IsStarted, () const, bool), AS_CALL_THISCALL));
}

// class Time | File: ../Core/Timer.h
void CollectMembers_Time(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Time::BeginFrame(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void Time::BeginFrame(float timeStep)", "void BeginFrame(float)", AS_METHODPR(Time, BeginFrame, (float), void), AS_CALL_THISCALL));

    // void Time::EndFrame()
    methods.Push(RegisterObjectMethodArgs("void Time::EndFrame()", "void EndFrame()", AS_METHODPR(Time, EndFrame, (), void), AS_CALL_THISCALL));

    // void Time::SetTimerPeriod(unsigned mSec)
    methods.Push(RegisterObjectMethodArgs("void Time::SetTimerPeriod(unsigned mSec)", "void SetTimerPeriod(uint)", AS_METHODPR(Time, SetTimerPeriod, (unsigned), void), AS_CALL_THISCALL));

    // unsigned Time::GetFrameNumber() const
    methods.Push(RegisterObjectMethodArgs("unsigned Time::GetFrameNumber() const", "uint GetFrameNumber() const", AS_METHODPR(Time, GetFrameNumber, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Time::GetFrameNumber() const", "uint get_frameNumber() const", AS_METHODPR(Time, GetFrameNumber, () const, unsigned), AS_CALL_THISCALL));

    // float Time::GetTimeStep() const
    methods.Push(RegisterObjectMethodArgs("float Time::GetTimeStep() const", "float GetTimeStep() const", AS_METHODPR(Time, GetTimeStep, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Time::GetTimeStep() const", "float get_timeStep() const", AS_METHODPR(Time, GetTimeStep, () const, float), AS_CALL_THISCALL));

    // unsigned Time::GetTimerPeriod() const
    methods.Push(RegisterObjectMethodArgs("unsigned Time::GetTimerPeriod() const", "uint GetTimerPeriod() const", AS_METHODPR(Time, GetTimerPeriod, () const, unsigned), AS_CALL_THISCALL));

    // float Time::GetElapsedTime()
    methods.Push(RegisterObjectMethodArgs("float Time::GetElapsedTime()", "float GetElapsedTime()", AS_METHODPR(Time, GetElapsedTime, (), float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Time::GetElapsedTime()", "float get_elapsedTime()", AS_METHODPR(Time, GetElapsedTime, (), float), AS_CALL_THISCALL));

    // float Time::GetFramesPerSecond() const
    methods.Push(RegisterObjectMethodArgs("float Time::GetFramesPerSecond() const", "float GetFramesPerSecond() const", AS_METHODPR(Time, GetFramesPerSecond, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Time::GetFramesPerSecond() const", "float get_framesPerSecond() const", AS_METHODPR(Time, GetFramesPerSecond, () const, float), AS_CALL_THISCALL));
}

// class Timer | File: ../Core/Timer.h
void CollectMembers_Timer(Vector<RegisterObjectMethodArgs>& methods)
{
    // unsigned Timer::GetMSec(bool reset)
    methods.Push(RegisterObjectMethodArgs("unsigned Timer::GetMSec(bool reset)", "uint GetMSec(bool)", AS_METHODPR(Timer, GetMSec, (bool), unsigned), AS_CALL_THISCALL));

    // void Timer::Reset()
    methods.Push(RegisterObjectMethodArgs("void Timer::Reset()", "void Reset()", AS_METHODPR(Timer, Reset, (), void), AS_CALL_THISCALL));
}

// class ToolTip | File: ../UI/ToolTip.h
void CollectMembers_ToolTip(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_UIElement(methods);

    Remove(methods, "static void UIElement::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::Update(float timeStep)");

    // void ToolTip::Update(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void ToolTip::Update(float timeStep) override", "void Update(float)", AS_METHODPR(ToolTip, Update, (float), void), AS_CALL_THISCALL));

    // void ToolTip::Reset()
    methods.Push(RegisterObjectMethodArgs("void ToolTip::Reset()", "void Reset()", AS_METHODPR(ToolTip, Reset, (), void), AS_CALL_THISCALL));

    // void ToolTip::AddAltTarget(UIElement* target)
    methods.Push(RegisterObjectMethodArgs("void ToolTip::AddAltTarget(UIElement* target)", "void AddAltTarget(UIElement@+)", AS_METHODPR(ToolTip, AddAltTarget, (UIElement*), void), AS_CALL_THISCALL));

    // void ToolTip::SetDelay(float delay)
    methods.Push(RegisterObjectMethodArgs("void ToolTip::SetDelay(float delay)", "void SetDelay(float)", AS_METHODPR(ToolTip, SetDelay, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ToolTip::SetDelay(float delay)", "void set_delay(float)", AS_METHODPR(ToolTip, SetDelay, (float), void), AS_CALL_THISCALL));

    // float ToolTip::GetDelay() const
    methods.Push(RegisterObjectMethodArgs("float ToolTip::GetDelay() const", "float GetDelay() const", AS_METHODPR(ToolTip, GetDelay, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ToolTip::GetDelay() const", "float get_delay() const", AS_METHODPR(ToolTip, GetDelay, () const, float), AS_CALL_THISCALL));
}

// struct TouchState | File: ../Input/Input.h
void CollectMembers_TouchState(Vector<RegisterObjectMethodArgs>& methods)
{
    // UIElement* TouchState::GetTouchedElement()
    methods.Push(RegisterObjectMethodArgs("UIElement* TouchState::GetTouchedElement()", "UIElement@+ GetTouchedElement()", AS_METHODPR(TouchState, GetTouchedElement, (), UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* TouchState::GetTouchedElement()", "UIElement@+ get_touchedElement()", AS_METHODPR(TouchState, GetTouchedElement, (), UIElement*), AS_CALL_THISCALL));
}

// struct TrailPoint | File: ../Graphics/RibbonTrail.h
void CollectMembers_TrailPoint(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class TypeInfo | File: ../Core/Object.h
void CollectMembers_TypeInfo(Vector<RegisterObjectMethodArgs>& methods)
{
    // const TypeInfo* TypeInfo::GetBaseTypeInfo() const
    // Error: type "TypeInfo" can not automatically bind bacause have @nobind mark

    // bool TypeInfo::IsTypeOf(const TypeInfo* typeInfo) const
    // Error: type "TypeInfo" can not automatically bind bacause have @nobind mark

    // bool TypeInfo::IsTypeOf(StringHash type) const
    methods.Push(RegisterObjectMethodArgs("bool TypeInfo::IsTypeOf(StringHash type) const", "bool IsTypeOf(StringHash) const", AS_METHODPR(TypeInfo, IsTypeOf, (StringHash) const, bool), AS_CALL_THISCALL));

    // StringHash TypeInfo::GetType() const
    methods.Push(RegisterObjectMethodArgs("StringHash TypeInfo::GetType() const", "StringHash GetType() const", AS_METHODPR(TypeInfo, GetType, () const, StringHash), AS_CALL_THISCALL));

    // const String& TypeInfo::GetTypeName() const
    methods.Push(RegisterObjectMethodArgs("const String& TypeInfo::GetTypeName() const", "const String& GetTypeName() const", AS_METHODPR(TypeInfo, GetTypeName, () const, const String&), AS_CALL_THISCALL));
}

// SharedPtr<UIElement> UI::LoadLayout(Deserializer& source, XMLFile* styleFile=nullptr)
// SharedPtr<UIElement> UI::LoadLayout(Deserializer& source, XMLFile* styleFile=nullptr) | File: ../UI/UI.h
static UIElement* UI_LoadLayout_Deserializer_XMLFile(UI* ptr, Deserializer& source, XMLFile* styleFile)
{
    SharedPtr<UIElement> result = ptr->LoadLayout(source, styleFile);
    return result.Detach();
}


// SharedPtr<UIElement> UI::LoadLayout(XMLFile* file, XMLFile* styleFile=nullptr)
// SharedPtr<UIElement> UI::LoadLayout(XMLFile* file, XMLFile* styleFile=nullptr) | File: ../UI/UI.h
static UIElement* UI_LoadLayout_XMLFile_XMLFile(UI* ptr, XMLFile* file, XMLFile* styleFile)
{
    SharedPtr<UIElement> result = ptr->LoadLayout(file, styleFile);
    return result.Detach();
}


// class UI | File: ../UI/UI.h
void CollectMembers_UI(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // const Vector<UIElement*> UI::GetDragElements()
    // Error: type "const Vector<UIElement*>" can not automatically bind

    // void UI::SetCursor(Cursor* cursor)
    methods.Push(RegisterObjectMethodArgs("void UI::SetCursor(Cursor* cursor)", "void SetCursor(Cursor@+)", AS_METHODPR(UI, SetCursor, (Cursor*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetCursor(Cursor* cursor)", "void set_cursor(Cursor@+)", AS_METHODPR(UI, SetCursor, (Cursor*), void), AS_CALL_THISCALL));

    // void UI::SetFocusElement(UIElement* element, bool byKey=false)
    methods.Push(RegisterObjectMethodArgs("void UI::SetFocusElement(UIElement* element, bool byKey=false)", "void SetFocusElement(UIElement@+, bool = false)", AS_METHODPR(UI, SetFocusElement, (UIElement*, bool), void), AS_CALL_THISCALL));

    // bool UI::SetModalElement(UIElement* modalElement, bool enable)
    methods.Push(RegisterObjectMethodArgs("bool UI::SetModalElement(UIElement* modalElement, bool enable)", "bool SetModalElement(UIElement@+, bool)", AS_METHODPR(UI, SetModalElement, (UIElement*, bool), bool), AS_CALL_THISCALL));

    // void UI::Clear()
    methods.Push(RegisterObjectMethodArgs("void UI::Clear()", "void Clear()", AS_METHODPR(UI, Clear, (), void), AS_CALL_THISCALL));

    // void UI::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void UI::Update(float timeStep)", "void Update(float)", AS_METHODPR(UI, Update, (float), void), AS_CALL_THISCALL));

    // void UI::RenderUpdate()
    methods.Push(RegisterObjectMethodArgs("void UI::RenderUpdate()", "void RenderUpdate()", AS_METHODPR(UI, RenderUpdate, (), void), AS_CALL_THISCALL));

    // void UI::Render(bool renderUICommand=false)
    methods.Push(RegisterObjectMethodArgs("void UI::Render(bool renderUICommand=false)", "void Render(bool = false)", AS_METHODPR(UI, Render, (bool), void), AS_CALL_THISCALL));

    // void UI::DebugDraw(UIElement* element)
    methods.Push(RegisterObjectMethodArgs("void UI::DebugDraw(UIElement* element)", "void DebugDraw(UIElement@+)", AS_METHODPR(UI, DebugDraw, (UIElement*), void), AS_CALL_THISCALL));

    // SharedPtr<UIElement> UI::LoadLayout(Deserializer& source, XMLFile* styleFile=nullptr)
    methods.Push(RegisterObjectMethodArgs("SharedPtr<UIElement> UI::LoadLayout(Deserializer& source, XMLFile* styleFile=nullptr)", "UIElement@+ LoadLayout(Deserializer&, XMLFile@+ = null)", AS_FUNCTION_OBJFIRST(UI_LoadLayout_Deserializer_XMLFile), AS_CALL_CDECL_OBJFIRST));

    // SharedPtr<UIElement> UI::LoadLayout(XMLFile* file, XMLFile* styleFile=nullptr)
    methods.Push(RegisterObjectMethodArgs("SharedPtr<UIElement> UI::LoadLayout(XMLFile* file, XMLFile* styleFile=nullptr)", "UIElement@+ LoadLayout(XMLFile@+, XMLFile@+ = null)", AS_FUNCTION_OBJFIRST(UI_LoadLayout_XMLFile_XMLFile), AS_CALL_CDECL_OBJFIRST));

    // bool UI::SaveLayout(Serializer& dest, UIElement* element)
    methods.Push(RegisterObjectMethodArgs("bool UI::SaveLayout(Serializer& dest, UIElement* element)", "bool SaveLayout(Serializer&, UIElement@+)", AS_METHODPR(UI, SaveLayout, (Serializer&, UIElement*), bool), AS_CALL_THISCALL));

    // void UI::SetClipboardText(const String& text)
    methods.Push(RegisterObjectMethodArgs("void UI::SetClipboardText(const String& text)", "void SetClipboardText(const String&in)", AS_METHODPR(UI, SetClipboardText, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetClipboardText(const String& text)", "void set_clipboardText(const String&in)", AS_METHODPR(UI, SetClipboardText, (const String&), void), AS_CALL_THISCALL));

    // void UI::SetDoubleClickInterval(float interval)
    methods.Push(RegisterObjectMethodArgs("void UI::SetDoubleClickInterval(float interval)", "void SetDoubleClickInterval(float)", AS_METHODPR(UI, SetDoubleClickInterval, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetDoubleClickInterval(float interval)", "void set_doubleClickInterval(float)", AS_METHODPR(UI, SetDoubleClickInterval, (float), void), AS_CALL_THISCALL));

    // void UI::SetMaxDoubleClickDistance(float distPixels)
    methods.Push(RegisterObjectMethodArgs("void UI::SetMaxDoubleClickDistance(float distPixels)", "void SetMaxDoubleClickDistance(float)", AS_METHODPR(UI, SetMaxDoubleClickDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetMaxDoubleClickDistance(float distPixels)", "void set_maxDoubleClickDistance(float)", AS_METHODPR(UI, SetMaxDoubleClickDistance, (float), void), AS_CALL_THISCALL));

    // void UI::SetDragBeginInterval(float interval)
    methods.Push(RegisterObjectMethodArgs("void UI::SetDragBeginInterval(float interval)", "void SetDragBeginInterval(float)", AS_METHODPR(UI, SetDragBeginInterval, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetDragBeginInterval(float interval)", "void set_dragBeginInterval(float)", AS_METHODPR(UI, SetDragBeginInterval, (float), void), AS_CALL_THISCALL));

    // void UI::SetDragBeginDistance(int pixels)
    methods.Push(RegisterObjectMethodArgs("void UI::SetDragBeginDistance(int pixels)", "void SetDragBeginDistance(int)", AS_METHODPR(UI, SetDragBeginDistance, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetDragBeginDistance(int pixels)", "void set_dragBeginDistance(int)", AS_METHODPR(UI, SetDragBeginDistance, (int), void), AS_CALL_THISCALL));

    // void UI::SetDefaultToolTipDelay(float delay)
    methods.Push(RegisterObjectMethodArgs("void UI::SetDefaultToolTipDelay(float delay)", "void SetDefaultToolTipDelay(float)", AS_METHODPR(UI, SetDefaultToolTipDelay, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetDefaultToolTipDelay(float delay)", "void set_defaultToolTipDelay(float)", AS_METHODPR(UI, SetDefaultToolTipDelay, (float), void), AS_CALL_THISCALL));

    // void UI::SetMaxFontTextureSize(int size)
    methods.Push(RegisterObjectMethodArgs("void UI::SetMaxFontTextureSize(int size)", "void SetMaxFontTextureSize(int)", AS_METHODPR(UI, SetMaxFontTextureSize, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetMaxFontTextureSize(int size)", "void set_maxFontTextureSize(int)", AS_METHODPR(UI, SetMaxFontTextureSize, (int), void), AS_CALL_THISCALL));

    // void UI::SetNonFocusedMouseWheel(bool nonFocusedMouseWheel)
    methods.Push(RegisterObjectMethodArgs("void UI::SetNonFocusedMouseWheel(bool nonFocusedMouseWheel)", "void SetNonFocusedMouseWheel(bool)", AS_METHODPR(UI, SetNonFocusedMouseWheel, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetNonFocusedMouseWheel(bool nonFocusedMouseWheel)", "void set_nonFocusedMouseWheel(bool)", AS_METHODPR(UI, SetNonFocusedMouseWheel, (bool), void), AS_CALL_THISCALL));

    // void UI::SetUseSystemClipboard(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UI::SetUseSystemClipboard(bool enable)", "void SetUseSystemClipboard(bool)", AS_METHODPR(UI, SetUseSystemClipboard, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetUseSystemClipboard(bool enable)", "void set_useSystemClipboard(bool)", AS_METHODPR(UI, SetUseSystemClipboard, (bool), void), AS_CALL_THISCALL));

    // void UI::SetUseScreenKeyboard(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UI::SetUseScreenKeyboard(bool enable)", "void SetUseScreenKeyboard(bool)", AS_METHODPR(UI, SetUseScreenKeyboard, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetUseScreenKeyboard(bool enable)", "void set_useScreenKeyboard(bool)", AS_METHODPR(UI, SetUseScreenKeyboard, (bool), void), AS_CALL_THISCALL));

    // void UI::SetUseMutableGlyphs(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UI::SetUseMutableGlyphs(bool enable)", "void SetUseMutableGlyphs(bool)", AS_METHODPR(UI, SetUseMutableGlyphs, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetUseMutableGlyphs(bool enable)", "void set_useMutableGlyphs(bool)", AS_METHODPR(UI, SetUseMutableGlyphs, (bool), void), AS_CALL_THISCALL));

    // void UI::SetForceAutoHint(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UI::SetForceAutoHint(bool enable)", "void SetForceAutoHint(bool)", AS_METHODPR(UI, SetForceAutoHint, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetForceAutoHint(bool enable)", "void set_forceAutoHint(bool)", AS_METHODPR(UI, SetForceAutoHint, (bool), void), AS_CALL_THISCALL));

    // void UI::SetFontHintLevel(FontHintLevel level)
    methods.Push(RegisterObjectMethodArgs("void UI::SetFontHintLevel(FontHintLevel level)", "void SetFontHintLevel(FontHintLevel)", AS_METHODPR(UI, SetFontHintLevel, (FontHintLevel), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetFontHintLevel(FontHintLevel level)", "void set_fontHintLevel(FontHintLevel)", AS_METHODPR(UI, SetFontHintLevel, (FontHintLevel), void), AS_CALL_THISCALL));

    // void UI::SetFontSubpixelThreshold(float threshold)
    methods.Push(RegisterObjectMethodArgs("void UI::SetFontSubpixelThreshold(float threshold)", "void SetFontSubpixelThreshold(float)", AS_METHODPR(UI, SetFontSubpixelThreshold, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetFontSubpixelThreshold(float threshold)", "void set_fontSubpixelThreshold(float)", AS_METHODPR(UI, SetFontSubpixelThreshold, (float), void), AS_CALL_THISCALL));

    // void UI::SetFontOversampling(int oversampling)
    methods.Push(RegisterObjectMethodArgs("void UI::SetFontOversampling(int oversampling)", "void SetFontOversampling(int)", AS_METHODPR(UI, SetFontOversampling, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetFontOversampling(int oversampling)", "void set_fontOversampling(int)", AS_METHODPR(UI, SetFontOversampling, (int), void), AS_CALL_THISCALL));

    // void UI::SetScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void UI::SetScale(float scale)", "void SetScale(float)", AS_METHODPR(UI, SetScale, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetScale(float scale)", "void set_scale(float)", AS_METHODPR(UI, SetScale, (float), void), AS_CALL_THISCALL));

    // void UI::SetWidth(float width)
    methods.Push(RegisterObjectMethodArgs("void UI::SetWidth(float width)", "void SetWidth(float)", AS_METHODPR(UI, SetWidth, (float), void), AS_CALL_THISCALL));

    // void UI::SetHeight(float height)
    methods.Push(RegisterObjectMethodArgs("void UI::SetHeight(float height)", "void SetHeight(float)", AS_METHODPR(UI, SetHeight, (float), void), AS_CALL_THISCALL));

    // void UI::SetCustomSize(const IntVector2& size)
    methods.Push(RegisterObjectMethodArgs("void UI::SetCustomSize(const IntVector2& size)", "void SetCustomSize(const IntVector2&in)", AS_METHODPR(UI, SetCustomSize, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UI::SetCustomSize(const IntVector2& size)", "void set_customSize(const IntVector2&in)", AS_METHODPR(UI, SetCustomSize, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UI::SetCustomSize(int width, int height)
    methods.Push(RegisterObjectMethodArgs("void UI::SetCustomSize(int width, int height)", "void SetCustomSize(int, int)", AS_METHODPR(UI, SetCustomSize, (int, int), void), AS_CALL_THISCALL));

    // UIElement* UI::GetRoot() const
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetRoot() const", "UIElement@+ GetRoot() const", AS_METHODPR(UI, GetRoot, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetRoot() const", "UIElement@+ get_root() const", AS_METHODPR(UI, GetRoot, () const, UIElement*), AS_CALL_THISCALL));

    // UIElement* UI::GetRootModalElement() const
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetRootModalElement() const", "UIElement@+ GetRootModalElement() const", AS_METHODPR(UI, GetRootModalElement, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetRootModalElement() const", "UIElement@+ get_modalRoot() const", AS_METHODPR(UI, GetRootModalElement, () const, UIElement*), AS_CALL_THISCALL));

    // Cursor* UI::GetCursor() const
    methods.Push(RegisterObjectMethodArgs("Cursor* UI::GetCursor() const", "Cursor@+ GetCursor() const", AS_METHODPR(UI, GetCursor, () const, Cursor*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Cursor* UI::GetCursor() const", "Cursor@+ get_cursor() const", AS_METHODPR(UI, GetCursor, () const, Cursor*), AS_CALL_THISCALL));

    // IntVector2 UI::GetCursorPosition() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 UI::GetCursorPosition() const", "IntVector2 GetCursorPosition() const", AS_METHODPR(UI, GetCursorPosition, () const, IntVector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector2 UI::GetCursorPosition() const", "IntVector2 get_cursorPosition() const", AS_METHODPR(UI, GetCursorPosition, () const, IntVector2), AS_CALL_THISCALL));

    // UIElement* UI::GetElementAt(const IntVector2& position, bool enabledOnly=true)
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetElementAt(const IntVector2& position, bool enabledOnly=true)", "UIElement@+ GetElementAt(const IntVector2&in, bool = true)", AS_METHODPR(UI, GetElementAt, (const IntVector2&, bool), UIElement*), AS_CALL_THISCALL));

    // UIElement* UI::GetElementAt(int x, int y, bool enabledOnly=true)
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetElementAt(int x, int y, bool enabledOnly=true)", "UIElement@+ GetElementAt(int, int, bool = true)", AS_METHODPR(UI, GetElementAt, (int, int, bool), UIElement*), AS_CALL_THISCALL));

    // UIElement* UI::GetElementAt(UIElement* root, const IntVector2& position, bool enabledOnly=true)
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetElementAt(UIElement* root, const IntVector2& position, bool enabledOnly=true)", "UIElement@+ GetElementAt(UIElement@+, const IntVector2&in, bool = true)", AS_METHODPR(UI, GetElementAt, (UIElement*, const IntVector2&, bool), UIElement*), AS_CALL_THISCALL));

    // IntVector2 UI::ConvertSystemToUI(const IntVector2& systemPos) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 UI::ConvertSystemToUI(const IntVector2& systemPos) const", "IntVector2 ConvertSystemToUI(const IntVector2&in) const", AS_METHODPR(UI, ConvertSystemToUI, (const IntVector2&) const, IntVector2), AS_CALL_THISCALL));

    // IntVector2 UI::ConvertUIToSystem(const IntVector2& uiPos) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 UI::ConvertUIToSystem(const IntVector2& uiPos) const", "IntVector2 ConvertUIToSystem(const IntVector2&in) const", AS_METHODPR(UI, ConvertUIToSystem, (const IntVector2&) const, IntVector2), AS_CALL_THISCALL));

    // UIElement* UI::GetFocusElement() const
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetFocusElement() const", "UIElement@+ GetFocusElement() const", AS_METHODPR(UI, GetFocusElement, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetFocusElement() const", "UIElement@+ get_focusElement() const", AS_METHODPR(UI, GetFocusElement, () const, UIElement*), AS_CALL_THISCALL));

    // UIElement* UI::GetFrontElement() const
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetFrontElement() const", "UIElement@+ GetFrontElement() const", AS_METHODPR(UI, GetFrontElement, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetFrontElement() const", "UIElement@+ get_frontElement() const", AS_METHODPR(UI, GetFrontElement, () const, UIElement*), AS_CALL_THISCALL));

    // unsigned UI::GetNumDragElements() const
    methods.Push(RegisterObjectMethodArgs("unsigned UI::GetNumDragElements() const", "uint GetNumDragElements() const", AS_METHODPR(UI, GetNumDragElements, () const, unsigned), AS_CALL_THISCALL));

    // UIElement* UI::GetDragElement(unsigned index)
    methods.Push(RegisterObjectMethodArgs("UIElement* UI::GetDragElement(unsigned index)", "UIElement@+ GetDragElement(uint)", AS_METHODPR(UI, GetDragElement, (unsigned), UIElement*), AS_CALL_THISCALL));

    // const String& UI::GetClipboardText() const
    methods.Push(RegisterObjectMethodArgs("const String& UI::GetClipboardText() const", "const String& GetClipboardText() const", AS_METHODPR(UI, GetClipboardText, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& UI::GetClipboardText() const", "const String& get_clipboardText() const", AS_METHODPR(UI, GetClipboardText, () const, const String&), AS_CALL_THISCALL));

    // float UI::GetDoubleClickInterval() const
    methods.Push(RegisterObjectMethodArgs("float UI::GetDoubleClickInterval() const", "float GetDoubleClickInterval() const", AS_METHODPR(UI, GetDoubleClickInterval, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float UI::GetDoubleClickInterval() const", "float get_doubleClickInterval() const", AS_METHODPR(UI, GetDoubleClickInterval, () const, float), AS_CALL_THISCALL));

    // float UI::GetMaxDoubleClickDistance() const
    methods.Push(RegisterObjectMethodArgs("float UI::GetMaxDoubleClickDistance() const", "float GetMaxDoubleClickDistance() const", AS_METHODPR(UI, GetMaxDoubleClickDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float UI::GetMaxDoubleClickDistance() const", "float get_maxDoubleClickDistance() const", AS_METHODPR(UI, GetMaxDoubleClickDistance, () const, float), AS_CALL_THISCALL));

    // float UI::GetDragBeginInterval() const
    methods.Push(RegisterObjectMethodArgs("float UI::GetDragBeginInterval() const", "float GetDragBeginInterval() const", AS_METHODPR(UI, GetDragBeginInterval, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float UI::GetDragBeginInterval() const", "float get_dragBeginInterval() const", AS_METHODPR(UI, GetDragBeginInterval, () const, float), AS_CALL_THISCALL));

    // int UI::GetDragBeginDistance() const
    methods.Push(RegisterObjectMethodArgs("int UI::GetDragBeginDistance() const", "int GetDragBeginDistance() const", AS_METHODPR(UI, GetDragBeginDistance, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UI::GetDragBeginDistance() const", "int get_dragBeginDistance() const", AS_METHODPR(UI, GetDragBeginDistance, () const, int), AS_CALL_THISCALL));

    // float UI::GetDefaultToolTipDelay() const
    methods.Push(RegisterObjectMethodArgs("float UI::GetDefaultToolTipDelay() const", "float GetDefaultToolTipDelay() const", AS_METHODPR(UI, GetDefaultToolTipDelay, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float UI::GetDefaultToolTipDelay() const", "float get_defaultToolTipDelay() const", AS_METHODPR(UI, GetDefaultToolTipDelay, () const, float), AS_CALL_THISCALL));

    // int UI::GetMaxFontTextureSize() const
    methods.Push(RegisterObjectMethodArgs("int UI::GetMaxFontTextureSize() const", "int GetMaxFontTextureSize() const", AS_METHODPR(UI, GetMaxFontTextureSize, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UI::GetMaxFontTextureSize() const", "int get_maxFontTextureSize() const", AS_METHODPR(UI, GetMaxFontTextureSize, () const, int), AS_CALL_THISCALL));

    // bool UI::IsNonFocusedMouseWheel() const
    methods.Push(RegisterObjectMethodArgs("bool UI::IsNonFocusedMouseWheel() const", "bool IsNonFocusedMouseWheel() const", AS_METHODPR(UI, IsNonFocusedMouseWheel, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UI::IsNonFocusedMouseWheel() const", "bool get_nonFocusedMouseWheel() const", AS_METHODPR(UI, IsNonFocusedMouseWheel, () const, bool), AS_CALL_THISCALL));

    // bool UI::GetUseSystemClipboard() const
    methods.Push(RegisterObjectMethodArgs("bool UI::GetUseSystemClipboard() const", "bool GetUseSystemClipboard() const", AS_METHODPR(UI, GetUseSystemClipboard, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UI::GetUseSystemClipboard() const", "bool get_useSystemClipboard() const", AS_METHODPR(UI, GetUseSystemClipboard, () const, bool), AS_CALL_THISCALL));

    // bool UI::GetUseScreenKeyboard() const
    methods.Push(RegisterObjectMethodArgs("bool UI::GetUseScreenKeyboard() const", "bool GetUseScreenKeyboard() const", AS_METHODPR(UI, GetUseScreenKeyboard, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UI::GetUseScreenKeyboard() const", "bool get_useScreenKeyboard() const", AS_METHODPR(UI, GetUseScreenKeyboard, () const, bool), AS_CALL_THISCALL));

    // bool UI::GetUseMutableGlyphs() const
    methods.Push(RegisterObjectMethodArgs("bool UI::GetUseMutableGlyphs() const", "bool GetUseMutableGlyphs() const", AS_METHODPR(UI, GetUseMutableGlyphs, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UI::GetUseMutableGlyphs() const", "bool get_useMutableGlyphs() const", AS_METHODPR(UI, GetUseMutableGlyphs, () const, bool), AS_CALL_THISCALL));

    // bool UI::GetForceAutoHint() const
    methods.Push(RegisterObjectMethodArgs("bool UI::GetForceAutoHint() const", "bool GetForceAutoHint() const", AS_METHODPR(UI, GetForceAutoHint, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UI::GetForceAutoHint() const", "bool get_forceAutoHint() const", AS_METHODPR(UI, GetForceAutoHint, () const, bool), AS_CALL_THISCALL));

    // FontHintLevel UI::GetFontHintLevel() const
    methods.Push(RegisterObjectMethodArgs("FontHintLevel UI::GetFontHintLevel() const", "FontHintLevel GetFontHintLevel() const", AS_METHODPR(UI, GetFontHintLevel, () const, FontHintLevel), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FontHintLevel UI::GetFontHintLevel() const", "FontHintLevel get_fontHintLevel() const", AS_METHODPR(UI, GetFontHintLevel, () const, FontHintLevel), AS_CALL_THISCALL));

    // float UI::GetFontSubpixelThreshold() const
    methods.Push(RegisterObjectMethodArgs("float UI::GetFontSubpixelThreshold() const", "float GetFontSubpixelThreshold() const", AS_METHODPR(UI, GetFontSubpixelThreshold, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float UI::GetFontSubpixelThreshold() const", "float get_fontSubpixelThreshold() const", AS_METHODPR(UI, GetFontSubpixelThreshold, () const, float), AS_CALL_THISCALL));

    // int UI::GetFontOversampling() const
    methods.Push(RegisterObjectMethodArgs("int UI::GetFontOversampling() const", "int GetFontOversampling() const", AS_METHODPR(UI, GetFontOversampling, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UI::GetFontOversampling() const", "int get_fontOversampling() const", AS_METHODPR(UI, GetFontOversampling, () const, int), AS_CALL_THISCALL));

    // bool UI::HasModalElement() const
    methods.Push(RegisterObjectMethodArgs("bool UI::HasModalElement() const", "bool HasModalElement() const", AS_METHODPR(UI, HasModalElement, () const, bool), AS_CALL_THISCALL));

    // bool UI::IsDragging() const
    methods.Push(RegisterObjectMethodArgs("bool UI::IsDragging() const", "bool IsDragging() const", AS_METHODPR(UI, IsDragging, () const, bool), AS_CALL_THISCALL));

    // float UI::GetScale() const
    methods.Push(RegisterObjectMethodArgs("float UI::GetScale() const", "float GetScale() const", AS_METHODPR(UI, GetScale, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float UI::GetScale() const", "float get_scale() const", AS_METHODPR(UI, GetScale, () const, float), AS_CALL_THISCALL));

    // const IntVector2& UI::GetCustomSize() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UI::GetCustomSize() const", "const IntVector2& GetCustomSize() const", AS_METHODPR(UI, GetCustomSize, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UI::GetCustomSize() const", "const IntVector2& get_customSize() const", AS_METHODPR(UI, GetCustomSize, () const, const IntVector2&), AS_CALL_THISCALL));

    // void UI::SetElementRenderTexture(UIElement* element, Texture2D* texture)
    methods.Push(RegisterObjectMethodArgs("void UI::SetElementRenderTexture(UIElement* element, Texture2D* texture)", "void SetElementRenderTexture(UIElement@+, Texture2D@+)", AS_METHODPR(UI, SetElementRenderTexture, (UIElement*, Texture2D*), void), AS_CALL_THISCALL));
}

// class UIBatch | File: ../UI/UIBatch.h
void CollectMembers_UIBatch(Vector<RegisterObjectMethodArgs>& methods)
{
    // void UIBatch::SetColor(const Color& color, bool overrideAlpha=false)
    methods.Push(RegisterObjectMethodArgs("void UIBatch::SetColor(const Color& color, bool overrideAlpha=false)", "void SetColor(const Color&in, bool = false)", AS_METHODPR(UIBatch, SetColor, (const Color&, bool), void), AS_CALL_THISCALL));

    // void UIBatch::SetDefaultColor()
    methods.Push(RegisterObjectMethodArgs("void UIBatch::SetDefaultColor()", "void SetDefaultColor()", AS_METHODPR(UIBatch, SetDefaultColor, (), void), AS_CALL_THISCALL));

    // void UIBatch::AddQuad(float x, float y, float width, float height, int texOffsetX, int texOffsetY, int texWidth=0, int texHeight=0)
    methods.Push(RegisterObjectMethodArgs("void UIBatch::AddQuad(float x, float y, float width, float height, int texOffsetX, int texOffsetY, int texWidth=0, int texHeight=0)", "void AddQuad(float, float, float, float, int, int, int = 0, int = 0)", AS_METHODPR(UIBatch, AddQuad, (float, float, float, float, int, int, int, int), void), AS_CALL_THISCALL));

    // void UIBatch::AddQuad(const Matrix3x4& transform, int x, int y, int width, int height, int texOffsetX, int texOffsetY, int texWidth=0, int texHeight=0)
    methods.Push(RegisterObjectMethodArgs("void UIBatch::AddQuad(const Matrix3x4& transform, int x, int y, int width, int height, int texOffsetX, int texOffsetY, int texWidth=0, int texHeight=0)", "void AddQuad(const Matrix3x4&in, int, int, int, int, int, int, int = 0, int = 0)", AS_METHODPR(UIBatch, AddQuad, (const Matrix3x4&, int, int, int, int, int, int, int, int), void), AS_CALL_THISCALL));

    // void UIBatch::AddQuad(int x, int y, int width, int height, int texOffsetX, int texOffsetY, int texWidth, int texHeight, bool tiled)
    methods.Push(RegisterObjectMethodArgs("void UIBatch::AddQuad(int x, int y, int width, int height, int texOffsetX, int texOffsetY, int texWidth, int texHeight, bool tiled)", "void AddQuad(int, int, int, int, int, int, int, int, bool)", AS_METHODPR(UIBatch, AddQuad, (int, int, int, int, int, int, int, int, bool), void), AS_CALL_THISCALL));

    // void UIBatch::AddQuad(const Matrix3x4& transform, const IntVector2& a, const IntVector2& b, const IntVector2& c, const IntVector2& d, const IntVector2& texA, const IntVector2& texB, const IntVector2& texC, const IntVector2& texD)
    methods.Push(RegisterObjectMethodArgs("void UIBatch::AddQuad(const Matrix3x4& transform, const IntVector2& a, const IntVector2& b, const IntVector2& c, const IntVector2& d, const IntVector2& texA, const IntVector2& texB, const IntVector2& texC, const IntVector2& texD)", "void AddQuad(const Matrix3x4&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in)", AS_METHODPR(UIBatch, AddQuad, (const Matrix3x4&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // void UIBatch::AddQuad(const Matrix3x4& transform, const IntVector2& a, const IntVector2& b, const IntVector2& c, const IntVector2& d, const IntVector2& texA, const IntVector2& texB, const IntVector2& texC, const IntVector2& texD, const Color& colA, const Color& colB, const Color& colC, const Color& colD)
    methods.Push(RegisterObjectMethodArgs("void UIBatch::AddQuad(const Matrix3x4& transform, const IntVector2& a, const IntVector2& b, const IntVector2& c, const IntVector2& d, const IntVector2& texA, const IntVector2& texB, const IntVector2& texC, const IntVector2& texD, const Color& colA, const Color& colB, const Color& colC, const Color& colD)", "void AddQuad(const Matrix3x4&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const IntVector2&in, const Color&in, const Color&in, const Color&in, const Color&in)", AS_METHODPR(UIBatch, AddQuad, (const Matrix3x4&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const Color&, const Color&, const Color&, const Color&), void), AS_CALL_THISCALL));

    // bool UIBatch::Merge(const UIBatch& batch)
    methods.Push(RegisterObjectMethodArgs("bool UIBatch::Merge(const UIBatch& batch)", "bool Merge(const UIBatch&in)", AS_METHODPR(UIBatch, Merge, (const UIBatch&), bool), AS_CALL_THISCALL));

    // unsigned UIBatch::GetInterpolatedColor(float x, float y)
    methods.Push(RegisterObjectMethodArgs("unsigned UIBatch::GetInterpolatedColor(float x, float y)", "uint GetInterpolatedColor(float, float)", AS_METHODPR(UIBatch, GetInterpolatedColor, (float, float), unsigned), AS_CALL_THISCALL));
}

// class UIComponent | File: ../UI/UIComponent.h
void CollectMembers_UIComponent(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");

    // UIElement* UIComponent::GetRoot() const
    methods.Push(RegisterObjectMethodArgs("UIElement* UIComponent::GetRoot() const", "UIElement@+ GetRoot() const", AS_METHODPR(UIComponent, GetRoot, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* UIComponent::GetRoot() const", "UIElement@+ get_root() const", AS_METHODPR(UIComponent, GetRoot, () const, UIElement*), AS_CALL_THISCALL));

    // Material* UIComponent::GetMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* UIComponent::GetMaterial() const", "Material@+ GetMaterial() const", AS_METHODPR(UIComponent, GetMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* UIComponent::GetMaterial() const", "Material@+ get_material() const", AS_METHODPR(UIComponent, GetMaterial, () const, Material*), AS_CALL_THISCALL));

    // Texture2D* UIComponent::GetTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture2D* UIComponent::GetTexture() const", "Texture2D@+ GetTexture() const", AS_METHODPR(UIComponent, GetTexture, () const, Texture2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture2D* UIComponent::GetTexture() const", "Texture2D@+ get_texture() const", AS_METHODPR(UIComponent, GetTexture, () const, Texture2D*), AS_CALL_THISCALL));

    // void UIComponent::SetViewportIndex(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void UIComponent::SetViewportIndex(unsigned index)", "void SetViewportIndex(uint)", AS_METHODPR(UIComponent, SetViewportIndex, (unsigned), void), AS_CALL_THISCALL));
}

// void UIElement::SetTags(const StringVector& tags)
// void UIElement::SetTags(const StringVector& tags) | File: ../UI/UIElement.h
static void UIElement_SetTags_StringVector(UIElement* ptr, CScriptArray* tags_conv)
{
    StringVector tags = ArrayToVector<String>(tags_conv);
    ptr->SetTags(tags);
}


// void UIElement::AddTags(const StringVector& tags)
// void UIElement::AddTags(const StringVector& tags) | File: ../UI/UIElement.h
static void UIElement_AddTags_StringVector(UIElement* ptr, CScriptArray* tags_conv)
{
    StringVector tags = ArrayToVector<String>(tags_conv);
    ptr->AddTags(tags);
}


// const Vector<SharedPtr<UIElement>>& UIElement::GetChildren() const
// const Vector<SharedPtr<UIElement>>& UIElement::GetChildren() const | File: ../UI/UIElement.h
static CScriptArray* UIElement_GetChildren_void(UIElement* ptr)
{
    const Vector<SharedPtr<UIElement>>& result = ptr->GetChildren();
    return VectorToHandleArray(result, "Array<UIElement@>");
}


// PODVector<UIElement*> UIElement::GetChildren(bool recursive) const
// PODVector<UIElement*> UIElement::GetChildren(bool recursive) const | File: ../UI/UIElement.h
static CScriptArray* UIElement_GetChildren_bool(UIElement* ptr, bool recursive)
{
    PODVector<UIElement*> result = ptr->GetChildren(recursive);
    return VectorToHandleArray(result, "Array<UIElement@>");
}


// const StringVector& UIElement::GetTags() const
// const StringVector& UIElement::GetTags() const | File: ../UI/UIElement.h
static CScriptArray* UIElement_GetTags_void(UIElement* ptr)
{
    const StringVector& result = ptr->GetTags();
    return VectorToArray<String>(result, "Array<String>");
}


// PODVector<UIElement*> UIElement::GetChildrenWithTag(const String& tag, bool recursive=false) const
// PODVector<UIElement*> UIElement::GetChildrenWithTag(const String& tag, bool recursive=false) const | File: ../UI/UIElement.h
static CScriptArray* UIElement_GetChildrenWithTag_String_bool(UIElement* ptr, const String& tag, bool recursive)
{
    PODVector<UIElement*> result = ptr->GetChildrenWithTag(tag, recursive);
    return VectorToHandleArray(result, "Array<UIElement@>");
}


// class UIElement | File: ../UI/UIElement.h
void CollectMembers_UIElement(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Animatable(methods);

    Remove(methods, "bool Animatable::LoadXML(const XMLElement& source) override");
    Remove(methods, "bool Animatable::SaveXML(XMLElement& dest) const override");
    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // virtual void UIElement::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor)
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void UIElement::GetBatchesWithOffset(IntVector2& offset, PODVector<UIBatch>& batches, PODVector<float>& vertexData, IntRect currentScissor)
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void UIElement::GetChildren(PODVector<UIElement*>& dest, bool recursive=false) const
    // Error: type "PODVector<UIElement*>&" can not automatically bind

    // void UIElement::GetChildrenWithTag(PODVector<UIElement*>& dest, const String& tag, bool recursive=false) const
    // Error: type "PODVector<UIElement*>&" can not automatically bind

    // virtual void UIElement::GetDebugDrawBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor)
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void UIElement::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void UIElement::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(UIElement, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // bool UIElement::LoadXML(const XMLElement& source) override
    methods.Push(RegisterObjectMethodArgs("bool UIElement::LoadXML(const XMLElement& source) override", "bool LoadXML(const XMLElement&in)", AS_METHODPR(UIElement, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // virtual bool UIElement::LoadXML(const XMLElement& source, XMLFile* styleFile)
    methods.Push(RegisterObjectMethodArgs("virtual bool UIElement::LoadXML(const XMLElement& source, XMLFile* styleFile)", "bool LoadXML(const XMLElement&in, XMLFile@+)", AS_METHODPR(UIElement, LoadXML, (const XMLElement&, XMLFile*), bool), AS_CALL_THISCALL));

    // virtual UIElement* UIElement::LoadChildXML(const XMLElement& childElem, XMLFile* styleFile)
    methods.Push(RegisterObjectMethodArgs("virtual UIElement* UIElement::LoadChildXML(const XMLElement& childElem, XMLFile* styleFile)", "UIElement@+ LoadChildXML(const XMLElement&in, XMLFile@+)", AS_METHODPR(UIElement, LoadChildXML, (const XMLElement&, XMLFile*), UIElement*), AS_CALL_THISCALL));

    // bool UIElement::SaveXML(XMLElement& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool UIElement::SaveXML(XMLElement& dest) const override", "bool SaveXML(XMLElement&) const", AS_METHODPR(UIElement, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // virtual void UIElement::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::Update(float timeStep)", "void Update(float)", AS_METHODPR(UIElement, Update, (float), void), AS_CALL_THISCALL));

    // virtual bool UIElement::IsWithinScissor(const IntRect& currentScissor)
    methods.Push(RegisterObjectMethodArgs("virtual bool UIElement::IsWithinScissor(const IntRect& currentScissor)", "bool IsWithinScissor(const IntRect&in)", AS_METHODPR(UIElement, IsWithinScissor, (const IntRect&), bool), AS_CALL_THISCALL));

    // virtual const IntVector2& UIElement::GetScreenPosition() const
    methods.Push(RegisterObjectMethodArgs("virtual const IntVector2& UIElement::GetScreenPosition() const", "const IntVector2& GetScreenPosition() const", AS_METHODPR(UIElement, GetScreenPosition, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("virtual const IntVector2& UIElement::GetScreenPosition() const", "const IntVector2& get_screenPosition() const", AS_METHODPR(UIElement, GetScreenPosition, () const, const IntVector2&), AS_CALL_THISCALL));

    // virtual void UIElement::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)", "void OnHover(const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(UIElement, OnHover, (const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnClickBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)", "void OnClickBegin(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(UIElement, OnClickBegin, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnClickEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor, UIElement* beginElement)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnClickEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor, UIElement* beginElement)", "void OnClickEnd(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+, UIElement@+)", AS_METHODPR(UIElement, OnClickEnd, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*, UIElement*), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnDoubleClick(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnDoubleClick(const IntVector2& position, const IntVector2& screenPosition, MouseButton button, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)", "void OnDoubleClick(const IntVector2&in, const IntVector2&in, MouseButton, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(UIElement, OnDoubleClick, (const IntVector2&, const IntVector2&, MouseButton, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)", "void OnDragBegin(const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(UIElement, OnDragBegin, (const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)", "void OnDragMove(const IntVector2&in, const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(UIElement, OnDragMove, (const IntVector2&, const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnDragEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags releaseButtons, Cursor* cursor)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnDragEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags releaseButtons, Cursor* cursor)", "void OnDragEnd(const IntVector2&in, const IntVector2&in, MouseButtonFlags, MouseButtonFlags, Cursor@+)", AS_METHODPR(UIElement, OnDragEnd, (const IntVector2&, const IntVector2&, MouseButtonFlags, MouseButtonFlags, Cursor*), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnDragCancel(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags cancelButtons, Cursor* cursor)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnDragCancel(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags cancelButtons, Cursor* cursor)", "void OnDragCancel(const IntVector2&in, const IntVector2&in, MouseButtonFlags, MouseButtonFlags, Cursor@+)", AS_METHODPR(UIElement, OnDragCancel, (const IntVector2&, const IntVector2&, MouseButtonFlags, MouseButtonFlags, Cursor*), void), AS_CALL_THISCALL));

    // virtual bool UIElement::OnDragDropTest(UIElement* source)
    methods.Push(RegisterObjectMethodArgs("virtual bool UIElement::OnDragDropTest(UIElement* source)", "bool OnDragDropTest(UIElement@+)", AS_METHODPR(UIElement, OnDragDropTest, (UIElement*), bool), AS_CALL_THISCALL));

    // virtual bool UIElement::OnDragDropFinish(UIElement* source)
    methods.Push(RegisterObjectMethodArgs("virtual bool UIElement::OnDragDropFinish(UIElement* source)", "bool OnDragDropFinish(UIElement@+)", AS_METHODPR(UIElement, OnDragDropFinish, (UIElement*), bool), AS_CALL_THISCALL));

    // virtual void UIElement::OnWheel(int delta, MouseButtonFlags buttons, QualifierFlags qualifiers)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnWheel(int delta, MouseButtonFlags buttons, QualifierFlags qualifiers)", "void OnWheel(int, MouseButtonFlags, QualifierFlags)", AS_METHODPR(UIElement, OnWheel, (int, MouseButtonFlags, QualifierFlags), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnKey(Key key, MouseButtonFlags buttons, QualifierFlags qualifiers)", "void OnKey(Key, MouseButtonFlags, QualifierFlags)", AS_METHODPR(UIElement, OnKey, (Key, MouseButtonFlags, QualifierFlags), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnTextInput(const String& text)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnTextInput(const String& text)", "void OnTextInput(const String&in)", AS_METHODPR(UIElement, OnTextInput, (const String&), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnResize(const IntVector2& newSize, const IntVector2& delta)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnResize(const IntVector2& newSize, const IntVector2& delta)", "void OnResize(const IntVector2&in, const IntVector2&in)", AS_METHODPR(UIElement, OnResize, (const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnPositionSet(const IntVector2& newPosition)
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnPositionSet(const IntVector2& newPosition)", "void OnPositionSet(const IntVector2&in)", AS_METHODPR(UIElement, OnPositionSet, (const IntVector2&), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnSetEditable()
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnSetEditable()", "void OnSetEditable()", AS_METHODPR(UIElement, OnSetEditable, (), void), AS_CALL_THISCALL));

    // virtual void UIElement::OnIndentSet()
    methods.Push(RegisterObjectMethodArgs("virtual void UIElement::OnIndentSet()", "void OnIndentSet()", AS_METHODPR(UIElement, OnIndentSet, (), void), AS_CALL_THISCALL));

    // virtual IntVector2 UIElement::ScreenToElement(const IntVector2& screenPosition)
    methods.Push(RegisterObjectMethodArgs("virtual IntVector2 UIElement::ScreenToElement(const IntVector2& screenPosition)", "IntVector2 ScreenToElement(const IntVector2&in)", AS_METHODPR(UIElement, ScreenToElement, (const IntVector2&), IntVector2), AS_CALL_THISCALL));

    // virtual IntVector2 UIElement::ElementToScreen(const IntVector2& position)
    methods.Push(RegisterObjectMethodArgs("virtual IntVector2 UIElement::ElementToScreen(const IntVector2& position)", "IntVector2 ElementToScreen(const IntVector2&in)", AS_METHODPR(UIElement, ElementToScreen, (const IntVector2&), IntVector2), AS_CALL_THISCALL));

    // virtual bool UIElement::IsWheelHandler() const
    methods.Push(RegisterObjectMethodArgs("virtual bool UIElement::IsWheelHandler() const", "bool IsWheelHandler() const", AS_METHODPR(UIElement, IsWheelHandler, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::LoadXML(Deserializer& source)
    methods.Push(RegisterObjectMethodArgs("bool UIElement::LoadXML(Deserializer& source)", "bool LoadXML(Deserializer&)", AS_METHODPR(UIElement, LoadXML, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool UIElement::SaveXML(Serializer& dest, const String& indentation=\"\t\") const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::SaveXML(Serializer& dest, const String& indentation=\"\t\") const", "bool SaveXML(Serializer&, const String&in = \"\t\") const", AS_METHODPR(UIElement, SaveXML, (Serializer&, const String&) const, bool), AS_CALL_THISCALL));

    // bool UIElement::FilterAttributes(XMLElement& dest) const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::FilterAttributes(XMLElement& dest) const", "bool FilterAttributes(XMLElement&) const", AS_METHODPR(UIElement, FilterAttributes, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // void UIElement::SetName(const String& name)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetName(const String& name)", "void SetName(const String&in)", AS_METHODPR(UIElement, SetName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetName(const String& name)", "void set_name(const String&in)", AS_METHODPR(UIElement, SetName, (const String&), void), AS_CALL_THISCALL));

    // void UIElement::SetPosition(const IntVector2& position)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetPosition(const IntVector2& position)", "void SetPosition(const IntVector2&in)", AS_METHODPR(UIElement, SetPosition, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetPosition(const IntVector2& position)", "void set_position(const IntVector2&in)", AS_METHODPR(UIElement, SetPosition, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetPosition(int x, int y)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetPosition(int x, int y)", "void SetPosition(int, int)", AS_METHODPR(UIElement, SetPosition, (int, int), void), AS_CALL_THISCALL));

    // void UIElement::SetSize(const IntVector2& size)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetSize(const IntVector2& size)", "void SetSize(const IntVector2&in)", AS_METHODPR(UIElement, SetSize, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetSize(const IntVector2& size)", "void set_size(const IntVector2&in)", AS_METHODPR(UIElement, SetSize, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetSize(int width, int height)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetSize(int width, int height)", "void SetSize(int, int)", AS_METHODPR(UIElement, SetSize, (int, int), void), AS_CALL_THISCALL));

    // void UIElement::SetWidth(int width)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetWidth(int width)", "void SetWidth(int)", AS_METHODPR(UIElement, SetWidth, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetWidth(int width)", "void set_width(int)", AS_METHODPR(UIElement, SetWidth, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetHeight(int height)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetHeight(int height)", "void SetHeight(int)", AS_METHODPR(UIElement, SetHeight, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetHeight(int height)", "void set_height(int)", AS_METHODPR(UIElement, SetHeight, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetMinSize(const IntVector2& minSize)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinSize(const IntVector2& minSize)", "void SetMinSize(const IntVector2&in)", AS_METHODPR(UIElement, SetMinSize, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinSize(const IntVector2& minSize)", "void set_minSize(const IntVector2&in)", AS_METHODPR(UIElement, SetMinSize, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetMinSize(int width, int height)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinSize(int width, int height)", "void SetMinSize(int, int)", AS_METHODPR(UIElement, SetMinSize, (int, int), void), AS_CALL_THISCALL));

    // void UIElement::SetMinWidth(int width)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinWidth(int width)", "void SetMinWidth(int)", AS_METHODPR(UIElement, SetMinWidth, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinWidth(int width)", "void set_minWidth(int)", AS_METHODPR(UIElement, SetMinWidth, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetMinHeight(int height)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinHeight(int height)", "void SetMinHeight(int)", AS_METHODPR(UIElement, SetMinHeight, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinHeight(int height)", "void set_minHeight(int)", AS_METHODPR(UIElement, SetMinHeight, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetMaxSize(const IntVector2& maxSize)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxSize(const IntVector2& maxSize)", "void SetMaxSize(const IntVector2&in)", AS_METHODPR(UIElement, SetMaxSize, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxSize(const IntVector2& maxSize)", "void set_maxSize(const IntVector2&in)", AS_METHODPR(UIElement, SetMaxSize, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetMaxSize(int width, int height)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxSize(int width, int height)", "void SetMaxSize(int, int)", AS_METHODPR(UIElement, SetMaxSize, (int, int), void), AS_CALL_THISCALL));

    // void UIElement::SetMaxWidth(int width)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxWidth(int width)", "void SetMaxWidth(int)", AS_METHODPR(UIElement, SetMaxWidth, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxWidth(int width)", "void set_maxWidth(int)", AS_METHODPR(UIElement, SetMaxWidth, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetMaxHeight(int height)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxHeight(int height)", "void SetMaxHeight(int)", AS_METHODPR(UIElement, SetMaxHeight, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxHeight(int height)", "void set_maxHeight(int)", AS_METHODPR(UIElement, SetMaxHeight, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetFixedSize(const IntVector2& size)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetFixedSize(const IntVector2& size)", "void SetFixedSize(const IntVector2&in)", AS_METHODPR(UIElement, SetFixedSize, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetFixedSize(int width, int height)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetFixedSize(int width, int height)", "void SetFixedSize(int, int)", AS_METHODPR(UIElement, SetFixedSize, (int, int), void), AS_CALL_THISCALL));

    // void UIElement::SetFixedWidth(int width)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetFixedWidth(int width)", "void SetFixedWidth(int)", AS_METHODPR(UIElement, SetFixedWidth, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetFixedHeight(int height)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetFixedHeight(int height)", "void SetFixedHeight(int)", AS_METHODPR(UIElement, SetFixedHeight, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetAlignment(HorizontalAlignment hAlign, VerticalAlignment vAlign)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetAlignment(HorizontalAlignment hAlign, VerticalAlignment vAlign)", "void SetAlignment(HorizontalAlignment, VerticalAlignment)", AS_METHODPR(UIElement, SetAlignment, (HorizontalAlignment, VerticalAlignment), void), AS_CALL_THISCALL));

    // void UIElement::SetHorizontalAlignment(HorizontalAlignment align)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetHorizontalAlignment(HorizontalAlignment align)", "void SetHorizontalAlignment(HorizontalAlignment)", AS_METHODPR(UIElement, SetHorizontalAlignment, (HorizontalAlignment), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetHorizontalAlignment(HorizontalAlignment align)", "void set_horizontalAlignment(HorizontalAlignment)", AS_METHODPR(UIElement, SetHorizontalAlignment, (HorizontalAlignment), void), AS_CALL_THISCALL));

    // void UIElement::SetVerticalAlignment(VerticalAlignment align)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetVerticalAlignment(VerticalAlignment align)", "void SetVerticalAlignment(VerticalAlignment)", AS_METHODPR(UIElement, SetVerticalAlignment, (VerticalAlignment), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetVerticalAlignment(VerticalAlignment align)", "void set_verticalAlignment(VerticalAlignment)", AS_METHODPR(UIElement, SetVerticalAlignment, (VerticalAlignment), void), AS_CALL_THISCALL));

    // void UIElement::SetEnableAnchor(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetEnableAnchor(bool enable)", "void SetEnableAnchor(bool)", AS_METHODPR(UIElement, SetEnableAnchor, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetEnableAnchor(bool enable)", "void set_enableAnchor(bool)", AS_METHODPR(UIElement, SetEnableAnchor, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetMinAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinAnchor(const Vector2& anchor)", "void SetMinAnchor(const Vector2&in)", AS_METHODPR(UIElement, SetMinAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinAnchor(const Vector2& anchor)", "void set_minAnchor(const Vector2&in)", AS_METHODPR(UIElement, SetMinAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetMinAnchor(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinAnchor(float x, float y)", "void SetMinAnchor(float, float)", AS_METHODPR(UIElement, SetMinAnchor, (float, float), void), AS_CALL_THISCALL));

    // void UIElement::SetMaxAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxAnchor(const Vector2& anchor)", "void SetMaxAnchor(const Vector2&in)", AS_METHODPR(UIElement, SetMaxAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxAnchor(const Vector2& anchor)", "void set_maxAnchor(const Vector2&in)", AS_METHODPR(UIElement, SetMaxAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetMaxAnchor(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxAnchor(float x, float y)", "void SetMaxAnchor(float, float)", AS_METHODPR(UIElement, SetMaxAnchor, (float, float), void), AS_CALL_THISCALL));

    // void UIElement::SetMinOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinOffset(const IntVector2& offset)", "void SetMinOffset(const IntVector2&in)", AS_METHODPR(UIElement, SetMinOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMinOffset(const IntVector2& offset)", "void set_minOffset(const IntVector2&in)", AS_METHODPR(UIElement, SetMinOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetMaxOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxOffset(const IntVector2& offset)", "void SetMaxOffset(const IntVector2&in)", AS_METHODPR(UIElement, SetMaxOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetMaxOffset(const IntVector2& offset)", "void set_maxOffset(const IntVector2&in)", AS_METHODPR(UIElement, SetMaxOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetPivot(const Vector2& pivot)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetPivot(const Vector2& pivot)", "void SetPivot(const Vector2&in)", AS_METHODPR(UIElement, SetPivot, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetPivot(const Vector2& pivot)", "void set_pivot(const Vector2&in)", AS_METHODPR(UIElement, SetPivot, (const Vector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetPivot(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetPivot(float x, float y)", "void SetPivot(float, float)", AS_METHODPR(UIElement, SetPivot, (float, float), void), AS_CALL_THISCALL));

    // void UIElement::SetClipBorder(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetClipBorder(const IntRect& rect)", "void SetClipBorder(const IntRect&in)", AS_METHODPR(UIElement, SetClipBorder, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetClipBorder(const IntRect& rect)", "void set_clipBorder(const IntRect&in)", AS_METHODPR(UIElement, SetClipBorder, (const IntRect&), void), AS_CALL_THISCALL));

    // void UIElement::SetColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetColor(const Color& color)", "void SetColor(const Color&in)", AS_METHODPR(UIElement, SetColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetColor(const Color& color)", "void set_color(const Color&in)", AS_METHODPR(UIElement, SetColor, (const Color&), void), AS_CALL_THISCALL));

    // void UIElement::SetColor(Corner corner, const Color& color)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetColor(Corner corner, const Color& color)", "void SetColor(Corner, const Color&in)", AS_METHODPR(UIElement, SetColor, (Corner, const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetColor(Corner corner, const Color& color)", "void set_colors(Corner, const Color&in)", AS_METHODPR(UIElement, SetColor, (Corner, const Color&), void), AS_CALL_THISCALL));

    // void UIElement::SetPriority(int priority)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetPriority(int priority)", "void SetPriority(int)", AS_METHODPR(UIElement, SetPriority, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetPriority(int priority)", "void set_priority(int)", AS_METHODPR(UIElement, SetPriority, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetOpacity(float opacity)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetOpacity(float opacity)", "void SetOpacity(float)", AS_METHODPR(UIElement, SetOpacity, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetOpacity(float opacity)", "void set_opacity(float)", AS_METHODPR(UIElement, SetOpacity, (float), void), AS_CALL_THISCALL));

    // void UIElement::SetBringToFront(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetBringToFront(bool enable)", "void SetBringToFront(bool)", AS_METHODPR(UIElement, SetBringToFront, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetBringToFront(bool enable)", "void set_bringToFront(bool)", AS_METHODPR(UIElement, SetBringToFront, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetBringToBack(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetBringToBack(bool enable)", "void SetBringToBack(bool)", AS_METHODPR(UIElement, SetBringToBack, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetBringToBack(bool enable)", "void set_bringToBack(bool)", AS_METHODPR(UIElement, SetBringToBack, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetClipChildren(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetClipChildren(bool enable)", "void SetClipChildren(bool)", AS_METHODPR(UIElement, SetClipChildren, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetClipChildren(bool enable)", "void set_clipChildren(bool)", AS_METHODPR(UIElement, SetClipChildren, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetSortChildren(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetSortChildren(bool enable)", "void SetSortChildren(bool)", AS_METHODPR(UIElement, SetSortChildren, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetSortChildren(bool enable)", "void set_sortChildren(bool)", AS_METHODPR(UIElement, SetSortChildren, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetUseDerivedOpacity(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetUseDerivedOpacity(bool enable)", "void SetUseDerivedOpacity(bool)", AS_METHODPR(UIElement, SetUseDerivedOpacity, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetUseDerivedOpacity(bool enable)", "void set_useDerivedOpacity(bool)", AS_METHODPR(UIElement, SetUseDerivedOpacity, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetEnabled(bool enable)", "void SetEnabled(bool)", AS_METHODPR(UIElement, SetEnabled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetEnabled(bool enable)", "void set_enabled(bool)", AS_METHODPR(UIElement, SetEnabled, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetDeepEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetDeepEnabled(bool enable)", "void SetDeepEnabled(bool)", AS_METHODPR(UIElement, SetDeepEnabled, (bool), void), AS_CALL_THISCALL));

    // void UIElement::ResetDeepEnabled()
    methods.Push(RegisterObjectMethodArgs("void UIElement::ResetDeepEnabled()", "void ResetDeepEnabled()", AS_METHODPR(UIElement, ResetDeepEnabled, (), void), AS_CALL_THISCALL));

    // void UIElement::SetEnabledRecursive(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetEnabledRecursive(bool enable)", "void SetEnabledRecursive(bool)", AS_METHODPR(UIElement, SetEnabledRecursive, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetEditable(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetEditable(bool enable)", "void SetEditable(bool)", AS_METHODPR(UIElement, SetEditable, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetEditable(bool enable)", "void set_editable(bool)", AS_METHODPR(UIElement, SetEditable, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetFocus(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetFocus(bool enable)", "void SetFocus(bool)", AS_METHODPR(UIElement, SetFocus, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetFocus(bool enable)", "void set_focus(bool)", AS_METHODPR(UIElement, SetFocus, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetSelected(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetSelected(bool enable)", "void SetSelected(bool)", AS_METHODPR(UIElement, SetSelected, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetSelected(bool enable)", "void set_selected(bool)", AS_METHODPR(UIElement, SetSelected, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetVisible(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetVisible(bool enable)", "void SetVisible(bool)", AS_METHODPR(UIElement, SetVisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetVisible(bool enable)", "void set_visible(bool)", AS_METHODPR(UIElement, SetVisible, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetFocusMode(FocusMode mode)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetFocusMode(FocusMode mode)", "void SetFocusMode(FocusMode)", AS_METHODPR(UIElement, SetFocusMode, (FocusMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetFocusMode(FocusMode mode)", "void set_focusMode(FocusMode)", AS_METHODPR(UIElement, SetFocusMode, (FocusMode), void), AS_CALL_THISCALL));

    // void UIElement::SetDragDropMode(DragAndDropModeFlags mode)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetDragDropMode(DragAndDropModeFlags mode)", "void SetDragDropMode(DragAndDropModeFlags)", AS_METHODPR(UIElement, SetDragDropMode, (DragAndDropModeFlags), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetDragDropMode(DragAndDropModeFlags mode)", "void set_dragDropMode(DragAndDropModeFlags)", AS_METHODPR(UIElement, SetDragDropMode, (DragAndDropModeFlags), void), AS_CALL_THISCALL));

    // bool UIElement::SetStyle(const String& styleName, XMLFile* file=nullptr)
    methods.Push(RegisterObjectMethodArgs("bool UIElement::SetStyle(const String& styleName, XMLFile* file=nullptr)", "bool SetStyle(const String&in, XMLFile@+ = null)", AS_METHODPR(UIElement, SetStyle, (const String&, XMLFile*), bool), AS_CALL_THISCALL));

    // bool UIElement::SetStyle(const XMLElement& element)
    methods.Push(RegisterObjectMethodArgs("bool UIElement::SetStyle(const XMLElement& element)", "bool SetStyle(const XMLElement&in)", AS_METHODPR(UIElement, SetStyle, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool UIElement::SetStyleAuto(XMLFile* file=nullptr)
    methods.Push(RegisterObjectMethodArgs("bool UIElement::SetStyleAuto(XMLFile* file=nullptr)", "bool SetStyleAuto(XMLFile@+ = null)", AS_METHODPR(UIElement, SetStyleAuto, (XMLFile*), bool), AS_CALL_THISCALL));

    // void UIElement::SetDefaultStyle(XMLFile* style)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetDefaultStyle(XMLFile* style)", "void SetDefaultStyle(XMLFile@+)", AS_METHODPR(UIElement, SetDefaultStyle, (XMLFile*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetDefaultStyle(XMLFile* style)", "void set_defaultStyle(XMLFile@+)", AS_METHODPR(UIElement, SetDefaultStyle, (XMLFile*), void), AS_CALL_THISCALL));

    // void UIElement::SetLayout(LayoutMode mode, int spacing=0, const IntRect& border=IntRect::ZERO)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayout(LayoutMode mode, int spacing=0, const IntRect& border=IntRect::ZERO)", "void SetLayout(LayoutMode, int = 0, const IntRect&in = IntRect::ZERO)", AS_METHODPR(UIElement, SetLayout, (LayoutMode, int, const IntRect&), void), AS_CALL_THISCALL));

    // void UIElement::SetLayoutMode(LayoutMode mode)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayoutMode(LayoutMode mode)", "void SetLayoutMode(LayoutMode)", AS_METHODPR(UIElement, SetLayoutMode, (LayoutMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayoutMode(LayoutMode mode)", "void set_layoutMode(LayoutMode)", AS_METHODPR(UIElement, SetLayoutMode, (LayoutMode), void), AS_CALL_THISCALL));

    // void UIElement::SetLayoutSpacing(int spacing)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayoutSpacing(int spacing)", "void SetLayoutSpacing(int)", AS_METHODPR(UIElement, SetLayoutSpacing, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayoutSpacing(int spacing)", "void set_layoutSpacing(int)", AS_METHODPR(UIElement, SetLayoutSpacing, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetLayoutBorder(const IntRect& border)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayoutBorder(const IntRect& border)", "void SetLayoutBorder(const IntRect&in)", AS_METHODPR(UIElement, SetLayoutBorder, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayoutBorder(const IntRect& border)", "void set_layoutBorder(const IntRect&in)", AS_METHODPR(UIElement, SetLayoutBorder, (const IntRect&), void), AS_CALL_THISCALL));

    // void UIElement::SetLayoutFlexScale(const Vector2& scale)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayoutFlexScale(const Vector2& scale)", "void SetLayoutFlexScale(const Vector2&in)", AS_METHODPR(UIElement, SetLayoutFlexScale, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetLayoutFlexScale(const Vector2& scale)", "void set_layoutFlexScale(const Vector2&in)", AS_METHODPR(UIElement, SetLayoutFlexScale, (const Vector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetIndent(int indent)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetIndent(int indent)", "void SetIndent(int)", AS_METHODPR(UIElement, SetIndent, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetIndent(int indent)", "void set_indent(int)", AS_METHODPR(UIElement, SetIndent, (int), void), AS_CALL_THISCALL));

    // void UIElement::SetIndentSpacing(int indentSpacing)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetIndentSpacing(int indentSpacing)", "void SetIndentSpacing(int)", AS_METHODPR(UIElement, SetIndentSpacing, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetIndentSpacing(int indentSpacing)", "void set_indentSpacing(int)", AS_METHODPR(UIElement, SetIndentSpacing, (int), void), AS_CALL_THISCALL));

    // void UIElement::UpdateLayout()
    methods.Push(RegisterObjectMethodArgs("void UIElement::UpdateLayout()", "void UpdateLayout()", AS_METHODPR(UIElement, UpdateLayout, (), void), AS_CALL_THISCALL));

    // void UIElement::DisableLayoutUpdate()
    methods.Push(RegisterObjectMethodArgs("void UIElement::DisableLayoutUpdate()", "void DisableLayoutUpdate()", AS_METHODPR(UIElement, DisableLayoutUpdate, (), void), AS_CALL_THISCALL));

    // void UIElement::EnableLayoutUpdate()
    methods.Push(RegisterObjectMethodArgs("void UIElement::EnableLayoutUpdate()", "void EnableLayoutUpdate()", AS_METHODPR(UIElement, EnableLayoutUpdate, (), void), AS_CALL_THISCALL));

    // void UIElement::BringToFront()
    methods.Push(RegisterObjectMethodArgs("void UIElement::BringToFront()", "void BringToFront()", AS_METHODPR(UIElement, BringToFront, (), void), AS_CALL_THISCALL));

    // UIElement* UIElement::CreateChild(StringHash type, const String& name=String::EMPTY, unsigned index=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::CreateChild(StringHash type, const String& name=String::EMPTY, unsigned index=M_MAX_UNSIGNED)", "UIElement@+ CreateChild(StringHash, const String&in = String::EMPTY, uint = M_MAX_UNSIGNED)", AS_METHODPR(UIElement, CreateChild, (StringHash, const String&, unsigned), UIElement*), AS_CALL_THISCALL));

    // void UIElement::AddChild(UIElement* element)
    methods.Push(RegisterObjectMethodArgs("void UIElement::AddChild(UIElement* element)", "void AddChild(UIElement@+)", AS_METHODPR(UIElement, AddChild, (UIElement*), void), AS_CALL_THISCALL));

    // void UIElement::InsertChild(unsigned index, UIElement* element)
    methods.Push(RegisterObjectMethodArgs("void UIElement::InsertChild(unsigned index, UIElement* element)", "void InsertChild(uint, UIElement@+)", AS_METHODPR(UIElement, InsertChild, (unsigned, UIElement*), void), AS_CALL_THISCALL));

    // void UIElement::RemoveChild(UIElement* element, unsigned index=0)
    methods.Push(RegisterObjectMethodArgs("void UIElement::RemoveChild(UIElement* element, unsigned index=0)", "void RemoveChild(UIElement@+, uint = 0)", AS_METHODPR(UIElement, RemoveChild, (UIElement*, unsigned), void), AS_CALL_THISCALL));

    // void UIElement::RemoveChildAtIndex(unsigned index)
    methods.Push(RegisterObjectMethodArgs("void UIElement::RemoveChildAtIndex(unsigned index)", "void RemoveChildAtIndex(uint)", AS_METHODPR(UIElement, RemoveChildAtIndex, (unsigned), void), AS_CALL_THISCALL));

    // void UIElement::RemoveAllChildren()
    methods.Push(RegisterObjectMethodArgs("void UIElement::RemoveAllChildren()", "void RemoveAllChildren()", AS_METHODPR(UIElement, RemoveAllChildren, (), void), AS_CALL_THISCALL));

    // void UIElement::Remove()
    methods.Push(RegisterObjectMethodArgs("void UIElement::Remove()", "void Remove()", AS_METHODPR(UIElement, Remove, (), void), AS_CALL_THISCALL));

    // unsigned UIElement::FindChild(UIElement* element) const
    methods.Push(RegisterObjectMethodArgs("unsigned UIElement::FindChild(UIElement* element) const", "uint FindChild(UIElement@+) const", AS_METHODPR(UIElement, FindChild, (UIElement*) const, unsigned), AS_CALL_THISCALL));

    // void UIElement::SetParent(UIElement* parent, unsigned index=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetParent(UIElement* parent, unsigned index=M_MAX_UNSIGNED)", "void SetParent(UIElement@+, uint = M_MAX_UNSIGNED)", AS_METHODPR(UIElement, SetParent, (UIElement*, unsigned), void), AS_CALL_THISCALL));

    // void UIElement::SetVar(StringHash key, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetVar(StringHash key, const Variant& value)", "void SetVar(StringHash, const Variant&in)", AS_METHODPR(UIElement, SetVar, (StringHash, const Variant&), void), AS_CALL_THISCALL));

    // void UIElement::SetInternal(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetInternal(bool enable)", "void SetInternal(bool)", AS_METHODPR(UIElement, SetInternal, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetInternal(bool enable)", "void set_internal(bool)", AS_METHODPR(UIElement, SetInternal, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetTraversalMode(TraversalMode traversalMode)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetTraversalMode(TraversalMode traversalMode)", "void SetTraversalMode(TraversalMode)", AS_METHODPR(UIElement, SetTraversalMode, (TraversalMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetTraversalMode(TraversalMode traversalMode)", "void set_traversalMode(TraversalMode)", AS_METHODPR(UIElement, SetTraversalMode, (TraversalMode), void), AS_CALL_THISCALL));

    // void UIElement::SetElementEventSender(bool flag)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetElementEventSender(bool flag)", "void SetElementEventSender(bool)", AS_METHODPR(UIElement, SetElementEventSender, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetElementEventSender(bool flag)", "void set_elementEventSender(bool)", AS_METHODPR(UIElement, SetElementEventSender, (bool), void), AS_CALL_THISCALL));

    // void UIElement::SetTags(const StringVector& tags)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetTags(const StringVector& tags)", "void SetTags(Array<String>@+)", AS_FUNCTION_OBJFIRST(UIElement_SetTags_StringVector), AS_CALL_CDECL_OBJFIRST));

    // void UIElement::AddTag(const String& tag)
    methods.Push(RegisterObjectMethodArgs("void UIElement::AddTag(const String& tag)", "void AddTag(const String&in)", AS_METHODPR(UIElement, AddTag, (const String&), void), AS_CALL_THISCALL));

    // void UIElement::AddTags(const String& tags, char separator=';')
    methods.Push(RegisterObjectMethodArgs("void UIElement::AddTags(const String& tags, char separator=';')", "void AddTags(const String&in, int8 = ';')", AS_METHODPR(UIElement, AddTags, (const String&, char), void), AS_CALL_THISCALL));

    // void UIElement::AddTags(const StringVector& tags)
    methods.Push(RegisterObjectMethodArgs("void UIElement::AddTags(const StringVector& tags)", "void AddTags(Array<String>@+)", AS_FUNCTION_OBJFIRST(UIElement_AddTags_StringVector), AS_CALL_CDECL_OBJFIRST));

    // bool UIElement::RemoveTag(const String& tag)
    methods.Push(RegisterObjectMethodArgs("bool UIElement::RemoveTag(const String& tag)", "bool RemoveTag(const String&in)", AS_METHODPR(UIElement, RemoveTag, (const String&), bool), AS_CALL_THISCALL));

    // void UIElement::RemoveAllTags()
    methods.Push(RegisterObjectMethodArgs("void UIElement::RemoveAllTags()", "void RemoveAllTags()", AS_METHODPR(UIElement, RemoveAllTags, (), void), AS_CALL_THISCALL));

    // const String& UIElement::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& UIElement::GetName() const", "const String& GetName() const", AS_METHODPR(UIElement, GetName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& UIElement::GetName() const", "const String& get_name() const", AS_METHODPR(UIElement, GetName, () const, const String&), AS_CALL_THISCALL));

    // const IntVector2& UIElement::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetPosition() const", "const IntVector2& GetPosition() const", AS_METHODPR(UIElement, GetPosition, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetPosition() const", "const IntVector2& get_position() const", AS_METHODPR(UIElement, GetPosition, () const, const IntVector2&), AS_CALL_THISCALL));

    // const IntVector2& UIElement::GetSize() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetSize() const", "const IntVector2& GetSize() const", AS_METHODPR(UIElement, GetSize, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetSize() const", "const IntVector2& get_size() const", AS_METHODPR(UIElement, GetSize, () const, const IntVector2&), AS_CALL_THISCALL));

    // int UIElement::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetWidth() const", "int GetWidth() const", AS_METHODPR(UIElement, GetWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetWidth() const", "int get_width() const", AS_METHODPR(UIElement, GetWidth, () const, int), AS_CALL_THISCALL));

    // int UIElement::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetHeight() const", "int GetHeight() const", AS_METHODPR(UIElement, GetHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetHeight() const", "int get_height() const", AS_METHODPR(UIElement, GetHeight, () const, int), AS_CALL_THISCALL));

    // const IntVector2& UIElement::GetMinSize() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetMinSize() const", "const IntVector2& GetMinSize() const", AS_METHODPR(UIElement, GetMinSize, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetMinSize() const", "const IntVector2& get_minSize() const", AS_METHODPR(UIElement, GetMinSize, () const, const IntVector2&), AS_CALL_THISCALL));

    // int UIElement::GetMinWidth() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetMinWidth() const", "int GetMinWidth() const", AS_METHODPR(UIElement, GetMinWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetMinWidth() const", "int get_minWidth() const", AS_METHODPR(UIElement, GetMinWidth, () const, int), AS_CALL_THISCALL));

    // int UIElement::GetMinHeight() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetMinHeight() const", "int GetMinHeight() const", AS_METHODPR(UIElement, GetMinHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetMinHeight() const", "int get_minHeight() const", AS_METHODPR(UIElement, GetMinHeight, () const, int), AS_CALL_THISCALL));

    // const IntVector2& UIElement::GetMaxSize() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetMaxSize() const", "const IntVector2& GetMaxSize() const", AS_METHODPR(UIElement, GetMaxSize, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetMaxSize() const", "const IntVector2& get_maxSize() const", AS_METHODPR(UIElement, GetMaxSize, () const, const IntVector2&), AS_CALL_THISCALL));

    // int UIElement::GetMaxWidth() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetMaxWidth() const", "int GetMaxWidth() const", AS_METHODPR(UIElement, GetMaxWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetMaxWidth() const", "int get_maxWidth() const", AS_METHODPR(UIElement, GetMaxWidth, () const, int), AS_CALL_THISCALL));

    // int UIElement::GetMaxHeight() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetMaxHeight() const", "int GetMaxHeight() const", AS_METHODPR(UIElement, GetMaxHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetMaxHeight() const", "int get_maxHeight() const", AS_METHODPR(UIElement, GetMaxHeight, () const, int), AS_CALL_THISCALL));

    // bool UIElement::IsFixedSize() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsFixedSize() const", "bool IsFixedSize() const", AS_METHODPR(UIElement, IsFixedSize, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsFixedSize() const", "bool get_fixedSize() const", AS_METHODPR(UIElement, IsFixedSize, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsFixedWidth() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsFixedWidth() const", "bool IsFixedWidth() const", AS_METHODPR(UIElement, IsFixedWidth, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsFixedWidth() const", "bool get_fixedWidth() const", AS_METHODPR(UIElement, IsFixedWidth, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsFixedHeight() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsFixedHeight() const", "bool IsFixedHeight() const", AS_METHODPR(UIElement, IsFixedHeight, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsFixedHeight() const", "bool get_fixedHeight() const", AS_METHODPR(UIElement, IsFixedHeight, () const, bool), AS_CALL_THISCALL));

    // const IntVector2& UIElement::GetChildOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetChildOffset() const", "const IntVector2& GetChildOffset() const", AS_METHODPR(UIElement, GetChildOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetChildOffset() const", "const IntVector2& get_childOffset() const", AS_METHODPR(UIElement, GetChildOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // HorizontalAlignment UIElement::GetHorizontalAlignment() const
    methods.Push(RegisterObjectMethodArgs("HorizontalAlignment UIElement::GetHorizontalAlignment() const", "HorizontalAlignment GetHorizontalAlignment() const", AS_METHODPR(UIElement, GetHorizontalAlignment, () const, HorizontalAlignment), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("HorizontalAlignment UIElement::GetHorizontalAlignment() const", "HorizontalAlignment get_horizontalAlignment() const", AS_METHODPR(UIElement, GetHorizontalAlignment, () const, HorizontalAlignment), AS_CALL_THISCALL));

    // VerticalAlignment UIElement::GetVerticalAlignment() const
    methods.Push(RegisterObjectMethodArgs("VerticalAlignment UIElement::GetVerticalAlignment() const", "VerticalAlignment GetVerticalAlignment() const", AS_METHODPR(UIElement, GetVerticalAlignment, () const, VerticalAlignment), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("VerticalAlignment UIElement::GetVerticalAlignment() const", "VerticalAlignment get_verticalAlignment() const", AS_METHODPR(UIElement, GetVerticalAlignment, () const, VerticalAlignment), AS_CALL_THISCALL));

    // bool UIElement::GetEnableAnchor() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetEnableAnchor() const", "bool GetEnableAnchor() const", AS_METHODPR(UIElement, GetEnableAnchor, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetEnableAnchor() const", "bool get_enableAnchor() const", AS_METHODPR(UIElement, GetEnableAnchor, () const, bool), AS_CALL_THISCALL));

    // const Vector2& UIElement::GetMinAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& UIElement::GetMinAnchor() const", "const Vector2& GetMinAnchor() const", AS_METHODPR(UIElement, GetMinAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& UIElement::GetMinAnchor() const", "const Vector2& get_minAnchor() const", AS_METHODPR(UIElement, GetMinAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& UIElement::GetMaxAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& UIElement::GetMaxAnchor() const", "const Vector2& GetMaxAnchor() const", AS_METHODPR(UIElement, GetMaxAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& UIElement::GetMaxAnchor() const", "const Vector2& get_maxAnchor() const", AS_METHODPR(UIElement, GetMaxAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const IntVector2& UIElement::GetMinOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetMinOffset() const", "const IntVector2& GetMinOffset() const", AS_METHODPR(UIElement, GetMinOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetMinOffset() const", "const IntVector2& get_minOffset() const", AS_METHODPR(UIElement, GetMinOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // const IntVector2& UIElement::GetMaxOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetMaxOffset() const", "const IntVector2& GetMaxOffset() const", AS_METHODPR(UIElement, GetMaxOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& UIElement::GetMaxOffset() const", "const IntVector2& get_maxOffset() const", AS_METHODPR(UIElement, GetMaxOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // const Vector2& UIElement::GetPivot() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& UIElement::GetPivot() const", "const Vector2& GetPivot() const", AS_METHODPR(UIElement, GetPivot, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& UIElement::GetPivot() const", "const Vector2& get_pivot() const", AS_METHODPR(UIElement, GetPivot, () const, const Vector2&), AS_CALL_THISCALL));

    // const IntRect& UIElement::GetClipBorder() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& UIElement::GetClipBorder() const", "const IntRect& GetClipBorder() const", AS_METHODPR(UIElement, GetClipBorder, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& UIElement::GetClipBorder() const", "const IntRect& get_clipBorder() const", AS_METHODPR(UIElement, GetClipBorder, () const, const IntRect&), AS_CALL_THISCALL));

    // const Color& UIElement::GetColor(Corner corner) const
    methods.Push(RegisterObjectMethodArgs("const Color& UIElement::GetColor(Corner corner) const", "const Color& GetColor(Corner) const", AS_METHODPR(UIElement, GetColor, (Corner) const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& UIElement::GetColor(Corner corner) const", "const Color& get_colors(Corner) const", AS_METHODPR(UIElement, GetColor, (Corner) const, const Color&), AS_CALL_THISCALL));

    // int UIElement::GetPriority() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetPriority() const", "int GetPriority() const", AS_METHODPR(UIElement, GetPriority, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetPriority() const", "int get_priority() const", AS_METHODPR(UIElement, GetPriority, () const, int), AS_CALL_THISCALL));

    // float UIElement::GetOpacity() const
    methods.Push(RegisterObjectMethodArgs("float UIElement::GetOpacity() const", "float GetOpacity() const", AS_METHODPR(UIElement, GetOpacity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float UIElement::GetOpacity() const", "float get_opacity() const", AS_METHODPR(UIElement, GetOpacity, () const, float), AS_CALL_THISCALL));

    // float UIElement::GetDerivedOpacity() const
    methods.Push(RegisterObjectMethodArgs("float UIElement::GetDerivedOpacity() const", "float GetDerivedOpacity() const", AS_METHODPR(UIElement, GetDerivedOpacity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float UIElement::GetDerivedOpacity() const", "float get_derivedOpacity() const", AS_METHODPR(UIElement, GetDerivedOpacity, () const, float), AS_CALL_THISCALL));

    // bool UIElement::GetBringToFront() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetBringToFront() const", "bool GetBringToFront() const", AS_METHODPR(UIElement, GetBringToFront, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetBringToFront() const", "bool get_bringToFront() const", AS_METHODPR(UIElement, GetBringToFront, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::GetBringToBack() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetBringToBack() const", "bool GetBringToBack() const", AS_METHODPR(UIElement, GetBringToBack, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetBringToBack() const", "bool get_bringToBack() const", AS_METHODPR(UIElement, GetBringToBack, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::GetClipChildren() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetClipChildren() const", "bool GetClipChildren() const", AS_METHODPR(UIElement, GetClipChildren, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetClipChildren() const", "bool get_clipChildren() const", AS_METHODPR(UIElement, GetClipChildren, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::GetSortChildren() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetSortChildren() const", "bool GetSortChildren() const", AS_METHODPR(UIElement, GetSortChildren, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetSortChildren() const", "bool get_sortChildren() const", AS_METHODPR(UIElement, GetSortChildren, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::GetUseDerivedOpacity() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetUseDerivedOpacity() const", "bool GetUseDerivedOpacity() const", AS_METHODPR(UIElement, GetUseDerivedOpacity, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::GetUseDerivedOpacity() const", "bool get_useDerivedOpacity() const", AS_METHODPR(UIElement, GetUseDerivedOpacity, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::HasFocus() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::HasFocus() const", "bool HasFocus() const", AS_METHODPR(UIElement, HasFocus, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::HasFocus() const", "bool get_focus() const", AS_METHODPR(UIElement, HasFocus, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsChildOf(UIElement* element) const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsChildOf(UIElement* element) const", "bool IsChildOf(UIElement@+) const", AS_METHODPR(UIElement, IsChildOf, (UIElement*) const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsEnabled() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsEnabled() const", "bool IsEnabled() const", AS_METHODPR(UIElement, IsEnabled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsEnabled() const", "bool get_enabled() const", AS_METHODPR(UIElement, IsEnabled, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsEnabledSelf() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsEnabledSelf() const", "bool IsEnabledSelf() const", AS_METHODPR(UIElement, IsEnabledSelf, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsEnabledSelf() const", "bool get_enabledSelf() const", AS_METHODPR(UIElement, IsEnabledSelf, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsEditable() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsEditable() const", "bool IsEditable() const", AS_METHODPR(UIElement, IsEditable, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsEditable() const", "bool get_editable() const", AS_METHODPR(UIElement, IsEditable, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsSelected() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsSelected() const", "bool IsSelected() const", AS_METHODPR(UIElement, IsSelected, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsSelected() const", "bool get_selected() const", AS_METHODPR(UIElement, IsSelected, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsVisible() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsVisible() const", "bool IsVisible() const", AS_METHODPR(UIElement, IsVisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsVisible() const", "bool get_visible() const", AS_METHODPR(UIElement, IsVisible, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsVisibleEffective() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsVisibleEffective() const", "bool IsVisibleEffective() const", AS_METHODPR(UIElement, IsVisibleEffective, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsVisibleEffective() const", "bool get_visibleEffective() const", AS_METHODPR(UIElement, IsVisibleEffective, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsHovering() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsHovering() const", "bool IsHovering() const", AS_METHODPR(UIElement, IsHovering, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsHovering() const", "bool get_hovering() const", AS_METHODPR(UIElement, IsHovering, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::IsInternal() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsInternal() const", "bool IsInternal() const", AS_METHODPR(UIElement, IsInternal, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsInternal() const", "bool get_internal() const", AS_METHODPR(UIElement, IsInternal, () const, bool), AS_CALL_THISCALL));

    // bool UIElement::HasColorGradient() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::HasColorGradient() const", "bool HasColorGradient() const", AS_METHODPR(UIElement, HasColorGradient, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::HasColorGradient() const", "bool get_colorGradient() const", AS_METHODPR(UIElement, HasColorGradient, () const, bool), AS_CALL_THISCALL));

    // FocusMode UIElement::GetFocusMode() const
    methods.Push(RegisterObjectMethodArgs("FocusMode UIElement::GetFocusMode() const", "FocusMode GetFocusMode() const", AS_METHODPR(UIElement, GetFocusMode, () const, FocusMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("FocusMode UIElement::GetFocusMode() const", "FocusMode get_focusMode() const", AS_METHODPR(UIElement, GetFocusMode, () const, FocusMode), AS_CALL_THISCALL));

    // DragAndDropModeFlags UIElement::GetDragDropMode() const
    methods.Push(RegisterObjectMethodArgs("DragAndDropModeFlags UIElement::GetDragDropMode() const", "DragAndDropModeFlags GetDragDropMode() const", AS_METHODPR(UIElement, GetDragDropMode, () const, DragAndDropModeFlags), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("DragAndDropModeFlags UIElement::GetDragDropMode() const", "DragAndDropModeFlags get_dragDropMode() const", AS_METHODPR(UIElement, GetDragDropMode, () const, DragAndDropModeFlags), AS_CALL_THISCALL));

    // const String& UIElement::GetAppliedStyle() const
    methods.Push(RegisterObjectMethodArgs("const String& UIElement::GetAppliedStyle() const", "const String& GetAppliedStyle() const", AS_METHODPR(UIElement, GetAppliedStyle, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& UIElement::GetAppliedStyle() const", "const String& get_style() const", AS_METHODPR(UIElement, GetAppliedStyle, () const, const String&), AS_CALL_THISCALL));

    // XMLFile* UIElement::GetDefaultStyle(bool recursiveUp=true) const
    methods.Push(RegisterObjectMethodArgs("XMLFile* UIElement::GetDefaultStyle(bool recursiveUp=true) const", "XMLFile@+ GetDefaultStyle(bool = true) const", AS_METHODPR(UIElement, GetDefaultStyle, (bool) const, XMLFile*), AS_CALL_THISCALL));

    // LayoutMode UIElement::GetLayoutMode() const
    methods.Push(RegisterObjectMethodArgs("LayoutMode UIElement::GetLayoutMode() const", "LayoutMode GetLayoutMode() const", AS_METHODPR(UIElement, GetLayoutMode, () const, LayoutMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("LayoutMode UIElement::GetLayoutMode() const", "LayoutMode get_layoutMode() const", AS_METHODPR(UIElement, GetLayoutMode, () const, LayoutMode), AS_CALL_THISCALL));

    // int UIElement::GetLayoutSpacing() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetLayoutSpacing() const", "int GetLayoutSpacing() const", AS_METHODPR(UIElement, GetLayoutSpacing, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetLayoutSpacing() const", "int get_layoutSpacing() const", AS_METHODPR(UIElement, GetLayoutSpacing, () const, int), AS_CALL_THISCALL));

    // const IntRect& UIElement::GetLayoutBorder() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& UIElement::GetLayoutBorder() const", "const IntRect& GetLayoutBorder() const", AS_METHODPR(UIElement, GetLayoutBorder, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& UIElement::GetLayoutBorder() const", "const IntRect& get_layoutBorder() const", AS_METHODPR(UIElement, GetLayoutBorder, () const, const IntRect&), AS_CALL_THISCALL));

    // const Vector2& UIElement::GetLayoutFlexScale() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& UIElement::GetLayoutFlexScale() const", "const Vector2& GetLayoutFlexScale() const", AS_METHODPR(UIElement, GetLayoutFlexScale, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& UIElement::GetLayoutFlexScale() const", "const Vector2& get_layoutFlexScale() const", AS_METHODPR(UIElement, GetLayoutFlexScale, () const, const Vector2&), AS_CALL_THISCALL));

    // unsigned UIElement::GetNumChildren(bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("unsigned UIElement::GetNumChildren(bool recursive=false) const", "uint GetNumChildren(bool = false) const", AS_METHODPR(UIElement, GetNumChildren, (bool) const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned UIElement::GetNumChildren(bool recursive=false) const", "uint get_numChildren(bool = false) const", AS_METHODPR(UIElement, GetNumChildren, (bool) const, unsigned), AS_CALL_THISCALL));

    // UIElement* UIElement::GetChild(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetChild(unsigned index) const", "UIElement@+ GetChild(uint) const", AS_METHODPR(UIElement, GetChild, (unsigned) const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetChild(unsigned index) const", "UIElement@+ get_children(uint) const", AS_METHODPR(UIElement, GetChild, (unsigned) const, UIElement*), AS_CALL_THISCALL));

    // UIElement* UIElement::GetChild(const String& name, bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetChild(const String& name, bool recursive=false) const", "UIElement@+ GetChild(const String&in, bool = false) const", AS_METHODPR(UIElement, GetChild, (const String&, bool) const, UIElement*), AS_CALL_THISCALL));

    // UIElement* UIElement::GetChild(const StringHash& key, const Variant& value=Variant::EMPTY, bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetChild(const StringHash& key, const Variant& value=Variant::EMPTY, bool recursive=false) const", "UIElement@+ GetChild(const StringHash&in, const Variant&in = Variant::EMPTY, bool = false) const", AS_METHODPR(UIElement, GetChild, (const StringHash&, const Variant&, bool) const, UIElement*), AS_CALL_THISCALL));

    // const Vector<SharedPtr<UIElement>>& UIElement::GetChildren() const
    methods.Push(RegisterObjectMethodArgs("const Vector<SharedPtr<UIElement>>& UIElement::GetChildren() const", "Array<UIElement@>@ GetChildren() const", AS_FUNCTION_OBJFIRST(UIElement_GetChildren_void), AS_CALL_CDECL_OBJFIRST));

    // PODVector<UIElement*> UIElement::GetChildren(bool recursive) const
    methods.Push(RegisterObjectMethodArgs("PODVector<UIElement*> UIElement::GetChildren(bool recursive) const", "Array<UIElement@>@ GetChildren(bool) const", AS_FUNCTION_OBJFIRST(UIElement_GetChildren_bool), AS_CALL_CDECL_OBJFIRST));

    // UIElement* UIElement::GetParent() const
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetParent() const", "UIElement@+ GetParent() const", AS_METHODPR(UIElement, GetParent, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetParent() const", "UIElement@+ get_parent() const", AS_METHODPR(UIElement, GetParent, () const, UIElement*), AS_CALL_THISCALL));

    // UIElement* UIElement::GetRoot() const
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetRoot() const", "UIElement@+ GetRoot() const", AS_METHODPR(UIElement, GetRoot, () const, UIElement*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetRoot() const", "UIElement@+ get_root() const", AS_METHODPR(UIElement, GetRoot, () const, UIElement*), AS_CALL_THISCALL));

    // const Color& UIElement::GetDerivedColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& UIElement::GetDerivedColor() const", "const Color& GetDerivedColor() const", AS_METHODPR(UIElement, GetDerivedColor, () const, const Color&), AS_CALL_THISCALL));

    // const Variant& UIElement::GetVar(const StringHash& key) const
    methods.Push(RegisterObjectMethodArgs("const Variant& UIElement::GetVar(const StringHash& key) const", "const Variant& GetVar(const StringHash&in) const", AS_METHODPR(UIElement, GetVar, (const StringHash&) const, const Variant&), AS_CALL_THISCALL));

    // const VariantMap& UIElement::GetVars() const
    methods.Push(RegisterObjectMethodArgs("const VariantMap& UIElement::GetVars() const", "const VariantMap& GetVars() const", AS_METHODPR(UIElement, GetVars, () const, const VariantMap&), AS_CALL_THISCALL));

    // bool UIElement::HasTag(const String& tag) const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::HasTag(const String& tag) const", "bool HasTag(const String&in) const", AS_METHODPR(UIElement, HasTag, (const String&) const, bool), AS_CALL_THISCALL));

    // const StringVector& UIElement::GetTags() const
    methods.Push(RegisterObjectMethodArgs("const StringVector& UIElement::GetTags() const", "Array<String>@ GetTags() const", AS_FUNCTION_OBJFIRST(UIElement_GetTags_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("const StringVector& UIElement::GetTags() const", "Array<String>@ get_tags() const", AS_FUNCTION_OBJFIRST(UIElement_GetTags_void), AS_CALL_CDECL_OBJFIRST));

    // PODVector<UIElement*> UIElement::GetChildrenWithTag(const String& tag, bool recursive=false) const
    methods.Push(RegisterObjectMethodArgs("PODVector<UIElement*> UIElement::GetChildrenWithTag(const String& tag, bool recursive=false) const", "Array<UIElement@>@ GetChildrenWithTag(const String&in, bool = false) const", AS_FUNCTION_OBJFIRST(UIElement_GetChildrenWithTag_String_bool), AS_CALL_CDECL_OBJFIRST));

    // MouseButtonFlags UIElement::GetDragButtonCombo() const
    methods.Push(RegisterObjectMethodArgs("MouseButtonFlags UIElement::GetDragButtonCombo() const", "MouseButtonFlags GetDragButtonCombo() const", AS_METHODPR(UIElement, GetDragButtonCombo, () const, MouseButtonFlags), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("MouseButtonFlags UIElement::GetDragButtonCombo() const", "MouseButtonFlags get_dragButtonCombo() const", AS_METHODPR(UIElement, GetDragButtonCombo, () const, MouseButtonFlags), AS_CALL_THISCALL));

    // unsigned UIElement::GetDragButtonCount() const
    methods.Push(RegisterObjectMethodArgs("unsigned UIElement::GetDragButtonCount() const", "uint GetDragButtonCount() const", AS_METHODPR(UIElement, GetDragButtonCount, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned UIElement::GetDragButtonCount() const", "uint get_dragButtonCount() const", AS_METHODPR(UIElement, GetDragButtonCount, () const, unsigned), AS_CALL_THISCALL));

    // bool UIElement::IsInside(IntVector2 position, bool isScreen)
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsInside(IntVector2 position, bool isScreen)", "bool IsInside(IntVector2, bool)", AS_METHODPR(UIElement, IsInside, (IntVector2, bool), bool), AS_CALL_THISCALL));

    // bool UIElement::IsInsideCombined(IntVector2 position, bool isScreen)
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsInsideCombined(IntVector2 position, bool isScreen)", "bool IsInsideCombined(IntVector2, bool)", AS_METHODPR(UIElement, IsInsideCombined, (IntVector2, bool), bool), AS_CALL_THISCALL));

    // IntRect UIElement::GetCombinedScreenRect()
    methods.Push(RegisterObjectMethodArgs("IntRect UIElement::GetCombinedScreenRect()", "IntRect GetCombinedScreenRect()", AS_METHODPR(UIElement, GetCombinedScreenRect, (), IntRect), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntRect UIElement::GetCombinedScreenRect()", "IntRect get_combinedScreenRect()", AS_METHODPR(UIElement, GetCombinedScreenRect, (), IntRect), AS_CALL_THISCALL));

    // void UIElement::SortChildren()
    methods.Push(RegisterObjectMethodArgs("void UIElement::SortChildren()", "void SortChildren()", AS_METHODPR(UIElement, SortChildren, (), void), AS_CALL_THISCALL));

    // int UIElement::GetLayoutElementMaxSize() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetLayoutElementMaxSize() const", "int GetLayoutElementMaxSize() const", AS_METHODPR(UIElement, GetLayoutElementMaxSize, () const, int), AS_CALL_THISCALL));

    // int UIElement::GetIndent() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetIndent() const", "int GetIndent() const", AS_METHODPR(UIElement, GetIndent, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetIndent() const", "int get_indent() const", AS_METHODPR(UIElement, GetIndent, () const, int), AS_CALL_THISCALL));

    // int UIElement::GetIndentSpacing() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetIndentSpacing() const", "int GetIndentSpacing() const", AS_METHODPR(UIElement, GetIndentSpacing, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetIndentSpacing() const", "int get_indentSpacing() const", AS_METHODPR(UIElement, GetIndentSpacing, () const, int), AS_CALL_THISCALL));

    // int UIElement::GetIndentWidth() const
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetIndentWidth() const", "int GetIndentWidth() const", AS_METHODPR(UIElement, GetIndentWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int UIElement::GetIndentWidth() const", "int get_indentWidth() const", AS_METHODPR(UIElement, GetIndentWidth, () const, int), AS_CALL_THISCALL));

    // void UIElement::SetChildOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetChildOffset(const IntVector2& offset)", "void SetChildOffset(const IntVector2&in)", AS_METHODPR(UIElement, SetChildOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void UIElement::SetHovering(bool enable)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetHovering(bool enable)", "void SetHovering(bool)", AS_METHODPR(UIElement, SetHovering, (bool), void), AS_CALL_THISCALL));

    // void UIElement::AdjustScissor(IntRect& currentScissor)
    methods.Push(RegisterObjectMethodArgs("void UIElement::AdjustScissor(IntRect& currentScissor)", "void AdjustScissor(IntRect&)", AS_METHODPR(UIElement, AdjustScissor, (IntRect&), void), AS_CALL_THISCALL));

    // const Color& UIElement::GetColorAttr() const
    methods.Push(RegisterObjectMethodArgs("const Color& UIElement::GetColorAttr() const", "const Color& GetColorAttr() const", AS_METHODPR(UIElement, GetColorAttr, () const, const Color&), AS_CALL_THISCALL));

    // TraversalMode UIElement::GetTraversalMode() const
    methods.Push(RegisterObjectMethodArgs("TraversalMode UIElement::GetTraversalMode() const", "TraversalMode GetTraversalMode() const", AS_METHODPR(UIElement, GetTraversalMode, () const, TraversalMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TraversalMode UIElement::GetTraversalMode() const", "TraversalMode get_traversalMode() const", AS_METHODPR(UIElement, GetTraversalMode, () const, TraversalMode), AS_CALL_THISCALL));

    // bool UIElement::IsElementEventSender() const
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsElementEventSender() const", "bool IsElementEventSender() const", AS_METHODPR(UIElement, IsElementEventSender, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool UIElement::IsElementEventSender() const", "bool get_elementEventSender() const", AS_METHODPR(UIElement, IsElementEventSender, () const, bool), AS_CALL_THISCALL));

    // UIElement* UIElement::GetElementEventSender() const
    methods.Push(RegisterObjectMethodArgs("UIElement* UIElement::GetElementEventSender() const", "UIElement@+ GetElementEventSender() const", AS_METHODPR(UIElement, GetElementEventSender, () const, UIElement*), AS_CALL_THISCALL));

    // IntVector2 UIElement::GetEffectiveMinSize() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 UIElement::GetEffectiveMinSize() const", "IntVector2 GetEffectiveMinSize() const", AS_METHODPR(UIElement, GetEffectiveMinSize, () const, IntVector2), AS_CALL_THISCALL));

    // void UIElement::SetRenderTexture(Texture2D* texture)
    methods.Push(RegisterObjectMethodArgs("void UIElement::SetRenderTexture(Texture2D* texture)", "void SetRenderTexture(Texture2D@+)", AS_METHODPR(UIElement, SetRenderTexture, (Texture2D*), void), AS_CALL_THISCALL));
}

// class UISelectable | File: ../UI/UISelectable.h
void CollectMembers_UISelectable(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_UIElement(methods);

    Remove(methods, "explicit UIElement::UIElement(Context* context)");
    Remove(methods, "static void UIElement::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor)");

    // void UISelectable::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // UISelectable::URHO3D_OBJECT(UISelectable, UIElement)
    // Error: type "" can not automatically bind

    // void UISelectable::SetSelectionColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void UISelectable::SetSelectionColor(const Color& color)", "void SetSelectionColor(const Color&in)", AS_METHODPR(UISelectable, SetSelectionColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UISelectable::SetSelectionColor(const Color& color)", "void set_selectionColor(const Color&in)", AS_METHODPR(UISelectable, SetSelectionColor, (const Color&), void), AS_CALL_THISCALL));

    // void UISelectable::SetHoverColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void UISelectable::SetHoverColor(const Color& color)", "void SetHoverColor(const Color&in)", AS_METHODPR(UISelectable, SetHoverColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void UISelectable::SetHoverColor(const Color& color)", "void set_hoverColor(const Color&in)", AS_METHODPR(UISelectable, SetHoverColor, (const Color&), void), AS_CALL_THISCALL));

    // const Color& UISelectable::GetSelectionColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& UISelectable::GetSelectionColor() const", "const Color& GetSelectionColor() const", AS_METHODPR(UISelectable, GetSelectionColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& UISelectable::GetSelectionColor() const", "const Color& get_selectionColor() const", AS_METHODPR(UISelectable, GetSelectionColor, () const, const Color&), AS_CALL_THISCALL));

    // const Color& UISelectable::GetHoverColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& UISelectable::GetHoverColor() const", "const Color& GetHoverColor() const", AS_METHODPR(UISelectable, GetHoverColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& UISelectable::GetHoverColor() const", "const Color& get_hoverColor() const", AS_METHODPR(UISelectable, GetHoverColor, () const, const Color&), AS_CALL_THISCALL));
}

// const Vector<String>& UnknownComponent::GetXMLAttributes() const
// const Vector<String>& UnknownComponent::GetXMLAttributes() const | File: ../Scene/UnknownComponent.h
static CScriptArray* UnknownComponent_GetXMLAttributes_void(UnknownComponent* ptr)
{
    const Vector<String>& result = ptr->GetXMLAttributes();
    return VectorToArray<String>(result, "Array<String>");
}


// class UnknownComponent | File: ../Scene/UnknownComponent.h
void CollectMembers_UnknownComponent(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "bool Animatable::LoadJSON(const JSONValue& source) override");
    Remove(methods, "bool Animatable::LoadXML(const XMLElement& source) override");
    Remove(methods, "bool Component::Save(Serializer& dest) const override");
    Remove(methods, "bool Component::SaveJSON(JSONValue& dest) const override");
    Remove(methods, "bool Component::SaveXML(XMLElement& dest) const override");
    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual StringHash Object::GetType() const =0");
    Remove(methods, "virtual bool Serializable::Load(Deserializer& source)");
    Remove(methods, "virtual const String& Object::GetTypeName() const =0");
    Remove(methods, "virtual const Vector<AttributeInfo>* Serializable::GetAttributes() const");

    // const Vector<AttributeInfo>* UnknownComponent::GetAttributes() const override
    // Error: type "const Vector<AttributeInfo>*" can not automatically bind

    // const PODVector<unsigned char>& UnknownComponent::GetBinaryAttributes() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // StringHash UnknownComponent::GetType() const override
    methods.Push(RegisterObjectMethodArgs("StringHash UnknownComponent::GetType() const override", "StringHash GetType() const", AS_METHODPR(UnknownComponent, GetType, () const, StringHash), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("StringHash UnknownComponent::GetType() const override", "StringHash get_type() const", AS_METHODPR(UnknownComponent, GetType, () const, StringHash), AS_CALL_THISCALL));

    // const String& UnknownComponent::GetTypeName() const override
    methods.Push(RegisterObjectMethodArgs("const String& UnknownComponent::GetTypeName() const override", "const String& GetTypeName() const", AS_METHODPR(UnknownComponent, GetTypeName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& UnknownComponent::GetTypeName() const override", "const String& get_typeName() const", AS_METHODPR(UnknownComponent, GetTypeName, () const, const String&), AS_CALL_THISCALL));

    // bool UnknownComponent::Load(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool UnknownComponent::Load(Deserializer& source) override", "bool Load(Deserializer&)", AS_METHODPR(UnknownComponent, Load, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool UnknownComponent::LoadXML(const XMLElement& source) override
    methods.Push(RegisterObjectMethodArgs("bool UnknownComponent::LoadXML(const XMLElement& source) override", "bool LoadXML(const XMLElement&in)", AS_METHODPR(UnknownComponent, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool UnknownComponent::LoadJSON(const JSONValue& source) override
    methods.Push(RegisterObjectMethodArgs("bool UnknownComponent::LoadJSON(const JSONValue& source) override", "bool LoadJSON(const JSONValue&in)", AS_METHODPR(UnknownComponent, LoadJSON, (const JSONValue&), bool), AS_CALL_THISCALL));

    // bool UnknownComponent::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool UnknownComponent::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(UnknownComponent, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool UnknownComponent::SaveXML(XMLElement& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool UnknownComponent::SaveXML(XMLElement& dest) const override", "bool SaveXML(XMLElement&) const", AS_METHODPR(UnknownComponent, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // bool UnknownComponent::SaveJSON(JSONValue& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool UnknownComponent::SaveJSON(JSONValue& dest) const override", "bool SaveJSON(JSONValue&) const", AS_METHODPR(UnknownComponent, SaveJSON, (JSONValue&) const, bool), AS_CALL_THISCALL));

    // void UnknownComponent::SetTypeName(const String& typeName)
    methods.Push(RegisterObjectMethodArgs("void UnknownComponent::SetTypeName(const String& typeName)", "void SetTypeName(const String&in)", AS_METHODPR(UnknownComponent, SetTypeName, (const String&), void), AS_CALL_THISCALL));

    // void UnknownComponent::SetType(StringHash typeHash)
    methods.Push(RegisterObjectMethodArgs("void UnknownComponent::SetType(StringHash typeHash)", "void SetType(StringHash)", AS_METHODPR(UnknownComponent, SetType, (StringHash), void), AS_CALL_THISCALL));

    // const Vector<String>& UnknownComponent::GetXMLAttributes() const
    methods.Push(RegisterObjectMethodArgs("const Vector<String>& UnknownComponent::GetXMLAttributes() const", "Array<String>@ GetXMLAttributes() const", AS_FUNCTION_OBJFIRST(UnknownComponent_GetXMLAttributes_void), AS_CALL_CDECL_OBJFIRST));

    // bool UnknownComponent::GetUseXML() const
    methods.Push(RegisterObjectMethodArgs("bool UnknownComponent::GetUseXML() const", "bool GetUseXML() const", AS_METHODPR(UnknownComponent, GetUseXML, () const, bool), AS_CALL_THISCALL));
}

// struct VAnimEventFrame | File: ../Scene/ValueAnimation.h
void CollectMembers_VAnimEventFrame(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct VAnimKeyFrame | File: ../Scene/ValueAnimation.h
void CollectMembers_VAnimKeyFrame(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class ValueAnimation | File: ../Scene/ValueAnimation.h
void CollectMembers_ValueAnimation(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // void ValueAnimation::GetEventFrames(float beginTime, float endTime, PODVector<const VAnimEventFrame*>& eventFrames) const
    // Error: type "PODVector<const VAnimEventFrame*>&" can not automatically bind

    // const Vector<VAnimKeyFrame>& ValueAnimation::GetKeyFrames() const
    // Error: type "const Vector<VAnimKeyFrame>&" can not automatically bind

    // void* ValueAnimation::GetOwner() const
    // Error: type "void*" can not automatically bind

    // void ValueAnimation::SetOwner(void* owner)
    // Error: type "void*" can not automatically bind

    // bool ValueAnimation::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(ValueAnimation, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool ValueAnimation::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(ValueAnimation, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool ValueAnimation::LoadXML(const XMLElement& source)
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::LoadXML(const XMLElement& source)", "bool LoadXML(const XMLElement&in)", AS_METHODPR(ValueAnimation, LoadXML, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool ValueAnimation::SaveXML(XMLElement& dest) const
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::SaveXML(XMLElement& dest) const", "bool SaveXML(XMLElement&) const", AS_METHODPR(ValueAnimation, SaveXML, (XMLElement&) const, bool), AS_CALL_THISCALL));

    // bool ValueAnimation::LoadJSON(const JSONValue& source)
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::LoadJSON(const JSONValue& source)", "bool LoadJSON(const JSONValue&in)", AS_METHODPR(ValueAnimation, LoadJSON, (const JSONValue&), bool), AS_CALL_THISCALL));

    // bool ValueAnimation::SaveJSON(JSONValue& dest) const
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::SaveJSON(JSONValue& dest) const", "bool SaveJSON(JSONValue&) const", AS_METHODPR(ValueAnimation, SaveJSON, (JSONValue&) const, bool), AS_CALL_THISCALL));

    // void ValueAnimation::SetInterpolationMethod(InterpMethod method)
    methods.Push(RegisterObjectMethodArgs("void ValueAnimation::SetInterpolationMethod(InterpMethod method)", "void SetInterpolationMethod(InterpMethod)", AS_METHODPR(ValueAnimation, SetInterpolationMethod, (InterpMethod), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ValueAnimation::SetInterpolationMethod(InterpMethod method)", "void set_interpolationMethod(InterpMethod)", AS_METHODPR(ValueAnimation, SetInterpolationMethod, (InterpMethod), void), AS_CALL_THISCALL));

    // void ValueAnimation::SetSplineTension(float tension)
    methods.Push(RegisterObjectMethodArgs("void ValueAnimation::SetSplineTension(float tension)", "void SetSplineTension(float)", AS_METHODPR(ValueAnimation, SetSplineTension, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ValueAnimation::SetSplineTension(float tension)", "void set_splineTension(float)", AS_METHODPR(ValueAnimation, SetSplineTension, (float), void), AS_CALL_THISCALL));

    // void ValueAnimation::SetValueType(VariantType valueType)
    methods.Push(RegisterObjectMethodArgs("void ValueAnimation::SetValueType(VariantType valueType)", "void SetValueType(VariantType)", AS_METHODPR(ValueAnimation, SetValueType, (VariantType), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ValueAnimation::SetValueType(VariantType valueType)", "void set_valueType(VariantType)", AS_METHODPR(ValueAnimation, SetValueType, (VariantType), void), AS_CALL_THISCALL));

    // bool ValueAnimation::SetKeyFrame(float time, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::SetKeyFrame(float time, const Variant& value)", "bool SetKeyFrame(float, const Variant&in)", AS_METHODPR(ValueAnimation, SetKeyFrame, (float, const Variant&), bool), AS_CALL_THISCALL));

    // void ValueAnimation::SetEventFrame(float time, const StringHash& eventType, const VariantMap& eventData=VariantMap())
    methods.Push(RegisterObjectMethodArgs("void ValueAnimation::SetEventFrame(float time, const StringHash& eventType, const VariantMap& eventData=VariantMap())", "void SetEventFrame(float, const StringHash&in, const VariantMap&in = VariantMap())", AS_METHODPR(ValueAnimation, SetEventFrame, (float, const StringHash&, const VariantMap&), void), AS_CALL_THISCALL));

    // bool ValueAnimation::IsValid() const
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::IsValid() const", "bool IsValid() const", AS_METHODPR(ValueAnimation, IsValid, () const, bool), AS_CALL_THISCALL));

    // InterpMethod ValueAnimation::GetInterpolationMethod() const
    methods.Push(RegisterObjectMethodArgs("InterpMethod ValueAnimation::GetInterpolationMethod() const", "InterpMethod GetInterpolationMethod() const", AS_METHODPR(ValueAnimation, GetInterpolationMethod, () const, InterpMethod), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("InterpMethod ValueAnimation::GetInterpolationMethod() const", "InterpMethod get_interpolationMethod() const", AS_METHODPR(ValueAnimation, GetInterpolationMethod, () const, InterpMethod), AS_CALL_THISCALL));

    // float ValueAnimation::GetSplineTension() const
    methods.Push(RegisterObjectMethodArgs("float ValueAnimation::GetSplineTension() const", "float GetSplineTension() const", AS_METHODPR(ValueAnimation, GetSplineTension, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ValueAnimation::GetSplineTension() const", "float get_splineTension() const", AS_METHODPR(ValueAnimation, GetSplineTension, () const, float), AS_CALL_THISCALL));

    // VariantType ValueAnimation::GetValueType() const
    methods.Push(RegisterObjectMethodArgs("VariantType ValueAnimation::GetValueType() const", "VariantType GetValueType() const", AS_METHODPR(ValueAnimation, GetValueType, () const, VariantType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("VariantType ValueAnimation::GetValueType() const", "VariantType get_valueType() const", AS_METHODPR(ValueAnimation, GetValueType, () const, VariantType), AS_CALL_THISCALL));

    // float ValueAnimation::GetBeginTime() const
    methods.Push(RegisterObjectMethodArgs("float ValueAnimation::GetBeginTime() const", "float GetBeginTime() const", AS_METHODPR(ValueAnimation, GetBeginTime, () const, float), AS_CALL_THISCALL));

    // float ValueAnimation::GetEndTime() const
    methods.Push(RegisterObjectMethodArgs("float ValueAnimation::GetEndTime() const", "float GetEndTime() const", AS_METHODPR(ValueAnimation, GetEndTime, () const, float), AS_CALL_THISCALL));

    // Variant ValueAnimation::GetAnimationValue(float scaledTime) const
    methods.Push(RegisterObjectMethodArgs("Variant ValueAnimation::GetAnimationValue(float scaledTime) const", "Variant GetAnimationValue(float) const", AS_METHODPR(ValueAnimation, GetAnimationValue, (float) const, Variant), AS_CALL_THISCALL));

    // bool ValueAnimation::HasEventFrames() const
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimation::HasEventFrames() const", "bool HasEventFrames() const", AS_METHODPR(ValueAnimation, HasEventFrames, () const, bool), AS_CALL_THISCALL));
}

// class ValueAnimationInfo | File: ../Scene/ValueAnimationInfo.h
void CollectMembers_ValueAnimationInfo(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // bool ValueAnimationInfo::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimationInfo::Update(float timeStep)", "bool Update(float)", AS_METHODPR(ValueAnimationInfo, Update, (float), bool), AS_CALL_THISCALL));

    // bool ValueAnimationInfo::SetTime(float time)
    methods.Push(RegisterObjectMethodArgs("bool ValueAnimationInfo::SetTime(float time)", "bool SetTime(float)", AS_METHODPR(ValueAnimationInfo, SetTime, (float), bool), AS_CALL_THISCALL));

    // void ValueAnimationInfo::SetWrapMode(WrapMode wrapMode)
    methods.Push(RegisterObjectMethodArgs("void ValueAnimationInfo::SetWrapMode(WrapMode wrapMode)", "void SetWrapMode(WrapMode)", AS_METHODPR(ValueAnimationInfo, SetWrapMode, (WrapMode), void), AS_CALL_THISCALL));

    // void ValueAnimationInfo::SetSpeed(float speed)
    methods.Push(RegisterObjectMethodArgs("void ValueAnimationInfo::SetSpeed(float speed)", "void SetSpeed(float)", AS_METHODPR(ValueAnimationInfo, SetSpeed, (float), void), AS_CALL_THISCALL));

    // Object* ValueAnimationInfo::GetTarget() const
    methods.Push(RegisterObjectMethodArgs("Object* ValueAnimationInfo::GetTarget() const", "Object@+ GetTarget() const", AS_METHODPR(ValueAnimationInfo, GetTarget, () const, Object*), AS_CALL_THISCALL));

    // ValueAnimation* ValueAnimationInfo::GetAnimation() const
    methods.Push(RegisterObjectMethodArgs("ValueAnimation* ValueAnimationInfo::GetAnimation() const", "ValueAnimation@+ GetAnimation() const", AS_METHODPR(ValueAnimationInfo, GetAnimation, () const, ValueAnimation*), AS_CALL_THISCALL));

    // WrapMode ValueAnimationInfo::GetWrapMode() const
    methods.Push(RegisterObjectMethodArgs("WrapMode ValueAnimationInfo::GetWrapMode() const", "WrapMode GetWrapMode() const", AS_METHODPR(ValueAnimationInfo, GetWrapMode, () const, WrapMode), AS_CALL_THISCALL));

    // float ValueAnimationInfo::GetTime() const
    methods.Push(RegisterObjectMethodArgs("float ValueAnimationInfo::GetTime() const", "float GetTime() const", AS_METHODPR(ValueAnimationInfo, GetTime, () const, float), AS_CALL_THISCALL));

    // float ValueAnimationInfo::GetSpeed() const
    methods.Push(RegisterObjectMethodArgs("float ValueAnimationInfo::GetSpeed() const", "float GetSpeed() const", AS_METHODPR(ValueAnimationInfo, GetSpeed, () const, float), AS_CALL_THISCALL));
}

// Variant& Variant::operator=(const StringVector& rhs)
// Variant& Variant::operator=(const StringVector& rhs) | File: ../Core/Variant.h
static Variant& Variant_operatorequals_StringVector(Variant* ptr, CScriptArray* rhs_conv)
{
    StringVector rhs = ArrayToVector<String>(rhs_conv);
    Variant& result = ptr->operator=(rhs);
    return result;
}


// bool Variant::operator==(const StringVector& rhs) const
// bool Variant::operator==(const StringVector& rhs) const | File: ../Core/Variant.h
static bool Variant_operatorequalsequals_StringVector(Variant* ptr, CScriptArray* rhs_conv)
{
    StringVector rhs = ArrayToVector<String>(rhs_conv);
    bool result = ptr->operator==(rhs);
    return result;
}


// const StringVector& Variant::GetStringVector() const
// const StringVector& Variant::GetStringVector() const | File: ../Core/Variant.h
static CScriptArray* Variant_GetStringVector_void(Variant* ptr)
{
    const StringVector& result = ptr->GetStringVector();
    return VectorToArray<String>(result, "Array<String>");
}


// class Variant | File: ../Core/Variant.h
void CollectMembers_Variant(Vector<RegisterObjectMethodArgs>& methods)
{
    // void Variant::FromString(VariantType type, const char* value)
    // Error: type "const char*" can not automatically bind

    // void Variant::FromString(const char* type, const char* value)
    // Error: type "const char*" can not automatically bind

    // const PODVector<unsigned char>& Variant::GetBuffer() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // PODVector<unsigned char>* Variant::GetBufferPtr()
    // Error: type "PODVector<unsigned char>*" can not automatically bind

    // CustomVariantValue* Variant::GetCustomVariantValuePtr()
    // Error: type "CustomVariantValue" can not automatically bind bacause have @nobind mark

    // const CustomVariantValue* Variant::GetCustomVariantValuePtr() const
    // Error: type "CustomVariantValue" can not automatically bind bacause have @nobind mark

    // StringVector* Variant::GetStringVectorPtr()
    // Error: type "StringVector*" can not automatically bind

    // VariantMap* Variant::GetVariantMapPtr()
    // Error: type "VariantMap*" can not automatically bind

    // const VariantVector& Variant::GetVariantVector() const
    // Error: type "const VariantVector&" can not automatically bind

    // VariantVector* Variant::GetVariantVectorPtr()
    // Error: type "VariantVector*" can not automatically bind

    // void* Variant::GetVoidPtr() const
    // Error: type "void*" can not automatically bind

    // void Variant::SetBuffer(const void* data, unsigned size)
    // Error: type "const void*" can not automatically bind

    // void Variant::SetCustomVariantValue(const CustomVariantValue& value)
    // Error: type "CustomVariantValue" can not automatically bind bacause have @nobind mark

    // bool Variant::operator!=(RefCounted* rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(bool rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const IntRect& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const IntVector2& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const IntVector3& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const Matrix3& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const Matrix3x4& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const Matrix4& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const PODVector<unsigned char>& rhs) const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // bool Variant::operator!=(const Quaternion& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const Rect& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const ResourceRef& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const ResourceRefList& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const String& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const StringHash& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const StringVector& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const Variant& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const VariantMap& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const VariantVector& rhs) const
    // Error: type "const VariantVector&" can not automatically bind

    // bool Variant::operator!=(const Vector2& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const Vector3& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const Vector4& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(const VectorBuffer& rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(double rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(float rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(int rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(long long rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(unsigned long long rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(unsigned rhs) const
    // Only operator== is needed

    // bool Variant::operator!=(void* rhs) const
    // Error: type "void*" can not automatically bind

    // Variant& Variant::operator=(const PODVector<unsigned char>& rhs)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // Variant& Variant::operator=(const VariantVector& rhs)
    // Error: type "const VariantVector&" can not automatically bind

    // Variant& Variant::operator=(const char* rhs)
    // Error: type "const char*" can not automatically bind

    // Variant& Variant::operator=(void* rhs)
    // Error: type "void*" can not automatically bind

    // bool Variant::operator==(const PODVector<unsigned char>& rhs) const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // bool Variant::operator==(const VariantVector& rhs) const
    // Error: type "const VariantVector&" can not automatically bind

    // bool Variant::operator==(void* rhs) const
    // Error: type "void*" can not automatically bind

    // void Variant::Clear()
    methods.Push(RegisterObjectMethodArgs("void Variant::Clear()", "void Clear()", AS_METHODPR(Variant, Clear, (), void), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Variant& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Variant& rhs)", "Variant& opAssign(const Variant&in)", AS_METHODPR(Variant, operator=, (const Variant&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(int rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(int rhs)", "Variant& opAssign(int)", AS_METHODPR(Variant, operator=, (int), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(long long rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(long long rhs)", "Variant& opAssign(int64)", AS_METHODPR(Variant, operator=, (long long), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(unsigned long long rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(unsigned long long rhs)", "Variant& opAssign(uint64)", AS_METHODPR(Variant, operator=, (unsigned long long), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(unsigned rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(unsigned rhs)", "Variant& opAssign(uint)", AS_METHODPR(Variant, operator=, (unsigned), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const StringHash& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const StringHash& rhs)", "Variant& opAssign(const StringHash&in)", AS_METHODPR(Variant, operator=, (const StringHash&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(bool rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(bool rhs)", "Variant& opAssign(bool)", AS_METHODPR(Variant, operator=, (bool), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(float rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(float rhs)", "Variant& opAssign(float)", AS_METHODPR(Variant, operator=, (float), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(double rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(double rhs)", "Variant& opAssign(double)", AS_METHODPR(Variant, operator=, (double), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Vector2& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Vector2& rhs)", "Variant& opAssign(const Vector2&in)", AS_METHODPR(Variant, operator=, (const Vector2&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Vector3& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Vector3& rhs)", "Variant& opAssign(const Vector3&in)", AS_METHODPR(Variant, operator=, (const Vector3&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Vector4& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Vector4& rhs)", "Variant& opAssign(const Vector4&in)", AS_METHODPR(Variant, operator=, (const Vector4&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Quaternion& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Quaternion& rhs)", "Variant& opAssign(const Quaternion&in)", AS_METHODPR(Variant, operator=, (const Quaternion&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Color& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Color& rhs)", "Variant& opAssign(const Color&in)", AS_METHODPR(Variant, operator=, (const Color&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const String& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const String& rhs)", "Variant& opAssign(const String&in)", AS_METHODPR(Variant, operator=, (const String&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const VectorBuffer& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const VectorBuffer& rhs)", "Variant& opAssign(const VectorBuffer&in)", AS_METHODPR(Variant, operator=, (const VectorBuffer&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const ResourceRef& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const ResourceRef& rhs)", "Variant& opAssign(const ResourceRef&in)", AS_METHODPR(Variant, operator=, (const ResourceRef&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const ResourceRefList& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const ResourceRefList& rhs)", "Variant& opAssign(const ResourceRefList&in)", AS_METHODPR(Variant, operator=, (const ResourceRefList&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const StringVector& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const StringVector& rhs)", "Variant& opAssign(Array<String>@+)", AS_FUNCTION_OBJFIRST(Variant_operatorequals_StringVector), AS_CALL_CDECL_OBJFIRST));

    // Variant& Variant::operator=(const VariantMap& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const VariantMap& rhs)", "Variant& opAssign(const VariantMap&in)", AS_METHODPR(Variant, operator=, (const VariantMap&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Rect& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Rect& rhs)", "Variant& opAssign(const Rect&in)", AS_METHODPR(Variant, operator=, (const Rect&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const IntRect& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const IntRect& rhs)", "Variant& opAssign(const IntRect&in)", AS_METHODPR(Variant, operator=, (const IntRect&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const IntVector2& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const IntVector2& rhs)", "Variant& opAssign(const IntVector2&in)", AS_METHODPR(Variant, operator=, (const IntVector2&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const IntVector3& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const IntVector3& rhs)", "Variant& opAssign(const IntVector3&in)", AS_METHODPR(Variant, operator=, (const IntVector3&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(RefCounted* rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(RefCounted* rhs)", "Variant& opAssign(RefCounted@+)", AS_METHODPR(Variant, operator=, (RefCounted*), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Matrix3& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Matrix3& rhs)", "Variant& opAssign(const Matrix3&in)", AS_METHODPR(Variant, operator=, (const Matrix3&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Matrix3x4& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Matrix3x4& rhs)", "Variant& opAssign(const Matrix3x4&in)", AS_METHODPR(Variant, operator=, (const Matrix3x4&), Variant&), AS_CALL_THISCALL));

    // Variant& Variant::operator=(const Matrix4& rhs)
    methods.Push(RegisterObjectMethodArgs("Variant& Variant::operator=(const Matrix4& rhs)", "Variant& opAssign(const Matrix4&in)", AS_METHODPR(Variant, operator=, (const Matrix4&), Variant&), AS_CALL_THISCALL));

    // bool Variant::operator==(const Variant& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Variant& rhs) const", "bool opEquals(const Variant&in) const", AS_METHODPR(Variant, operator==, (const Variant&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(int rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(int rhs) const", "bool opEquals(int) const", AS_METHODPR(Variant, operator==, (int) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(unsigned rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(unsigned rhs) const", "bool opEquals(uint) const", AS_METHODPR(Variant, operator==, (unsigned) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(long long rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(long long rhs) const", "bool opEquals(int64) const", AS_METHODPR(Variant, operator==, (long long) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(unsigned long long rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(unsigned long long rhs) const", "bool opEquals(uint64) const", AS_METHODPR(Variant, operator==, (unsigned long long) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(bool rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(bool rhs) const", "bool opEquals(bool) const", AS_METHODPR(Variant, operator==, (bool) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(float rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(float rhs) const", "bool opEquals(float) const", AS_METHODPR(Variant, operator==, (float) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(double rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(double rhs) const", "bool opEquals(double) const", AS_METHODPR(Variant, operator==, (double) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Vector2& rhs) const", "bool opEquals(const Vector2&in) const", AS_METHODPR(Variant, operator==, (const Vector2&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Vector3& rhs) const", "bool opEquals(const Vector3&in) const", AS_METHODPR(Variant, operator==, (const Vector3&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Vector4& rhs) const", "bool opEquals(const Vector4&in) const", AS_METHODPR(Variant, operator==, (const Vector4&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Quaternion& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Quaternion& rhs) const", "bool opEquals(const Quaternion&in) const", AS_METHODPR(Variant, operator==, (const Quaternion&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Color& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Color& rhs) const", "bool opEquals(const Color&in) const", AS_METHODPR(Variant, operator==, (const Color&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const String& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const String& rhs) const", "bool opEquals(const String&in) const", AS_METHODPR(Variant, operator==, (const String&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const VectorBuffer& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const VectorBuffer& rhs) const", "bool opEquals(const VectorBuffer&in) const", AS_METHODPR(Variant, operator==, (const VectorBuffer&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const ResourceRef& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const ResourceRef& rhs) const", "bool opEquals(const ResourceRef&in) const", AS_METHODPR(Variant, operator==, (const ResourceRef&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const ResourceRefList& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const ResourceRefList& rhs) const", "bool opEquals(const ResourceRefList&in) const", AS_METHODPR(Variant, operator==, (const ResourceRefList&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const StringVector& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const StringVector& rhs) const", "bool opEquals(Array<String>@+) const", AS_FUNCTION_OBJFIRST(Variant_operatorequalsequals_StringVector), AS_CALL_CDECL_OBJFIRST));

    // bool Variant::operator==(const VariantMap& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const VariantMap& rhs) const", "bool opEquals(const VariantMap&in) const", AS_METHODPR(Variant, operator==, (const VariantMap&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Rect& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Rect& rhs) const", "bool opEquals(const Rect&in) const", AS_METHODPR(Variant, operator==, (const Rect&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const IntRect& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const IntRect& rhs) const", "bool opEquals(const IntRect&in) const", AS_METHODPR(Variant, operator==, (const IntRect&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const IntVector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const IntVector2& rhs) const", "bool opEquals(const IntVector2&in) const", AS_METHODPR(Variant, operator==, (const IntVector2&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const IntVector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const IntVector3& rhs) const", "bool opEquals(const IntVector3&in) const", AS_METHODPR(Variant, operator==, (const IntVector3&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const StringHash& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const StringHash& rhs) const", "bool opEquals(const StringHash&in) const", AS_METHODPR(Variant, operator==, (const StringHash&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(RefCounted* rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(RefCounted* rhs) const", "bool opEquals(RefCounted@+) const", AS_METHODPR(Variant, operator==, (RefCounted*) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Matrix3& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Matrix3& rhs) const", "bool opEquals(const Matrix3&in) const", AS_METHODPR(Variant, operator==, (const Matrix3&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Matrix3x4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Matrix3x4& rhs) const", "bool opEquals(const Matrix3x4&in) const", AS_METHODPR(Variant, operator==, (const Matrix3x4&) const, bool), AS_CALL_THISCALL));

    // bool Variant::operator==(const Matrix4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Variant::operator==(const Matrix4& rhs) const", "bool opEquals(const Matrix4&in) const", AS_METHODPR(Variant, operator==, (const Matrix4&) const, bool), AS_CALL_THISCALL));

    // void Variant::FromString(const String& type, const String& value)
    methods.Push(RegisterObjectMethodArgs("void Variant::FromString(const String& type, const String& value)", "void FromString(const String&in, const String&in)", AS_METHODPR(Variant, FromString, (const String&, const String&), void), AS_CALL_THISCALL));

    // void Variant::FromString(VariantType type, const String& value)
    methods.Push(RegisterObjectMethodArgs("void Variant::FromString(VariantType type, const String& value)", "void FromString(VariantType, const String&in)", AS_METHODPR(Variant, FromString, (VariantType, const String&), void), AS_CALL_THISCALL));

    // int Variant::GetInt() const
    methods.Push(RegisterObjectMethodArgs("int Variant::GetInt() const", "int GetInt() const", AS_METHODPR(Variant, GetInt, () const, int), AS_CALL_THISCALL));

    // long long Variant::GetInt64() const
    methods.Push(RegisterObjectMethodArgs("long long Variant::GetInt64() const", "int64 GetInt64() const", AS_METHODPR(Variant, GetInt64, () const, long long), AS_CALL_THISCALL));

    // unsigned long long Variant::GetUInt64() const
    methods.Push(RegisterObjectMethodArgs("unsigned long long Variant::GetUInt64() const", "uint64 GetUInt64() const", AS_METHODPR(Variant, GetUInt64, () const, unsigned long long), AS_CALL_THISCALL));

    // unsigned Variant::GetUInt() const
    methods.Push(RegisterObjectMethodArgs("unsigned Variant::GetUInt() const", "uint GetUInt() const", AS_METHODPR(Variant, GetUInt, () const, unsigned), AS_CALL_THISCALL));

    // StringHash Variant::GetStringHash() const
    methods.Push(RegisterObjectMethodArgs("StringHash Variant::GetStringHash() const", "StringHash GetStringHash() const", AS_METHODPR(Variant, GetStringHash, () const, StringHash), AS_CALL_THISCALL));

    // bool Variant::GetBool() const
    methods.Push(RegisterObjectMethodArgs("bool Variant::GetBool() const", "bool GetBool() const", AS_METHODPR(Variant, GetBool, () const, bool), AS_CALL_THISCALL));

    // float Variant::GetFloat() const
    methods.Push(RegisterObjectMethodArgs("float Variant::GetFloat() const", "float GetFloat() const", AS_METHODPR(Variant, GetFloat, () const, float), AS_CALL_THISCALL));

    // double Variant::GetDouble() const
    methods.Push(RegisterObjectMethodArgs("double Variant::GetDouble() const", "double GetDouble() const", AS_METHODPR(Variant, GetDouble, () const, double), AS_CALL_THISCALL));

    // const Vector2& Variant::GetVector2() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& Variant::GetVector2() const", "const Vector2& GetVector2() const", AS_METHODPR(Variant, GetVector2, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector3& Variant::GetVector3() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Variant::GetVector3() const", "const Vector3& GetVector3() const", AS_METHODPR(Variant, GetVector3, () const, const Vector3&), AS_CALL_THISCALL));

    // const Vector4& Variant::GetVector4() const
    methods.Push(RegisterObjectMethodArgs("const Vector4& Variant::GetVector4() const", "const Vector4& GetVector4() const", AS_METHODPR(Variant, GetVector4, () const, const Vector4&), AS_CALL_THISCALL));

    // const Quaternion& Variant::GetQuaternion() const
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Variant::GetQuaternion() const", "const Quaternion& GetQuaternion() const", AS_METHODPR(Variant, GetQuaternion, () const, const Quaternion&), AS_CALL_THISCALL));

    // const Color& Variant::GetColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Variant::GetColor() const", "const Color& GetColor() const", AS_METHODPR(Variant, GetColor, () const, const Color&), AS_CALL_THISCALL));

    // const String& Variant::GetString() const
    methods.Push(RegisterObjectMethodArgs("const String& Variant::GetString() const", "const String& GetString() const", AS_METHODPR(Variant, GetString, () const, const String&), AS_CALL_THISCALL));

    // VectorBuffer Variant::GetVectorBuffer() const
    methods.Push(RegisterObjectMethodArgs("VectorBuffer Variant::GetVectorBuffer() const", "VectorBuffer GetVectorBuffer() const", AS_METHODPR(Variant, GetVectorBuffer, () const, VectorBuffer), AS_CALL_THISCALL));

    // const ResourceRef& Variant::GetResourceRef() const
    methods.Push(RegisterObjectMethodArgs("const ResourceRef& Variant::GetResourceRef() const", "const ResourceRef& GetResourceRef() const", AS_METHODPR(Variant, GetResourceRef, () const, const ResourceRef&), AS_CALL_THISCALL));

    // const ResourceRefList& Variant::GetResourceRefList() const
    methods.Push(RegisterObjectMethodArgs("const ResourceRefList& Variant::GetResourceRefList() const", "const ResourceRefList& GetResourceRefList() const", AS_METHODPR(Variant, GetResourceRefList, () const, const ResourceRefList&), AS_CALL_THISCALL));

    // const StringVector& Variant::GetStringVector() const
    methods.Push(RegisterObjectMethodArgs("const StringVector& Variant::GetStringVector() const", "Array<String>@ GetStringVector() const", AS_FUNCTION_OBJFIRST(Variant_GetStringVector_void), AS_CALL_CDECL_OBJFIRST));

    // const VariantMap& Variant::GetVariantMap() const
    methods.Push(RegisterObjectMethodArgs("const VariantMap& Variant::GetVariantMap() const", "const VariantMap& GetVariantMap() const", AS_METHODPR(Variant, GetVariantMap, () const, const VariantMap&), AS_CALL_THISCALL));

    // const Rect& Variant::GetRect() const
    methods.Push(RegisterObjectMethodArgs("const Rect& Variant::GetRect() const", "const Rect& GetRect() const", AS_METHODPR(Variant, GetRect, () const, const Rect&), AS_CALL_THISCALL));

    // const IntRect& Variant::GetIntRect() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& Variant::GetIntRect() const", "const IntRect& GetIntRect() const", AS_METHODPR(Variant, GetIntRect, () const, const IntRect&), AS_CALL_THISCALL));

    // const IntVector2& Variant::GetIntVector2() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Variant::GetIntVector2() const", "const IntVector2& GetIntVector2() const", AS_METHODPR(Variant, GetIntVector2, () const, const IntVector2&), AS_CALL_THISCALL));

    // const IntVector3& Variant::GetIntVector3() const
    methods.Push(RegisterObjectMethodArgs("const IntVector3& Variant::GetIntVector3() const", "const IntVector3& GetIntVector3() const", AS_METHODPR(Variant, GetIntVector3, () const, const IntVector3&), AS_CALL_THISCALL));

    // RefCounted* Variant::GetPtr() const
    methods.Push(RegisterObjectMethodArgs("RefCounted* Variant::GetPtr() const", "RefCounted@+ GetPtr() const", AS_METHODPR(Variant, GetPtr, () const, RefCounted*), AS_CALL_THISCALL));

    // const Matrix3& Variant::GetMatrix3() const
    methods.Push(RegisterObjectMethodArgs("const Matrix3& Variant::GetMatrix3() const", "const Matrix3& GetMatrix3() const", AS_METHODPR(Variant, GetMatrix3, () const, const Matrix3&), AS_CALL_THISCALL));

    // const Matrix3x4& Variant::GetMatrix3x4() const
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Variant::GetMatrix3x4() const", "const Matrix3x4& GetMatrix3x4() const", AS_METHODPR(Variant, GetMatrix3x4, () const, const Matrix3x4&), AS_CALL_THISCALL));

    // const Matrix4& Variant::GetMatrix4() const
    methods.Push(RegisterObjectMethodArgs("const Matrix4& Variant::GetMatrix4() const", "const Matrix4& GetMatrix4() const", AS_METHODPR(Variant, GetMatrix4, () const, const Matrix4&), AS_CALL_THISCALL));

    // VariantType Variant::GetType() const
    methods.Push(RegisterObjectMethodArgs("VariantType Variant::GetType() const", "VariantType GetType() const", AS_METHODPR(Variant, GetType, () const, VariantType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("VariantType Variant::GetType() const", "VariantType get_type() const", AS_METHODPR(Variant, GetType, () const, VariantType), AS_CALL_THISCALL));

    // String Variant::GetTypeName() const
    methods.Push(RegisterObjectMethodArgs("String Variant::GetTypeName() const", "String GetTypeName() const", AS_METHODPR(Variant, GetTypeName, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String Variant::GetTypeName() const", "String get_typeName() const", AS_METHODPR(Variant, GetTypeName, () const, String), AS_CALL_THISCALL));

    // String Variant::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Variant::ToString() const", "String ToString() const", AS_METHODPR(Variant, ToString, () const, String), AS_CALL_THISCALL));

    // bool Variant::IsZero() const
    methods.Push(RegisterObjectMethodArgs("bool Variant::IsZero() const", "bool IsZero() const", AS_METHODPR(Variant, IsZero, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Variant::IsZero() const", "bool get_zero() const", AS_METHODPR(Variant, IsZero, () const, bool), AS_CALL_THISCALL));

    // bool Variant::IsEmpty() const
    methods.Push(RegisterObjectMethodArgs("bool Variant::IsEmpty() const", "bool IsEmpty() const", AS_METHODPR(Variant, IsEmpty, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Variant::IsEmpty() const", "bool get_empty() const", AS_METHODPR(Variant, IsEmpty, () const, bool), AS_CALL_THISCALL));

    // bool Variant::IsCustom() const
    methods.Push(RegisterObjectMethodArgs("bool Variant::IsCustom() const", "bool IsCustom() const", AS_METHODPR(Variant, IsCustom, () const, bool), AS_CALL_THISCALL));
}

// class Vector2 | File: ../Math/Vector2.h
void CollectMembers_Vector2(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Vector2::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Vector2::operator!=(const Vector2& rhs) const
    // Only operator== is needed

    // Vector2& Vector2::operator=(const Vector2& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Vector2& Vector2::operator=(const Vector2& rhs) noexcept=default", "Vector2& opAssign(const Vector2&in)", AS_METHODPR(Vector2, operator=, (const Vector2&), Vector2&), AS_CALL_THISCALL));

    // bool Vector2::operator==(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Vector2::operator==(const Vector2& rhs) const", "bool opEquals(const Vector2&in) const", AS_METHODPR(Vector2, operator==, (const Vector2&) const, bool), AS_CALL_THISCALL));

    // Vector2 Vector2::operator+(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::operator+(const Vector2& rhs) const", "Vector2 opAdd(const Vector2&in) const", AS_METHODPR(Vector2, operator+, (const Vector2&) const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::operator-() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::operator-() const", "Vector2 opNeg() const", AS_METHODPR(Vector2, operator-, () const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::operator-(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::operator-(const Vector2& rhs) const", "Vector2 opSub(const Vector2&in) const", AS_METHODPR(Vector2, operator-, (const Vector2&) const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::operator*(float rhs) const", "Vector2 opMul(float) const", AS_METHODPR(Vector2, operator*, (float) const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::operator*(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::operator*(const Vector2& rhs) const", "Vector2 opMul(const Vector2&in) const", AS_METHODPR(Vector2, operator*, (const Vector2&) const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::operator/(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::operator/(float rhs) const", "Vector2 opDiv(float) const", AS_METHODPR(Vector2, operator/, (float) const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::operator/(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::operator/(const Vector2& rhs) const", "Vector2 opDiv(const Vector2&in) const", AS_METHODPR(Vector2, operator/, (const Vector2&) const, Vector2), AS_CALL_THISCALL));

    // Vector2& Vector2::operator+=(const Vector2& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector2& Vector2::operator+=(const Vector2& rhs)", "Vector2& opAddAssign(const Vector2&in)", AS_METHODPR(Vector2, operator+=, (const Vector2&), Vector2&), AS_CALL_THISCALL));

    // Vector2& Vector2::operator-=(const Vector2& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector2& Vector2::operator-=(const Vector2& rhs)", "Vector2& opSubAssign(const Vector2&in)", AS_METHODPR(Vector2, operator-=, (const Vector2&), Vector2&), AS_CALL_THISCALL));

    // Vector2& Vector2::operator*=(float rhs)
    methods.Push(RegisterObjectMethodArgs("Vector2& Vector2::operator*=(float rhs)", "Vector2& opMulAssign(float)", AS_METHODPR(Vector2, operator*=, (float), Vector2&), AS_CALL_THISCALL));

    // Vector2& Vector2::operator*=(const Vector2& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector2& Vector2::operator*=(const Vector2& rhs)", "Vector2& opMulAssign(const Vector2&in)", AS_METHODPR(Vector2, operator*=, (const Vector2&), Vector2&), AS_CALL_THISCALL));

    // Vector2& Vector2::operator/=(float rhs)
    methods.Push(RegisterObjectMethodArgs("Vector2& Vector2::operator/=(float rhs)", "Vector2& opDivAssign(float)", AS_METHODPR(Vector2, operator/=, (float), Vector2&), AS_CALL_THISCALL));

    // Vector2& Vector2::operator/=(const Vector2& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector2& Vector2::operator/=(const Vector2& rhs)", "Vector2& opDivAssign(const Vector2&in)", AS_METHODPR(Vector2, operator/=, (const Vector2&), Vector2&), AS_CALL_THISCALL));

    // void Vector2::Normalize()
    methods.Push(RegisterObjectMethodArgs("void Vector2::Normalize()", "void Normalize()", AS_METHODPR(Vector2, Normalize, (), void), AS_CALL_THISCALL));

    // float Vector2::Length() const
    methods.Push(RegisterObjectMethodArgs("float Vector2::Length() const", "float Length() const", AS_METHODPR(Vector2, Length, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Vector2::Length() const", "float get_length() const", AS_METHODPR(Vector2, Length, () const, float), AS_CALL_THISCALL));

    // float Vector2::LengthSquared() const
    methods.Push(RegisterObjectMethodArgs("float Vector2::LengthSquared() const", "float LengthSquared() const", AS_METHODPR(Vector2, LengthSquared, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Vector2::LengthSquared() const", "float get_lengthSquared() const", AS_METHODPR(Vector2, LengthSquared, () const, float), AS_CALL_THISCALL));

    // float Vector2::DotProduct(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Vector2::DotProduct(const Vector2& rhs) const", "float DotProduct(const Vector2&in) const", AS_METHODPR(Vector2, DotProduct, (const Vector2&) const, float), AS_CALL_THISCALL));

    // float Vector2::AbsDotProduct(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Vector2::AbsDotProduct(const Vector2& rhs) const", "float AbsDotProduct(const Vector2&in) const", AS_METHODPR(Vector2, AbsDotProduct, (const Vector2&) const, float), AS_CALL_THISCALL));

    // float Vector2::ProjectOntoAxis(const Vector2& axis) const
    methods.Push(RegisterObjectMethodArgs("float Vector2::ProjectOntoAxis(const Vector2& axis) const", "float ProjectOntoAxis(const Vector2&in) const", AS_METHODPR(Vector2, ProjectOntoAxis, (const Vector2&) const, float), AS_CALL_THISCALL));

    // float Vector2::Angle(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Vector2::Angle(const Vector2& rhs) const", "float Angle(const Vector2&in) const", AS_METHODPR(Vector2, Angle, (const Vector2&) const, float), AS_CALL_THISCALL));

    // Vector2 Vector2::Abs() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::Abs() const", "Vector2 Abs() const", AS_METHODPR(Vector2, Abs, () const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::Lerp(const Vector2& rhs, float t) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::Lerp(const Vector2& rhs, float t) const", "Vector2 Lerp(const Vector2&in, float) const", AS_METHODPR(Vector2, Lerp, (const Vector2&, float) const, Vector2), AS_CALL_THISCALL));

    // bool Vector2::Equals(const Vector2& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Vector2::Equals(const Vector2& rhs) const", "bool Equals(const Vector2&in) const", AS_METHODPR(Vector2, Equals, (const Vector2&) const, bool), AS_CALL_THISCALL));

    // bool Vector2::IsNaN() const
    methods.Push(RegisterObjectMethodArgs("bool Vector2::IsNaN() const", "bool IsNaN() const", AS_METHODPR(Vector2, IsNaN, () const, bool), AS_CALL_THISCALL));

    // bool Vector2::IsInf() const
    methods.Push(RegisterObjectMethodArgs("bool Vector2::IsInf() const", "bool IsInf() const", AS_METHODPR(Vector2, IsInf, () const, bool), AS_CALL_THISCALL));

    // Vector2 Vector2::Normalized() const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::Normalized() const", "Vector2 Normalized() const", AS_METHODPR(Vector2, Normalized, () const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::NormalizedOrDefault(const Vector2& defaultValue=Vector2::ZERO, float eps=M_LARGE_EPSILON) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::NormalizedOrDefault(const Vector2& defaultValue=Vector2::ZERO, float eps=M_LARGE_EPSILON) const", "Vector2 NormalizedOrDefault(const Vector2&in = Vector2::ZERO, float = M_LARGE_EPSILON) const", AS_METHODPR(Vector2, NormalizedOrDefault, (const Vector2&, float) const, Vector2), AS_CALL_THISCALL));

    // Vector2 Vector2::ReNormalized(float minLength, float maxLength, const Vector2& defaultValue=Vector2::ZERO, float eps=M_LARGE_EPSILON) const
    methods.Push(RegisterObjectMethodArgs("Vector2 Vector2::ReNormalized(float minLength, float maxLength, const Vector2& defaultValue=Vector2::ZERO, float eps=M_LARGE_EPSILON) const", "Vector2 ReNormalized(float, float, const Vector2&in = Vector2::ZERO, float = M_LARGE_EPSILON) const", AS_METHODPR(Vector2, ReNormalized, (float, float, const Vector2&, float) const, Vector2), AS_CALL_THISCALL));

    // String Vector2::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Vector2::ToString() const", "String ToString() const", AS_METHODPR(Vector2, ToString, () const, String), AS_CALL_THISCALL));
}

// class Vector3 | File: ../Math/Vector3.h
void CollectMembers_Vector3(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Vector3::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Vector3::operator!=(const Vector3& rhs) const
    // Only operator== is needed

    // Vector3& Vector3::operator=(const Vector3& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Vector3& Vector3::operator=(const Vector3& rhs) noexcept=default", "Vector3& opAssign(const Vector3&in)", AS_METHODPR(Vector3, operator=, (const Vector3&), Vector3&), AS_CALL_THISCALL));

    // bool Vector3::operator==(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Vector3::operator==(const Vector3& rhs) const", "bool opEquals(const Vector3&in) const", AS_METHODPR(Vector3, operator==, (const Vector3&) const, bool), AS_CALL_THISCALL));

    // Vector3 Vector3::operator+(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::operator+(const Vector3& rhs) const", "Vector3 opAdd(const Vector3&in) const", AS_METHODPR(Vector3, operator+, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::operator-() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::operator-() const", "Vector3 opNeg() const", AS_METHODPR(Vector3, operator-, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::operator-(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::operator-(const Vector3& rhs) const", "Vector3 opSub(const Vector3&in) const", AS_METHODPR(Vector3, operator-, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::operator*(float rhs) const", "Vector3 opMul(float) const", AS_METHODPR(Vector3, operator*, (float) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::operator*(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::operator*(const Vector3& rhs) const", "Vector3 opMul(const Vector3&in) const", AS_METHODPR(Vector3, operator*, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::operator/(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::operator/(float rhs) const", "Vector3 opDiv(float) const", AS_METHODPR(Vector3, operator/, (float) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::operator/(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::operator/(const Vector3& rhs) const", "Vector3 opDiv(const Vector3&in) const", AS_METHODPR(Vector3, operator/, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3& Vector3::operator+=(const Vector3& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector3& Vector3::operator+=(const Vector3& rhs)", "Vector3& opAddAssign(const Vector3&in)", AS_METHODPR(Vector3, operator+=, (const Vector3&), Vector3&), AS_CALL_THISCALL));

    // Vector3& Vector3::operator-=(const Vector3& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector3& Vector3::operator-=(const Vector3& rhs)", "Vector3& opSubAssign(const Vector3&in)", AS_METHODPR(Vector3, operator-=, (const Vector3&), Vector3&), AS_CALL_THISCALL));

    // Vector3& Vector3::operator*=(float rhs)
    methods.Push(RegisterObjectMethodArgs("Vector3& Vector3::operator*=(float rhs)", "Vector3& opMulAssign(float)", AS_METHODPR(Vector3, operator*=, (float), Vector3&), AS_CALL_THISCALL));

    // Vector3& Vector3::operator*=(const Vector3& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector3& Vector3::operator*=(const Vector3& rhs)", "Vector3& opMulAssign(const Vector3&in)", AS_METHODPR(Vector3, operator*=, (const Vector3&), Vector3&), AS_CALL_THISCALL));

    // Vector3& Vector3::operator/=(float rhs)
    methods.Push(RegisterObjectMethodArgs("Vector3& Vector3::operator/=(float rhs)", "Vector3& opDivAssign(float)", AS_METHODPR(Vector3, operator/=, (float), Vector3&), AS_CALL_THISCALL));

    // Vector3& Vector3::operator/=(const Vector3& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector3& Vector3::operator/=(const Vector3& rhs)", "Vector3& opDivAssign(const Vector3&in)", AS_METHODPR(Vector3, operator/=, (const Vector3&), Vector3&), AS_CALL_THISCALL));

    // void Vector3::Normalize()
    methods.Push(RegisterObjectMethodArgs("void Vector3::Normalize()", "void Normalize()", AS_METHODPR(Vector3, Normalize, (), void), AS_CALL_THISCALL));

    // float Vector3::Length() const
    methods.Push(RegisterObjectMethodArgs("float Vector3::Length() const", "float Length() const", AS_METHODPR(Vector3, Length, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Vector3::Length() const", "float get_length() const", AS_METHODPR(Vector3, Length, () const, float), AS_CALL_THISCALL));

    // float Vector3::LengthSquared() const
    methods.Push(RegisterObjectMethodArgs("float Vector3::LengthSquared() const", "float LengthSquared() const", AS_METHODPR(Vector3, LengthSquared, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Vector3::LengthSquared() const", "float get_lengthSquared() const", AS_METHODPR(Vector3, LengthSquared, () const, float), AS_CALL_THISCALL));

    // float Vector3::DotProduct(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Vector3::DotProduct(const Vector3& rhs) const", "float DotProduct(const Vector3&in) const", AS_METHODPR(Vector3, DotProduct, (const Vector3&) const, float), AS_CALL_THISCALL));

    // float Vector3::AbsDotProduct(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Vector3::AbsDotProduct(const Vector3& rhs) const", "float AbsDotProduct(const Vector3&in) const", AS_METHODPR(Vector3, AbsDotProduct, (const Vector3&) const, float), AS_CALL_THISCALL));

    // float Vector3::ProjectOntoAxis(const Vector3& axis) const
    methods.Push(RegisterObjectMethodArgs("float Vector3::ProjectOntoAxis(const Vector3& axis) const", "float ProjectOntoAxis(const Vector3&in) const", AS_METHODPR(Vector3, ProjectOntoAxis, (const Vector3&) const, float), AS_CALL_THISCALL));

    // Vector3 Vector3::ProjectOntoPlane(const Vector3& origin, const Vector3& normal) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::ProjectOntoPlane(const Vector3& origin, const Vector3& normal) const", "Vector3 ProjectOntoPlane(const Vector3&in, const Vector3&in) const", AS_METHODPR(Vector3, ProjectOntoPlane, (const Vector3&, const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::ProjectOntoLine(const Vector3& from, const Vector3& to, bool clamped=false) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::ProjectOntoLine(const Vector3& from, const Vector3& to, bool clamped=false) const", "Vector3 ProjectOntoLine(const Vector3&in, const Vector3&in, bool = false) const", AS_METHODPR(Vector3, ProjectOntoLine, (const Vector3&, const Vector3&, bool) const, Vector3), AS_CALL_THISCALL));

    // float Vector3::DistanceToPoint(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("float Vector3::DistanceToPoint(const Vector3& point) const", "float DistanceToPoint(const Vector3&in) const", AS_METHODPR(Vector3, DistanceToPoint, (const Vector3&) const, float), AS_CALL_THISCALL));

    // float Vector3::DistanceToPlane(const Vector3& origin, const Vector3& normal) const
    methods.Push(RegisterObjectMethodArgs("float Vector3::DistanceToPlane(const Vector3& origin, const Vector3& normal) const", "float DistanceToPlane(const Vector3&in, const Vector3&in) const", AS_METHODPR(Vector3, DistanceToPlane, (const Vector3&, const Vector3&) const, float), AS_CALL_THISCALL));

    // Vector3 Vector3::Orthogonalize(const Vector3& axis) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::Orthogonalize(const Vector3& axis) const", "Vector3 Orthogonalize(const Vector3&in) const", AS_METHODPR(Vector3, Orthogonalize, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::CrossProduct(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::CrossProduct(const Vector3& rhs) const", "Vector3 CrossProduct(const Vector3&in) const", AS_METHODPR(Vector3, CrossProduct, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::Abs() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::Abs() const", "Vector3 Abs() const", AS_METHODPR(Vector3, Abs, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::Lerp(const Vector3& rhs, float t) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::Lerp(const Vector3& rhs, float t) const", "Vector3 Lerp(const Vector3&in, float) const", AS_METHODPR(Vector3, Lerp, (const Vector3&, float) const, Vector3), AS_CALL_THISCALL));

    // bool Vector3::Equals(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Vector3::Equals(const Vector3& rhs) const", "bool Equals(const Vector3&in) const", AS_METHODPR(Vector3, Equals, (const Vector3&) const, bool), AS_CALL_THISCALL));

    // float Vector3::Angle(const Vector3& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Vector3::Angle(const Vector3& rhs) const", "float Angle(const Vector3&in) const", AS_METHODPR(Vector3, Angle, (const Vector3&) const, float), AS_CALL_THISCALL));

    // bool Vector3::IsNaN() const
    methods.Push(RegisterObjectMethodArgs("bool Vector3::IsNaN() const", "bool IsNaN() const", AS_METHODPR(Vector3, IsNaN, () const, bool), AS_CALL_THISCALL));

    // bool Vector3::IsInf() const
    methods.Push(RegisterObjectMethodArgs("bool Vector3::IsInf() const", "bool IsInf() const", AS_METHODPR(Vector3, IsInf, () const, bool), AS_CALL_THISCALL));

    // Vector3 Vector3::Normalized() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::Normalized() const", "Vector3 Normalized() const", AS_METHODPR(Vector3, Normalized, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::NormalizedOrDefault(const Vector3& defaultValue=Vector3::ZERO, float eps=M_LARGE_EPSILON) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::NormalizedOrDefault(const Vector3& defaultValue=Vector3::ZERO, float eps=M_LARGE_EPSILON) const", "Vector3 NormalizedOrDefault(const Vector3&in = Vector3::ZERO, float = M_LARGE_EPSILON) const", AS_METHODPR(Vector3, NormalizedOrDefault, (const Vector3&, float) const, Vector3), AS_CALL_THISCALL));

    // Vector3 Vector3::ReNormalized(float minLength, float maxLength, const Vector3& defaultValue=Vector3::ZERO, float eps=M_LARGE_EPSILON) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Vector3::ReNormalized(float minLength, float maxLength, const Vector3& defaultValue=Vector3::ZERO, float eps=M_LARGE_EPSILON) const", "Vector3 ReNormalized(float, float, const Vector3&in = Vector3::ZERO, float = M_LARGE_EPSILON) const", AS_METHODPR(Vector3, ReNormalized, (float, float, const Vector3&, float) const, Vector3), AS_CALL_THISCALL));

    // String Vector3::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Vector3::ToString() const", "String ToString() const", AS_METHODPR(Vector3, ToString, () const, String), AS_CALL_THISCALL));

    // unsigned Vector3::ToHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned Vector3::ToHash() const", "uint ToHash() const", AS_METHODPR(Vector3, ToHash, () const, unsigned), AS_CALL_THISCALL));
}

// class Vector4 | File: ../Math/Vector4.h
void CollectMembers_Vector4(Vector<RegisterObjectMethodArgs>& methods)
{
    // const float* Vector4::Data() const
    // Error: type "const float*" can not automatically bind

    // bool Vector4::operator!=(const Vector4& rhs) const
    // Only operator== is needed

    // Vector4& Vector4::operator=(const Vector4& rhs) noexcept=default
    methods.Push(RegisterObjectMethodArgs("Vector4& Vector4::operator=(const Vector4& rhs) noexcept=default", "Vector4& opAssign(const Vector4&in)", AS_METHODPR(Vector4, operator=, (const Vector4&), Vector4&), AS_CALL_THISCALL));

    // bool Vector4::operator==(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Vector4::operator==(const Vector4& rhs) const", "bool opEquals(const Vector4&in) const", AS_METHODPR(Vector4, operator==, (const Vector4&) const, bool), AS_CALL_THISCALL));

    // Vector4 Vector4::operator+(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::operator+(const Vector4& rhs) const", "Vector4 opAdd(const Vector4&in) const", AS_METHODPR(Vector4, operator+, (const Vector4&) const, Vector4), AS_CALL_THISCALL));

    // Vector4 Vector4::operator-() const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::operator-() const", "Vector4 opNeg() const", AS_METHODPR(Vector4, operator-, () const, Vector4), AS_CALL_THISCALL));

    // Vector4 Vector4::operator-(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::operator-(const Vector4& rhs) const", "Vector4 opSub(const Vector4&in) const", AS_METHODPR(Vector4, operator-, (const Vector4&) const, Vector4), AS_CALL_THISCALL));

    // Vector4 Vector4::operator*(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::operator*(float rhs) const", "Vector4 opMul(float) const", AS_METHODPR(Vector4, operator*, (float) const, Vector4), AS_CALL_THISCALL));

    // Vector4 Vector4::operator*(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::operator*(const Vector4& rhs) const", "Vector4 opMul(const Vector4&in) const", AS_METHODPR(Vector4, operator*, (const Vector4&) const, Vector4), AS_CALL_THISCALL));

    // Vector4 Vector4::operator/(float rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::operator/(float rhs) const", "Vector4 opDiv(float) const", AS_METHODPR(Vector4, operator/, (float) const, Vector4), AS_CALL_THISCALL));

    // Vector4 Vector4::operator/(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::operator/(const Vector4& rhs) const", "Vector4 opDiv(const Vector4&in) const", AS_METHODPR(Vector4, operator/, (const Vector4&) const, Vector4), AS_CALL_THISCALL));

    // Vector4& Vector4::operator+=(const Vector4& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector4& Vector4::operator+=(const Vector4& rhs)", "Vector4& opAddAssign(const Vector4&in)", AS_METHODPR(Vector4, operator+=, (const Vector4&), Vector4&), AS_CALL_THISCALL));

    // Vector4& Vector4::operator-=(const Vector4& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector4& Vector4::operator-=(const Vector4& rhs)", "Vector4& opSubAssign(const Vector4&in)", AS_METHODPR(Vector4, operator-=, (const Vector4&), Vector4&), AS_CALL_THISCALL));

    // Vector4& Vector4::operator*=(float rhs)
    methods.Push(RegisterObjectMethodArgs("Vector4& Vector4::operator*=(float rhs)", "Vector4& opMulAssign(float)", AS_METHODPR(Vector4, operator*=, (float), Vector4&), AS_CALL_THISCALL));

    // Vector4& Vector4::operator*=(const Vector4& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector4& Vector4::operator*=(const Vector4& rhs)", "Vector4& opMulAssign(const Vector4&in)", AS_METHODPR(Vector4, operator*=, (const Vector4&), Vector4&), AS_CALL_THISCALL));

    // Vector4& Vector4::operator/=(float rhs)
    methods.Push(RegisterObjectMethodArgs("Vector4& Vector4::operator/=(float rhs)", "Vector4& opDivAssign(float)", AS_METHODPR(Vector4, operator/=, (float), Vector4&), AS_CALL_THISCALL));

    // Vector4& Vector4::operator/=(const Vector4& rhs)
    methods.Push(RegisterObjectMethodArgs("Vector4& Vector4::operator/=(const Vector4& rhs)", "Vector4& opDivAssign(const Vector4&in)", AS_METHODPR(Vector4, operator/=, (const Vector4&), Vector4&), AS_CALL_THISCALL));

    // float Vector4::operator[](unsigned index) const
    methods.Push(RegisterObjectMethodArgs("float Vector4::operator[](unsigned index) const", "float opIndex(uint) const", AS_METHODPR(Vector4, operator[], (unsigned) const, float), AS_CALL_THISCALL));

    // float& Vector4::operator[](unsigned index)
    methods.Push(RegisterObjectMethodArgs("float& Vector4::operator[](unsigned index)", "float& opIndex(uint)", AS_METHODPR(Vector4, operator[], (unsigned), float&), AS_CALL_THISCALL));

    // float Vector4::DotProduct(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Vector4::DotProduct(const Vector4& rhs) const", "float DotProduct(const Vector4&in) const", AS_METHODPR(Vector4, DotProduct, (const Vector4&) const, float), AS_CALL_THISCALL));

    // float Vector4::AbsDotProduct(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("float Vector4::AbsDotProduct(const Vector4& rhs) const", "float AbsDotProduct(const Vector4&in) const", AS_METHODPR(Vector4, AbsDotProduct, (const Vector4&) const, float), AS_CALL_THISCALL));

    // float Vector4::ProjectOntoAxis(const Vector3& axis) const
    methods.Push(RegisterObjectMethodArgs("float Vector4::ProjectOntoAxis(const Vector3& axis) const", "float ProjectOntoAxis(const Vector3&in) const", AS_METHODPR(Vector4, ProjectOntoAxis, (const Vector3&) const, float), AS_CALL_THISCALL));

    // Vector4 Vector4::Abs() const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::Abs() const", "Vector4 Abs() const", AS_METHODPR(Vector4, Abs, () const, Vector4), AS_CALL_THISCALL));

    // Vector4 Vector4::Lerp(const Vector4& rhs, float t) const
    methods.Push(RegisterObjectMethodArgs("Vector4 Vector4::Lerp(const Vector4& rhs, float t) const", "Vector4 Lerp(const Vector4&in, float) const", AS_METHODPR(Vector4, Lerp, (const Vector4&, float) const, Vector4), AS_CALL_THISCALL));

    // bool Vector4::Equals(const Vector4& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool Vector4::Equals(const Vector4& rhs) const", "bool Equals(const Vector4&in) const", AS_METHODPR(Vector4, Equals, (const Vector4&) const, bool), AS_CALL_THISCALL));

    // bool Vector4::IsNaN() const
    methods.Push(RegisterObjectMethodArgs("bool Vector4::IsNaN() const", "bool IsNaN() const", AS_METHODPR(Vector4, IsNaN, () const, bool), AS_CALL_THISCALL));

    // bool Vector4::IsInf() const
    methods.Push(RegisterObjectMethodArgs("bool Vector4::IsInf() const", "bool IsInf() const", AS_METHODPR(Vector4, IsInf, () const, bool), AS_CALL_THISCALL));

    // explicit Vector4::operator Vector2() const
    methods.Push(RegisterObjectMethodArgs("explicit Vector4::operator Vector2() const", "Vector2 opConv() const", AS_METHODPR(Vector4, operator Vector2, () const, Vector2), AS_CALL_THISCALL));

    // explicit Vector4::operator Vector3() const
    methods.Push(RegisterObjectMethodArgs("explicit Vector4::operator Vector3() const", "Vector3 opConv() const", AS_METHODPR(Vector4, operator Vector3, () const, Vector3), AS_CALL_THISCALL));

    // String Vector4::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Vector4::ToString() const", "String ToString() const", AS_METHODPR(Vector4, ToString, () const, String), AS_CALL_THISCALL));

    // unsigned Vector4::ToHash() const
    methods.Push(RegisterObjectMethodArgs("unsigned Vector4::ToHash() const", "uint ToHash() const", AS_METHODPR(Vector4, ToHash, () const, unsigned), AS_CALL_THISCALL));
}

// class VectorBase | File: ../Container/VectorBase.h
void CollectMembers_VectorBase(Vector<RegisterObjectMethodArgs>& methods)
{
    // void VectorBase::Swap(VectorBase& rhs)
    methods.Push(RegisterObjectMethodArgs("void VectorBase::Swap(VectorBase& rhs)", "void Swap(VectorBase&)", AS_METHODPR(VectorBase, Swap, (VectorBase&), void), AS_CALL_THISCALL));
}

// class VectorBuffer | File: ../IO/VectorBuffer.h
void CollectMembers_VectorBuffer(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_AbstractFile(methods);

    Remove(methods, "virtual unsigned Deserializer::Read(void* dest, unsigned size)=0");
    Remove(methods, "virtual unsigned Deserializer::Seek(unsigned position)=0");
    Remove(methods, "virtual unsigned Serializer::Write(const void* data, unsigned size)=0");

    // const PODVector<unsigned char>& VectorBuffer::GetBuffer() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // const unsigned char* VectorBuffer::GetData() const
    // Error: type "const unsigned char*" can not automatically bind

    // unsigned char* VectorBuffer::GetModifiableData()
    // Error: type "unsigned char*" can not automatically bind

    // unsigned VectorBuffer::Read(void* dest, unsigned size) override
    // Error: type "void*" can not automatically bind

    // void VectorBuffer::SetData(const PODVector<unsigned char>& data)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void VectorBuffer::SetData(const void* data, unsigned size)
    // Error: type "const void*" can not automatically bind

    // unsigned VectorBuffer::Write(const void* data, unsigned size) override
    // Error: type "const void*" can not automatically bind

    // unsigned VectorBuffer::Seek(unsigned position) override
    methods.Push(RegisterObjectMethodArgs("unsigned VectorBuffer::Seek(unsigned position) override", "uint Seek(uint)", AS_METHODPR(VectorBuffer, Seek, (unsigned), unsigned), AS_CALL_THISCALL));

    // void VectorBuffer::SetData(Deserializer& source, unsigned size)
    methods.Push(RegisterObjectMethodArgs("void VectorBuffer::SetData(Deserializer& source, unsigned size)", "void SetData(Deserializer&, uint)", AS_METHODPR(VectorBuffer, SetData, (Deserializer&, unsigned), void), AS_CALL_THISCALL));

    // void VectorBuffer::Clear()
    methods.Push(RegisterObjectMethodArgs("void VectorBuffer::Clear()", "void Clear()", AS_METHODPR(VectorBuffer, Clear, (), void), AS_CALL_THISCALL));

    // void VectorBuffer::Resize(unsigned size)
    methods.Push(RegisterObjectMethodArgs("void VectorBuffer::Resize(unsigned size)", "void Resize(uint)", AS_METHODPR(VectorBuffer, Resize, (unsigned), void), AS_CALL_THISCALL));
}

// bool VertexBuffer::SetSize(unsigned vertexCount, const PODVector<VertexElement>& elements, bool dynamic=false)
// bool VertexBuffer::SetSize(unsigned vertexCount, const PODVector<VertexElement>& elements, bool dynamic=false) | File: ../Graphics/VertexBuffer.h
static bool VertexBuffer_SetSize_unsigned_PODVectorVertexElement_bool(VertexBuffer* ptr, unsigned vertexCount, CScriptArray* elements_conv, bool dynamic)
{
    PODVector<VertexElement> elements = ArrayToPODVector<VertexElement>(elements_conv);
    bool result = ptr->SetSize(vertexCount, elements, dynamic);
    return result;
}


// const PODVector<VertexElement>& VertexBuffer::GetElements() const
// const PODVector<VertexElement>& VertexBuffer::GetElements() const | File: ../Graphics/VertexBuffer.h
static CScriptArray* VertexBuffer_GetElements_void(VertexBuffer* ptr)
{
    const PODVector<VertexElement>& result = ptr->GetElements();
    return VectorToArray(result, "Array<VertexElement>");
}


// class VertexBuffer | File: ../Graphics/VertexBuffer.h
void CollectMembers_VertexBuffer(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);
    CollectMembers_GPUObject(methods);

    Remove(methods, "virtual void GPUObject::OnDeviceLost()");
    Remove(methods, "virtual void GPUObject::OnDeviceReset()");
    Remove(methods, "virtual void GPUObject::Release()");

    // const VertexElement* VertexBuffer::GetElement(VertexElementSemantic semantic, unsigned char index=0) const
    // Error: type "const VertexElement*" can not automatically bind

    // const VertexElement* VertexBuffer::GetElement(VertexElementType type, VertexElementSemantic semantic, unsigned char index=0) const
    // Error: type "const VertexElement*" can not automatically bind

    // unsigned char* VertexBuffer::GetShadowData() const
    // Error: type "unsigned char*" can not automatically bind

    // SharedArrayPtr<unsigned char> VertexBuffer::GetShadowDataShared() const
    // Error: type "SharedArrayPtr<unsigned char>" can not automatically bind

    // void* VertexBuffer::Lock(unsigned start, unsigned count, bool discard=false)
    // Error: type "void*" can not automatically bind

    // bool VertexBuffer::SetData(const void* data)
    // Error: type "const void*" can not automatically bind

    // bool VertexBuffer::SetDataRange(const void* data, unsigned start, unsigned count, bool discard=false)
    // Error: type "const void*" can not automatically bind

    // void VertexBuffer::OnDeviceLost() override
    methods.Push(RegisterObjectMethodArgs("void VertexBuffer::OnDeviceLost() override", "void OnDeviceLost()", AS_METHODPR(VertexBuffer, OnDeviceLost, (), void), AS_CALL_THISCALL));

    // void VertexBuffer::OnDeviceReset() override
    methods.Push(RegisterObjectMethodArgs("void VertexBuffer::OnDeviceReset() override", "void OnDeviceReset()", AS_METHODPR(VertexBuffer, OnDeviceReset, (), void), AS_CALL_THISCALL));

    // void VertexBuffer::Release() override
    methods.Push(RegisterObjectMethodArgs("void VertexBuffer::Release() override", "void Release()", AS_METHODPR(VertexBuffer, Release, (), void), AS_CALL_THISCALL));

    // void VertexBuffer::SetShadowed(bool enable)
    methods.Push(RegisterObjectMethodArgs("void VertexBuffer::SetShadowed(bool enable)", "void SetShadowed(bool)", AS_METHODPR(VertexBuffer, SetShadowed, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void VertexBuffer::SetShadowed(bool enable)", "void set_shadowed(bool)", AS_METHODPR(VertexBuffer, SetShadowed, (bool), void), AS_CALL_THISCALL));

    // bool VertexBuffer::SetSize(unsigned vertexCount, const PODVector<VertexElement>& elements, bool dynamic=false)
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::SetSize(unsigned vertexCount, const PODVector<VertexElement>& elements, bool dynamic=false)", "bool SetSize(uint, Array<VertexElement>@+, bool = false)", AS_FUNCTION_OBJFIRST(VertexBuffer_SetSize_unsigned_PODVectorVertexElement_bool), AS_CALL_CDECL_OBJFIRST));

    // bool VertexBuffer::SetSize(unsigned vertexCount, unsigned elementMask, bool dynamic=false)
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::SetSize(unsigned vertexCount, unsigned elementMask, bool dynamic=false)", "bool SetSize(uint, uint, bool = false)", AS_METHODPR(VertexBuffer, SetSize, (unsigned, unsigned, bool), bool), AS_CALL_THISCALL));

    // void VertexBuffer::Unlock()
    methods.Push(RegisterObjectMethodArgs("void VertexBuffer::Unlock()", "void Unlock()", AS_METHODPR(VertexBuffer, Unlock, (), void), AS_CALL_THISCALL));

    // bool VertexBuffer::IsShadowed() const
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::IsShadowed() const", "bool IsShadowed() const", AS_METHODPR(VertexBuffer, IsShadowed, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::IsShadowed() const", "bool get_shadowed() const", AS_METHODPR(VertexBuffer, IsShadowed, () const, bool), AS_CALL_THISCALL));

    // bool VertexBuffer::IsDynamic() const
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::IsDynamic() const", "bool IsDynamic() const", AS_METHODPR(VertexBuffer, IsDynamic, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::IsDynamic() const", "bool get_dynamic() const", AS_METHODPR(VertexBuffer, IsDynamic, () const, bool), AS_CALL_THISCALL));

    // bool VertexBuffer::IsLocked() const
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::IsLocked() const", "bool IsLocked() const", AS_METHODPR(VertexBuffer, IsLocked, () const, bool), AS_CALL_THISCALL));

    // unsigned VertexBuffer::GetVertexCount() const
    methods.Push(RegisterObjectMethodArgs("unsigned VertexBuffer::GetVertexCount() const", "uint GetVertexCount() const", AS_METHODPR(VertexBuffer, GetVertexCount, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned VertexBuffer::GetVertexCount() const", "uint get_vertexCount() const", AS_METHODPR(VertexBuffer, GetVertexCount, () const, unsigned), AS_CALL_THISCALL));

    // unsigned VertexBuffer::GetVertexSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned VertexBuffer::GetVertexSize() const", "uint GetVertexSize() const", AS_METHODPR(VertexBuffer, GetVertexSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned VertexBuffer::GetVertexSize() const", "uint get_vertexSize() const", AS_METHODPR(VertexBuffer, GetVertexSize, () const, unsigned), AS_CALL_THISCALL));

    // const PODVector<VertexElement>& VertexBuffer::GetElements() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<VertexElement>& VertexBuffer::GetElements() const", "Array<VertexElement>@ GetElements() const", AS_FUNCTION_OBJFIRST(VertexBuffer_GetElements_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("const PODVector<VertexElement>& VertexBuffer::GetElements() const", "Array<VertexElement>@ get_elements() const", AS_FUNCTION_OBJFIRST(VertexBuffer_GetElements_void), AS_CALL_CDECL_OBJFIRST));

    // bool VertexBuffer::HasElement(VertexElementSemantic semantic, unsigned char index=0) const
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::HasElement(VertexElementSemantic semantic, unsigned char index=0) const", "bool HasElement(VertexElementSemantic, uint8 = 0) const", AS_METHODPR(VertexBuffer, HasElement, (VertexElementSemantic, unsigned char) const, bool), AS_CALL_THISCALL));

    // bool VertexBuffer::HasElement(VertexElementType type, VertexElementSemantic semantic, unsigned char index=0) const
    methods.Push(RegisterObjectMethodArgs("bool VertexBuffer::HasElement(VertexElementType type, VertexElementSemantic semantic, unsigned char index=0) const", "bool HasElement(VertexElementType, VertexElementSemantic, uint8 = 0) const", AS_METHODPR(VertexBuffer, HasElement, (VertexElementType, VertexElementSemantic, unsigned char) const, bool), AS_CALL_THISCALL));

    // unsigned VertexBuffer::GetElementOffset(VertexElementSemantic semantic, unsigned char index=0) const
    methods.Push(RegisterObjectMethodArgs("unsigned VertexBuffer::GetElementOffset(VertexElementSemantic semantic, unsigned char index=0) const", "uint GetElementOffset(VertexElementSemantic, uint8 = 0) const", AS_METHODPR(VertexBuffer, GetElementOffset, (VertexElementSemantic, unsigned char) const, unsigned), AS_CALL_THISCALL));

    // unsigned VertexBuffer::GetElementOffset(VertexElementType type, VertexElementSemantic semantic, unsigned char index=0) const
    methods.Push(RegisterObjectMethodArgs("unsigned VertexBuffer::GetElementOffset(VertexElementType type, VertexElementSemantic semantic, unsigned char index=0) const", "uint GetElementOffset(VertexElementType, VertexElementSemantic, uint8 = 0) const", AS_METHODPR(VertexBuffer, GetElementOffset, (VertexElementType, VertexElementSemantic, unsigned char) const, unsigned), AS_CALL_THISCALL));

    // VertexMaskFlags VertexBuffer::GetElementMask() const
    methods.Push(RegisterObjectMethodArgs("VertexMaskFlags VertexBuffer::GetElementMask() const", "VertexMaskFlags GetElementMask() const", AS_METHODPR(VertexBuffer, GetElementMask, () const, VertexMaskFlags), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("VertexMaskFlags VertexBuffer::GetElementMask() const", "VertexMaskFlags get_elementMask() const", AS_METHODPR(VertexBuffer, GetElementMask, () const, VertexMaskFlags), AS_CALL_THISCALL));

    // unsigned long long VertexBuffer::GetBufferHash(unsigned streamIndex)
    methods.Push(RegisterObjectMethodArgs("unsigned long long VertexBuffer::GetBufferHash(unsigned streamIndex)", "uint64 GetBufferHash(uint)", AS_METHODPR(VertexBuffer, GetBufferHash, (unsigned), unsigned long long), AS_CALL_THISCALL));
}

// struct VertexBufferDesc | File: ../Graphics/Model.h
void CollectMembers_VertexBufferDesc(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct VertexBufferMorph | File: ../Graphics/Model.h
void CollectMembers_VertexBufferMorph(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct VertexElement | File: ../Graphics/GraphicsDefs.h
void CollectMembers_VertexElement(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool VertexElement::operator!=(const VertexElement& rhs) const
    // Only operator== is needed

    // bool VertexElement::operator==(const VertexElement& rhs) const
    methods.Push(RegisterObjectMethodArgs("bool VertexElement::operator==(const VertexElement& rhs) const", "bool opEquals(const VertexElement&in) const", AS_METHODPR(VertexElement, operator==, (const VertexElement&) const, bool), AS_CALL_THISCALL));
}

// const PODVector<Drawable*>& View::GetGeometries() const
// const PODVector<Drawable*>& View::GetGeometries() const | File: ../Graphics/View.h
static CScriptArray* View_GetGeometries_void(View* ptr)
{
    const PODVector<Drawable*>& result = ptr->GetGeometries();
    return VectorToHandleArray(result, "Array<Drawable@>");
}


// const PODVector<Drawable*>& View::GetOccluders() const
// const PODVector<Drawable*>& View::GetOccluders() const | File: ../Graphics/View.h
static CScriptArray* View_GetOccluders_void(View* ptr)
{
    const PODVector<Drawable*>& result = ptr->GetOccluders();
    return VectorToHandleArray(result, "Array<Drawable@>");
}


// const PODVector<Light*>& View::GetLights() const
// const PODVector<Light*>& View::GetLights() const | File: ../Graphics/View.h
static CScriptArray* View_GetLights_void(View* ptr)
{
    const PODVector<Light*>& result = ptr->GetLights();
    return VectorToHandleArray(result, "Array<Light@>");
}


// class View | File: ../Graphics/View.h
void CollectMembers_View(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // const Vector<LightBatchQueue>& View::GetLightQueues() const
    // Error: type "const Vector<LightBatchQueue>&" can not automatically bind

    // bool View::Define(RenderSurface* renderTarget, Viewport* viewport)
    methods.Push(RegisterObjectMethodArgs("bool View::Define(RenderSurface* renderTarget, Viewport* viewport)", "bool Define(RenderSurface@+, Viewport@+)", AS_METHODPR(View, Define, (RenderSurface*, Viewport*), bool), AS_CALL_THISCALL));

    // void View::Update(const FrameInfo& frame)
    methods.Push(RegisterObjectMethodArgs("void View::Update(const FrameInfo& frame)", "void Update(const FrameInfo&in)", AS_METHODPR(View, Update, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void View::Render()
    methods.Push(RegisterObjectMethodArgs("void View::Render()", "void Render()", AS_METHODPR(View, Render, (), void), AS_CALL_THISCALL));

    // Graphics* View::GetGraphics() const
    methods.Push(RegisterObjectMethodArgs("Graphics* View::GetGraphics() const", "Graphics@+ GetGraphics() const", AS_METHODPR(View, GetGraphics, () const, Graphics*), AS_CALL_THISCALL));

    // Renderer* View::GetRenderer() const
    methods.Push(RegisterObjectMethodArgs("Renderer* View::GetRenderer() const", "Renderer@+ GetRenderer() const", AS_METHODPR(View, GetRenderer, () const, Renderer*), AS_CALL_THISCALL));

    // Scene* View::GetScene() const
    methods.Push(RegisterObjectMethodArgs("Scene* View::GetScene() const", "Scene@+ GetScene() const", AS_METHODPR(View, GetScene, () const, Scene*), AS_CALL_THISCALL));

    // Octree* View::GetOctree() const
    methods.Push(RegisterObjectMethodArgs("Octree* View::GetOctree() const", "Octree@+ GetOctree() const", AS_METHODPR(View, GetOctree, () const, Octree*), AS_CALL_THISCALL));

    // Camera* View::GetCamera() const
    methods.Push(RegisterObjectMethodArgs("Camera* View::GetCamera() const", "Camera@+ GetCamera() const", AS_METHODPR(View, GetCamera, () const, Camera*), AS_CALL_THISCALL));

    // Camera* View::GetCullCamera() const
    methods.Push(RegisterObjectMethodArgs("Camera* View::GetCullCamera() const", "Camera@+ GetCullCamera() const", AS_METHODPR(View, GetCullCamera, () const, Camera*), AS_CALL_THISCALL));

    // const FrameInfo& View::GetFrameInfo() const
    methods.Push(RegisterObjectMethodArgs("const FrameInfo& View::GetFrameInfo() const", "const FrameInfo& GetFrameInfo() const", AS_METHODPR(View, GetFrameInfo, () const, const FrameInfo&), AS_CALL_THISCALL));

    // RenderSurface* View::GetRenderTarget() const
    methods.Push(RegisterObjectMethodArgs("RenderSurface* View::GetRenderTarget() const", "RenderSurface@+ GetRenderTarget() const", AS_METHODPR(View, GetRenderTarget, () const, RenderSurface*), AS_CALL_THISCALL));

    // bool View::GetDrawDebug() const
    methods.Push(RegisterObjectMethodArgs("bool View::GetDrawDebug() const", "bool GetDrawDebug() const", AS_METHODPR(View, GetDrawDebug, () const, bool), AS_CALL_THISCALL));

    // const IntRect& View::GetViewRect() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& View::GetViewRect() const", "const IntRect& GetViewRect() const", AS_METHODPR(View, GetViewRect, () const, const IntRect&), AS_CALL_THISCALL));

    // const IntVector2& View::GetViewSize() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& View::GetViewSize() const", "const IntVector2& GetViewSize() const", AS_METHODPR(View, GetViewSize, () const, const IntVector2&), AS_CALL_THISCALL));

    // const PODVector<Drawable*>& View::GetGeometries() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Drawable*>& View::GetGeometries() const", "Array<Drawable@>@ GetGeometries() const", AS_FUNCTION_OBJFIRST(View_GetGeometries_void), AS_CALL_CDECL_OBJFIRST));

    // const PODVector<Drawable*>& View::GetOccluders() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Drawable*>& View::GetOccluders() const", "Array<Drawable@>@ GetOccluders() const", AS_FUNCTION_OBJFIRST(View_GetOccluders_void), AS_CALL_CDECL_OBJFIRST));

    // const PODVector<Light*>& View::GetLights() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Light*>& View::GetLights() const", "Array<Light@>@ GetLights() const", AS_FUNCTION_OBJFIRST(View_GetLights_void), AS_CALL_CDECL_OBJFIRST));

    // OcclusionBuffer* View::GetOcclusionBuffer() const
    methods.Push(RegisterObjectMethodArgs("OcclusionBuffer* View::GetOcclusionBuffer() const", "OcclusionBuffer@+ GetOcclusionBuffer() const", AS_METHODPR(View, GetOcclusionBuffer, () const, OcclusionBuffer*), AS_CALL_THISCALL));

    // unsigned View::GetNumActiveOccluders() const
    methods.Push(RegisterObjectMethodArgs("unsigned View::GetNumActiveOccluders() const", "uint GetNumActiveOccluders() const", AS_METHODPR(View, GetNumActiveOccluders, () const, unsigned), AS_CALL_THISCALL));

    // View* View::GetSourceView() const
    methods.Push(RegisterObjectMethodArgs("View* View::GetSourceView() const", "View@+ GetSourceView() const", AS_METHODPR(View, GetSourceView, () const, View*), AS_CALL_THISCALL));

    // void View::SetGlobalShaderParameters()
    methods.Push(RegisterObjectMethodArgs("void View::SetGlobalShaderParameters()", "void SetGlobalShaderParameters()", AS_METHODPR(View, SetGlobalShaderParameters, (), void), AS_CALL_THISCALL));

    // void View::SetCameraShaderParameters(Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void View::SetCameraShaderParameters(Camera* camera)", "void SetCameraShaderParameters(Camera@+)", AS_METHODPR(View, SetCameraShaderParameters, (Camera*), void), AS_CALL_THISCALL));

    // void View::SetCommandShaderParameters(const RenderPathCommand& command)
    methods.Push(RegisterObjectMethodArgs("void View::SetCommandShaderParameters(const RenderPathCommand& command)", "void SetCommandShaderParameters(const RenderPathCommand&in)", AS_METHODPR(View, SetCommandShaderParameters, (const RenderPathCommand&), void), AS_CALL_THISCALL));

    // void View::SetGBufferShaderParameters(const IntVector2& texSize, const IntRect& viewRect)
    methods.Push(RegisterObjectMethodArgs("void View::SetGBufferShaderParameters(const IntVector2& texSize, const IntRect& viewRect)", "void SetGBufferShaderParameters(const IntVector2&in, const IntRect&in)", AS_METHODPR(View, SetGBufferShaderParameters, (const IntVector2&, const IntRect&), void), AS_CALL_THISCALL));

    // void View::DrawFullscreenQuad(bool setIdentityProjection=false)
    methods.Push(RegisterObjectMethodArgs("void View::DrawFullscreenQuad(bool setIdentityProjection=false)", "void DrawFullscreenQuad(bool = false)", AS_METHODPR(View, DrawFullscreenQuad, (bool), void), AS_CALL_THISCALL));

    // Texture* View::FindNamedTexture(const String& name, bool isRenderTarget, bool isVolumeMap=false)
    methods.Push(RegisterObjectMethodArgs("Texture* View::FindNamedTexture(const String& name, bool isRenderTarget, bool isVolumeMap=false)", "Texture@+ FindNamedTexture(const String&in, bool, bool = false)", AS_METHODPR(View, FindNamedTexture, (const String&, bool, bool), Texture*), AS_CALL_THISCALL));
}

// class View3D | File: ../UI/View3D.h
void CollectMembers_View3D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Window(methods);

    Remove(methods, "static void Window::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::OnResize(const IntVector2& newSize, const IntVector2& delta)");

    // void View3D::OnResize(const IntVector2& newSize, const IntVector2& delta) override
    methods.Push(RegisterObjectMethodArgs("void View3D::OnResize(const IntVector2& newSize, const IntVector2& delta) override", "void OnResize(const IntVector2&in, const IntVector2&in)", AS_METHODPR(View3D, OnResize, (const IntVector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // void View3D::SetView(Scene* scene, Camera* camera, bool ownScene=true)
    methods.Push(RegisterObjectMethodArgs("void View3D::SetView(Scene* scene, Camera* camera, bool ownScene=true)", "void SetView(Scene@+, Camera@+, bool = true)", AS_METHODPR(View3D, SetView, (Scene*, Camera*, bool), void), AS_CALL_THISCALL));

    // void View3D::SetFormat(unsigned format)
    methods.Push(RegisterObjectMethodArgs("void View3D::SetFormat(unsigned format)", "void SetFormat(uint)", AS_METHODPR(View3D, SetFormat, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void View3D::SetFormat(unsigned format)", "void set_format(uint)", AS_METHODPR(View3D, SetFormat, (unsigned), void), AS_CALL_THISCALL));

    // void View3D::SetAutoUpdate(bool enable)
    methods.Push(RegisterObjectMethodArgs("void View3D::SetAutoUpdate(bool enable)", "void SetAutoUpdate(bool)", AS_METHODPR(View3D, SetAutoUpdate, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void View3D::SetAutoUpdate(bool enable)", "void set_autoUpdate(bool)", AS_METHODPR(View3D, SetAutoUpdate, (bool), void), AS_CALL_THISCALL));

    // void View3D::QueueUpdate()
    methods.Push(RegisterObjectMethodArgs("void View3D::QueueUpdate()", "void QueueUpdate()", AS_METHODPR(View3D, QueueUpdate, (), void), AS_CALL_THISCALL));

    // unsigned View3D::GetFormat() const
    methods.Push(RegisterObjectMethodArgs("unsigned View3D::GetFormat() const", "uint GetFormat() const", AS_METHODPR(View3D, GetFormat, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned View3D::GetFormat() const", "uint get_format() const", AS_METHODPR(View3D, GetFormat, () const, unsigned), AS_CALL_THISCALL));

    // bool View3D::GetAutoUpdate() const
    methods.Push(RegisterObjectMethodArgs("bool View3D::GetAutoUpdate() const", "bool GetAutoUpdate() const", AS_METHODPR(View3D, GetAutoUpdate, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool View3D::GetAutoUpdate() const", "bool get_autoUpdate() const", AS_METHODPR(View3D, GetAutoUpdate, () const, bool), AS_CALL_THISCALL));

    // Scene* View3D::GetScene() const
    methods.Push(RegisterObjectMethodArgs("Scene* View3D::GetScene() const", "Scene@+ GetScene() const", AS_METHODPR(View3D, GetScene, () const, Scene*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Scene* View3D::GetScene() const", "Scene@+ get_scene() const", AS_METHODPR(View3D, GetScene, () const, Scene*), AS_CALL_THISCALL));

    // Node* View3D::GetCameraNode() const
    methods.Push(RegisterObjectMethodArgs("Node* View3D::GetCameraNode() const", "Node@+ GetCameraNode() const", AS_METHODPR(View3D, GetCameraNode, () const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* View3D::GetCameraNode() const", "Node@+ get_cameraNode() const", AS_METHODPR(View3D, GetCameraNode, () const, Node*), AS_CALL_THISCALL));

    // Texture2D* View3D::GetRenderTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture2D* View3D::GetRenderTexture() const", "Texture2D@+ GetRenderTexture() const", AS_METHODPR(View3D, GetRenderTexture, () const, Texture2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture2D* View3D::GetRenderTexture() const", "Texture2D@+ get_renderTexture() const", AS_METHODPR(View3D, GetRenderTexture, () const, Texture2D*), AS_CALL_THISCALL));

    // Texture2D* View3D::GetDepthTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture2D* View3D::GetDepthTexture() const", "Texture2D@+ GetDepthTexture() const", AS_METHODPR(View3D, GetDepthTexture, () const, Texture2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture2D* View3D::GetDepthTexture() const", "Texture2D@+ get_depthTexture() const", AS_METHODPR(View3D, GetDepthTexture, () const, Texture2D*), AS_CALL_THISCALL));

    // Viewport* View3D::GetViewport() const
    methods.Push(RegisterObjectMethodArgs("Viewport* View3D::GetViewport() const", "Viewport@+ GetViewport() const", AS_METHODPR(View3D, GetViewport, () const, Viewport*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Viewport* View3D::GetViewport() const", "Viewport@+ get_viewport() const", AS_METHODPR(View3D, GetViewport, () const, Viewport*), AS_CALL_THISCALL));
}

// class Viewport | File: ../Graphics/Viewport.h
void CollectMembers_Viewport(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Viewport::SetScene(Scene* scene)
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetScene(Scene* scene)", "void SetScene(Scene@+)", AS_METHODPR(Viewport, SetScene, (Scene*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetScene(Scene* scene)", "void set_scene(Scene@+)", AS_METHODPR(Viewport, SetScene, (Scene*), void), AS_CALL_THISCALL));

    // void Viewport::SetCamera(Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetCamera(Camera* camera)", "void SetCamera(Camera@+)", AS_METHODPR(Viewport, SetCamera, (Camera*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetCamera(Camera* camera)", "void set_camera(Camera@+)", AS_METHODPR(Viewport, SetCamera, (Camera*), void), AS_CALL_THISCALL));

    // void Viewport::SetRect(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetRect(const IntRect& rect)", "void SetRect(const IntRect&in)", AS_METHODPR(Viewport, SetRect, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetRect(const IntRect& rect)", "void set_rect(const IntRect&in)", AS_METHODPR(Viewport, SetRect, (const IntRect&), void), AS_CALL_THISCALL));

    // void Viewport::SetRenderPath(RenderPath* renderPath)
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetRenderPath(RenderPath* renderPath)", "void SetRenderPath(RenderPath@+)", AS_METHODPR(Viewport, SetRenderPath, (RenderPath*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetRenderPath(RenderPath* renderPath)", "void set_renderPath(RenderPath@+)", AS_METHODPR(Viewport, SetRenderPath, (RenderPath*), void), AS_CALL_THISCALL));

    // bool Viewport::SetRenderPath(XMLFile* file)
    methods.Push(RegisterObjectMethodArgs("bool Viewport::SetRenderPath(XMLFile* file)", "bool SetRenderPath(XMLFile@+)", AS_METHODPR(Viewport, SetRenderPath, (XMLFile*), bool), AS_CALL_THISCALL));

    // void Viewport::SetDrawDebug(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetDrawDebug(bool enable)", "void SetDrawDebug(bool)", AS_METHODPR(Viewport, SetDrawDebug, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetDrawDebug(bool enable)", "void set_drawDebug(bool)", AS_METHODPR(Viewport, SetDrawDebug, (bool), void), AS_CALL_THISCALL));

    // void Viewport::SetCullCamera(Camera* camera)
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetCullCamera(Camera* camera)", "void SetCullCamera(Camera@+)", AS_METHODPR(Viewport, SetCullCamera, (Camera*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Viewport::SetCullCamera(Camera* camera)", "void set_cullCamera(Camera@+)", AS_METHODPR(Viewport, SetCullCamera, (Camera*), void), AS_CALL_THISCALL));

    // Scene* Viewport::GetScene() const
    methods.Push(RegisterObjectMethodArgs("Scene* Viewport::GetScene() const", "Scene@+ GetScene() const", AS_METHODPR(Viewport, GetScene, () const, Scene*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Scene* Viewport::GetScene() const", "Scene@+ get_scene() const", AS_METHODPR(Viewport, GetScene, () const, Scene*), AS_CALL_THISCALL));

    // Camera* Viewport::GetCamera() const
    methods.Push(RegisterObjectMethodArgs("Camera* Viewport::GetCamera() const", "Camera@+ GetCamera() const", AS_METHODPR(Viewport, GetCamera, () const, Camera*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Camera* Viewport::GetCamera() const", "Camera@+ get_camera() const", AS_METHODPR(Viewport, GetCamera, () const, Camera*), AS_CALL_THISCALL));

    // View* Viewport::GetView() const
    methods.Push(RegisterObjectMethodArgs("View* Viewport::GetView() const", "View@+ GetView() const", AS_METHODPR(Viewport, GetView, () const, View*), AS_CALL_THISCALL));

    // const IntRect& Viewport::GetRect() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& Viewport::GetRect() const", "const IntRect& GetRect() const", AS_METHODPR(Viewport, GetRect, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& Viewport::GetRect() const", "const IntRect& get_rect() const", AS_METHODPR(Viewport, GetRect, () const, const IntRect&), AS_CALL_THISCALL));

    // RenderPath* Viewport::GetRenderPath() const
    methods.Push(RegisterObjectMethodArgs("RenderPath* Viewport::GetRenderPath() const", "RenderPath@+ GetRenderPath() const", AS_METHODPR(Viewport, GetRenderPath, () const, RenderPath*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RenderPath* Viewport::GetRenderPath() const", "RenderPath@+ get_renderPath() const", AS_METHODPR(Viewport, GetRenderPath, () const, RenderPath*), AS_CALL_THISCALL));

    // bool Viewport::GetDrawDebug() const
    methods.Push(RegisterObjectMethodArgs("bool Viewport::GetDrawDebug() const", "bool GetDrawDebug() const", AS_METHODPR(Viewport, GetDrawDebug, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Viewport::GetDrawDebug() const", "bool get_drawDebug() const", AS_METHODPR(Viewport, GetDrawDebug, () const, bool), AS_CALL_THISCALL));

    // Camera* Viewport::GetCullCamera() const
    methods.Push(RegisterObjectMethodArgs("Camera* Viewport::GetCullCamera() const", "Camera@+ GetCullCamera() const", AS_METHODPR(Viewport, GetCullCamera, () const, Camera*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Camera* Viewport::GetCullCamera() const", "Camera@+ get_cullCamera() const", AS_METHODPR(Viewport, GetCullCamera, () const, Camera*), AS_CALL_THISCALL));

    // Ray Viewport::GetScreenRay(int x, int y) const
    methods.Push(RegisterObjectMethodArgs("Ray Viewport::GetScreenRay(int x, int y) const", "Ray GetScreenRay(int, int) const", AS_METHODPR(Viewport, GetScreenRay, (int, int) const, Ray), AS_CALL_THISCALL));

    // IntVector2 Viewport::WorldToScreenPoint(const Vector3& worldPos) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 Viewport::WorldToScreenPoint(const Vector3& worldPos) const", "IntVector2 WorldToScreenPoint(const Vector3&in) const", AS_METHODPR(Viewport, WorldToScreenPoint, (const Vector3&) const, IntVector2), AS_CALL_THISCALL));

    // Vector3 Viewport::ScreenToWorldPoint(int x, int y, float depth) const
    methods.Push(RegisterObjectMethodArgs("Vector3 Viewport::ScreenToWorldPoint(int x, int y, float depth) const", "Vector3 ScreenToWorldPoint(int, int, float) const", AS_METHODPR(Viewport, ScreenToWorldPoint, (int, int, float) const, Vector3), AS_CALL_THISCALL));

    // void Viewport::AllocateView()
    methods.Push(RegisterObjectMethodArgs("void Viewport::AllocateView()", "void AllocateView()", AS_METHODPR(Viewport, AllocateView, (), void), AS_CALL_THISCALL));
}

// class WString | File: ../Container/Str.h
void CollectMembers_WString(Vector<RegisterObjectMethodArgs>& methods)
{
    // const wchar_t& WString::At(unsigned index) const
    // Error: type "const wchar_t&" can not automatically bind

    // wchar_t& WString::At(unsigned index)
    // Error: type "wchar_t&" can not automatically bind

    // const wchar_t* WString::CString() const
    // Error: type "const wchar_t*" can not automatically bind

    // const wchar_t& WString::operator[](unsigned index) const
    // Error: type "const wchar_t&" can not automatically bind

    // wchar_t& WString::operator[](unsigned index)
    // Error: type "wchar_t&" can not automatically bind

    // void WString::Resize(unsigned newLength)
    methods.Push(RegisterObjectMethodArgs("void WString::Resize(unsigned newLength)", "void Resize(uint)", AS_METHODPR(WString, Resize, (unsigned), void), AS_CALL_THISCALL));

    // bool WString::Empty() const
    methods.Push(RegisterObjectMethodArgs("bool WString::Empty() const", "bool Empty() const", AS_METHODPR(WString, Empty, () const, bool), AS_CALL_THISCALL));

    // unsigned WString::Length() const
    methods.Push(RegisterObjectMethodArgs("unsigned WString::Length() const", "uint Length() const", AS_METHODPR(WString, Length, () const, unsigned), AS_CALL_THISCALL));
}

// class Window | File: ../UI/Window.h
void CollectMembers_Window(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_BorderImage(methods);

    Remove(methods, "static void BorderImage::RegisterObject(Context* context)");
    Remove(methods, "virtual void UIElement::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnDragCancel(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags cancelButtons, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnDragEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags releaseButtons, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "virtual void UIElement::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor)");
    Remove(methods, "void BorderImage::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override");

    // void Window::GetBatches(PODVector<UIBatch>& batches, PODVector<float>& vertexData, const IntRect& currentScissor) override
    // Error: type "PODVector<UIBatch>&" can not automatically bind

    // void Window::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Window::OnHover(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnHover(const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Window, OnHover, (const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Window::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Window::OnDragBegin(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnDragBegin(const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Window, OnDragBegin, (const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Window::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Window::OnDragMove(const IntVector2& position, const IntVector2& screenPosition, const IntVector2& deltaPos, MouseButtonFlags buttons, QualifierFlags qualifiers, Cursor* cursor) override", "void OnDragMove(const IntVector2&in, const IntVector2&in, const IntVector2&in, MouseButtonFlags, QualifierFlags, Cursor@+)", AS_METHODPR(Window, OnDragMove, (const IntVector2&, const IntVector2&, const IntVector2&, MouseButtonFlags, QualifierFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Window::OnDragEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags releaseButtons, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Window::OnDragEnd(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags releaseButtons, Cursor* cursor) override", "void OnDragEnd(const IntVector2&in, const IntVector2&in, MouseButtonFlags, MouseButtonFlags, Cursor@+)", AS_METHODPR(Window, OnDragEnd, (const IntVector2&, const IntVector2&, MouseButtonFlags, MouseButtonFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Window::OnDragCancel(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags cancelButtons, Cursor* cursor) override
    methods.Push(RegisterObjectMethodArgs("void Window::OnDragCancel(const IntVector2& position, const IntVector2& screenPosition, MouseButtonFlags dragButtons, MouseButtonFlags cancelButtons, Cursor* cursor) override", "void OnDragCancel(const IntVector2&in, const IntVector2&in, MouseButtonFlags, MouseButtonFlags, Cursor@+)", AS_METHODPR(Window, OnDragCancel, (const IntVector2&, const IntVector2&, MouseButtonFlags, MouseButtonFlags, Cursor*), void), AS_CALL_THISCALL));

    // void Window::SetMovable(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Window::SetMovable(bool enable)", "void SetMovable(bool)", AS_METHODPR(Window, SetMovable, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetMovable(bool enable)", "void set_movable(bool)", AS_METHODPR(Window, SetMovable, (bool), void), AS_CALL_THISCALL));

    // void Window::SetResizable(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Window::SetResizable(bool enable)", "void SetResizable(bool)", AS_METHODPR(Window, SetResizable, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetResizable(bool enable)", "void set_resizable(bool)", AS_METHODPR(Window, SetResizable, (bool), void), AS_CALL_THISCALL));

    // void Window::SetFixedWidthResizing(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Window::SetFixedWidthResizing(bool enable)", "void SetFixedWidthResizing(bool)", AS_METHODPR(Window, SetFixedWidthResizing, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetFixedWidthResizing(bool enable)", "void set_fixedWidthResizing(bool)", AS_METHODPR(Window, SetFixedWidthResizing, (bool), void), AS_CALL_THISCALL));

    // void Window::SetFixedHeightResizing(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Window::SetFixedHeightResizing(bool enable)", "void SetFixedHeightResizing(bool)", AS_METHODPR(Window, SetFixedHeightResizing, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetFixedHeightResizing(bool enable)", "void set_fixedHeightResizing(bool)", AS_METHODPR(Window, SetFixedHeightResizing, (bool), void), AS_CALL_THISCALL));

    // void Window::SetResizeBorder(const IntRect& rect)
    methods.Push(RegisterObjectMethodArgs("void Window::SetResizeBorder(const IntRect& rect)", "void SetResizeBorder(const IntRect&in)", AS_METHODPR(Window, SetResizeBorder, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetResizeBorder(const IntRect& rect)", "void set_resizeBorder(const IntRect&in)", AS_METHODPR(Window, SetResizeBorder, (const IntRect&), void), AS_CALL_THISCALL));

    // void Window::SetModal(bool modal)
    methods.Push(RegisterObjectMethodArgs("void Window::SetModal(bool modal)", "void SetModal(bool)", AS_METHODPR(Window, SetModal, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetModal(bool modal)", "void set_modal(bool)", AS_METHODPR(Window, SetModal, (bool), void), AS_CALL_THISCALL));

    // void Window::SetModalShadeColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Window::SetModalShadeColor(const Color& color)", "void SetModalShadeColor(const Color&in)", AS_METHODPR(Window, SetModalShadeColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetModalShadeColor(const Color& color)", "void set_modalShadeColor(const Color&in)", AS_METHODPR(Window, SetModalShadeColor, (const Color&), void), AS_CALL_THISCALL));

    // void Window::SetModalFrameColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Window::SetModalFrameColor(const Color& color)", "void SetModalFrameColor(const Color&in)", AS_METHODPR(Window, SetModalFrameColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetModalFrameColor(const Color& color)", "void set_modalFrameColor(const Color&in)", AS_METHODPR(Window, SetModalFrameColor, (const Color&), void), AS_CALL_THISCALL));

    // void Window::SetModalFrameSize(const IntVector2& size)
    methods.Push(RegisterObjectMethodArgs("void Window::SetModalFrameSize(const IntVector2& size)", "void SetModalFrameSize(const IntVector2&in)", AS_METHODPR(Window, SetModalFrameSize, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetModalFrameSize(const IntVector2& size)", "void set_modalFrameSize(const IntVector2&in)", AS_METHODPR(Window, SetModalFrameSize, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Window::SetModalAutoDismiss(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Window::SetModalAutoDismiss(bool enable)", "void SetModalAutoDismiss(bool)", AS_METHODPR(Window, SetModalAutoDismiss, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Window::SetModalAutoDismiss(bool enable)", "void set_modalAutoDismiss(bool)", AS_METHODPR(Window, SetModalAutoDismiss, (bool), void), AS_CALL_THISCALL));

    // bool Window::IsMovable() const
    methods.Push(RegisterObjectMethodArgs("bool Window::IsMovable() const", "bool IsMovable() const", AS_METHODPR(Window, IsMovable, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Window::IsMovable() const", "bool get_movable() const", AS_METHODPR(Window, IsMovable, () const, bool), AS_CALL_THISCALL));

    // bool Window::IsResizable() const
    methods.Push(RegisterObjectMethodArgs("bool Window::IsResizable() const", "bool IsResizable() const", AS_METHODPR(Window, IsResizable, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Window::IsResizable() const", "bool get_resizable() const", AS_METHODPR(Window, IsResizable, () const, bool), AS_CALL_THISCALL));

    // bool Window::GetFixedWidthResizing() const
    methods.Push(RegisterObjectMethodArgs("bool Window::GetFixedWidthResizing() const", "bool GetFixedWidthResizing() const", AS_METHODPR(Window, GetFixedWidthResizing, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Window::GetFixedWidthResizing() const", "bool get_fixedWidthResizing() const", AS_METHODPR(Window, GetFixedWidthResizing, () const, bool), AS_CALL_THISCALL));

    // bool Window::GetFixedHeightResizing() const
    methods.Push(RegisterObjectMethodArgs("bool Window::GetFixedHeightResizing() const", "bool GetFixedHeightResizing() const", AS_METHODPR(Window, GetFixedHeightResizing, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Window::GetFixedHeightResizing() const", "bool get_fixedHeightResizing() const", AS_METHODPR(Window, GetFixedHeightResizing, () const, bool), AS_CALL_THISCALL));

    // const IntRect& Window::GetResizeBorder() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& Window::GetResizeBorder() const", "const IntRect& GetResizeBorder() const", AS_METHODPR(Window, GetResizeBorder, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& Window::GetResizeBorder() const", "const IntRect& get_resizeBorder() const", AS_METHODPR(Window, GetResizeBorder, () const, const IntRect&), AS_CALL_THISCALL));

    // bool Window::IsModal() const
    methods.Push(RegisterObjectMethodArgs("bool Window::IsModal() const", "bool IsModal() const", AS_METHODPR(Window, IsModal, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Window::IsModal() const", "bool get_modal() const", AS_METHODPR(Window, IsModal, () const, bool), AS_CALL_THISCALL));

    // const Color& Window::GetModalShadeColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Window::GetModalShadeColor() const", "const Color& GetModalShadeColor() const", AS_METHODPR(Window, GetModalShadeColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Window::GetModalShadeColor() const", "const Color& get_modalShadeColor() const", AS_METHODPR(Window, GetModalShadeColor, () const, const Color&), AS_CALL_THISCALL));

    // const Color& Window::GetModalFrameColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Window::GetModalFrameColor() const", "const Color& GetModalFrameColor() const", AS_METHODPR(Window, GetModalFrameColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Window::GetModalFrameColor() const", "const Color& get_modalFrameColor() const", AS_METHODPR(Window, GetModalFrameColor, () const, const Color&), AS_CALL_THISCALL));

    // const IntVector2& Window::GetModalFrameSize() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Window::GetModalFrameSize() const", "const IntVector2& GetModalFrameSize() const", AS_METHODPR(Window, GetModalFrameSize, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Window::GetModalFrameSize() const", "const IntVector2& get_modalFrameSize() const", AS_METHODPR(Window, GetModalFrameSize, () const, const IntVector2&), AS_CALL_THISCALL));

    // bool Window::GetModalAutoDismiss() const
    methods.Push(RegisterObjectMethodArgs("bool Window::GetModalAutoDismiss() const", "bool GetModalAutoDismiss() const", AS_METHODPR(Window, GetModalAutoDismiss, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Window::GetModalAutoDismiss() const", "bool get_modalAutoDismiss() const", AS_METHODPR(Window, GetModalAutoDismiss, () const, bool), AS_CALL_THISCALL));
}

// struct WindowModeParams | File: ../Graphics/Graphics.h
void CollectMembers_WindowModeParams(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct WorkItem | File: ../Core/WorkQueue.h
void CollectMembers_WorkItem(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class WorkQueue | File: ../Core/WorkQueue.h
void CollectMembers_WorkQueue(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void WorkQueue::AddWorkItem(const SharedPtr<WorkItem>& item)
    // Error: type "const SharedPtr<WorkItem>&" can not automatically bind

    // SharedPtr<WorkItem> WorkQueue::GetFreeItem()
    // Error: type "SharedPtr<WorkItem>" can not automatically bind

    // bool WorkQueue::RemoveWorkItem(SharedPtr<WorkItem> item)
    // Error: type "SharedPtr<WorkItem>" can not automatically bind

    // unsigned WorkQueue::RemoveWorkItems(const Vector<SharedPtr<WorkItem>>& items)
    // Error: type "const Vector<SharedPtr<WorkItem>>&" can not automatically bind

    // void WorkQueue::CreateThreads(unsigned numThreads)
    methods.Push(RegisterObjectMethodArgs("void WorkQueue::CreateThreads(unsigned numThreads)", "void CreateThreads(uint)", AS_METHODPR(WorkQueue, CreateThreads, (unsigned), void), AS_CALL_THISCALL));

    // void WorkQueue::Pause()
    methods.Push(RegisterObjectMethodArgs("void WorkQueue::Pause()", "void Pause()", AS_METHODPR(WorkQueue, Pause, (), void), AS_CALL_THISCALL));

    // void WorkQueue::Resume()
    methods.Push(RegisterObjectMethodArgs("void WorkQueue::Resume()", "void Resume()", AS_METHODPR(WorkQueue, Resume, (), void), AS_CALL_THISCALL));

    // void WorkQueue::Complete(unsigned priority)
    methods.Push(RegisterObjectMethodArgs("void WorkQueue::Complete(unsigned priority)", "void Complete(uint)", AS_METHODPR(WorkQueue, Complete, (unsigned), void), AS_CALL_THISCALL));

    // void WorkQueue::SetTolerance(int tolerance)
    methods.Push(RegisterObjectMethodArgs("void WorkQueue::SetTolerance(int tolerance)", "void SetTolerance(int)", AS_METHODPR(WorkQueue, SetTolerance, (int), void), AS_CALL_THISCALL));

    // void WorkQueue::SetNonThreadedWorkMs(int ms)
    methods.Push(RegisterObjectMethodArgs("void WorkQueue::SetNonThreadedWorkMs(int ms)", "void SetNonThreadedWorkMs(int)", AS_METHODPR(WorkQueue, SetNonThreadedWorkMs, (int), void), AS_CALL_THISCALL));

    // unsigned WorkQueue::GetNumThreads() const
    methods.Push(RegisterObjectMethodArgs("unsigned WorkQueue::GetNumThreads() const", "uint GetNumThreads() const", AS_METHODPR(WorkQueue, GetNumThreads, () const, unsigned), AS_CALL_THISCALL));

    // bool WorkQueue::IsCompleted(unsigned priority) const
    methods.Push(RegisterObjectMethodArgs("bool WorkQueue::IsCompleted(unsigned priority) const", "bool IsCompleted(uint) const", AS_METHODPR(WorkQueue, IsCompleted, (unsigned) const, bool), AS_CALL_THISCALL));

    // bool WorkQueue::IsCompleting() const
    methods.Push(RegisterObjectMethodArgs("bool WorkQueue::IsCompleting() const", "bool IsCompleting() const", AS_METHODPR(WorkQueue, IsCompleting, () const, bool), AS_CALL_THISCALL));

    // int WorkQueue::GetTolerance() const
    methods.Push(RegisterObjectMethodArgs("int WorkQueue::GetTolerance() const", "int GetTolerance() const", AS_METHODPR(WorkQueue, GetTolerance, () const, int), AS_CALL_THISCALL));

    // int WorkQueue::GetNonThreadedWorkMs() const
    methods.Push(RegisterObjectMethodArgs("int WorkQueue::GetNonThreadedWorkMs() const", "int GetNonThreadedWorkMs() const", AS_METHODPR(WorkQueue, GetNonThreadedWorkMs, () const, int), AS_CALL_THISCALL));
}

// bool XMLElement::SetStringVector(const StringVector& value)
// bool XMLElement::SetStringVector(const StringVector& value) | File: ../Resource/XMLElement.h
static bool XMLElement_SetStringVector_StringVector(XMLElement* ptr, CScriptArray* value_conv)
{
    StringVector value = ArrayToVector<String>(value_conv);
    bool result = ptr->SetStringVector(value);
    return result;
}


// Vector<String> XMLElement::GetAttributeNames() const
// Vector<String> XMLElement::GetAttributeNames() const | File: ../Resource/XMLElement.h
static CScriptArray* XMLElement_GetAttributeNames_void(XMLElement* ptr)
{
    Vector<String> result = ptr->GetAttributeNames();
    return VectorToArray<String>(result, "Array<String>");
}


// StringVector XMLElement::GetStringVector() const
// StringVector XMLElement::GetStringVector() const | File: ../Resource/XMLElement.h
static CScriptArray* XMLElement_GetStringVector_void(XMLElement* ptr)
{
    StringVector result = ptr->GetStringVector();
    return VectorToArray<String>(result, "Array<String>");
}


// class XMLElement | File: ../Resource/XMLElement.h
void CollectMembers_XMLElement(Vector<RegisterObjectMethodArgs>& methods)
{
    // XMLElement XMLElement::CreateChild(const char* name)
    // Error: type "const char*" can not automatically bind

    // String XMLElement::GetAttribute(const char* name) const
    // Error: type "const char*" can not automatically bind

    // const char* XMLElement::GetAttributeCString(const char* name) const
    // Error: type "const char*" can not automatically bind

    // String XMLElement::GetAttributeLower(const char* name) const
    // Error: type "const char*" can not automatically bind

    // String XMLElement::GetAttributeUpper(const char* name) const
    // Error: type "const char*" can not automatically bind

    // PODVector<unsigned char> XMLElement::GetBuffer(const String& name) const
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // bool XMLElement::GetBuffer(const String& name, void* dest, unsigned size) const
    // Error: type "void*" can not automatically bind

    // XMLElement XMLElement::GetChild(const char* name) const
    // Error: type "const char*" can not automatically bind

    // XMLElement XMLElement::GetNext(const char* name) const
    // Error: type "const char*" can not automatically bind

    // pugi::xml_node_struct* XMLElement::GetNode() const
    // Error: type "pugi::xml_node_struct*" can not automatically bind

    // XMLElement XMLElement::GetOrCreateChild(const char* name)
    // Error: type "const char*" can not automatically bind

    // VariantVector XMLElement::GetVariantVector() const
    // Error: type "VariantVector" can not automatically bind

    // const pugi::xpath_node* XMLElement::GetXPathNode() const
    // Error: type "const pugi::xpath_node*" can not automatically bind

    // const XPathResultSet* XMLElement::GetXPathResultSet() const
    // Error: type "const XPathResultSet*" can not automatically bind

    // bool XMLElement::HasAttribute(const char* name) const
    // Error: type "const char*" can not automatically bind

    // bool XMLElement::HasChild(const char* name) const
    // Error: type "const char*" can not automatically bind

    // bool XMLElement::RemoveAttribute(const char* name)
    // Error: type "const char*" can not automatically bind

    // bool XMLElement::RemoveChild(const char* name)
    // Error: type "const char*" can not automatically bind

    // bool XMLElement::RemoveChildren(const char* name)
    // Error: type "const char*" can not automatically bind

    // XPathResultSet XMLElement::Select(const String& query, pugi::xpath_variable_set* variables=nullptr) const
    // Error: type "pugi::xpath_variable_set*" can not automatically bind

    // XMLElement XMLElement::SelectSingle(const String& query, pugi::xpath_variable_set* variables=nullptr) const
    // Error: type "pugi::xpath_variable_set*" can not automatically bind

    // bool XMLElement::SetAttribute(const char* name, const char* value)
    // Error: type "const char*" can not automatically bind

    // bool XMLElement::SetAttribute(const char* value)
    // Error: type "const char*" can not automatically bind

    // bool XMLElement::SetBuffer(const String& name, const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // bool XMLElement::SetBuffer(const String& name, const void* data, unsigned size)
    // Error: type "const void*" can not automatically bind

    // bool XMLElement::SetValue(const char* value)
    // Error: type "const char*" can not automatically bind

    // bool XMLElement::SetVariantVector(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // XMLElement& XMLElement::operator=(const XMLElement& rhs)
    methods.Push(RegisterObjectMethodArgs("XMLElement& XMLElement::operator=(const XMLElement& rhs)", "XMLElement& opAssign(const XMLElement&in)", AS_METHODPR(XMLElement, operator=, (const XMLElement&), XMLElement&), AS_CALL_THISCALL));

    // XMLElement XMLElement::CreateChild(const String& name)
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::CreateChild(const String& name)", "XMLElement CreateChild(const String&in)", AS_METHODPR(XMLElement, CreateChild, (const String&), XMLElement), AS_CALL_THISCALL));

    // XMLElement XMLElement::GetOrCreateChild(const String& name)
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::GetOrCreateChild(const String& name)", "XMLElement GetOrCreateChild(const String&in)", AS_METHODPR(XMLElement, GetOrCreateChild, (const String&), XMLElement), AS_CALL_THISCALL));

    // bool XMLElement::AppendChild(XMLElement element, bool asCopy=false)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::AppendChild(XMLElement element, bool asCopy=false)", "bool AppendChild(XMLElement, bool = false)", AS_METHODPR(XMLElement, AppendChild, (XMLElement, bool), bool), AS_CALL_THISCALL));

    // bool XMLElement::Remove()
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::Remove()", "bool Remove()", AS_METHODPR(XMLElement, Remove, (), bool), AS_CALL_THISCALL));

    // bool XMLElement::RemoveChild(const XMLElement& element)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::RemoveChild(const XMLElement& element)", "bool RemoveChild(const XMLElement&in)", AS_METHODPR(XMLElement, RemoveChild, (const XMLElement&), bool), AS_CALL_THISCALL));

    // bool XMLElement::RemoveChild(const String& name)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::RemoveChild(const String& name)", "bool RemoveChild(const String&in)", AS_METHODPR(XMLElement, RemoveChild, (const String&), bool), AS_CALL_THISCALL));

    // bool XMLElement::RemoveChildren(const String& name=String::EMPTY)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::RemoveChildren(const String& name=String::EMPTY)", "bool RemoveChildren(const String&in = String::EMPTY)", AS_METHODPR(XMLElement, RemoveChildren, (const String&), bool), AS_CALL_THISCALL));

    // bool XMLElement::RemoveAttribute(const String& name=String::EMPTY)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::RemoveAttribute(const String& name=String::EMPTY)", "bool RemoveAttribute(const String&in = String::EMPTY)", AS_METHODPR(XMLElement, RemoveAttribute, (const String&), bool), AS_CALL_THISCALL));

    // XMLElement XMLElement::SelectSinglePrepared(const XPathQuery& query) const
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::SelectSinglePrepared(const XPathQuery& query) const", "XMLElement SelectSinglePrepared(const XPathQuery&in) const", AS_METHODPR(XMLElement, SelectSinglePrepared, (const XPathQuery&) const, XMLElement), AS_CALL_THISCALL));

    // XPathResultSet XMLElement::SelectPrepared(const XPathQuery& query) const
    methods.Push(RegisterObjectMethodArgs("XPathResultSet XMLElement::SelectPrepared(const XPathQuery& query) const", "XPathResultSet SelectPrepared(const XPathQuery&in) const", AS_METHODPR(XMLElement, SelectPrepared, (const XPathQuery&) const, XPathResultSet), AS_CALL_THISCALL));

    // bool XMLElement::SetValue(const String& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetValue(const String& value)", "bool SetValue(const String&in)", AS_METHODPR(XMLElement, SetValue, (const String&), bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetValue(const String& value)", "bool set_value(const String&in)", AS_METHODPR(XMLElement, SetValue, (const String&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetAttribute(const String& name, const String& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetAttribute(const String& name, const String& value)", "bool SetAttribute(const String&in, const String&in)", AS_METHODPR(XMLElement, SetAttribute, (const String&, const String&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetAttribute(const String& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetAttribute(const String& value)", "bool SetAttribute(const String&in)", AS_METHODPR(XMLElement, SetAttribute, (const String&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetBool(const String& name, bool value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetBool(const String& name, bool value)", "bool SetBool(const String&in, bool)", AS_METHODPR(XMLElement, SetBool, (const String&, bool), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetBoundingBox(const BoundingBox& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetBoundingBox(const BoundingBox& value)", "bool SetBoundingBox(const BoundingBox&in)", AS_METHODPR(XMLElement, SetBoundingBox, (const BoundingBox&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetColor(const String& name, const Color& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetColor(const String& name, const Color& value)", "bool SetColor(const String&in, const Color&in)", AS_METHODPR(XMLElement, SetColor, (const String&, const Color&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetFloat(const String& name, float value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetFloat(const String& name, float value)", "bool SetFloat(const String&in, float)", AS_METHODPR(XMLElement, SetFloat, (const String&, float), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetDouble(const String& name, double value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetDouble(const String& name, double value)", "bool SetDouble(const String&in, double)", AS_METHODPR(XMLElement, SetDouble, (const String&, double), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetUInt(const String& name, unsigned value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetUInt(const String& name, unsigned value)", "bool SetUInt(const String&in, uint)", AS_METHODPR(XMLElement, SetUInt, (const String&, unsigned), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetInt(const String& name, int value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetInt(const String& name, int value)", "bool SetInt(const String&in, int)", AS_METHODPR(XMLElement, SetInt, (const String&, int), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetUInt64(const String& name, unsigned long long value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetUInt64(const String& name, unsigned long long value)", "bool SetUInt64(const String&in, uint64)", AS_METHODPR(XMLElement, SetUInt64, (const String&, unsigned long long), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetInt64(const String& name, long long value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetInt64(const String& name, long long value)", "bool SetInt64(const String&in, int64)", AS_METHODPR(XMLElement, SetInt64, (const String&, long long), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetIntRect(const String& name, const IntRect& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetIntRect(const String& name, const IntRect& value)", "bool SetIntRect(const String&in, const IntRect&in)", AS_METHODPR(XMLElement, SetIntRect, (const String&, const IntRect&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetIntVector2(const String& name, const IntVector2& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetIntVector2(const String& name, const IntVector2& value)", "bool SetIntVector2(const String&in, const IntVector2&in)", AS_METHODPR(XMLElement, SetIntVector2, (const String&, const IntVector2&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetIntVector3(const String& name, const IntVector3& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetIntVector3(const String& name, const IntVector3& value)", "bool SetIntVector3(const String&in, const IntVector3&in)", AS_METHODPR(XMLElement, SetIntVector3, (const String&, const IntVector3&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetRect(const String& name, const Rect& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetRect(const String& name, const Rect& value)", "bool SetRect(const String&in, const Rect&in)", AS_METHODPR(XMLElement, SetRect, (const String&, const Rect&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetQuaternion(const String& name, const Quaternion& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetQuaternion(const String& name, const Quaternion& value)", "bool SetQuaternion(const String&in, const Quaternion&in)", AS_METHODPR(XMLElement, SetQuaternion, (const String&, const Quaternion&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetString(const String& name, const String& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetString(const String& name, const String& value)", "bool SetString(const String&in, const String&in)", AS_METHODPR(XMLElement, SetString, (const String&, const String&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetVariant(const Variant& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetVariant(const Variant& value)", "bool SetVariant(const Variant&in)", AS_METHODPR(XMLElement, SetVariant, (const Variant&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetVariantValue(const Variant& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetVariantValue(const Variant& value)", "bool SetVariantValue(const Variant&in)", AS_METHODPR(XMLElement, SetVariantValue, (const Variant&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetResourceRef(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetResourceRef(const ResourceRef& value)", "bool SetResourceRef(const ResourceRef&in)", AS_METHODPR(XMLElement, SetResourceRef, (const ResourceRef&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetResourceRefList(const ResourceRefList& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetResourceRefList(const ResourceRefList& value)", "bool SetResourceRefList(const ResourceRefList&in)", AS_METHODPR(XMLElement, SetResourceRefList, (const ResourceRefList&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetStringVector(const StringVector& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetStringVector(const StringVector& value)", "bool SetStringVector(Array<String>@+)", AS_FUNCTION_OBJFIRST(XMLElement_SetStringVector_StringVector), AS_CALL_CDECL_OBJFIRST));

    // bool XMLElement::SetVariantMap(const VariantMap& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetVariantMap(const VariantMap& value)", "bool SetVariantMap(const VariantMap&in)", AS_METHODPR(XMLElement, SetVariantMap, (const VariantMap&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetVector2(const String& name, const Vector2& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetVector2(const String& name, const Vector2& value)", "bool SetVector2(const String&in, const Vector2&in)", AS_METHODPR(XMLElement, SetVector2, (const String&, const Vector2&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetVector3(const String& name, const Vector3& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetVector3(const String& name, const Vector3& value)", "bool SetVector3(const String&in, const Vector3&in)", AS_METHODPR(XMLElement, SetVector3, (const String&, const Vector3&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetVector4(const String& name, const Vector4& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetVector4(const String& name, const Vector4& value)", "bool SetVector4(const String&in, const Vector4&in)", AS_METHODPR(XMLElement, SetVector4, (const String&, const Vector4&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetVectorVariant(const String& name, const Variant& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetVectorVariant(const String& name, const Variant& value)", "bool SetVectorVariant(const String&in, const Variant&in)", AS_METHODPR(XMLElement, SetVectorVariant, (const String&, const Variant&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetMatrix3(const String& name, const Matrix3& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetMatrix3(const String& name, const Matrix3& value)", "bool SetMatrix3(const String&in, const Matrix3&in)", AS_METHODPR(XMLElement, SetMatrix3, (const String&, const Matrix3&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetMatrix3x4(const String& name, const Matrix3x4& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetMatrix3x4(const String& name, const Matrix3x4& value)", "bool SetMatrix3x4(const String&in, const Matrix3x4&in)", AS_METHODPR(XMLElement, SetMatrix3x4, (const String&, const Matrix3x4&), bool), AS_CALL_THISCALL));

    // bool XMLElement::SetMatrix4(const String& name, const Matrix4& value)
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::SetMatrix4(const String& name, const Matrix4& value)", "bool SetMatrix4(const String&in, const Matrix4&in)", AS_METHODPR(XMLElement, SetMatrix4, (const String&, const Matrix4&), bool), AS_CALL_THISCALL));

    // bool XMLElement::IsNull() const
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::IsNull() const", "bool IsNull() const", AS_METHODPR(XMLElement, IsNull, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::IsNull() const", "bool get_isNull() const", AS_METHODPR(XMLElement, IsNull, () const, bool), AS_CALL_THISCALL));

    // bool XMLElement::NotNull() const
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::NotNull() const", "bool NotNull() const", AS_METHODPR(XMLElement, NotNull, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::NotNull() const", "bool get_notNull() const", AS_METHODPR(XMLElement, NotNull, () const, bool), AS_CALL_THISCALL));

    // explicit XMLElement::operator bool() const
    methods.Push(RegisterObjectMethodArgs("explicit XMLElement::operator bool() const", "bool opConv() const", AS_METHODPR(XMLElement, operator bool, () const, bool), AS_CALL_THISCALL));

    // String XMLElement::GetName() const
    methods.Push(RegisterObjectMethodArgs("String XMLElement::GetName() const", "String GetName() const", AS_METHODPR(XMLElement, GetName, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String XMLElement::GetName() const", "String get_name() const", AS_METHODPR(XMLElement, GetName, () const, String), AS_CALL_THISCALL));

    // bool XMLElement::HasChild(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::HasChild(const String& name) const", "bool HasChild(const String&in) const", AS_METHODPR(XMLElement, HasChild, (const String&) const, bool), AS_CALL_THISCALL));

    // XMLElement XMLElement::GetChild(const String& name=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::GetChild(const String& name=String::EMPTY) const", "XMLElement GetChild(const String&in = String::EMPTY) const", AS_METHODPR(XMLElement, GetChild, (const String&) const, XMLElement), AS_CALL_THISCALL));

    // XMLElement XMLElement::GetNext(const String& name=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::GetNext(const String& name=String::EMPTY) const", "XMLElement GetNext(const String&in = String::EMPTY) const", AS_METHODPR(XMLElement, GetNext, (const String&) const, XMLElement), AS_CALL_THISCALL));

    // XMLElement XMLElement::GetParent() const
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::GetParent() const", "XMLElement GetParent() const", AS_METHODPR(XMLElement, GetParent, () const, XMLElement), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::GetParent() const", "XMLElement get_parent() const", AS_METHODPR(XMLElement, GetParent, () const, XMLElement), AS_CALL_THISCALL));

    // unsigned XMLElement::GetNumAttributes() const
    methods.Push(RegisterObjectMethodArgs("unsigned XMLElement::GetNumAttributes() const", "uint GetNumAttributes() const", AS_METHODPR(XMLElement, GetNumAttributes, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned XMLElement::GetNumAttributes() const", "uint get_numAttributes() const", AS_METHODPR(XMLElement, GetNumAttributes, () const, unsigned), AS_CALL_THISCALL));

    // bool XMLElement::HasAttribute(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::HasAttribute(const String& name) const", "bool HasAttribute(const String&in) const", AS_METHODPR(XMLElement, HasAttribute, (const String&) const, bool), AS_CALL_THISCALL));

    // String XMLElement::GetValue() const
    methods.Push(RegisterObjectMethodArgs("String XMLElement::GetValue() const", "String GetValue() const", AS_METHODPR(XMLElement, GetValue, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String XMLElement::GetValue() const", "String get_value() const", AS_METHODPR(XMLElement, GetValue, () const, String), AS_CALL_THISCALL));

    // String XMLElement::GetAttribute(const String& name=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("String XMLElement::GetAttribute(const String& name=String::EMPTY) const", "String GetAttribute(const String&in = String::EMPTY) const", AS_METHODPR(XMLElement, GetAttribute, (const String&) const, String), AS_CALL_THISCALL));

    // String XMLElement::GetAttributeLower(const String& name) const
    methods.Push(RegisterObjectMethodArgs("String XMLElement::GetAttributeLower(const String& name) const", "String GetAttributeLower(const String&in) const", AS_METHODPR(XMLElement, GetAttributeLower, (const String&) const, String), AS_CALL_THISCALL));

    // String XMLElement::GetAttributeUpper(const String& name) const
    methods.Push(RegisterObjectMethodArgs("String XMLElement::GetAttributeUpper(const String& name) const", "String GetAttributeUpper(const String&in) const", AS_METHODPR(XMLElement, GetAttributeUpper, (const String&) const, String), AS_CALL_THISCALL));

    // Vector<String> XMLElement::GetAttributeNames() const
    methods.Push(RegisterObjectMethodArgs("Vector<String> XMLElement::GetAttributeNames() const", "Array<String>@ GetAttributeNames() const", AS_FUNCTION_OBJFIRST(XMLElement_GetAttributeNames_void), AS_CALL_CDECL_OBJFIRST));

    // bool XMLElement::GetBool(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool XMLElement::GetBool(const String& name) const", "bool GetBool(const String&in) const", AS_METHODPR(XMLElement, GetBool, (const String&) const, bool), AS_CALL_THISCALL));

    // BoundingBox XMLElement::GetBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("BoundingBox XMLElement::GetBoundingBox() const", "BoundingBox GetBoundingBox() const", AS_METHODPR(XMLElement, GetBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));

    // Color XMLElement::GetColor(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Color XMLElement::GetColor(const String& name) const", "Color GetColor(const String&in) const", AS_METHODPR(XMLElement, GetColor, (const String&) const, Color), AS_CALL_THISCALL));

    // float XMLElement::GetFloat(const String& name) const
    methods.Push(RegisterObjectMethodArgs("float XMLElement::GetFloat(const String& name) const", "float GetFloat(const String&in) const", AS_METHODPR(XMLElement, GetFloat, (const String&) const, float), AS_CALL_THISCALL));

    // double XMLElement::GetDouble(const String& name) const
    methods.Push(RegisterObjectMethodArgs("double XMLElement::GetDouble(const String& name) const", "double GetDouble(const String&in) const", AS_METHODPR(XMLElement, GetDouble, (const String&) const, double), AS_CALL_THISCALL));

    // unsigned XMLElement::GetUInt(const String& name) const
    methods.Push(RegisterObjectMethodArgs("unsigned XMLElement::GetUInt(const String& name) const", "uint GetUInt(const String&in) const", AS_METHODPR(XMLElement, GetUInt, (const String&) const, unsigned), AS_CALL_THISCALL));

    // int XMLElement::GetInt(const String& name) const
    methods.Push(RegisterObjectMethodArgs("int XMLElement::GetInt(const String& name) const", "int GetInt(const String&in) const", AS_METHODPR(XMLElement, GetInt, (const String&) const, int), AS_CALL_THISCALL));

    // unsigned long long XMLElement::GetUInt64(const String& name) const
    methods.Push(RegisterObjectMethodArgs("unsigned long long XMLElement::GetUInt64(const String& name) const", "uint64 GetUInt64(const String&in) const", AS_METHODPR(XMLElement, GetUInt64, (const String&) const, unsigned long long), AS_CALL_THISCALL));

    // long long XMLElement::GetInt64(const String& name) const
    methods.Push(RegisterObjectMethodArgs("long long XMLElement::GetInt64(const String& name) const", "int64 GetInt64(const String&in) const", AS_METHODPR(XMLElement, GetInt64, (const String&) const, long long), AS_CALL_THISCALL));

    // IntRect XMLElement::GetIntRect(const String& name) const
    methods.Push(RegisterObjectMethodArgs("IntRect XMLElement::GetIntRect(const String& name) const", "IntRect GetIntRect(const String&in) const", AS_METHODPR(XMLElement, GetIntRect, (const String&) const, IntRect), AS_CALL_THISCALL));

    // IntVector2 XMLElement::GetIntVector2(const String& name) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 XMLElement::GetIntVector2(const String& name) const", "IntVector2 GetIntVector2(const String&in) const", AS_METHODPR(XMLElement, GetIntVector2, (const String&) const, IntVector2), AS_CALL_THISCALL));

    // IntVector3 XMLElement::GetIntVector3(const String& name) const
    methods.Push(RegisterObjectMethodArgs("IntVector3 XMLElement::GetIntVector3(const String& name) const", "IntVector3 GetIntVector3(const String&in) const", AS_METHODPR(XMLElement, GetIntVector3, (const String&) const, IntVector3), AS_CALL_THISCALL));

    // Rect XMLElement::GetRect(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Rect XMLElement::GetRect(const String& name) const", "Rect GetRect(const String&in) const", AS_METHODPR(XMLElement, GetRect, (const String&) const, Rect), AS_CALL_THISCALL));

    // Quaternion XMLElement::GetQuaternion(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Quaternion XMLElement::GetQuaternion(const String& name) const", "Quaternion GetQuaternion(const String&in) const", AS_METHODPR(XMLElement, GetQuaternion, (const String&) const, Quaternion), AS_CALL_THISCALL));

    // Variant XMLElement::GetVariant() const
    methods.Push(RegisterObjectMethodArgs("Variant XMLElement::GetVariant() const", "Variant GetVariant() const", AS_METHODPR(XMLElement, GetVariant, () const, Variant), AS_CALL_THISCALL));

    // Variant XMLElement::GetVariantValue(VariantType type) const
    methods.Push(RegisterObjectMethodArgs("Variant XMLElement::GetVariantValue(VariantType type) const", "Variant GetVariantValue(VariantType) const", AS_METHODPR(XMLElement, GetVariantValue, (VariantType) const, Variant), AS_CALL_THISCALL));

    // ResourceRef XMLElement::GetResourceRef() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef XMLElement::GetResourceRef() const", "ResourceRef GetResourceRef() const", AS_METHODPR(XMLElement, GetResourceRef, () const, ResourceRef), AS_CALL_THISCALL));

    // ResourceRefList XMLElement::GetResourceRefList() const
    methods.Push(RegisterObjectMethodArgs("ResourceRefList XMLElement::GetResourceRefList() const", "ResourceRefList GetResourceRefList() const", AS_METHODPR(XMLElement, GetResourceRefList, () const, ResourceRefList), AS_CALL_THISCALL));

    // StringVector XMLElement::GetStringVector() const
    methods.Push(RegisterObjectMethodArgs("StringVector XMLElement::GetStringVector() const", "Array<String>@ GetStringVector() const", AS_FUNCTION_OBJFIRST(XMLElement_GetStringVector_void), AS_CALL_CDECL_OBJFIRST));

    // VariantMap XMLElement::GetVariantMap() const
    methods.Push(RegisterObjectMethodArgs("VariantMap XMLElement::GetVariantMap() const", "VariantMap GetVariantMap() const", AS_METHODPR(XMLElement, GetVariantMap, () const, VariantMap), AS_CALL_THISCALL));

    // Vector2 XMLElement::GetVector2(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Vector2 XMLElement::GetVector2(const String& name) const", "Vector2 GetVector2(const String&in) const", AS_METHODPR(XMLElement, GetVector2, (const String&) const, Vector2), AS_CALL_THISCALL));

    // Vector3 XMLElement::GetVector3(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Vector3 XMLElement::GetVector3(const String& name) const", "Vector3 GetVector3(const String&in) const", AS_METHODPR(XMLElement, GetVector3, (const String&) const, Vector3), AS_CALL_THISCALL));

    // Vector4 XMLElement::GetVector4(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Vector4 XMLElement::GetVector4(const String& name) const", "Vector4 GetVector4(const String&in) const", AS_METHODPR(XMLElement, GetVector4, (const String&) const, Vector4), AS_CALL_THISCALL));

    // Vector4 XMLElement::GetVector(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Vector4 XMLElement::GetVector(const String& name) const", "Vector4 GetVector(const String&in) const", AS_METHODPR(XMLElement, GetVector, (const String&) const, Vector4), AS_CALL_THISCALL));

    // Variant XMLElement::GetVectorVariant(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Variant XMLElement::GetVectorVariant(const String& name) const", "Variant GetVectorVariant(const String&in) const", AS_METHODPR(XMLElement, GetVectorVariant, (const String&) const, Variant), AS_CALL_THISCALL));

    // Matrix3 XMLElement::GetMatrix3(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Matrix3 XMLElement::GetMatrix3(const String& name) const", "Matrix3 GetMatrix3(const String&in) const", AS_METHODPR(XMLElement, GetMatrix3, (const String&) const, Matrix3), AS_CALL_THISCALL));

    // Matrix3x4 XMLElement::GetMatrix3x4(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Matrix3x4 XMLElement::GetMatrix3x4(const String& name) const", "Matrix3x4 GetMatrix3x4(const String&in) const", AS_METHODPR(XMLElement, GetMatrix3x4, (const String&) const, Matrix3x4), AS_CALL_THISCALL));

    // Matrix4 XMLElement::GetMatrix4(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Matrix4 XMLElement::GetMatrix4(const String& name) const", "Matrix4 GetMatrix4(const String&in) const", AS_METHODPR(XMLElement, GetMatrix4, (const String&) const, Matrix4), AS_CALL_THISCALL));

    // XMLFile* XMLElement::GetFile() const
    methods.Push(RegisterObjectMethodArgs("XMLFile* XMLElement::GetFile() const", "XMLFile@+ GetFile() const", AS_METHODPR(XMLElement, GetFile, () const, XMLFile*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("XMLFile* XMLElement::GetFile() const", "XMLFile@+ get_file() const", AS_METHODPR(XMLElement, GetFile, () const, XMLFile*), AS_CALL_THISCALL));

    // unsigned XMLElement::GetXPathResultIndex() const
    methods.Push(RegisterObjectMethodArgs("unsigned XMLElement::GetXPathResultIndex() const", "uint GetXPathResultIndex() const", AS_METHODPR(XMLElement, GetXPathResultIndex, () const, unsigned), AS_CALL_THISCALL));

    // XMLElement XMLElement::NextResult() const
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::NextResult() const", "XMLElement NextResult() const", AS_METHODPR(XMLElement, NextResult, () const, XMLElement), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLElement::NextResult() const", "XMLElement get_nextResult() const", AS_METHODPR(XMLElement, NextResult, () const, XMLElement), AS_CALL_THISCALL));
}

// class XMLFile | File: ../Resource/XMLFile.h
void CollectMembers_XMLFile(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // pugi::xml_document* XMLFile::GetDocument() const
    // Error: type "pugi::xml_document*" can not automatically bind

    // bool XMLFile::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool XMLFile::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(XMLFile, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool XMLFile::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool XMLFile::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(XMLFile, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // bool XMLFile::Save(Serializer& dest, const String& indentation) const
    methods.Push(RegisterObjectMethodArgs("bool XMLFile::Save(Serializer& dest, const String& indentation) const", "bool Save(Serializer&, const String&in) const", AS_METHODPR(XMLFile, Save, (Serializer&, const String&) const, bool), AS_CALL_THISCALL));

    // bool XMLFile::FromString(const String& source)
    methods.Push(RegisterObjectMethodArgs("bool XMLFile::FromString(const String& source)", "bool FromString(const String&in)", AS_METHODPR(XMLFile, FromString, (const String&), bool), AS_CALL_THISCALL));

    // XMLElement XMLFile::CreateRoot(const String& name)
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLFile::CreateRoot(const String& name)", "XMLElement CreateRoot(const String&in)", AS_METHODPR(XMLFile, CreateRoot, (const String&), XMLElement), AS_CALL_THISCALL));

    // XMLElement XMLFile::GetOrCreateRoot(const String& name)
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLFile::GetOrCreateRoot(const String& name)", "XMLElement GetOrCreateRoot(const String&in)", AS_METHODPR(XMLFile, GetOrCreateRoot, (const String&), XMLElement), AS_CALL_THISCALL));

    // XMLElement XMLFile::GetRoot(const String& name=String::EMPTY)
    methods.Push(RegisterObjectMethodArgs("XMLElement XMLFile::GetRoot(const String& name=String::EMPTY)", "XMLElement GetRoot(const String&in = String::EMPTY)", AS_METHODPR(XMLFile, GetRoot, (const String&), XMLElement), AS_CALL_THISCALL));

    // String XMLFile::ToString(const String& indentation=\"\t\") const
    methods.Push(RegisterObjectMethodArgs("String XMLFile::ToString(const String& indentation=\"\t\") const", "String ToString(const String&in = \"\t\") const", AS_METHODPR(XMLFile, ToString, (const String&) const, String), AS_CALL_THISCALL));

    // void XMLFile::Patch(XMLFile* patchFile)
    methods.Push(RegisterObjectMethodArgs("void XMLFile::Patch(XMLFile* patchFile)", "void Patch(XMLFile@+)", AS_METHODPR(XMLFile, Patch, (XMLFile*), void), AS_CALL_THISCALL));

    // void XMLFile::Patch(const XMLElement& patchElement)
    methods.Push(RegisterObjectMethodArgs("void XMLFile::Patch(const XMLElement& patchElement)", "void Patch(const XMLElement&in)", AS_METHODPR(XMLFile, Patch, (const XMLElement&), void), AS_CALL_THISCALL));
}

// class XPathQuery | File: ../Resource/XMLElement.h
void CollectMembers_XPathQuery(Vector<RegisterObjectMethodArgs>& methods)
{
    // pugi::xpath_query* XPathQuery::GetXPathQuery() const
    // Error: type "pugi::xpath_query*" can not automatically bind

    // pugi::xpath_variable_set* XPathQuery::GetXPathVariableSet() const
    // Error: type "pugi::xpath_variable_set*" can not automatically bind

    // bool XPathQuery::SetVariable(const char* name, const char* value)
    // Error: type "const char*" can not automatically bind

    // void XPathQuery::Bind()
    methods.Push(RegisterObjectMethodArgs("void XPathQuery::Bind()", "void Bind()", AS_METHODPR(XPathQuery, Bind, (), void), AS_CALL_THISCALL));

    // bool XPathQuery::SetVariable(const String& name, bool value)
    methods.Push(RegisterObjectMethodArgs("bool XPathQuery::SetVariable(const String& name, bool value)", "bool SetVariable(const String&in, bool)", AS_METHODPR(XPathQuery, SetVariable, (const String&, bool), bool), AS_CALL_THISCALL));

    // bool XPathQuery::SetVariable(const String& name, float value)
    methods.Push(RegisterObjectMethodArgs("bool XPathQuery::SetVariable(const String& name, float value)", "bool SetVariable(const String&in, float)", AS_METHODPR(XPathQuery, SetVariable, (const String&, float), bool), AS_CALL_THISCALL));

    // bool XPathQuery::SetVariable(const String& name, const String& value)
    methods.Push(RegisterObjectMethodArgs("bool XPathQuery::SetVariable(const String& name, const String& value)", "bool SetVariable(const String&in, const String&in)", AS_METHODPR(XPathQuery, SetVariable, (const String&, const String&), bool), AS_CALL_THISCALL));

    // bool XPathQuery::SetVariable(const String& name, const XPathResultSet& value)
    methods.Push(RegisterObjectMethodArgs("bool XPathQuery::SetVariable(const String& name, const XPathResultSet& value)", "bool SetVariable(const String&in, const XPathResultSet&in)", AS_METHODPR(XPathQuery, SetVariable, (const String&, const XPathResultSet&), bool), AS_CALL_THISCALL));

    // bool XPathQuery::SetQuery(const String& queryString, const String& variableString=String::EMPTY, bool bind=true)
    methods.Push(RegisterObjectMethodArgs("bool XPathQuery::SetQuery(const String& queryString, const String& variableString=String::EMPTY, bool bind=true)", "bool SetQuery(const String&in, const String&in = String::EMPTY, bool = true)", AS_METHODPR(XPathQuery, SetQuery, (const String&, const String&, bool), bool), AS_CALL_THISCALL));

    // void XPathQuery::Clear()
    methods.Push(RegisterObjectMethodArgs("void XPathQuery::Clear()", "void Clear()", AS_METHODPR(XPathQuery, Clear, (), void), AS_CALL_THISCALL));

    // bool XPathQuery::EvaluateToBool(const XMLElement& element) const
    methods.Push(RegisterObjectMethodArgs("bool XPathQuery::EvaluateToBool(const XMLElement& element) const", "bool EvaluateToBool(const XMLElement&in) const", AS_METHODPR(XPathQuery, EvaluateToBool, (const XMLElement&) const, bool), AS_CALL_THISCALL));

    // float XPathQuery::EvaluateToFloat(const XMLElement& element) const
    methods.Push(RegisterObjectMethodArgs("float XPathQuery::EvaluateToFloat(const XMLElement& element) const", "float EvaluateToFloat(const XMLElement&in) const", AS_METHODPR(XPathQuery, EvaluateToFloat, (const XMLElement&) const, float), AS_CALL_THISCALL));

    // String XPathQuery::EvaluateToString(const XMLElement& element) const
    methods.Push(RegisterObjectMethodArgs("String XPathQuery::EvaluateToString(const XMLElement& element) const", "String EvaluateToString(const XMLElement&in) const", AS_METHODPR(XPathQuery, EvaluateToString, (const XMLElement&) const, String), AS_CALL_THISCALL));

    // XPathResultSet XPathQuery::Evaluate(const XMLElement& element) const
    methods.Push(RegisterObjectMethodArgs("XPathResultSet XPathQuery::Evaluate(const XMLElement& element) const", "XPathResultSet Evaluate(const XMLElement&in) const", AS_METHODPR(XPathQuery, Evaluate, (const XMLElement&) const, XPathResultSet), AS_CALL_THISCALL));

    // String XPathQuery::GetQuery() const
    methods.Push(RegisterObjectMethodArgs("String XPathQuery::GetQuery() const", "String GetQuery() const", AS_METHODPR(XPathQuery, GetQuery, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String XPathQuery::GetQuery() const", "String get_query() const", AS_METHODPR(XPathQuery, GetQuery, () const, String), AS_CALL_THISCALL));
}

// class XPathResultSet | File: ../Resource/XMLElement.h
void CollectMembers_XPathResultSet(Vector<RegisterObjectMethodArgs>& methods)
{
    // pugi::xpath_node_set* XPathResultSet::GetXPathNodeSet() const
    // Error: type "pugi::xpath_node_set*" can not automatically bind

    // XPathResultSet& XPathResultSet::operator=(const XPathResultSet& rhs)
    methods.Push(RegisterObjectMethodArgs("XPathResultSet& XPathResultSet::operator=(const XPathResultSet& rhs)", "XPathResultSet& opAssign(const XPathResultSet&in)", AS_METHODPR(XPathResultSet, operator=, (const XPathResultSet&), XPathResultSet&), AS_CALL_THISCALL));

    // XMLElement XPathResultSet::operator[](unsigned index) const
    methods.Push(RegisterObjectMethodArgs("XMLElement XPathResultSet::operator[](unsigned index) const", "XMLElement opIndex(uint) const", AS_METHODPR(XPathResultSet, operator[], (unsigned) const, XMLElement), AS_CALL_THISCALL));

    // XMLElement XPathResultSet::FirstResult()
    methods.Push(RegisterObjectMethodArgs("XMLElement XPathResultSet::FirstResult()", "XMLElement FirstResult()", AS_METHODPR(XPathResultSet, FirstResult, (), XMLElement), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("XMLElement XPathResultSet::FirstResult()", "XMLElement get_firstResult()", AS_METHODPR(XPathResultSet, FirstResult, (), XMLElement), AS_CALL_THISCALL));

    // unsigned XPathResultSet::Size() const
    methods.Push(RegisterObjectMethodArgs("unsigned XPathResultSet::Size() const", "uint Size() const", AS_METHODPR(XPathResultSet, Size, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned XPathResultSet::Size() const", "uint get_size() const", AS_METHODPR(XPathResultSet, Size, () const, unsigned), AS_CALL_THISCALL));

    // bool XPathResultSet::Empty() const
    methods.Push(RegisterObjectMethodArgs("bool XPathResultSet::Empty() const", "bool Empty() const", AS_METHODPR(XPathResultSet, Empty, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool XPathResultSet::Empty() const", "bool get_empty() const", AS_METHODPR(XPathResultSet, Empty, () const, bool), AS_CALL_THISCALL));
}

// class Zone | File: ../Graphics/Zone.h
void CollectMembers_Zone(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "void Drawable::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override");

    // void Zone::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void Zone::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Zone, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void Zone::SetBoundingBox(const BoundingBox& box)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetBoundingBox(const BoundingBox& box)", "void SetBoundingBox(const BoundingBox&in)", AS_METHODPR(Zone, SetBoundingBox, (const BoundingBox&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetBoundingBox(const BoundingBox& box)", "void set_boundingBox(const BoundingBox&in)", AS_METHODPR(Zone, SetBoundingBox, (const BoundingBox&), void), AS_CALL_THISCALL));

    // void Zone::SetAmbientColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetAmbientColor(const Color& color)", "void SetAmbientColor(const Color&in)", AS_METHODPR(Zone, SetAmbientColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetAmbientColor(const Color& color)", "void set_ambientColor(const Color&in)", AS_METHODPR(Zone, SetAmbientColor, (const Color&), void), AS_CALL_THISCALL));

    // void Zone::SetFogColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogColor(const Color& color)", "void SetFogColor(const Color&in)", AS_METHODPR(Zone, SetFogColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogColor(const Color& color)", "void set_fogColor(const Color&in)", AS_METHODPR(Zone, SetFogColor, (const Color&), void), AS_CALL_THISCALL));

    // void Zone::SetFogStart(float start)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogStart(float start)", "void SetFogStart(float)", AS_METHODPR(Zone, SetFogStart, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogStart(float start)", "void set_fogStart(float)", AS_METHODPR(Zone, SetFogStart, (float), void), AS_CALL_THISCALL));

    // void Zone::SetFogEnd(float end)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogEnd(float end)", "void SetFogEnd(float)", AS_METHODPR(Zone, SetFogEnd, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogEnd(float end)", "void set_fogEnd(float)", AS_METHODPR(Zone, SetFogEnd, (float), void), AS_CALL_THISCALL));

    // void Zone::SetFogHeight(float height)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogHeight(float height)", "void SetFogHeight(float)", AS_METHODPR(Zone, SetFogHeight, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogHeight(float height)", "void set_fogHeight(float)", AS_METHODPR(Zone, SetFogHeight, (float), void), AS_CALL_THISCALL));

    // void Zone::SetFogHeightScale(float scale)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogHeightScale(float scale)", "void SetFogHeightScale(float)", AS_METHODPR(Zone, SetFogHeightScale, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetFogHeightScale(float scale)", "void set_fogHeightScale(float)", AS_METHODPR(Zone, SetFogHeightScale, (float), void), AS_CALL_THISCALL));

    // void Zone::SetPriority(int priority)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetPriority(int priority)", "void SetPriority(int)", AS_METHODPR(Zone, SetPriority, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetPriority(int priority)", "void set_priority(int)", AS_METHODPR(Zone, SetPriority, (int), void), AS_CALL_THISCALL));

    // void Zone::SetHeightFog(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetHeightFog(bool enable)", "void SetHeightFog(bool)", AS_METHODPR(Zone, SetHeightFog, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetHeightFog(bool enable)", "void set_heightFog(bool)", AS_METHODPR(Zone, SetHeightFog, (bool), void), AS_CALL_THISCALL));

    // void Zone::SetOverride(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetOverride(bool enable)", "void SetOverride(bool)", AS_METHODPR(Zone, SetOverride, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetOverride(bool enable)", "void set_override(bool)", AS_METHODPR(Zone, SetOverride, (bool), void), AS_CALL_THISCALL));

    // void Zone::SetAmbientGradient(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetAmbientGradient(bool enable)", "void SetAmbientGradient(bool)", AS_METHODPR(Zone, SetAmbientGradient, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetAmbientGradient(bool enable)", "void set_ambientGradient(bool)", AS_METHODPR(Zone, SetAmbientGradient, (bool), void), AS_CALL_THISCALL));

    // void Zone::SetZoneTexture(Texture* texture)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetZoneTexture(Texture* texture)", "void SetZoneTexture(Texture@+)", AS_METHODPR(Zone, SetZoneTexture, (Texture*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Zone::SetZoneTexture(Texture* texture)", "void set_zoneTexture(Texture@+)", AS_METHODPR(Zone, SetZoneTexture, (Texture*), void), AS_CALL_THISCALL));

    // const Matrix3x4& Zone::GetInverseWorldTransform() const
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Zone::GetInverseWorldTransform() const", "const Matrix3x4& GetInverseWorldTransform() const", AS_METHODPR(Zone, GetInverseWorldTransform, () const, const Matrix3x4&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Matrix3x4& Zone::GetInverseWorldTransform() const", "const Matrix3x4& get_inverseWorldTransform() const", AS_METHODPR(Zone, GetInverseWorldTransform, () const, const Matrix3x4&), AS_CALL_THISCALL));

    // const Color& Zone::GetAmbientColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Zone::GetAmbientColor() const", "const Color& GetAmbientColor() const", AS_METHODPR(Zone, GetAmbientColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Zone::GetAmbientColor() const", "const Color& get_ambientColor() const", AS_METHODPR(Zone, GetAmbientColor, () const, const Color&), AS_CALL_THISCALL));

    // const Color& Zone::GetAmbientStartColor()
    methods.Push(RegisterObjectMethodArgs("const Color& Zone::GetAmbientStartColor()", "const Color& GetAmbientStartColor()", AS_METHODPR(Zone, GetAmbientStartColor, (), const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Zone::GetAmbientStartColor()", "const Color& get_ambientStartColor()", AS_METHODPR(Zone, GetAmbientStartColor, (), const Color&), AS_CALL_THISCALL));

    // const Color& Zone::GetAmbientEndColor()
    methods.Push(RegisterObjectMethodArgs("const Color& Zone::GetAmbientEndColor()", "const Color& GetAmbientEndColor()", AS_METHODPR(Zone, GetAmbientEndColor, (), const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Zone::GetAmbientEndColor()", "const Color& get_ambientEndColor()", AS_METHODPR(Zone, GetAmbientEndColor, (), const Color&), AS_CALL_THISCALL));

    // const Color& Zone::GetFogColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& Zone::GetFogColor() const", "const Color& GetFogColor() const", AS_METHODPR(Zone, GetFogColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& Zone::GetFogColor() const", "const Color& get_fogColor() const", AS_METHODPR(Zone, GetFogColor, () const, const Color&), AS_CALL_THISCALL));

    // float Zone::GetFogStart() const
    methods.Push(RegisterObjectMethodArgs("float Zone::GetFogStart() const", "float GetFogStart() const", AS_METHODPR(Zone, GetFogStart, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Zone::GetFogStart() const", "float get_fogStart() const", AS_METHODPR(Zone, GetFogStart, () const, float), AS_CALL_THISCALL));

    // float Zone::GetFogEnd() const
    methods.Push(RegisterObjectMethodArgs("float Zone::GetFogEnd() const", "float GetFogEnd() const", AS_METHODPR(Zone, GetFogEnd, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Zone::GetFogEnd() const", "float get_fogEnd() const", AS_METHODPR(Zone, GetFogEnd, () const, float), AS_CALL_THISCALL));

    // float Zone::GetFogHeight() const
    methods.Push(RegisterObjectMethodArgs("float Zone::GetFogHeight() const", "float GetFogHeight() const", AS_METHODPR(Zone, GetFogHeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Zone::GetFogHeight() const", "float get_fogHeight() const", AS_METHODPR(Zone, GetFogHeight, () const, float), AS_CALL_THISCALL));

    // float Zone::GetFogHeightScale() const
    methods.Push(RegisterObjectMethodArgs("float Zone::GetFogHeightScale() const", "float GetFogHeightScale() const", AS_METHODPR(Zone, GetFogHeightScale, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Zone::GetFogHeightScale() const", "float get_fogHeightScale() const", AS_METHODPR(Zone, GetFogHeightScale, () const, float), AS_CALL_THISCALL));

    // int Zone::GetPriority() const
    methods.Push(RegisterObjectMethodArgs("int Zone::GetPriority() const", "int GetPriority() const", AS_METHODPR(Zone, GetPriority, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Zone::GetPriority() const", "int get_priority() const", AS_METHODPR(Zone, GetPriority, () const, int), AS_CALL_THISCALL));

    // bool Zone::GetHeightFog() const
    methods.Push(RegisterObjectMethodArgs("bool Zone::GetHeightFog() const", "bool GetHeightFog() const", AS_METHODPR(Zone, GetHeightFog, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Zone::GetHeightFog() const", "bool get_heightFog() const", AS_METHODPR(Zone, GetHeightFog, () const, bool), AS_CALL_THISCALL));

    // bool Zone::GetOverride() const
    methods.Push(RegisterObjectMethodArgs("bool Zone::GetOverride() const", "bool GetOverride() const", AS_METHODPR(Zone, GetOverride, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Zone::GetOverride() const", "bool get_override() const", AS_METHODPR(Zone, GetOverride, () const, bool), AS_CALL_THISCALL));

    // bool Zone::GetAmbientGradient() const
    methods.Push(RegisterObjectMethodArgs("bool Zone::GetAmbientGradient() const", "bool GetAmbientGradient() const", AS_METHODPR(Zone, GetAmbientGradient, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Zone::GetAmbientGradient() const", "bool get_ambientGradient() const", AS_METHODPR(Zone, GetAmbientGradient, () const, bool), AS_CALL_THISCALL));

    // Texture* Zone::GetZoneTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture* Zone::GetZoneTexture() const", "Texture@+ GetZoneTexture() const", AS_METHODPR(Zone, GetZoneTexture, () const, Texture*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture* Zone::GetZoneTexture() const", "Texture@+ get_zoneTexture() const", AS_METHODPR(Zone, GetZoneTexture, () const, Texture*), AS_CALL_THISCALL));

    // bool Zone::IsInside(const Vector3& point) const
    methods.Push(RegisterObjectMethodArgs("bool Zone::IsInside(const Vector3& point) const", "bool IsInside(const Vector3&in) const", AS_METHODPR(Zone, IsInside, (const Vector3&) const, bool), AS_CALL_THISCALL));

    // void Zone::SetZoneTextureAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void Zone::SetZoneTextureAttr(const ResourceRef& value)", "void SetZoneTextureAttr(const ResourceRef&in)", AS_METHODPR(Zone, SetZoneTextureAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef Zone::GetZoneTextureAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef Zone::GetZoneTextureAttr() const", "ResourceRef GetZoneTextureAttr() const", AS_METHODPR(Zone, GetZoneTextureAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

#ifdef URHO3D_DATABASE

// class Database | File: ../Database/Database.h
void CollectMembers_Database(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // DbConnection* Database::Connect(const String& connectionString)
    methods.Push(RegisterObjectMethodArgs("DbConnection* Database::Connect(const String& connectionString)", "DbConnection@+ Connect(const String&in)", AS_METHODPR(Database, Connect, (const String&), DbConnection*), AS_CALL_THISCALL));

    // void Database::Disconnect(DbConnection* connection)
    methods.Push(RegisterObjectMethodArgs("void Database::Disconnect(DbConnection* connection)", "void Disconnect(DbConnection@+)", AS_METHODPR(Database, Disconnect, (DbConnection*), void), AS_CALL_THISCALL));

    // bool Database::IsPooling() const
    methods.Push(RegisterObjectMethodArgs("bool Database::IsPooling() const", "bool IsPooling() const", AS_METHODPR(Database, IsPooling, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Database::IsPooling() const", "bool get_pooling() const", AS_METHODPR(Database, IsPooling, () const, bool), AS_CALL_THISCALL));

    // unsigned Database::GetPoolSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned Database::GetPoolSize() const", "uint GetPoolSize() const", AS_METHODPR(Database, GetPoolSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Database::GetPoolSize() const", "uint get_poolSize() const", AS_METHODPR(Database, GetPoolSize, () const, unsigned), AS_CALL_THISCALL));

    // void Database::SetPoolSize(unsigned poolSize)
    methods.Push(RegisterObjectMethodArgs("void Database::SetPoolSize(unsigned poolSize)", "void SetPoolSize(uint)", AS_METHODPR(Database, SetPoolSize, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Database::SetPoolSize(unsigned poolSize)", "void set_poolSize(uint)", AS_METHODPR(Database, SetPoolSize, (unsigned), void), AS_CALL_THISCALL));
}

#endif // def URHO3D_DATABASE

#ifdef URHO3D_IK

// class IKConstraint | File: ../IK/IKConstraint.h
void CollectMembers_IKConstraint(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");

    // float IKConstraint::GetStiffness() const
    methods.Push(RegisterObjectMethodArgs("float IKConstraint::GetStiffness() const", "float GetStiffness() const", AS_METHODPR(IKConstraint, GetStiffness, () const, float), AS_CALL_THISCALL));

    // void IKConstraint::SetStiffness(float stiffness)
    methods.Push(RegisterObjectMethodArgs("void IKConstraint::SetStiffness(float stiffness)", "void SetStiffness(float)", AS_METHODPR(IKConstraint, SetStiffness, (float), void), AS_CALL_THISCALL));

    // float IKConstraint::GetStretchiness() const
    methods.Push(RegisterObjectMethodArgs("float IKConstraint::GetStretchiness() const", "float GetStretchiness() const", AS_METHODPR(IKConstraint, GetStretchiness, () const, float), AS_CALL_THISCALL));

    // void IKConstraint::SetStretchiness(float stretchiness)
    methods.Push(RegisterObjectMethodArgs("void IKConstraint::SetStretchiness(float stretchiness)", "void SetStretchiness(float)", AS_METHODPR(IKConstraint, SetStretchiness, (float), void), AS_CALL_THISCALL));

    // const Vector2& IKConstraint::GetLengthConstraints() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& IKConstraint::GetLengthConstraints() const", "const Vector2& GetLengthConstraints() const", AS_METHODPR(IKConstraint, GetLengthConstraints, () const, const Vector2&), AS_CALL_THISCALL));

    // void IKConstraint::SetLengthConstraints(const Vector2& lengthConstraints)
    methods.Push(RegisterObjectMethodArgs("void IKConstraint::SetLengthConstraints(const Vector2& lengthConstraints)", "void SetLengthConstraints(const Vector2&in)", AS_METHODPR(IKConstraint, SetLengthConstraints, (const Vector2&), void), AS_CALL_THISCALL));
}

// class IKEffector | File: ../IK/IKEffector.h
void CollectMembers_IKEffector(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // Node* IKEffector::GetTargetNode() const
    methods.Push(RegisterObjectMethodArgs("Node* IKEffector::GetTargetNode() const", "Node@+ GetTargetNode() const", AS_METHODPR(IKEffector, GetTargetNode, () const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* IKEffector::GetTargetNode() const", "Node@+ get_targetNode() const", AS_METHODPR(IKEffector, GetTargetNode, () const, Node*), AS_CALL_THISCALL));

    // void IKEffector::SetTargetNode(Node* targetNode)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetNode(Node* targetNode)", "void SetTargetNode(Node@+)", AS_METHODPR(IKEffector, SetTargetNode, (Node*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetNode(Node* targetNode)", "void set_targetNode(Node@+)", AS_METHODPR(IKEffector, SetTargetNode, (Node*), void), AS_CALL_THISCALL));

    // const String& IKEffector::GetTargetName() const
    methods.Push(RegisterObjectMethodArgs("const String& IKEffector::GetTargetName() const", "const String& GetTargetName() const", AS_METHODPR(IKEffector, GetTargetName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& IKEffector::GetTargetName() const", "const String& get_targetName() const", AS_METHODPR(IKEffector, GetTargetName, () const, const String&), AS_CALL_THISCALL));

    // void IKEffector::SetTargetName(const String& nodeName)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetName(const String& nodeName)", "void SetTargetName(const String&in)", AS_METHODPR(IKEffector, SetTargetName, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetName(const String& nodeName)", "void set_targetName(const String&in)", AS_METHODPR(IKEffector, SetTargetName, (const String&), void), AS_CALL_THISCALL));

    // const Vector3& IKEffector::GetTargetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& IKEffector::GetTargetPosition() const", "const Vector3& GetTargetPosition() const", AS_METHODPR(IKEffector, GetTargetPosition, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& IKEffector::GetTargetPosition() const", "const Vector3& get_targetPosition() const", AS_METHODPR(IKEffector, GetTargetPosition, () const, const Vector3&), AS_CALL_THISCALL));

    // void IKEffector::SetTargetPosition(const Vector3& targetPosition)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetPosition(const Vector3& targetPosition)", "void SetTargetPosition(const Vector3&in)", AS_METHODPR(IKEffector, SetTargetPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetPosition(const Vector3& targetPosition)", "void set_targetPosition(const Vector3&in)", AS_METHODPR(IKEffector, SetTargetPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // const Quaternion& IKEffector::GetTargetRotation() const
    methods.Push(RegisterObjectMethodArgs("const Quaternion& IKEffector::GetTargetRotation() const", "const Quaternion& GetTargetRotation() const", AS_METHODPR(IKEffector, GetTargetRotation, () const, const Quaternion&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Quaternion& IKEffector::GetTargetRotation() const", "const Quaternion& get_targetRotation() const", AS_METHODPR(IKEffector, GetTargetRotation, () const, const Quaternion&), AS_CALL_THISCALL));

    // void IKEffector::SetTargetRotation(const Quaternion& targetRotation)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetRotation(const Quaternion& targetRotation)", "void SetTargetRotation(const Quaternion&in)", AS_METHODPR(IKEffector, SetTargetRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetRotation(const Quaternion& targetRotation)", "void set_targetRotation(const Quaternion&in)", AS_METHODPR(IKEffector, SetTargetRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // Vector3 IKEffector::GetTargetRotationEuler() const
    methods.Push(RegisterObjectMethodArgs("Vector3 IKEffector::GetTargetRotationEuler() const", "Vector3 GetTargetRotationEuler() const", AS_METHODPR(IKEffector, GetTargetRotationEuler, () const, Vector3), AS_CALL_THISCALL));

    // void IKEffector::SetTargetRotationEuler(const Vector3& targetRotation)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetTargetRotationEuler(const Vector3& targetRotation)", "void SetTargetRotationEuler(const Vector3&in)", AS_METHODPR(IKEffector, SetTargetRotationEuler, (const Vector3&), void), AS_CALL_THISCALL));

    // unsigned IKEffector::GetChainLength() const
    methods.Push(RegisterObjectMethodArgs("unsigned IKEffector::GetChainLength() const", "uint GetChainLength() const", AS_METHODPR(IKEffector, GetChainLength, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned IKEffector::GetChainLength() const", "uint get_chainLength() const", AS_METHODPR(IKEffector, GetChainLength, () const, unsigned), AS_CALL_THISCALL));

    // void IKEffector::SetChainLength(unsigned chainLength)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetChainLength(unsigned chainLength)", "void SetChainLength(uint)", AS_METHODPR(IKEffector, SetChainLength, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetChainLength(unsigned chainLength)", "void set_chainLength(uint)", AS_METHODPR(IKEffector, SetChainLength, (unsigned), void), AS_CALL_THISCALL));

    // float IKEffector::GetWeight() const
    methods.Push(RegisterObjectMethodArgs("float IKEffector::GetWeight() const", "float GetWeight() const", AS_METHODPR(IKEffector, GetWeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float IKEffector::GetWeight() const", "float get_weight() const", AS_METHODPR(IKEffector, GetWeight, () const, float), AS_CALL_THISCALL));

    // void IKEffector::SetWeight(float weight)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetWeight(float weight)", "void SetWeight(float)", AS_METHODPR(IKEffector, SetWeight, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetWeight(float weight)", "void set_weight(float)", AS_METHODPR(IKEffector, SetWeight, (float), void), AS_CALL_THISCALL));

    // float IKEffector::GetRotationWeight() const
    methods.Push(RegisterObjectMethodArgs("float IKEffector::GetRotationWeight() const", "float GetRotationWeight() const", AS_METHODPR(IKEffector, GetRotationWeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float IKEffector::GetRotationWeight() const", "float get_rotationWeight() const", AS_METHODPR(IKEffector, GetRotationWeight, () const, float), AS_CALL_THISCALL));

    // void IKEffector::SetRotationWeight(float weight)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetRotationWeight(float weight)", "void SetRotationWeight(float)", AS_METHODPR(IKEffector, SetRotationWeight, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetRotationWeight(float weight)", "void set_rotationWeight(float)", AS_METHODPR(IKEffector, SetRotationWeight, (float), void), AS_CALL_THISCALL));

    // float IKEffector::GetRotationDecay() const
    methods.Push(RegisterObjectMethodArgs("float IKEffector::GetRotationDecay() const", "float GetRotationDecay() const", AS_METHODPR(IKEffector, GetRotationDecay, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float IKEffector::GetRotationDecay() const", "float get_rotationDecay() const", AS_METHODPR(IKEffector, GetRotationDecay, () const, float), AS_CALL_THISCALL));

    // void IKEffector::SetRotationDecay(float decay)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetRotationDecay(float decay)", "void SetRotationDecay(float)", AS_METHODPR(IKEffector, SetRotationDecay, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetRotationDecay(float decay)", "void set_rotationDecay(float)", AS_METHODPR(IKEffector, SetRotationDecay, (float), void), AS_CALL_THISCALL));

    // void IKEffector::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(IKEffector, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));

    // void IKEffector::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void IKEffector::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(IKEffector, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // bool IKEffector::GetWEIGHT_NLERP() const
    methods.Push(RegisterObjectMethodArgs("bool IKEffector::GetWEIGHT_NLERP() const", "bool GetWEIGHT_NLERP() const", AS_METHODPR(IKEffector, GetWEIGHT_NLERP, () const, bool), AS_CALL_THISCALL));

    // bool IKEffector::GetINHERIT_PARENT_ROTATION() const
    methods.Push(RegisterObjectMethodArgs("bool IKEffector::GetINHERIT_PARENT_ROTATION() const", "bool GetINHERIT_PARENT_ROTATION() const", AS_METHODPR(IKEffector, GetINHERIT_PARENT_ROTATION, () const, bool), AS_CALL_THISCALL));

    // void IKEffector::SetWEIGHT_NLERP(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetWEIGHT_NLERP(bool enable)", "void SetWEIGHT_NLERP(bool)", AS_METHODPR(IKEffector, SetWEIGHT_NLERP, (bool), void), AS_CALL_THISCALL));

    // void IKEffector::SetINHERIT_PARENT_ROTATION(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKEffector::SetINHERIT_PARENT_ROTATION(bool enable)", "void SetINHERIT_PARENT_ROTATION(bool)", AS_METHODPR(IKEffector, SetINHERIT_PARENT_ROTATION, (bool), void), AS_CALL_THISCALL));
}

// class IKSolver | File: ../IK/IKSolver.h
void CollectMembers_IKSolver(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // unsigned IKSolver::GetMaximumIterations() const
    methods.Push(RegisterObjectMethodArgs("unsigned IKSolver::GetMaximumIterations() const", "uint GetMaximumIterations() const", AS_METHODPR(IKSolver, GetMaximumIterations, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned IKSolver::GetMaximumIterations() const", "uint get_maximumIterations() const", AS_METHODPR(IKSolver, GetMaximumIterations, () const, unsigned), AS_CALL_THISCALL));

    // void IKSolver::SetMaximumIterations(unsigned iterations)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetMaximumIterations(unsigned iterations)", "void SetMaximumIterations(uint)", AS_METHODPR(IKSolver, SetMaximumIterations, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetMaximumIterations(unsigned iterations)", "void set_maximumIterations(uint)", AS_METHODPR(IKSolver, SetMaximumIterations, (unsigned), void), AS_CALL_THISCALL));

    // float IKSolver::GetTolerance() const
    methods.Push(RegisterObjectMethodArgs("float IKSolver::GetTolerance() const", "float GetTolerance() const", AS_METHODPR(IKSolver, GetTolerance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float IKSolver::GetTolerance() const", "float get_tolerance() const", AS_METHODPR(IKSolver, GetTolerance, () const, float), AS_CALL_THISCALL));

    // void IKSolver::SetTolerance(float tolerance)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetTolerance(float tolerance)", "void SetTolerance(float)", AS_METHODPR(IKSolver, SetTolerance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetTolerance(float tolerance)", "void set_tolerance(float)", AS_METHODPR(IKSolver, SetTolerance, (float), void), AS_CALL_THISCALL));

    // void IKSolver::RebuildChainTrees()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::RebuildChainTrees()", "void RebuildChainTrees()", AS_METHODPR(IKSolver, RebuildChainTrees, (), void), AS_CALL_THISCALL));

    // void IKSolver::RecalculateSegmentLengths()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::RecalculateSegmentLengths()", "void RecalculateSegmentLengths()", AS_METHODPR(IKSolver, RecalculateSegmentLengths, (), void), AS_CALL_THISCALL));

    // void IKSolver::CalculateJointRotations()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::CalculateJointRotations()", "void CalculateJointRotations()", AS_METHODPR(IKSolver, CalculateJointRotations, (), void), AS_CALL_THISCALL));

    // void IKSolver::Solve()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::Solve()", "void Solve()", AS_METHODPR(IKSolver, Solve, (), void), AS_CALL_THISCALL));

    // void IKSolver::ApplyOriginalPoseToScene()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::ApplyOriginalPoseToScene()", "void ApplyOriginalPoseToScene()", AS_METHODPR(IKSolver, ApplyOriginalPoseToScene, (), void), AS_CALL_THISCALL));

    // void IKSolver::ApplySceneToOriginalPose()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::ApplySceneToOriginalPose()", "void ApplySceneToOriginalPose()", AS_METHODPR(IKSolver, ApplySceneToOriginalPose, (), void), AS_CALL_THISCALL));

    // void IKSolver::ApplyActivePoseToScene()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::ApplyActivePoseToScene()", "void ApplyActivePoseToScene()", AS_METHODPR(IKSolver, ApplyActivePoseToScene, (), void), AS_CALL_THISCALL));

    // void IKSolver::ApplySceneToActivePose()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::ApplySceneToActivePose()", "void ApplySceneToActivePose()", AS_METHODPR(IKSolver, ApplySceneToActivePose, (), void), AS_CALL_THISCALL));

    // void IKSolver::ApplyOriginalPoseToActivePose()
    methods.Push(RegisterObjectMethodArgs("void IKSolver::ApplyOriginalPoseToActivePose()", "void ApplyOriginalPoseToActivePose()", AS_METHODPR(IKSolver, ApplyOriginalPoseToActivePose, (), void), AS_CALL_THISCALL));

    // void IKSolver::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(IKSolver, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));

    // void IKSolver::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void IKSolver::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(IKSolver, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // bool IKSolver::GetJOINT_ROTATIONS() const
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetJOINT_ROTATIONS() const", "bool GetJOINT_ROTATIONS() const", AS_METHODPR(IKSolver, GetJOINT_ROTATIONS, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetJOINT_ROTATIONS() const", "bool get_JOINT_ROTATIONS() const", AS_METHODPR(IKSolver, GetJOINT_ROTATIONS, () const, bool), AS_CALL_THISCALL));

    // bool IKSolver::GetTARGET_ROTATIONS() const
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetTARGET_ROTATIONS() const", "bool GetTARGET_ROTATIONS() const", AS_METHODPR(IKSolver, GetTARGET_ROTATIONS, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetTARGET_ROTATIONS() const", "bool get_TARGET_ROTATIONS() const", AS_METHODPR(IKSolver, GetTARGET_ROTATIONS, () const, bool), AS_CALL_THISCALL));

    // bool IKSolver::GetUPDATE_ORIGINAL_POSE() const
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetUPDATE_ORIGINAL_POSE() const", "bool GetUPDATE_ORIGINAL_POSE() const", AS_METHODPR(IKSolver, GetUPDATE_ORIGINAL_POSE, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetUPDATE_ORIGINAL_POSE() const", "bool get_UPDATE_ORIGINAL_POSE() const", AS_METHODPR(IKSolver, GetUPDATE_ORIGINAL_POSE, () const, bool), AS_CALL_THISCALL));

    // bool IKSolver::GetUPDATE_ACTIVE_POSE() const
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetUPDATE_ACTIVE_POSE() const", "bool GetUPDATE_ACTIVE_POSE() const", AS_METHODPR(IKSolver, GetUPDATE_ACTIVE_POSE, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetUPDATE_ACTIVE_POSE() const", "bool get_UPDATE_ACTIVE_POSE() const", AS_METHODPR(IKSolver, GetUPDATE_ACTIVE_POSE, () const, bool), AS_CALL_THISCALL));

    // bool IKSolver::GetUSE_ORIGINAL_POSE() const
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetUSE_ORIGINAL_POSE() const", "bool GetUSE_ORIGINAL_POSE() const", AS_METHODPR(IKSolver, GetUSE_ORIGINAL_POSE, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetUSE_ORIGINAL_POSE() const", "bool get_USE_ORIGINAL_POSE() const", AS_METHODPR(IKSolver, GetUSE_ORIGINAL_POSE, () const, bool), AS_CALL_THISCALL));

    // bool IKSolver::GetCONSTRAINTS() const
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetCONSTRAINTS() const", "bool GetCONSTRAINTS() const", AS_METHODPR(IKSolver, GetCONSTRAINTS, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetCONSTRAINTS() const", "bool get_CONSTRAINTS() const", AS_METHODPR(IKSolver, GetCONSTRAINTS, () const, bool), AS_CALL_THISCALL));

    // bool IKSolver::GetAUTO_SOLVE() const
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetAUTO_SOLVE() const", "bool GetAUTO_SOLVE() const", AS_METHODPR(IKSolver, GetAUTO_SOLVE, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool IKSolver::GetAUTO_SOLVE() const", "bool get_AUTO_SOLVE() const", AS_METHODPR(IKSolver, GetAUTO_SOLVE, () const, bool), AS_CALL_THISCALL));

    // void IKSolver::SetJOINT_ROTATIONS(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetJOINT_ROTATIONS(bool enable)", "void SetJOINT_ROTATIONS(bool)", AS_METHODPR(IKSolver, SetJOINT_ROTATIONS, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetJOINT_ROTATIONS(bool enable)", "void set_JOINT_ROTATIONS(bool)", AS_METHODPR(IKSolver, SetJOINT_ROTATIONS, (bool), void), AS_CALL_THISCALL));

    // void IKSolver::SetTARGET_ROTATIONS(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetTARGET_ROTATIONS(bool enable)", "void SetTARGET_ROTATIONS(bool)", AS_METHODPR(IKSolver, SetTARGET_ROTATIONS, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetTARGET_ROTATIONS(bool enable)", "void set_TARGET_ROTATIONS(bool)", AS_METHODPR(IKSolver, SetTARGET_ROTATIONS, (bool), void), AS_CALL_THISCALL));

    // void IKSolver::SetUPDATE_ORIGINAL_POSE(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetUPDATE_ORIGINAL_POSE(bool enable)", "void SetUPDATE_ORIGINAL_POSE(bool)", AS_METHODPR(IKSolver, SetUPDATE_ORIGINAL_POSE, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetUPDATE_ORIGINAL_POSE(bool enable)", "void set_UPDATE_ORIGINAL_POSE(bool)", AS_METHODPR(IKSolver, SetUPDATE_ORIGINAL_POSE, (bool), void), AS_CALL_THISCALL));

    // void IKSolver::SetUPDATE_ACTIVE_POSE(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetUPDATE_ACTIVE_POSE(bool enable)", "void SetUPDATE_ACTIVE_POSE(bool)", AS_METHODPR(IKSolver, SetUPDATE_ACTIVE_POSE, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetUPDATE_ACTIVE_POSE(bool enable)", "void set_UPDATE_ACTIVE_POSE(bool)", AS_METHODPR(IKSolver, SetUPDATE_ACTIVE_POSE, (bool), void), AS_CALL_THISCALL));

    // void IKSolver::SetUSE_ORIGINAL_POSE(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetUSE_ORIGINAL_POSE(bool enable)", "void SetUSE_ORIGINAL_POSE(bool)", AS_METHODPR(IKSolver, SetUSE_ORIGINAL_POSE, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetUSE_ORIGINAL_POSE(bool enable)", "void set_USE_ORIGINAL_POSE(bool)", AS_METHODPR(IKSolver, SetUSE_ORIGINAL_POSE, (bool), void), AS_CALL_THISCALL));

    // void IKSolver::SetCONSTRAINTS(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetCONSTRAINTS(bool enable)", "void SetCONSTRAINTS(bool)", AS_METHODPR(IKSolver, SetCONSTRAINTS, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetCONSTRAINTS(bool enable)", "void set_CONSTRAINTS(bool)", AS_METHODPR(IKSolver, SetCONSTRAINTS, (bool), void), AS_CALL_THISCALL));

    // void IKSolver::SetAUTO_SOLVE(bool enable)
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetAUTO_SOLVE(bool enable)", "void SetAUTO_SOLVE(bool)", AS_METHODPR(IKSolver, SetAUTO_SOLVE, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void IKSolver::SetAUTO_SOLVE(bool enable)", "void set_AUTO_SOLVE(bool)", AS_METHODPR(IKSolver, SetAUTO_SOLVE, (bool), void), AS_CALL_THISCALL));
}

#endif // def URHO3D_IK

#ifdef URHO3D_NAVIGATION

// class CrowdAgent | File: ../Navigation/CrowdAgent.h
void CollectMembers_CrowdAgent(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Component::OnSetEnabled()");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // void CrowdAgent::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(CrowdAgent, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void CrowdAgent::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(CrowdAgent, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void CrowdAgent::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(CrowdAgent, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));

    // void CrowdAgent::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(CrowdAgent, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetTargetPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetTargetPosition(const Vector3& position)", "void SetTargetPosition(const Vector3&in)", AS_METHODPR(CrowdAgent, SetTargetPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetTargetPosition(const Vector3& position)", "void set_targetPosition(const Vector3&in)", AS_METHODPR(CrowdAgent, SetTargetPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetTargetVelocity(const Vector3& velocity)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetTargetVelocity(const Vector3& velocity)", "void SetTargetVelocity(const Vector3&in)", AS_METHODPR(CrowdAgent, SetTargetVelocity, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetTargetVelocity(const Vector3& velocity)", "void set_targetVelocity(const Vector3&in)", AS_METHODPR(CrowdAgent, SetTargetVelocity, (const Vector3&), void), AS_CALL_THISCALL));

    // void CrowdAgent::ResetTarget()
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::ResetTarget()", "void ResetTarget()", AS_METHODPR(CrowdAgent, ResetTarget, (), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetUpdateNodePosition(bool unodepos)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetUpdateNodePosition(bool unodepos)", "void SetUpdateNodePosition(bool)", AS_METHODPR(CrowdAgent, SetUpdateNodePosition, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetUpdateNodePosition(bool unodepos)", "void set_updateNodePosition(bool)", AS_METHODPR(CrowdAgent, SetUpdateNodePosition, (bool), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetMaxAccel(float maxAccel)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetMaxAccel(float maxAccel)", "void SetMaxAccel(float)", AS_METHODPR(CrowdAgent, SetMaxAccel, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetMaxAccel(float maxAccel)", "void set_maxAccel(float)", AS_METHODPR(CrowdAgent, SetMaxAccel, (float), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetMaxSpeed(float maxSpeed)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetMaxSpeed(float maxSpeed)", "void SetMaxSpeed(float)", AS_METHODPR(CrowdAgent, SetMaxSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetMaxSpeed(float maxSpeed)", "void set_maxSpeed(float)", AS_METHODPR(CrowdAgent, SetMaxSpeed, (float), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetRadius(float radius)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetRadius(float radius)", "void SetRadius(float)", AS_METHODPR(CrowdAgent, SetRadius, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetRadius(float radius)", "void set_radius(float)", AS_METHODPR(CrowdAgent, SetRadius, (float), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetHeight(float height)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetHeight(float height)", "void SetHeight(float)", AS_METHODPR(CrowdAgent, SetHeight, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetHeight(float height)", "void set_height(float)", AS_METHODPR(CrowdAgent, SetHeight, (float), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetQueryFilterType(unsigned queryFilterType)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetQueryFilterType(unsigned queryFilterType)", "void SetQueryFilterType(uint)", AS_METHODPR(CrowdAgent, SetQueryFilterType, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetQueryFilterType(unsigned queryFilterType)", "void set_queryFilterType(uint)", AS_METHODPR(CrowdAgent, SetQueryFilterType, (unsigned), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetObstacleAvoidanceType(unsigned obstacleAvoidanceType)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetObstacleAvoidanceType(unsigned obstacleAvoidanceType)", "void SetObstacleAvoidanceType(uint)", AS_METHODPR(CrowdAgent, SetObstacleAvoidanceType, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetObstacleAvoidanceType(unsigned obstacleAvoidanceType)", "void set_obstacleAvoidanceType(uint)", AS_METHODPR(CrowdAgent, SetObstacleAvoidanceType, (unsigned), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetNavigationQuality(NavigationQuality val)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetNavigationQuality(NavigationQuality val)", "void SetNavigationQuality(NavigationQuality)", AS_METHODPR(CrowdAgent, SetNavigationQuality, (NavigationQuality), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetNavigationQuality(NavigationQuality val)", "void set_navigationQuality(NavigationQuality)", AS_METHODPR(CrowdAgent, SetNavigationQuality, (NavigationQuality), void), AS_CALL_THISCALL));

    // void CrowdAgent::SetNavigationPushiness(NavigationPushiness val)
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetNavigationPushiness(NavigationPushiness val)", "void SetNavigationPushiness(NavigationPushiness)", AS_METHODPR(CrowdAgent, SetNavigationPushiness, (NavigationPushiness), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdAgent::SetNavigationPushiness(NavigationPushiness val)", "void set_navigationPushiness(NavigationPushiness)", AS_METHODPR(CrowdAgent, SetNavigationPushiness, (NavigationPushiness), void), AS_CALL_THISCALL));

    // Vector3 CrowdAgent::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("Vector3 CrowdAgent::GetPosition() const", "Vector3 GetPosition() const", AS_METHODPR(CrowdAgent, GetPosition, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 CrowdAgent::GetPosition() const", "Vector3 get_position() const", AS_METHODPR(CrowdAgent, GetPosition, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 CrowdAgent::GetDesiredVelocity() const
    methods.Push(RegisterObjectMethodArgs("Vector3 CrowdAgent::GetDesiredVelocity() const", "Vector3 GetDesiredVelocity() const", AS_METHODPR(CrowdAgent, GetDesiredVelocity, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 CrowdAgent::GetDesiredVelocity() const", "Vector3 get_desiredVelocity() const", AS_METHODPR(CrowdAgent, GetDesiredVelocity, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 CrowdAgent::GetActualVelocity() const
    methods.Push(RegisterObjectMethodArgs("Vector3 CrowdAgent::GetActualVelocity() const", "Vector3 GetActualVelocity() const", AS_METHODPR(CrowdAgent, GetActualVelocity, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 CrowdAgent::GetActualVelocity() const", "Vector3 get_actualVelocity() const", AS_METHODPR(CrowdAgent, GetActualVelocity, () const, Vector3), AS_CALL_THISCALL));

    // const Vector3& CrowdAgent::GetTargetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& CrowdAgent::GetTargetPosition() const", "const Vector3& GetTargetPosition() const", AS_METHODPR(CrowdAgent, GetTargetPosition, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& CrowdAgent::GetTargetPosition() const", "const Vector3& get_targetPosition() const", AS_METHODPR(CrowdAgent, GetTargetPosition, () const, const Vector3&), AS_CALL_THISCALL));

    // const Vector3& CrowdAgent::GetTargetVelocity() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& CrowdAgent::GetTargetVelocity() const", "const Vector3& GetTargetVelocity() const", AS_METHODPR(CrowdAgent, GetTargetVelocity, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& CrowdAgent::GetTargetVelocity() const", "const Vector3& get_targetVelocity() const", AS_METHODPR(CrowdAgent, GetTargetVelocity, () const, const Vector3&), AS_CALL_THISCALL));

    // CrowdAgentRequestedTarget CrowdAgent::GetRequestedTargetType() const
    methods.Push(RegisterObjectMethodArgs("CrowdAgentRequestedTarget CrowdAgent::GetRequestedTargetType() const", "CrowdAgentRequestedTarget GetRequestedTargetType() const", AS_METHODPR(CrowdAgent, GetRequestedTargetType, () const, CrowdAgentRequestedTarget), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CrowdAgentRequestedTarget CrowdAgent::GetRequestedTargetType() const", "CrowdAgentRequestedTarget get_requestedTargetType() const", AS_METHODPR(CrowdAgent, GetRequestedTargetType, () const, CrowdAgentRequestedTarget), AS_CALL_THISCALL));

    // CrowdAgentState CrowdAgent::GetAgentState() const
    methods.Push(RegisterObjectMethodArgs("CrowdAgentState CrowdAgent::GetAgentState() const", "CrowdAgentState GetAgentState() const", AS_METHODPR(CrowdAgent, GetAgentState, () const, CrowdAgentState), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CrowdAgentState CrowdAgent::GetAgentState() const", "CrowdAgentState get_agentState() const", AS_METHODPR(CrowdAgent, GetAgentState, () const, CrowdAgentState), AS_CALL_THISCALL));

    // CrowdAgentTargetState CrowdAgent::GetTargetState() const
    methods.Push(RegisterObjectMethodArgs("CrowdAgentTargetState CrowdAgent::GetTargetState() const", "CrowdAgentTargetState GetTargetState() const", AS_METHODPR(CrowdAgent, GetTargetState, () const, CrowdAgentTargetState), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CrowdAgentTargetState CrowdAgent::GetTargetState() const", "CrowdAgentTargetState get_targetState() const", AS_METHODPR(CrowdAgent, GetTargetState, () const, CrowdAgentTargetState), AS_CALL_THISCALL));

    // bool CrowdAgent::GetUpdateNodePosition() const
    methods.Push(RegisterObjectMethodArgs("bool CrowdAgent::GetUpdateNodePosition() const", "bool GetUpdateNodePosition() const", AS_METHODPR(CrowdAgent, GetUpdateNodePosition, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CrowdAgent::GetUpdateNodePosition() const", "bool get_updateNodePosition() const", AS_METHODPR(CrowdAgent, GetUpdateNodePosition, () const, bool), AS_CALL_THISCALL));

    // int CrowdAgent::GetAgentCrowdId() const
    methods.Push(RegisterObjectMethodArgs("int CrowdAgent::GetAgentCrowdId() const", "int GetAgentCrowdId() const", AS_METHODPR(CrowdAgent, GetAgentCrowdId, () const, int), AS_CALL_THISCALL));

    // float CrowdAgent::GetMaxAccel() const
    methods.Push(RegisterObjectMethodArgs("float CrowdAgent::GetMaxAccel() const", "float GetMaxAccel() const", AS_METHODPR(CrowdAgent, GetMaxAccel, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CrowdAgent::GetMaxAccel() const", "float get_maxAccel() const", AS_METHODPR(CrowdAgent, GetMaxAccel, () const, float), AS_CALL_THISCALL));

    // float CrowdAgent::GetMaxSpeed() const
    methods.Push(RegisterObjectMethodArgs("float CrowdAgent::GetMaxSpeed() const", "float GetMaxSpeed() const", AS_METHODPR(CrowdAgent, GetMaxSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CrowdAgent::GetMaxSpeed() const", "float get_maxSpeed() const", AS_METHODPR(CrowdAgent, GetMaxSpeed, () const, float), AS_CALL_THISCALL));

    // float CrowdAgent::GetRadius() const
    methods.Push(RegisterObjectMethodArgs("float CrowdAgent::GetRadius() const", "float GetRadius() const", AS_METHODPR(CrowdAgent, GetRadius, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CrowdAgent::GetRadius() const", "float get_radius() const", AS_METHODPR(CrowdAgent, GetRadius, () const, float), AS_CALL_THISCALL));

    // float CrowdAgent::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("float CrowdAgent::GetHeight() const", "float GetHeight() const", AS_METHODPR(CrowdAgent, GetHeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CrowdAgent::GetHeight() const", "float get_height() const", AS_METHODPR(CrowdAgent, GetHeight, () const, float), AS_CALL_THISCALL));

    // unsigned CrowdAgent::GetQueryFilterType() const
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdAgent::GetQueryFilterType() const", "uint GetQueryFilterType() const", AS_METHODPR(CrowdAgent, GetQueryFilterType, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdAgent::GetQueryFilterType() const", "uint get_queryFilterType() const", AS_METHODPR(CrowdAgent, GetQueryFilterType, () const, unsigned), AS_CALL_THISCALL));

    // unsigned CrowdAgent::GetObstacleAvoidanceType() const
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdAgent::GetObstacleAvoidanceType() const", "uint GetObstacleAvoidanceType() const", AS_METHODPR(CrowdAgent, GetObstacleAvoidanceType, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdAgent::GetObstacleAvoidanceType() const", "uint get_obstacleAvoidanceType() const", AS_METHODPR(CrowdAgent, GetObstacleAvoidanceType, () const, unsigned), AS_CALL_THISCALL));

    // NavigationQuality CrowdAgent::GetNavigationQuality() const
    methods.Push(RegisterObjectMethodArgs("NavigationQuality CrowdAgent::GetNavigationQuality() const", "NavigationQuality GetNavigationQuality() const", AS_METHODPR(CrowdAgent, GetNavigationQuality, () const, NavigationQuality), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("NavigationQuality CrowdAgent::GetNavigationQuality() const", "NavigationQuality get_navigationQuality() const", AS_METHODPR(CrowdAgent, GetNavigationQuality, () const, NavigationQuality), AS_CALL_THISCALL));

    // NavigationPushiness CrowdAgent::GetNavigationPushiness() const
    methods.Push(RegisterObjectMethodArgs("NavigationPushiness CrowdAgent::GetNavigationPushiness() const", "NavigationPushiness GetNavigationPushiness() const", AS_METHODPR(CrowdAgent, GetNavigationPushiness, () const, NavigationPushiness), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("NavigationPushiness CrowdAgent::GetNavigationPushiness() const", "NavigationPushiness get_navigationPushiness() const", AS_METHODPR(CrowdAgent, GetNavigationPushiness, () const, NavigationPushiness), AS_CALL_THISCALL));

    // bool CrowdAgent::HasRequestedTarget() const
    methods.Push(RegisterObjectMethodArgs("bool CrowdAgent::HasRequestedTarget() const", "bool HasRequestedTarget() const", AS_METHODPR(CrowdAgent, HasRequestedTarget, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CrowdAgent::HasRequestedTarget() const", "bool get_requestedTarget() const", AS_METHODPR(CrowdAgent, HasRequestedTarget, () const, bool), AS_CALL_THISCALL));

    // bool CrowdAgent::HasArrived() const
    methods.Push(RegisterObjectMethodArgs("bool CrowdAgent::HasArrived() const", "bool HasArrived() const", AS_METHODPR(CrowdAgent, HasArrived, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CrowdAgent::HasArrived() const", "bool get_arrived() const", AS_METHODPR(CrowdAgent, HasArrived, () const, bool), AS_CALL_THISCALL));

    // bool CrowdAgent::IsInCrowd() const
    methods.Push(RegisterObjectMethodArgs("bool CrowdAgent::IsInCrowd() const", "bool IsInCrowd() const", AS_METHODPR(CrowdAgent, IsInCrowd, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CrowdAgent::IsInCrowd() const", "bool get_inCrowd() const", AS_METHODPR(CrowdAgent, IsInCrowd, () const, bool), AS_CALL_THISCALL));
}

// PODVector<CrowdAgent*> CrowdManager::GetAgents(Node* node=nullptr, bool inCrowdFilter=true) const
#ifdef URHO3D_NAVIGATION
// PODVector<CrowdAgent*> CrowdManager::GetAgents(Node* node=nullptr, bool inCrowdFilter=true) const | File: ../Navigation/CrowdManager.h
static CScriptArray* CrowdManager_GetAgents_Node_bool(CrowdManager* ptr, Node* node, bool inCrowdFilter)
{
    PODVector<CrowdAgent*> result = ptr->GetAgents(node, inCrowdFilter);
    return VectorToHandleArray(result, "Array<CrowdAgent@>");
}
#endif


// class CrowdManager | File: ../Navigation/CrowdManager.h
void CollectMembers_CrowdManager(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // Vector3 CrowdManager::FindNearestPoint(const Vector3& point, int queryFilterType, dtPolyRef* nearestRef=nullptr)
    // Error: type "dtPolyRef*" can not automatically bind

    // void CrowdManager::FindPath(PODVector<Vector3>& dest, const Vector3& start, const Vector3& end, int queryFilterType)
    // Error: type "PODVector<Vector3>&" can not automatically bind

    // float CrowdManager::GetDistanceToWall(const Vector3& point, float radius, int queryFilterType, Vector3* hitPos=nullptr, Vector3* hitNormal=nullptr)
    // Error: type "Vector3*" can not automatically bind

    // VariantVector CrowdManager::GetObstacleAvoidanceTypesAttr() const
    // Error: type "VariantVector" can not automatically bind

    // VariantVector CrowdManager::GetQueryFilterTypesAttr() const
    // Error: type "VariantVector" can not automatically bind

    // Vector3 CrowdManager::GetRandomPoint(int queryFilterType, dtPolyRef* randomRef=nullptr)
    // Error: type "dtPolyRef*" can not automatically bind

    // Vector3 CrowdManager::GetRandomPointInCircle(const Vector3& center, float radius, int queryFilterType, dtPolyRef* randomRef=nullptr)
    // Error: type "dtPolyRef*" can not automatically bind

    // Vector3 CrowdManager::Raycast(const Vector3& start, const Vector3& end, int queryFilterType, Vector3* hitNormal=nullptr)
    // Error: type "Vector3*" can not automatically bind

    // void CrowdManager::SetObstacleAvoidanceTypesAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void CrowdManager::SetQueryFilterTypesAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void CrowdManager::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(CrowdManager, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void CrowdManager::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(CrowdManager, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void CrowdManager::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(CrowdManager, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));

    // void CrowdManager::SetCrowdTarget(const Vector3& position, Node* node=nullptr)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetCrowdTarget(const Vector3& position, Node* node=nullptr)", "void SetCrowdTarget(const Vector3&in, Node@+ = null)", AS_METHODPR(CrowdManager, SetCrowdTarget, (const Vector3&, Node*), void), AS_CALL_THISCALL));

    // void CrowdManager::SetCrowdVelocity(const Vector3& velocity, Node* node=nullptr)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetCrowdVelocity(const Vector3& velocity, Node* node=nullptr)", "void SetCrowdVelocity(const Vector3&in, Node@+ = null)", AS_METHODPR(CrowdManager, SetCrowdVelocity, (const Vector3&, Node*), void), AS_CALL_THISCALL));

    // void CrowdManager::ResetCrowdTarget(Node* node=nullptr)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::ResetCrowdTarget(Node* node=nullptr)", "void ResetCrowdTarget(Node@+ = null)", AS_METHODPR(CrowdManager, ResetCrowdTarget, (Node*), void), AS_CALL_THISCALL));

    // void CrowdManager::SetMaxAgents(unsigned maxAgents)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetMaxAgents(unsigned maxAgents)", "void SetMaxAgents(uint)", AS_METHODPR(CrowdManager, SetMaxAgents, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetMaxAgents(unsigned maxAgents)", "void set_maxAgents(uint)", AS_METHODPR(CrowdManager, SetMaxAgents, (unsigned), void), AS_CALL_THISCALL));

    // void CrowdManager::SetMaxAgentRadius(float maxAgentRadius)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetMaxAgentRadius(float maxAgentRadius)", "void SetMaxAgentRadius(float)", AS_METHODPR(CrowdManager, SetMaxAgentRadius, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetMaxAgentRadius(float maxAgentRadius)", "void set_maxAgentRadius(float)", AS_METHODPR(CrowdManager, SetMaxAgentRadius, (float), void), AS_CALL_THISCALL));

    // void CrowdManager::SetNavigationMesh(NavigationMesh* navMesh)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetNavigationMesh(NavigationMesh* navMesh)", "void SetNavigationMesh(NavigationMesh@+)", AS_METHODPR(CrowdManager, SetNavigationMesh, (NavigationMesh*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetNavigationMesh(NavigationMesh* navMesh)", "void set_navMesh(NavigationMesh@+)", AS_METHODPR(CrowdManager, SetNavigationMesh, (NavigationMesh*), void), AS_CALL_THISCALL));

    // void CrowdManager::SetIncludeFlags(unsigned queryFilterType, unsigned short flags)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetIncludeFlags(unsigned queryFilterType, unsigned short flags)", "void SetIncludeFlags(uint, uint16)", AS_METHODPR(CrowdManager, SetIncludeFlags, (unsigned, unsigned short), void), AS_CALL_THISCALL));

    // void CrowdManager::SetExcludeFlags(unsigned queryFilterType, unsigned short flags)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetExcludeFlags(unsigned queryFilterType, unsigned short flags)", "void SetExcludeFlags(uint, uint16)", AS_METHODPR(CrowdManager, SetExcludeFlags, (unsigned, unsigned short), void), AS_CALL_THISCALL));

    // void CrowdManager::SetAreaCost(unsigned queryFilterType, unsigned areaID, float cost)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetAreaCost(unsigned queryFilterType, unsigned areaID, float cost)", "void SetAreaCost(uint, uint, float)", AS_METHODPR(CrowdManager, SetAreaCost, (unsigned, unsigned, float), void), AS_CALL_THISCALL));

    // void CrowdManager::SetObstacleAvoidanceParams(unsigned obstacleAvoidanceType, const CrowdObstacleAvoidanceParams& params)
    methods.Push(RegisterObjectMethodArgs("void CrowdManager::SetObstacleAvoidanceParams(unsigned obstacleAvoidanceType, const CrowdObstacleAvoidanceParams& params)", "void SetObstacleAvoidanceParams(uint, const CrowdObstacleAvoidanceParams&in)", AS_METHODPR(CrowdManager, SetObstacleAvoidanceParams, (unsigned, const CrowdObstacleAvoidanceParams&), void), AS_CALL_THISCALL));

    // PODVector<CrowdAgent*> CrowdManager::GetAgents(Node* node=nullptr, bool inCrowdFilter=true) const
    methods.Push(RegisterObjectMethodArgs("PODVector<CrowdAgent*> CrowdManager::GetAgents(Node* node=nullptr, bool inCrowdFilter=true) const", "Array<CrowdAgent@>@ GetAgents(Node@+ = null, bool = true) const", AS_FUNCTION_OBJFIRST(CrowdManager_GetAgents_Node_bool), AS_CALL_CDECL_OBJFIRST));

    // Vector3 CrowdManager::MoveAlongSurface(const Vector3& start, const Vector3& end, int queryFilterType, int maxVisited=3)
    methods.Push(RegisterObjectMethodArgs("Vector3 CrowdManager::MoveAlongSurface(const Vector3& start, const Vector3& end, int queryFilterType, int maxVisited=3)", "Vector3 MoveAlongSurface(const Vector3&in, const Vector3&in, int, int = 3)", AS_METHODPR(CrowdManager, MoveAlongSurface, (const Vector3&, const Vector3&, int, int), Vector3), AS_CALL_THISCALL));

    // unsigned CrowdManager::GetMaxAgents() const
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdManager::GetMaxAgents() const", "uint GetMaxAgents() const", AS_METHODPR(CrowdManager, GetMaxAgents, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdManager::GetMaxAgents() const", "uint get_maxAgents() const", AS_METHODPR(CrowdManager, GetMaxAgents, () const, unsigned), AS_CALL_THISCALL));

    // float CrowdManager::GetMaxAgentRadius() const
    methods.Push(RegisterObjectMethodArgs("float CrowdManager::GetMaxAgentRadius() const", "float GetMaxAgentRadius() const", AS_METHODPR(CrowdManager, GetMaxAgentRadius, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CrowdManager::GetMaxAgentRadius() const", "float get_maxAgentRadius() const", AS_METHODPR(CrowdManager, GetMaxAgentRadius, () const, float), AS_CALL_THISCALL));

    // NavigationMesh* CrowdManager::GetNavigationMesh() const
    methods.Push(RegisterObjectMethodArgs("NavigationMesh* CrowdManager::GetNavigationMesh() const", "NavigationMesh@+ GetNavigationMesh() const", AS_METHODPR(CrowdManager, GetNavigationMesh, () const, NavigationMesh*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("NavigationMesh* CrowdManager::GetNavigationMesh() const", "NavigationMesh@+ get_navMesh() const", AS_METHODPR(CrowdManager, GetNavigationMesh, () const, NavigationMesh*), AS_CALL_THISCALL));

    // unsigned CrowdManager::GetNumQueryFilterTypes() const
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdManager::GetNumQueryFilterTypes() const", "uint GetNumQueryFilterTypes() const", AS_METHODPR(CrowdManager, GetNumQueryFilterTypes, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdManager::GetNumQueryFilterTypes() const", "uint get_numQueryFilterTypes() const", AS_METHODPR(CrowdManager, GetNumQueryFilterTypes, () const, unsigned), AS_CALL_THISCALL));

    // unsigned CrowdManager::GetNumAreas(unsigned queryFilterType) const
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdManager::GetNumAreas(unsigned queryFilterType) const", "uint GetNumAreas(uint) const", AS_METHODPR(CrowdManager, GetNumAreas, (unsigned) const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdManager::GetNumAreas(unsigned queryFilterType) const", "uint get_numAreas(uint) const", AS_METHODPR(CrowdManager, GetNumAreas, (unsigned) const, unsigned), AS_CALL_THISCALL));

    // unsigned short CrowdManager::GetIncludeFlags(unsigned queryFilterType) const
    methods.Push(RegisterObjectMethodArgs("unsigned short CrowdManager::GetIncludeFlags(unsigned queryFilterType) const", "uint16 GetIncludeFlags(uint) const", AS_METHODPR(CrowdManager, GetIncludeFlags, (unsigned) const, unsigned short), AS_CALL_THISCALL));

    // unsigned short CrowdManager::GetExcludeFlags(unsigned queryFilterType) const
    methods.Push(RegisterObjectMethodArgs("unsigned short CrowdManager::GetExcludeFlags(unsigned queryFilterType) const", "uint16 GetExcludeFlags(uint) const", AS_METHODPR(CrowdManager, GetExcludeFlags, (unsigned) const, unsigned short), AS_CALL_THISCALL));

    // float CrowdManager::GetAreaCost(unsigned queryFilterType, unsigned areaID) const
    methods.Push(RegisterObjectMethodArgs("float CrowdManager::GetAreaCost(unsigned queryFilterType, unsigned areaID) const", "float GetAreaCost(uint, uint) const", AS_METHODPR(CrowdManager, GetAreaCost, (unsigned, unsigned) const, float), AS_CALL_THISCALL));

    // unsigned CrowdManager::GetNumObstacleAvoidanceTypes() const
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdManager::GetNumObstacleAvoidanceTypes() const", "uint GetNumObstacleAvoidanceTypes() const", AS_METHODPR(CrowdManager, GetNumObstacleAvoidanceTypes, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CrowdManager::GetNumObstacleAvoidanceTypes() const", "uint get_numObstacleAvoidanceTypes() const", AS_METHODPR(CrowdManager, GetNumObstacleAvoidanceTypes, () const, unsigned), AS_CALL_THISCALL));

    // const CrowdObstacleAvoidanceParams& CrowdManager::GetObstacleAvoidanceParams(unsigned obstacleAvoidanceType) const
    methods.Push(RegisterObjectMethodArgs("const CrowdObstacleAvoidanceParams& CrowdManager::GetObstacleAvoidanceParams(unsigned obstacleAvoidanceType) const", "const CrowdObstacleAvoidanceParams& GetObstacleAvoidanceParams(uint) const", AS_METHODPR(CrowdManager, GetObstacleAvoidanceParams, (unsigned) const, const CrowdObstacleAvoidanceParams&), AS_CALL_THISCALL));
}

// struct CrowdObstacleAvoidanceParams | File: ../Navigation/CrowdManager.h
void CollectMembers_CrowdObstacleAvoidanceParams(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct DynamicNavBuildData | File: ../Navigation/NavBuildData.h
void CollectMembers_DynamicNavBuildData(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class DynamicNavigationMesh | File: ../Navigation/DynamicNavigationMesh.h
void CollectMembers_DynamicNavigationMesh(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_NavigationMesh(methods);

    Remove(methods, "static void NavigationMesh::RegisterObject(Context* context)");
    Remove(methods, "virtual PODVector<unsigned char> NavigationMesh::GetNavigationDataAttr() const");
    Remove(methods, "virtual PODVector<unsigned char> NavigationMesh::GetTileData(const IntVector2& tile) const");
    Remove(methods, "virtual bool NavigationMesh::AddTile(const PODVector<unsigned char>& tileData)");
    Remove(methods, "virtual bool NavigationMesh::Allocate(const BoundingBox& boundingBox, unsigned maxTiles)");
    Remove(methods, "virtual bool NavigationMesh::Build()");
    Remove(methods, "virtual bool NavigationMesh::Build(const BoundingBox& boundingBox)");
    Remove(methods, "virtual bool NavigationMesh::Build(const IntVector2& from, const IntVector2& to)");
    Remove(methods, "virtual void NavigationMesh::RemoveAllTiles()");
    Remove(methods, "virtual void NavigationMesh::RemoveTile(const IntVector2& tile)");
    Remove(methods, "virtual void NavigationMesh::SetNavigationDataAttr(const PODVector<unsigned char>& value)");
    Remove(methods, "void NavigationMesh::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override");
    Remove(methods, "void NavigationMesh::DrawDebugGeometry(bool depthTest)");

    // bool DynamicNavigationMesh::AddTile(const PODVector<unsigned char>& tileData) override
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // PODVector<unsigned char> DynamicNavigationMesh::GetNavigationDataAttr() const override
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // PODVector<unsigned char> DynamicNavigationMesh::GetTileData(const IntVector2& tile) const override
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // void DynamicNavigationMesh::SetNavigationDataAttr(const PODVector<unsigned char>& value) override
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // bool DynamicNavigationMesh::Allocate(const BoundingBox& boundingBox, unsigned maxTiles) override
    methods.Push(RegisterObjectMethodArgs("bool DynamicNavigationMesh::Allocate(const BoundingBox& boundingBox, unsigned maxTiles) override", "bool Allocate(const BoundingBox&in, uint)", AS_METHODPR(DynamicNavigationMesh, Allocate, (const BoundingBox&, unsigned), bool), AS_CALL_THISCALL));

    // bool DynamicNavigationMesh::Build() override
    methods.Push(RegisterObjectMethodArgs("bool DynamicNavigationMesh::Build() override", "bool Build()", AS_METHODPR(DynamicNavigationMesh, Build, (), bool), AS_CALL_THISCALL));

    // bool DynamicNavigationMesh::Build(const BoundingBox& boundingBox) override
    methods.Push(RegisterObjectMethodArgs("bool DynamicNavigationMesh::Build(const BoundingBox& boundingBox) override", "bool Build(const BoundingBox&in)", AS_METHODPR(DynamicNavigationMesh, Build, (const BoundingBox&), bool), AS_CALL_THISCALL));

    // bool DynamicNavigationMesh::Build(const IntVector2& from, const IntVector2& to) override
    methods.Push(RegisterObjectMethodArgs("bool DynamicNavigationMesh::Build(const IntVector2& from, const IntVector2& to) override", "bool Build(const IntVector2&in, const IntVector2&in)", AS_METHODPR(DynamicNavigationMesh, Build, (const IntVector2&, const IntVector2&), bool), AS_CALL_THISCALL));

    // bool DynamicNavigationMesh::IsObstacleInTile(Obstacle* obstacle, const IntVector2& tile) const
    methods.Push(RegisterObjectMethodArgs("bool DynamicNavigationMesh::IsObstacleInTile(Obstacle* obstacle, const IntVector2& tile) const", "bool IsObstacleInTile(Obstacle@+, const IntVector2&in) const", AS_METHODPR(DynamicNavigationMesh, IsObstacleInTile, (Obstacle*, const IntVector2&) const, bool), AS_CALL_THISCALL));

    // void DynamicNavigationMesh::RemoveTile(const IntVector2& tile) override
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::RemoveTile(const IntVector2& tile) override", "void RemoveTile(const IntVector2&in)", AS_METHODPR(DynamicNavigationMesh, RemoveTile, (const IntVector2&), void), AS_CALL_THISCALL));

    // void DynamicNavigationMesh::RemoveAllTiles() override
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::RemoveAllTiles() override", "void RemoveAllTiles()", AS_METHODPR(DynamicNavigationMesh, RemoveAllTiles, (), void), AS_CALL_THISCALL));

    // void DynamicNavigationMesh::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(DynamicNavigationMesh, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void DynamicNavigationMesh::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(DynamicNavigationMesh, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));

    // void DynamicNavigationMesh::SetMaxObstacles(unsigned maxObstacles)
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::SetMaxObstacles(unsigned maxObstacles)", "void SetMaxObstacles(uint)", AS_METHODPR(DynamicNavigationMesh, SetMaxObstacles, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::SetMaxObstacles(unsigned maxObstacles)", "void set_maxObstacles(uint)", AS_METHODPR(DynamicNavigationMesh, SetMaxObstacles, (unsigned), void), AS_CALL_THISCALL));

    // void DynamicNavigationMesh::SetMaxLayers(unsigned maxLayers)
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::SetMaxLayers(unsigned maxLayers)", "void SetMaxLayers(uint)", AS_METHODPR(DynamicNavigationMesh, SetMaxLayers, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::SetMaxLayers(unsigned maxLayers)", "void set_maxLayers(uint)", AS_METHODPR(DynamicNavigationMesh, SetMaxLayers, (unsigned), void), AS_CALL_THISCALL));

    // unsigned DynamicNavigationMesh::GetMaxObstacles() const
    methods.Push(RegisterObjectMethodArgs("unsigned DynamicNavigationMesh::GetMaxObstacles() const", "uint GetMaxObstacles() const", AS_METHODPR(DynamicNavigationMesh, GetMaxObstacles, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DynamicNavigationMesh::GetMaxObstacles() const", "uint get_maxObstacles() const", AS_METHODPR(DynamicNavigationMesh, GetMaxObstacles, () const, unsigned), AS_CALL_THISCALL));

    // unsigned DynamicNavigationMesh::GetMaxLayers() const
    methods.Push(RegisterObjectMethodArgs("unsigned DynamicNavigationMesh::GetMaxLayers() const", "uint GetMaxLayers() const", AS_METHODPR(DynamicNavigationMesh, GetMaxLayers, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned DynamicNavigationMesh::GetMaxLayers() const", "uint get_maxLayers() const", AS_METHODPR(DynamicNavigationMesh, GetMaxLayers, () const, unsigned), AS_CALL_THISCALL));

    // void DynamicNavigationMesh::SetDrawObstacles(bool enable)
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::SetDrawObstacles(bool enable)", "void SetDrawObstacles(bool)", AS_METHODPR(DynamicNavigationMesh, SetDrawObstacles, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void DynamicNavigationMesh::SetDrawObstacles(bool enable)", "void set_drawObstacles(bool)", AS_METHODPR(DynamicNavigationMesh, SetDrawObstacles, (bool), void), AS_CALL_THISCALL));

    // bool DynamicNavigationMesh::GetDrawObstacles() const
    methods.Push(RegisterObjectMethodArgs("bool DynamicNavigationMesh::GetDrawObstacles() const", "bool GetDrawObstacles() const", AS_METHODPR(DynamicNavigationMesh, GetDrawObstacles, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool DynamicNavigationMesh::GetDrawObstacles() const", "bool get_drawObstacles() const", AS_METHODPR(DynamicNavigationMesh, GetDrawObstacles, () const, bool), AS_CALL_THISCALL));
}

// class NavArea | File: ../Navigation/NavArea.h
void CollectMembers_NavArea(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // void NavArea::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void NavArea::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(NavArea, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // unsigned NavArea::GetAreaID() const
    methods.Push(RegisterObjectMethodArgs("unsigned NavArea::GetAreaID() const", "uint GetAreaID() const", AS_METHODPR(NavArea, GetAreaID, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned NavArea::GetAreaID() const", "uint get_areaID() const", AS_METHODPR(NavArea, GetAreaID, () const, unsigned), AS_CALL_THISCALL));

    // void NavArea::SetAreaID(unsigned newID)
    methods.Push(RegisterObjectMethodArgs("void NavArea::SetAreaID(unsigned newID)", "void SetAreaID(uint)", AS_METHODPR(NavArea, SetAreaID, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavArea::SetAreaID(unsigned newID)", "void set_areaID(uint)", AS_METHODPR(NavArea, SetAreaID, (unsigned), void), AS_CALL_THISCALL));

    // BoundingBox NavArea::GetBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("BoundingBox NavArea::GetBoundingBox() const", "BoundingBox GetBoundingBox() const", AS_METHODPR(NavArea, GetBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BoundingBox NavArea::GetBoundingBox() const", "BoundingBox get_boundingBox() const", AS_METHODPR(NavArea, GetBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));

    // void NavArea::SetBoundingBox(const BoundingBox& bnds)
    methods.Push(RegisterObjectMethodArgs("void NavArea::SetBoundingBox(const BoundingBox& bnds)", "void SetBoundingBox(const BoundingBox&in)", AS_METHODPR(NavArea, SetBoundingBox, (const BoundingBox&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavArea::SetBoundingBox(const BoundingBox& bnds)", "void set_boundingBox(const BoundingBox&in)", AS_METHODPR(NavArea, SetBoundingBox, (const BoundingBox&), void), AS_CALL_THISCALL));

    // BoundingBox NavArea::GetWorldBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("BoundingBox NavArea::GetWorldBoundingBox() const", "BoundingBox GetWorldBoundingBox() const", AS_METHODPR(NavArea, GetWorldBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BoundingBox NavArea::GetWorldBoundingBox() const", "BoundingBox get_worldBoundingBox() const", AS_METHODPR(NavArea, GetWorldBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));
}

// struct NavAreaStub | File: ../Navigation/NavBuildData.h
void CollectMembers_NavAreaStub(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct NavBuildData | File: ../Navigation/NavBuildData.h
void CollectMembers_NavBuildData(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Navigable | File: ../Navigation/Navigable.h
void CollectMembers_Navigable(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");

    // void Navigable::SetRecursive(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Navigable::SetRecursive(bool enable)", "void SetRecursive(bool)", AS_METHODPR(Navigable, SetRecursive, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Navigable::SetRecursive(bool enable)", "void set_recursive(bool)", AS_METHODPR(Navigable, SetRecursive, (bool), void), AS_CALL_THISCALL));

    // bool Navigable::IsRecursive() const
    methods.Push(RegisterObjectMethodArgs("bool Navigable::IsRecursive() const", "bool IsRecursive() const", AS_METHODPR(Navigable, IsRecursive, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Navigable::IsRecursive() const", "bool get_recursive() const", AS_METHODPR(Navigable, IsRecursive, () const, bool), AS_CALL_THISCALL));
}

// struct NavigationGeometryInfo | File: ../Navigation/NavigationMesh.h
void CollectMembers_NavigationGeometryInfo(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class NavigationMesh | File: ../Navigation/NavigationMesh.h
void CollectMembers_NavigationMesh(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // virtual bool NavigationMesh::AddTile(const PODVector<unsigned char>& tileData)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // Vector3 NavigationMesh::FindNearestPoint(const Vector3& point, const Vector3& extents=Vector3::ONE, const dtQueryFilter* filter=nullptr, dtPolyRef* nearestRef=nullptr)
    // Error: type "const dtQueryFilter*" can not automatically bind

    // void NavigationMesh::FindPath(PODVector<NavigationPathPoint>& dest, const Vector3& start, const Vector3& end, const Vector3& extents=Vector3::ONE, const dtQueryFilter* filter=nullptr)
    // Error: type "PODVector<NavigationPathPoint>&" can not automatically bind

    // void NavigationMesh::FindPath(PODVector<Vector3>& dest, const Vector3& start, const Vector3& end, const Vector3& extents=Vector3::ONE, const dtQueryFilter* filter=nullptr)
    // Error: type "PODVector<Vector3>&" can not automatically bind

    // float NavigationMesh::GetDistanceToWall(const Vector3& point, float radius, const Vector3& extents=Vector3::ONE, const dtQueryFilter* filter=nullptr, Vector3* hitPos=nullptr, Vector3* hitNormal=nullptr)
    // Error: type "const dtQueryFilter*" can not automatically bind

    // virtual PODVector<unsigned char> NavigationMesh::GetNavigationDataAttr() const
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // Vector3 NavigationMesh::GetRandomPoint(const dtQueryFilter* filter=nullptr, dtPolyRef* randomRef=nullptr)
    // Error: type "const dtQueryFilter*" can not automatically bind

    // Vector3 NavigationMesh::GetRandomPointInCircle(const Vector3& center, float radius, const Vector3& extents=Vector3::ONE, const dtQueryFilter* filter=nullptr, dtPolyRef* randomRef=nullptr)
    // Error: type "const dtQueryFilter*" can not automatically bind

    // virtual PODVector<unsigned char> NavigationMesh::GetTileData(const IntVector2& tile) const
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // Vector3 NavigationMesh::MoveAlongSurface(const Vector3& start, const Vector3& end, const Vector3& extents=Vector3::ONE, int maxVisited=3, const dtQueryFilter* filter=nullptr)
    // Error: type "const dtQueryFilter*" can not automatically bind

    // Vector3 NavigationMesh::Raycast(const Vector3& start, const Vector3& end, const Vector3& extents=Vector3::ONE, const dtQueryFilter* filter=nullptr, Vector3* hitNormal=nullptr)
    // Error: type "const dtQueryFilter*" can not automatically bind

    // virtual void NavigationMesh::SetNavigationDataAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void NavigationMesh::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(NavigationMesh, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetTileSize(int size)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetTileSize(int size)", "void SetTileSize(int)", AS_METHODPR(NavigationMesh, SetTileSize, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetTileSize(int size)", "void set_tileSize(int)", AS_METHODPR(NavigationMesh, SetTileSize, (int), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetCellSize(float size)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetCellSize(float size)", "void SetCellSize(float)", AS_METHODPR(NavigationMesh, SetCellSize, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetCellSize(float size)", "void set_cellSize(float)", AS_METHODPR(NavigationMesh, SetCellSize, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetCellHeight(float height)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetCellHeight(float height)", "void SetCellHeight(float)", AS_METHODPR(NavigationMesh, SetCellHeight, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetCellHeight(float height)", "void set_cellHeight(float)", AS_METHODPR(NavigationMesh, SetCellHeight, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetAgentHeight(float height)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAgentHeight(float height)", "void SetAgentHeight(float)", AS_METHODPR(NavigationMesh, SetAgentHeight, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAgentHeight(float height)", "void set_agentHeight(float)", AS_METHODPR(NavigationMesh, SetAgentHeight, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetAgentRadius(float radius)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAgentRadius(float radius)", "void SetAgentRadius(float)", AS_METHODPR(NavigationMesh, SetAgentRadius, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAgentRadius(float radius)", "void set_agentRadius(float)", AS_METHODPR(NavigationMesh, SetAgentRadius, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetAgentMaxClimb(float maxClimb)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAgentMaxClimb(float maxClimb)", "void SetAgentMaxClimb(float)", AS_METHODPR(NavigationMesh, SetAgentMaxClimb, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAgentMaxClimb(float maxClimb)", "void set_agentMaxClimb(float)", AS_METHODPR(NavigationMesh, SetAgentMaxClimb, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetAgentMaxSlope(float maxSlope)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAgentMaxSlope(float maxSlope)", "void SetAgentMaxSlope(float)", AS_METHODPR(NavigationMesh, SetAgentMaxSlope, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAgentMaxSlope(float maxSlope)", "void set_agentMaxSlope(float)", AS_METHODPR(NavigationMesh, SetAgentMaxSlope, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetRegionMinSize(float size)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetRegionMinSize(float size)", "void SetRegionMinSize(float)", AS_METHODPR(NavigationMesh, SetRegionMinSize, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetRegionMinSize(float size)", "void set_regionMinSize(float)", AS_METHODPR(NavigationMesh, SetRegionMinSize, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetRegionMergeSize(float size)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetRegionMergeSize(float size)", "void SetRegionMergeSize(float)", AS_METHODPR(NavigationMesh, SetRegionMergeSize, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetRegionMergeSize(float size)", "void set_regionMergeSize(float)", AS_METHODPR(NavigationMesh, SetRegionMergeSize, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetEdgeMaxLength(float length)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetEdgeMaxLength(float length)", "void SetEdgeMaxLength(float)", AS_METHODPR(NavigationMesh, SetEdgeMaxLength, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetEdgeMaxLength(float length)", "void set_edgeMaxLength(float)", AS_METHODPR(NavigationMesh, SetEdgeMaxLength, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetEdgeMaxError(float error)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetEdgeMaxError(float error)", "void SetEdgeMaxError(float)", AS_METHODPR(NavigationMesh, SetEdgeMaxError, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetEdgeMaxError(float error)", "void set_edgeMaxError(float)", AS_METHODPR(NavigationMesh, SetEdgeMaxError, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetDetailSampleDistance(float distance)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetDetailSampleDistance(float distance)", "void SetDetailSampleDistance(float)", AS_METHODPR(NavigationMesh, SetDetailSampleDistance, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetDetailSampleDistance(float distance)", "void set_detailSampleDistance(float)", AS_METHODPR(NavigationMesh, SetDetailSampleDistance, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetDetailSampleMaxError(float error)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetDetailSampleMaxError(float error)", "void SetDetailSampleMaxError(float)", AS_METHODPR(NavigationMesh, SetDetailSampleMaxError, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetDetailSampleMaxError(float error)", "void set_detailSampleMaxError(float)", AS_METHODPR(NavigationMesh, SetDetailSampleMaxError, (float), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetPadding(const Vector3& padding)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetPadding(const Vector3& padding)", "void SetPadding(const Vector3&in)", AS_METHODPR(NavigationMesh, SetPadding, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetPadding(const Vector3& padding)", "void set_padding(const Vector3&in)", AS_METHODPR(NavigationMesh, SetPadding, (const Vector3&), void), AS_CALL_THISCALL));

    // void NavigationMesh::SetAreaCost(unsigned areaID, float cost)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetAreaCost(unsigned areaID, float cost)", "void SetAreaCost(uint, float)", AS_METHODPR(NavigationMesh, SetAreaCost, (unsigned, float), void), AS_CALL_THISCALL));

    // virtual bool NavigationMesh::Allocate(const BoundingBox& boundingBox, unsigned maxTiles)
    methods.Push(RegisterObjectMethodArgs("virtual bool NavigationMesh::Allocate(const BoundingBox& boundingBox, unsigned maxTiles)", "bool Allocate(const BoundingBox&in, uint)", AS_METHODPR(NavigationMesh, Allocate, (const BoundingBox&, unsigned), bool), AS_CALL_THISCALL));

    // virtual bool NavigationMesh::Build()
    methods.Push(RegisterObjectMethodArgs("virtual bool NavigationMesh::Build()", "bool Build()", AS_METHODPR(NavigationMesh, Build, (), bool), AS_CALL_THISCALL));

    // virtual bool NavigationMesh::Build(const BoundingBox& boundingBox)
    methods.Push(RegisterObjectMethodArgs("virtual bool NavigationMesh::Build(const BoundingBox& boundingBox)", "bool Build(const BoundingBox&in)", AS_METHODPR(NavigationMesh, Build, (const BoundingBox&), bool), AS_CALL_THISCALL));

    // virtual bool NavigationMesh::Build(const IntVector2& from, const IntVector2& to)
    methods.Push(RegisterObjectMethodArgs("virtual bool NavigationMesh::Build(const IntVector2& from, const IntVector2& to)", "bool Build(const IntVector2&in, const IntVector2&in)", AS_METHODPR(NavigationMesh, Build, (const IntVector2&, const IntVector2&), bool), AS_CALL_THISCALL));

    // virtual void NavigationMesh::RemoveTile(const IntVector2& tile)
    methods.Push(RegisterObjectMethodArgs("virtual void NavigationMesh::RemoveTile(const IntVector2& tile)", "void RemoveTile(const IntVector2&in)", AS_METHODPR(NavigationMesh, RemoveTile, (const IntVector2&), void), AS_CALL_THISCALL));

    // virtual void NavigationMesh::RemoveAllTiles()
    methods.Push(RegisterObjectMethodArgs("virtual void NavigationMesh::RemoveAllTiles()", "void RemoveAllTiles()", AS_METHODPR(NavigationMesh, RemoveAllTiles, (), void), AS_CALL_THISCALL));

    // bool NavigationMesh::HasTile(const IntVector2& tile) const
    methods.Push(RegisterObjectMethodArgs("bool NavigationMesh::HasTile(const IntVector2& tile) const", "bool HasTile(const IntVector2&in) const", AS_METHODPR(NavigationMesh, HasTile, (const IntVector2&) const, bool), AS_CALL_THISCALL));

    // BoundingBox NavigationMesh::GetTileBoundingBox(const IntVector2& tile) const
    methods.Push(RegisterObjectMethodArgs("BoundingBox NavigationMesh::GetTileBoundingBox(const IntVector2& tile) const", "BoundingBox GetTileBoundingBox(const IntVector2&in) const", AS_METHODPR(NavigationMesh, GetTileBoundingBox, (const IntVector2&) const, BoundingBox), AS_CALL_THISCALL));

    // IntVector2 NavigationMesh::GetTileIndex(const Vector3& position) const
    methods.Push(RegisterObjectMethodArgs("IntVector2 NavigationMesh::GetTileIndex(const Vector3& position) const", "IntVector2 GetTileIndex(const Vector3&in) const", AS_METHODPR(NavigationMesh, GetTileIndex, (const Vector3&) const, IntVector2), AS_CALL_THISCALL));

    // void NavigationMesh::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(NavigationMesh, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));

    // String NavigationMesh::GetMeshName() const
    methods.Push(RegisterObjectMethodArgs("String NavigationMesh::GetMeshName() const", "String GetMeshName() const", AS_METHODPR(NavigationMesh, GetMeshName, () const, String), AS_CALL_THISCALL));

    // void NavigationMesh::SetMeshName(const String& newName)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetMeshName(const String& newName)", "void SetMeshName(const String&in)", AS_METHODPR(NavigationMesh, SetMeshName, (const String&), void), AS_CALL_THISCALL));

    // int NavigationMesh::GetTileSize() const
    methods.Push(RegisterObjectMethodArgs("int NavigationMesh::GetTileSize() const", "int GetTileSize() const", AS_METHODPR(NavigationMesh, GetTileSize, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int NavigationMesh::GetTileSize() const", "int get_tileSize() const", AS_METHODPR(NavigationMesh, GetTileSize, () const, int), AS_CALL_THISCALL));

    // float NavigationMesh::GetCellSize() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetCellSize() const", "float GetCellSize() const", AS_METHODPR(NavigationMesh, GetCellSize, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetCellSize() const", "float get_cellSize() const", AS_METHODPR(NavigationMesh, GetCellSize, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetCellHeight() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetCellHeight() const", "float GetCellHeight() const", AS_METHODPR(NavigationMesh, GetCellHeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetCellHeight() const", "float get_cellHeight() const", AS_METHODPR(NavigationMesh, GetCellHeight, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetAgentHeight() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAgentHeight() const", "float GetAgentHeight() const", AS_METHODPR(NavigationMesh, GetAgentHeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAgentHeight() const", "float get_agentHeight() const", AS_METHODPR(NavigationMesh, GetAgentHeight, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetAgentRadius() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAgentRadius() const", "float GetAgentRadius() const", AS_METHODPR(NavigationMesh, GetAgentRadius, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAgentRadius() const", "float get_agentRadius() const", AS_METHODPR(NavigationMesh, GetAgentRadius, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetAgentMaxClimb() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAgentMaxClimb() const", "float GetAgentMaxClimb() const", AS_METHODPR(NavigationMesh, GetAgentMaxClimb, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAgentMaxClimb() const", "float get_agentMaxClimb() const", AS_METHODPR(NavigationMesh, GetAgentMaxClimb, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetAgentMaxSlope() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAgentMaxSlope() const", "float GetAgentMaxSlope() const", AS_METHODPR(NavigationMesh, GetAgentMaxSlope, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAgentMaxSlope() const", "float get_agentMaxSlope() const", AS_METHODPR(NavigationMesh, GetAgentMaxSlope, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetRegionMinSize() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetRegionMinSize() const", "float GetRegionMinSize() const", AS_METHODPR(NavigationMesh, GetRegionMinSize, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetRegionMinSize() const", "float get_regionMinSize() const", AS_METHODPR(NavigationMesh, GetRegionMinSize, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetRegionMergeSize() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetRegionMergeSize() const", "float GetRegionMergeSize() const", AS_METHODPR(NavigationMesh, GetRegionMergeSize, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetRegionMergeSize() const", "float get_regionMergeSize() const", AS_METHODPR(NavigationMesh, GetRegionMergeSize, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetEdgeMaxLength() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetEdgeMaxLength() const", "float GetEdgeMaxLength() const", AS_METHODPR(NavigationMesh, GetEdgeMaxLength, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetEdgeMaxLength() const", "float get_edgeMaxLength() const", AS_METHODPR(NavigationMesh, GetEdgeMaxLength, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetEdgeMaxError() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetEdgeMaxError() const", "float GetEdgeMaxError() const", AS_METHODPR(NavigationMesh, GetEdgeMaxError, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetEdgeMaxError() const", "float get_edgeMaxError() const", AS_METHODPR(NavigationMesh, GetEdgeMaxError, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetDetailSampleDistance() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetDetailSampleDistance() const", "float GetDetailSampleDistance() const", AS_METHODPR(NavigationMesh, GetDetailSampleDistance, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetDetailSampleDistance() const", "float get_detailSampleDistance() const", AS_METHODPR(NavigationMesh, GetDetailSampleDistance, () const, float), AS_CALL_THISCALL));

    // float NavigationMesh::GetDetailSampleMaxError() const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetDetailSampleMaxError() const", "float GetDetailSampleMaxError() const", AS_METHODPR(NavigationMesh, GetDetailSampleMaxError, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetDetailSampleMaxError() const", "float get_detailSampleMaxError() const", AS_METHODPR(NavigationMesh, GetDetailSampleMaxError, () const, float), AS_CALL_THISCALL));

    // const Vector3& NavigationMesh::GetPadding() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& NavigationMesh::GetPadding() const", "const Vector3& GetPadding() const", AS_METHODPR(NavigationMesh, GetPadding, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& NavigationMesh::GetPadding() const", "const Vector3& get_padding() const", AS_METHODPR(NavigationMesh, GetPadding, () const, const Vector3&), AS_CALL_THISCALL));

    // float NavigationMesh::GetAreaCost(unsigned areaID) const
    methods.Push(RegisterObjectMethodArgs("float NavigationMesh::GetAreaCost(unsigned areaID) const", "float GetAreaCost(uint) const", AS_METHODPR(NavigationMesh, GetAreaCost, (unsigned) const, float), AS_CALL_THISCALL));

    // bool NavigationMesh::IsInitialized() const
    methods.Push(RegisterObjectMethodArgs("bool NavigationMesh::IsInitialized() const", "bool IsInitialized() const", AS_METHODPR(NavigationMesh, IsInitialized, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool NavigationMesh::IsInitialized() const", "bool get_initialized() const", AS_METHODPR(NavigationMesh, IsInitialized, () const, bool), AS_CALL_THISCALL));

    // const BoundingBox& NavigationMesh::GetBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& NavigationMesh::GetBoundingBox() const", "const BoundingBox& GetBoundingBox() const", AS_METHODPR(NavigationMesh, GetBoundingBox, () const, const BoundingBox&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const BoundingBox& NavigationMesh::GetBoundingBox() const", "const BoundingBox& get_boundingBox() const", AS_METHODPR(NavigationMesh, GetBoundingBox, () const, const BoundingBox&), AS_CALL_THISCALL));

    // BoundingBox NavigationMesh::GetWorldBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("BoundingBox NavigationMesh::GetWorldBoundingBox() const", "BoundingBox GetWorldBoundingBox() const", AS_METHODPR(NavigationMesh, GetWorldBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BoundingBox NavigationMesh::GetWorldBoundingBox() const", "BoundingBox get_worldBoundingBox() const", AS_METHODPR(NavigationMesh, GetWorldBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));

    // IntVector2 NavigationMesh::GetNumTiles() const
    methods.Push(RegisterObjectMethodArgs("IntVector2 NavigationMesh::GetNumTiles() const", "IntVector2 GetNumTiles() const", AS_METHODPR(NavigationMesh, GetNumTiles, () const, IntVector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector2 NavigationMesh::GetNumTiles() const", "IntVector2 get_numTiles() const", AS_METHODPR(NavigationMesh, GetNumTiles, () const, IntVector2), AS_CALL_THISCALL));

    // void NavigationMesh::SetPartitionType(NavmeshPartitionType partitionType)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetPartitionType(NavmeshPartitionType partitionType)", "void SetPartitionType(NavmeshPartitionType)", AS_METHODPR(NavigationMesh, SetPartitionType, (NavmeshPartitionType), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetPartitionType(NavmeshPartitionType partitionType)", "void set_partitionType(NavmeshPartitionType)", AS_METHODPR(NavigationMesh, SetPartitionType, (NavmeshPartitionType), void), AS_CALL_THISCALL));

    // NavmeshPartitionType NavigationMesh::GetPartitionType() const
    methods.Push(RegisterObjectMethodArgs("NavmeshPartitionType NavigationMesh::GetPartitionType() const", "NavmeshPartitionType GetPartitionType() const", AS_METHODPR(NavigationMesh, GetPartitionType, () const, NavmeshPartitionType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("NavmeshPartitionType NavigationMesh::GetPartitionType() const", "NavmeshPartitionType get_partitionType() const", AS_METHODPR(NavigationMesh, GetPartitionType, () const, NavmeshPartitionType), AS_CALL_THISCALL));

    // void NavigationMesh::SetDrawOffMeshConnections(bool enable)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetDrawOffMeshConnections(bool enable)", "void SetDrawOffMeshConnections(bool)", AS_METHODPR(NavigationMesh, SetDrawOffMeshConnections, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetDrawOffMeshConnections(bool enable)", "void set_drawOffMeshConnections(bool)", AS_METHODPR(NavigationMesh, SetDrawOffMeshConnections, (bool), void), AS_CALL_THISCALL));

    // bool NavigationMesh::GetDrawOffMeshConnections() const
    methods.Push(RegisterObjectMethodArgs("bool NavigationMesh::GetDrawOffMeshConnections() const", "bool GetDrawOffMeshConnections() const", AS_METHODPR(NavigationMesh, GetDrawOffMeshConnections, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool NavigationMesh::GetDrawOffMeshConnections() const", "bool get_drawOffMeshConnections() const", AS_METHODPR(NavigationMesh, GetDrawOffMeshConnections, () const, bool), AS_CALL_THISCALL));

    // void NavigationMesh::SetDrawNavAreas(bool enable)
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetDrawNavAreas(bool enable)", "void SetDrawNavAreas(bool)", AS_METHODPR(NavigationMesh, SetDrawNavAreas, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NavigationMesh::SetDrawNavAreas(bool enable)", "void set_drawNavAreas(bool)", AS_METHODPR(NavigationMesh, SetDrawNavAreas, (bool), void), AS_CALL_THISCALL));

    // bool NavigationMesh::GetDrawNavAreas() const
    methods.Push(RegisterObjectMethodArgs("bool NavigationMesh::GetDrawNavAreas() const", "bool GetDrawNavAreas() const", AS_METHODPR(NavigationMesh, GetDrawNavAreas, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool NavigationMesh::GetDrawNavAreas() const", "bool get_drawNavAreas() const", AS_METHODPR(NavigationMesh, GetDrawNavAreas, () const, bool), AS_CALL_THISCALL));
}

// struct NavigationPathPoint | File: ../Navigation/NavigationMesh.h
void CollectMembers_NavigationPathPoint(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Obstacle | File: ../Navigation/Obstacle.h
void CollectMembers_Obstacle(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Component::OnSetEnabled()");

    // void Obstacle::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void Obstacle::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(Obstacle, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // float Obstacle::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("float Obstacle::GetHeight() const", "float GetHeight() const", AS_METHODPR(Obstacle, GetHeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Obstacle::GetHeight() const", "float get_height() const", AS_METHODPR(Obstacle, GetHeight, () const, float), AS_CALL_THISCALL));

    // void Obstacle::SetHeight(float newHeight)
    methods.Push(RegisterObjectMethodArgs("void Obstacle::SetHeight(float newHeight)", "void SetHeight(float)", AS_METHODPR(Obstacle, SetHeight, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Obstacle::SetHeight(float newHeight)", "void set_height(float)", AS_METHODPR(Obstacle, SetHeight, (float), void), AS_CALL_THISCALL));

    // float Obstacle::GetRadius() const
    methods.Push(RegisterObjectMethodArgs("float Obstacle::GetRadius() const", "float GetRadius() const", AS_METHODPR(Obstacle, GetRadius, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Obstacle::GetRadius() const", "float get_radius() const", AS_METHODPR(Obstacle, GetRadius, () const, float), AS_CALL_THISCALL));

    // void Obstacle::SetRadius(float newRadius)
    methods.Push(RegisterObjectMethodArgs("void Obstacle::SetRadius(float newRadius)", "void SetRadius(float)", AS_METHODPR(Obstacle, SetRadius, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Obstacle::SetRadius(float newRadius)", "void set_radius(float)", AS_METHODPR(Obstacle, SetRadius, (float), void), AS_CALL_THISCALL));

    // unsigned Obstacle::GetObstacleID() const
    methods.Push(RegisterObjectMethodArgs("unsigned Obstacle::GetObstacleID() const", "uint GetObstacleID() const", AS_METHODPR(Obstacle, GetObstacleID, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Obstacle::GetObstacleID() const", "uint get_obstacleId() const", AS_METHODPR(Obstacle, GetObstacleID, () const, unsigned), AS_CALL_THISCALL));

    // void Obstacle::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void Obstacle::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Obstacle, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void Obstacle::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void Obstacle::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(Obstacle, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));
}

// class OffMeshConnection | File: ../Navigation/OffMeshConnection.h
void CollectMembers_OffMeshConnection(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // void OffMeshConnection::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(OffMeshConnection, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void OffMeshConnection::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(OffMeshConnection, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void OffMeshConnection::SetEndPoint(Node* node)
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetEndPoint(Node* node)", "void SetEndPoint(Node@+)", AS_METHODPR(OffMeshConnection, SetEndPoint, (Node*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetEndPoint(Node* node)", "void set_endPoint(Node@+)", AS_METHODPR(OffMeshConnection, SetEndPoint, (Node*), void), AS_CALL_THISCALL));

    // void OffMeshConnection::SetRadius(float radius)
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetRadius(float radius)", "void SetRadius(float)", AS_METHODPR(OffMeshConnection, SetRadius, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetRadius(float radius)", "void set_radius(float)", AS_METHODPR(OffMeshConnection, SetRadius, (float), void), AS_CALL_THISCALL));

    // void OffMeshConnection::SetBidirectional(bool enabled)
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetBidirectional(bool enabled)", "void SetBidirectional(bool)", AS_METHODPR(OffMeshConnection, SetBidirectional, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetBidirectional(bool enabled)", "void set_bidirectional(bool)", AS_METHODPR(OffMeshConnection, SetBidirectional, (bool), void), AS_CALL_THISCALL));

    // void OffMeshConnection::SetMask(unsigned newMask)
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetMask(unsigned newMask)", "void SetMask(uint)", AS_METHODPR(OffMeshConnection, SetMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetMask(unsigned newMask)", "void set_mask(uint)", AS_METHODPR(OffMeshConnection, SetMask, (unsigned), void), AS_CALL_THISCALL));

    // void OffMeshConnection::SetAreaID(unsigned newAreaID)
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetAreaID(unsigned newAreaID)", "void SetAreaID(uint)", AS_METHODPR(OffMeshConnection, SetAreaID, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void OffMeshConnection::SetAreaID(unsigned newAreaID)", "void set_areaID(uint)", AS_METHODPR(OffMeshConnection, SetAreaID, (unsigned), void), AS_CALL_THISCALL));

    // Node* OffMeshConnection::GetEndPoint() const
    methods.Push(RegisterObjectMethodArgs("Node* OffMeshConnection::GetEndPoint() const", "Node@+ GetEndPoint() const", AS_METHODPR(OffMeshConnection, GetEndPoint, () const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* OffMeshConnection::GetEndPoint() const", "Node@+ get_endPoint() const", AS_METHODPR(OffMeshConnection, GetEndPoint, () const, Node*), AS_CALL_THISCALL));

    // float OffMeshConnection::GetRadius() const
    methods.Push(RegisterObjectMethodArgs("float OffMeshConnection::GetRadius() const", "float GetRadius() const", AS_METHODPR(OffMeshConnection, GetRadius, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float OffMeshConnection::GetRadius() const", "float get_radius() const", AS_METHODPR(OffMeshConnection, GetRadius, () const, float), AS_CALL_THISCALL));

    // bool OffMeshConnection::IsBidirectional() const
    methods.Push(RegisterObjectMethodArgs("bool OffMeshConnection::IsBidirectional() const", "bool IsBidirectional() const", AS_METHODPR(OffMeshConnection, IsBidirectional, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool OffMeshConnection::IsBidirectional() const", "bool get_bidirectional() const", AS_METHODPR(OffMeshConnection, IsBidirectional, () const, bool), AS_CALL_THISCALL));

    // unsigned OffMeshConnection::GetMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned OffMeshConnection::GetMask() const", "uint GetMask() const", AS_METHODPR(OffMeshConnection, GetMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned OffMeshConnection::GetMask() const", "uint get_mask() const", AS_METHODPR(OffMeshConnection, GetMask, () const, unsigned), AS_CALL_THISCALL));

    // unsigned OffMeshConnection::GetAreaID() const
    methods.Push(RegisterObjectMethodArgs("unsigned OffMeshConnection::GetAreaID() const", "uint GetAreaID() const", AS_METHODPR(OffMeshConnection, GetAreaID, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned OffMeshConnection::GetAreaID() const", "uint get_areaID() const", AS_METHODPR(OffMeshConnection, GetAreaID, () const, unsigned), AS_CALL_THISCALL));
}

// struct SimpleNavBuildData | File: ../Navigation/NavBuildData.h
void CollectMembers_SimpleNavBuildData(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_NavBuildData(methods);
}

#endif // def URHO3D_NAVIGATION

#ifdef URHO3D_NETWORK

// class Connection | File: ../Network/Connection.h
void CollectMembers_Connection(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // const SLNet::AddressOrGUID& Connection::GetAddressOrGUID() const
    // Error: type "const SLNet::AddressOrGUID&" can not automatically bind

    // bool Connection::ProcessMessage(int msgID, MemoryBuffer& buffer)
    // Error: type "MemoryBuffer" can not automatically bind bacause have @nobind mark

    // void Connection::SendMessage(int msgID, bool reliable, bool inOrder, const unsigned char* data, unsigned numBytes, unsigned contentID=0)
    // Error: type "const unsigned char*" can not automatically bind

    // void Connection::SetAddressOrGUID(const SLNet::AddressOrGUID& addr)
    // Error: type "const SLNet::AddressOrGUID&" can not automatically bind

    // PacketType Connection::GetPacketType(bool reliable, bool inOrder)
    methods.Push(RegisterObjectMethodArgs("PacketType Connection::GetPacketType(bool reliable, bool inOrder)", "PacketType GetPacketType(bool, bool)", AS_METHODPR(Connection, GetPacketType, (bool, bool), PacketType), AS_CALL_THISCALL));

    // void Connection::SendMessage(int msgID, bool reliable, bool inOrder, const VectorBuffer& msg, unsigned contentID=0)
    methods.Push(RegisterObjectMethodArgs("void Connection::SendMessage(int msgID, bool reliable, bool inOrder, const VectorBuffer& msg, unsigned contentID=0)", "void SendMessage(int, bool, bool, const VectorBuffer&in, uint = 0)", AS_METHODPR(Connection, SendMessage, (int, bool, bool, const VectorBuffer&, unsigned), void), AS_CALL_THISCALL));

    // void Connection::SendRemoteEvent(StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)
    methods.Push(RegisterObjectMethodArgs("void Connection::SendRemoteEvent(StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)", "void SendRemoteEvent(StringHash, bool, const VariantMap&in = VariantMap())", AS_METHODPR(Connection, SendRemoteEvent, (StringHash, bool, const VariantMap&), void), AS_CALL_THISCALL));

    // void Connection::SendRemoteEvent(Node* node, StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)
    methods.Push(RegisterObjectMethodArgs("void Connection::SendRemoteEvent(Node* node, StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)", "void SendRemoteEvent(Node@+, StringHash, bool, const VariantMap&in = VariantMap())", AS_METHODPR(Connection, SendRemoteEvent, (Node*, StringHash, bool, const VariantMap&), void), AS_CALL_THISCALL));

    // void Connection::SetScene(Scene* newScene)
    methods.Push(RegisterObjectMethodArgs("void Connection::SetScene(Scene* newScene)", "void SetScene(Scene@+)", AS_METHODPR(Connection, SetScene, (Scene*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Connection::SetScene(Scene* newScene)", "void set_scene(Scene@+)", AS_METHODPR(Connection, SetScene, (Scene*), void), AS_CALL_THISCALL));

    // void Connection::SetIdentity(const VariantMap& identity)
    methods.Push(RegisterObjectMethodArgs("void Connection::SetIdentity(const VariantMap& identity)", "void SetIdentity(const VariantMap&in)", AS_METHODPR(Connection, SetIdentity, (const VariantMap&), void), AS_CALL_THISCALL));

    // void Connection::SetControls(const Controls& newControls)
    methods.Push(RegisterObjectMethodArgs("void Connection::SetControls(const Controls& newControls)", "void SetControls(const Controls&in)", AS_METHODPR(Connection, SetControls, (const Controls&), void), AS_CALL_THISCALL));

    // void Connection::SetPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void Connection::SetPosition(const Vector3& position)", "void SetPosition(const Vector3&in)", AS_METHODPR(Connection, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Connection::SetPosition(const Vector3& position)", "void set_position(const Vector3&in)", AS_METHODPR(Connection, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void Connection::SetRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void Connection::SetRotation(const Quaternion& rotation)", "void SetRotation(const Quaternion&in)", AS_METHODPR(Connection, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Connection::SetRotation(const Quaternion& rotation)", "void set_rotation(const Quaternion&in)", AS_METHODPR(Connection, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // void Connection::SetConnectPending(bool connectPending)
    methods.Push(RegisterObjectMethodArgs("void Connection::SetConnectPending(bool connectPending)", "void SetConnectPending(bool)", AS_METHODPR(Connection, SetConnectPending, (bool), void), AS_CALL_THISCALL));

    // void Connection::SetLogStatistics(bool enable)
    methods.Push(RegisterObjectMethodArgs("void Connection::SetLogStatistics(bool enable)", "void SetLogStatistics(bool)", AS_METHODPR(Connection, SetLogStatistics, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Connection::SetLogStatistics(bool enable)", "void set_logStatistics(bool)", AS_METHODPR(Connection, SetLogStatistics, (bool), void), AS_CALL_THISCALL));

    // void Connection::Disconnect(int waitMSec=0)
    methods.Push(RegisterObjectMethodArgs("void Connection::Disconnect(int waitMSec=0)", "void Disconnect(int = 0)", AS_METHODPR(Connection, Disconnect, (int), void), AS_CALL_THISCALL));

    // void Connection::SendServerUpdate()
    methods.Push(RegisterObjectMethodArgs("void Connection::SendServerUpdate()", "void SendServerUpdate()", AS_METHODPR(Connection, SendServerUpdate, (), void), AS_CALL_THISCALL));

    // void Connection::SendClientUpdate()
    methods.Push(RegisterObjectMethodArgs("void Connection::SendClientUpdate()", "void SendClientUpdate()", AS_METHODPR(Connection, SendClientUpdate, (), void), AS_CALL_THISCALL));

    // void Connection::SendRemoteEvents()
    methods.Push(RegisterObjectMethodArgs("void Connection::SendRemoteEvents()", "void SendRemoteEvents()", AS_METHODPR(Connection, SendRemoteEvents, (), void), AS_CALL_THISCALL));

    // void Connection::SendPackages()
    methods.Push(RegisterObjectMethodArgs("void Connection::SendPackages()", "void SendPackages()", AS_METHODPR(Connection, SendPackages, (), void), AS_CALL_THISCALL));

    // void Connection::SendBuffer(PacketType type)
    methods.Push(RegisterObjectMethodArgs("void Connection::SendBuffer(PacketType type)", "void SendBuffer(PacketType)", AS_METHODPR(Connection, SendBuffer, (PacketType), void), AS_CALL_THISCALL));

    // void Connection::SendAllBuffers()
    methods.Push(RegisterObjectMethodArgs("void Connection::SendAllBuffers()", "void SendAllBuffers()", AS_METHODPR(Connection, SendAllBuffers, (), void), AS_CALL_THISCALL));

    // void Connection::ProcessPendingLatestData()
    methods.Push(RegisterObjectMethodArgs("void Connection::ProcessPendingLatestData()", "void ProcessPendingLatestData()", AS_METHODPR(Connection, ProcessPendingLatestData, (), void), AS_CALL_THISCALL));

    // void Connection::Ban()
    methods.Push(RegisterObjectMethodArgs("void Connection::Ban()", "void Ban()", AS_METHODPR(Connection, Ban, (), void), AS_CALL_THISCALL));

    // VariantMap& Connection::GetIdentity()
    methods.Push(RegisterObjectMethodArgs("VariantMap& Connection::GetIdentity()", "VariantMap& GetIdentity()", AS_METHODPR(Connection, GetIdentity, (), VariantMap&), AS_CALL_THISCALL));

    // Scene* Connection::GetScene() const
    methods.Push(RegisterObjectMethodArgs("Scene* Connection::GetScene() const", "Scene@+ GetScene() const", AS_METHODPR(Connection, GetScene, () const, Scene*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Scene* Connection::GetScene() const", "Scene@+ get_scene() const", AS_METHODPR(Connection, GetScene, () const, Scene*), AS_CALL_THISCALL));

    // const Controls& Connection::GetControls() const
    methods.Push(RegisterObjectMethodArgs("const Controls& Connection::GetControls() const", "const Controls& GetControls() const", AS_METHODPR(Connection, GetControls, () const, const Controls&), AS_CALL_THISCALL));

    // unsigned char Connection::GetTimeStamp() const
    methods.Push(RegisterObjectMethodArgs("unsigned char Connection::GetTimeStamp() const", "uint8 GetTimeStamp() const", AS_METHODPR(Connection, GetTimeStamp, () const, unsigned char), AS_CALL_THISCALL));

    // const Vector3& Connection::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Connection::GetPosition() const", "const Vector3& GetPosition() const", AS_METHODPR(Connection, GetPosition, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& Connection::GetPosition() const", "const Vector3& get_position() const", AS_METHODPR(Connection, GetPosition, () const, const Vector3&), AS_CALL_THISCALL));

    // const Quaternion& Connection::GetRotation() const
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Connection::GetRotation() const", "const Quaternion& GetRotation() const", AS_METHODPR(Connection, GetRotation, () const, const Quaternion&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Connection::GetRotation() const", "const Quaternion& get_rotation() const", AS_METHODPR(Connection, GetRotation, () const, const Quaternion&), AS_CALL_THISCALL));

    // bool Connection::IsClient() const
    methods.Push(RegisterObjectMethodArgs("bool Connection::IsClient() const", "bool IsClient() const", AS_METHODPR(Connection, IsClient, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Connection::IsClient() const", "bool get_client() const", AS_METHODPR(Connection, IsClient, () const, bool), AS_CALL_THISCALL));

    // bool Connection::IsConnected() const
    methods.Push(RegisterObjectMethodArgs("bool Connection::IsConnected() const", "bool IsConnected() const", AS_METHODPR(Connection, IsConnected, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Connection::IsConnected() const", "bool get_connected() const", AS_METHODPR(Connection, IsConnected, () const, bool), AS_CALL_THISCALL));

    // bool Connection::IsConnectPending() const
    methods.Push(RegisterObjectMethodArgs("bool Connection::IsConnectPending() const", "bool IsConnectPending() const", AS_METHODPR(Connection, IsConnectPending, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Connection::IsConnectPending() const", "bool get_connectPending() const", AS_METHODPR(Connection, IsConnectPending, () const, bool), AS_CALL_THISCALL));

    // bool Connection::IsSceneLoaded() const
    methods.Push(RegisterObjectMethodArgs("bool Connection::IsSceneLoaded() const", "bool IsSceneLoaded() const", AS_METHODPR(Connection, IsSceneLoaded, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Connection::IsSceneLoaded() const", "bool get_sceneLoaded() const", AS_METHODPR(Connection, IsSceneLoaded, () const, bool), AS_CALL_THISCALL));

    // bool Connection::GetLogStatistics() const
    methods.Push(RegisterObjectMethodArgs("bool Connection::GetLogStatistics() const", "bool GetLogStatistics() const", AS_METHODPR(Connection, GetLogStatistics, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Connection::GetLogStatistics() const", "bool get_logStatistics() const", AS_METHODPR(Connection, GetLogStatistics, () const, bool), AS_CALL_THISCALL));

    // String Connection::GetAddress() const
    methods.Push(RegisterObjectMethodArgs("String Connection::GetAddress() const", "String GetAddress() const", AS_METHODPR(Connection, GetAddress, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String Connection::GetAddress() const", "String get_address() const", AS_METHODPR(Connection, GetAddress, () const, String), AS_CALL_THISCALL));

    // unsigned short Connection::GetPort() const
    methods.Push(RegisterObjectMethodArgs("unsigned short Connection::GetPort() const", "uint16 GetPort() const", AS_METHODPR(Connection, GetPort, () const, unsigned short), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned short Connection::GetPort() const", "uint16 get_port() const", AS_METHODPR(Connection, GetPort, () const, unsigned short), AS_CALL_THISCALL));

    // float Connection::GetRoundTripTime() const
    methods.Push(RegisterObjectMethodArgs("float Connection::GetRoundTripTime() const", "float GetRoundTripTime() const", AS_METHODPR(Connection, GetRoundTripTime, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Connection::GetRoundTripTime() const", "float get_roundTripTime() const", AS_METHODPR(Connection, GetRoundTripTime, () const, float), AS_CALL_THISCALL));

    // unsigned Connection::GetLastHeardTime() const
    methods.Push(RegisterObjectMethodArgs("unsigned Connection::GetLastHeardTime() const", "uint GetLastHeardTime() const", AS_METHODPR(Connection, GetLastHeardTime, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Connection::GetLastHeardTime() const", "uint get_lastHeardTime() const", AS_METHODPR(Connection, GetLastHeardTime, () const, unsigned), AS_CALL_THISCALL));

    // float Connection::GetBytesInPerSec() const
    methods.Push(RegisterObjectMethodArgs("float Connection::GetBytesInPerSec() const", "float GetBytesInPerSec() const", AS_METHODPR(Connection, GetBytesInPerSec, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Connection::GetBytesInPerSec() const", "float get_bytesInPerSec() const", AS_METHODPR(Connection, GetBytesInPerSec, () const, float), AS_CALL_THISCALL));

    // float Connection::GetBytesOutPerSec() const
    methods.Push(RegisterObjectMethodArgs("float Connection::GetBytesOutPerSec() const", "float GetBytesOutPerSec() const", AS_METHODPR(Connection, GetBytesOutPerSec, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Connection::GetBytesOutPerSec() const", "float get_bytesOutPerSec() const", AS_METHODPR(Connection, GetBytesOutPerSec, () const, float), AS_CALL_THISCALL));

    // int Connection::GetPacketsInPerSec() const
    methods.Push(RegisterObjectMethodArgs("int Connection::GetPacketsInPerSec() const", "int GetPacketsInPerSec() const", AS_METHODPR(Connection, GetPacketsInPerSec, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Connection::GetPacketsInPerSec() const", "int get_packetsInPerSec() const", AS_METHODPR(Connection, GetPacketsInPerSec, () const, int), AS_CALL_THISCALL));

    // int Connection::GetPacketsOutPerSec() const
    methods.Push(RegisterObjectMethodArgs("int Connection::GetPacketsOutPerSec() const", "int GetPacketsOutPerSec() const", AS_METHODPR(Connection, GetPacketsOutPerSec, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Connection::GetPacketsOutPerSec() const", "int get_packetsOutPerSec() const", AS_METHODPR(Connection, GetPacketsOutPerSec, () const, int), AS_CALL_THISCALL));

    // String Connection::ToString() const
    methods.Push(RegisterObjectMethodArgs("String Connection::ToString() const", "String ToString() const", AS_METHODPR(Connection, ToString, () const, String), AS_CALL_THISCALL));

    // unsigned Connection::GetNumDownloads() const
    methods.Push(RegisterObjectMethodArgs("unsigned Connection::GetNumDownloads() const", "uint GetNumDownloads() const", AS_METHODPR(Connection, GetNumDownloads, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Connection::GetNumDownloads() const", "uint get_numDownloads() const", AS_METHODPR(Connection, GetNumDownloads, () const, unsigned), AS_CALL_THISCALL));

    // const String& Connection::GetDownloadName() const
    methods.Push(RegisterObjectMethodArgs("const String& Connection::GetDownloadName() const", "const String& GetDownloadName() const", AS_METHODPR(Connection, GetDownloadName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Connection::GetDownloadName() const", "const String& get_downloadName() const", AS_METHODPR(Connection, GetDownloadName, () const, const String&), AS_CALL_THISCALL));

    // float Connection::GetDownloadProgress() const
    methods.Push(RegisterObjectMethodArgs("float Connection::GetDownloadProgress() const", "float GetDownloadProgress() const", AS_METHODPR(Connection, GetDownloadProgress, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Connection::GetDownloadProgress() const", "float get_downloadProgress() const", AS_METHODPR(Connection, GetDownloadProgress, () const, float), AS_CALL_THISCALL));

    // void Connection::SendPackageToClient(PackageFile* package)
    methods.Push(RegisterObjectMethodArgs("void Connection::SendPackageToClient(PackageFile* package)", "void SendPackageToClient(PackageFile@+)", AS_METHODPR(Connection, SendPackageToClient, (PackageFile*), void), AS_CALL_THISCALL));

    // void Connection::ConfigureNetworkSimulator(int latencyMs, float packetLoss)
    methods.Push(RegisterObjectMethodArgs("void Connection::ConfigureNetworkSimulator(int latencyMs, float packetLoss)", "void ConfigureNetworkSimulator(int, float)", AS_METHODPR(Connection, ConfigureNetworkSimulator, (int, float), void), AS_CALL_THISCALL));

    // void Connection::SetPacketSizeLimit(int limit)
    methods.Push(RegisterObjectMethodArgs("void Connection::SetPacketSizeLimit(int limit)", "void SetPacketSizeLimit(int)", AS_METHODPR(Connection, SetPacketSizeLimit, (int), void), AS_CALL_THISCALL));
}

// class HttpRequest | File: ../Network/HttpRequest.h
void CollectMembers_HttpRequest(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);
    CollectMembers_Deserializer(methods);
    CollectMembers_Thread(methods);

    Remove(methods, "virtual bool Deserializer::IsEof() const");
    Remove(methods, "virtual unsigned Deserializer::Read(void* dest, unsigned size)=0");
    Remove(methods, "virtual unsigned Deserializer::Seek(unsigned position)=0");
    Remove(methods, "virtual void Thread::ThreadFunction()=0");

    // unsigned HttpRequest::Read(void* dest, unsigned size) override
    // Error: type "void*" can not automatically bind

    // void HttpRequest::ThreadFunction() override
    methods.Push(RegisterObjectMethodArgs("void HttpRequest::ThreadFunction() override", "void ThreadFunction()", AS_METHODPR(HttpRequest, ThreadFunction, (), void), AS_CALL_THISCALL));

    // unsigned HttpRequest::Seek(unsigned position) override
    methods.Push(RegisterObjectMethodArgs("unsigned HttpRequest::Seek(unsigned position) override", "uint Seek(uint)", AS_METHODPR(HttpRequest, Seek, (unsigned), unsigned), AS_CALL_THISCALL));

    // bool HttpRequest::IsEof() const override
    methods.Push(RegisterObjectMethodArgs("bool HttpRequest::IsEof() const override", "bool IsEof() const", AS_METHODPR(HttpRequest, IsEof, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool HttpRequest::IsEof() const override", "bool get_eof() const", AS_METHODPR(HttpRequest, IsEof, () const, bool), AS_CALL_THISCALL));

    // const String& HttpRequest::GetURL() const
    methods.Push(RegisterObjectMethodArgs("const String& HttpRequest::GetURL() const", "const String& GetURL() const", AS_METHODPR(HttpRequest, GetURL, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& HttpRequest::GetURL() const", "const String& get_url() const", AS_METHODPR(HttpRequest, GetURL, () const, const String&), AS_CALL_THISCALL));

    // const String& HttpRequest::GetVerb() const
    methods.Push(RegisterObjectMethodArgs("const String& HttpRequest::GetVerb() const", "const String& GetVerb() const", AS_METHODPR(HttpRequest, GetVerb, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& HttpRequest::GetVerb() const", "const String& get_verb() const", AS_METHODPR(HttpRequest, GetVerb, () const, const String&), AS_CALL_THISCALL));

    // String HttpRequest::GetError() const
    methods.Push(RegisterObjectMethodArgs("String HttpRequest::GetError() const", "String GetError() const", AS_METHODPR(HttpRequest, GetError, () const, String), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("String HttpRequest::GetError() const", "String get_error() const", AS_METHODPR(HttpRequest, GetError, () const, String), AS_CALL_THISCALL));

    // HttpRequestState HttpRequest::GetState() const
    methods.Push(RegisterObjectMethodArgs("HttpRequestState HttpRequest::GetState() const", "HttpRequestState GetState() const", AS_METHODPR(HttpRequest, GetState, () const, HttpRequestState), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("HttpRequestState HttpRequest::GetState() const", "HttpRequestState get_state() const", AS_METHODPR(HttpRequest, GetState, () const, HttpRequestState), AS_CALL_THISCALL));

    // unsigned HttpRequest::GetAvailableSize() const
    methods.Push(RegisterObjectMethodArgs("unsigned HttpRequest::GetAvailableSize() const", "uint GetAvailableSize() const", AS_METHODPR(HttpRequest, GetAvailableSize, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned HttpRequest::GetAvailableSize() const", "uint get_availableSize() const", AS_METHODPR(HttpRequest, GetAvailableSize, () const, unsigned), AS_CALL_THISCALL));

    // bool HttpRequest::IsOpen() const
    methods.Push(RegisterObjectMethodArgs("bool HttpRequest::IsOpen() const", "bool IsOpen() const", AS_METHODPR(HttpRequest, IsOpen, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool HttpRequest::IsOpen() const", "bool get_open() const", AS_METHODPR(HttpRequest, IsOpen, () const, bool), AS_CALL_THISCALL));
}

// SharedPtr<HttpRequest> Network::MakeHttpRequest(const String& url, const String& verb=String::EMPTY, const Vector<String>& headers=Vector<String>(), const String& postData=String::EMPTY)
#ifdef URHO3D_NETWORK
// SharedPtr<HttpRequest> Network::MakeHttpRequest(const String& url, const String& verb=String::EMPTY, const Vector<String>& headers=Vector<String>(), const String& postData=String::EMPTY) | File: ../Network/Network.h
static HttpRequest* Network_MakeHttpRequest_String_String_VectorString_String(Network* ptr, const String& url, const String& verb, CScriptArray* headers_conv, const String& postData)
{
    Vector<String> headers = ArrayToVector<String>(headers_conv);
    SharedPtr<HttpRequest> result = ptr->MakeHttpRequest(url, verb, headers, postData);
    return result.Detach();
}
#endif


// Vector<SharedPtr<Connection>> Network::GetClientConnections() const
#ifdef URHO3D_NETWORK
// Vector<SharedPtr<Connection>> Network::GetClientConnections() const | File: ../Network/Network.h
static CScriptArray* Network_GetClientConnections_void(Network* ptr)
{
    Vector<SharedPtr<Connection>> result = ptr->GetClientConnections();
    return VectorToHandleArray(result, "Array<Connection@>");
}
#endif


// class Network | File: ../Network/Network.h
void CollectMembers_Network(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Object(methods);

    // void Network::BroadcastMessage(int msgID, bool reliable, bool inOrder, const unsigned char* data, unsigned numBytes, unsigned contentID=0)
    // Error: type "const unsigned char*" can not automatically bind

    // void Network::ClientDisconnected(const SLNet::AddressOrGUID& connection)
    // Error: type "const SLNet::AddressOrGUID&" can not automatically bind

    // Connection* Network::GetConnection(const SLNet::AddressOrGUID& connection) const
    // Error: type "const SLNet::AddressOrGUID&" can not automatically bind

    // void Network::HandleMessage(const SLNet::AddressOrGUID& source, int packetID, int msgID, const char* data, size_t numBytes)
    // Error: type "const SLNet::AddressOrGUID&" can not automatically bind

    // void Network::NewConnectionEstablished(const SLNet::AddressOrGUID& connection)
    // Error: type "const SLNet::AddressOrGUID&" can not automatically bind

    // void Network::SetDiscoveryBeacon(const VariantMap& data)
    methods.Push(RegisterObjectMethodArgs("void Network::SetDiscoveryBeacon(const VariantMap& data)", "void SetDiscoveryBeacon(const VariantMap&in)", AS_METHODPR(Network, SetDiscoveryBeacon, (const VariantMap&), void), AS_CALL_THISCALL));

    // void Network::DiscoverHosts(unsigned port)
    methods.Push(RegisterObjectMethodArgs("void Network::DiscoverHosts(unsigned port)", "void DiscoverHosts(uint)", AS_METHODPR(Network, DiscoverHosts, (unsigned), void), AS_CALL_THISCALL));

    // void Network::SetPassword(const String& password)
    methods.Push(RegisterObjectMethodArgs("void Network::SetPassword(const String& password)", "void SetPassword(const String&in)", AS_METHODPR(Network, SetPassword, (const String&), void), AS_CALL_THISCALL));

    // void Network::SetNATServerInfo(const String& address, unsigned short port)
    methods.Push(RegisterObjectMethodArgs("void Network::SetNATServerInfo(const String& address, unsigned short port)", "void SetNATServerInfo(const String&in, uint16)", AS_METHODPR(Network, SetNATServerInfo, (const String&, unsigned short), void), AS_CALL_THISCALL));

    // bool Network::Connect(const String& address, unsigned short port, Scene* scene, const VariantMap& identity=Variant::emptyVariantMap)
    methods.Push(RegisterObjectMethodArgs("bool Network::Connect(const String& address, unsigned short port, Scene* scene, const VariantMap& identity=Variant::emptyVariantMap)", "bool Connect(const String&in, uint16, Scene@+, const VariantMap&in = VariantMap())", AS_METHODPR(Network, Connect, (const String&, unsigned short, Scene*, const VariantMap&), bool), AS_CALL_THISCALL));

    // void Network::Disconnect(int waitMSec=0)
    methods.Push(RegisterObjectMethodArgs("void Network::Disconnect(int waitMSec=0)", "void Disconnect(int = 0)", AS_METHODPR(Network, Disconnect, (int), void), AS_CALL_THISCALL));

    // bool Network::StartServer(unsigned short port, unsigned int maxConnections=128)
    methods.Push(RegisterObjectMethodArgs("bool Network::StartServer(unsigned short port, unsigned int maxConnections=128)", "bool StartServer(uint16, uint = 128)", AS_METHODPR(Network, StartServer, (unsigned short, unsigned int), bool), AS_CALL_THISCALL));

    // void Network::StopServer()
    methods.Push(RegisterObjectMethodArgs("void Network::StopServer()", "void StopServer()", AS_METHODPR(Network, StopServer, (), void), AS_CALL_THISCALL));

    // void Network::StartNATClient()
    methods.Push(RegisterObjectMethodArgs("void Network::StartNATClient()", "void StartNATClient()", AS_METHODPR(Network, StartNATClient, (), void), AS_CALL_THISCALL));

    // const String& Network::GetGUID() const
    methods.Push(RegisterObjectMethodArgs("const String& Network::GetGUID() const", "const String& GetGUID() const", AS_METHODPR(Network, GetGUID, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Network::GetGUID() const", "const String& get_guid() const", AS_METHODPR(Network, GetGUID, () const, const String&), AS_CALL_THISCALL));

    // void Network::AttemptNATPunchtrough(const String& guid, Scene* scene, const VariantMap& identity=Variant::emptyVariantMap)
    methods.Push(RegisterObjectMethodArgs("void Network::AttemptNATPunchtrough(const String& guid, Scene* scene, const VariantMap& identity=Variant::emptyVariantMap)", "void AttemptNATPunchtrough(const String&in, Scene@+, const VariantMap&in = VariantMap())", AS_METHODPR(Network, AttemptNATPunchtrough, (const String&, Scene*, const VariantMap&), void), AS_CALL_THISCALL));

    // void Network::BroadcastMessage(int msgID, bool reliable, bool inOrder, const VectorBuffer& msg, unsigned contentID=0)
    methods.Push(RegisterObjectMethodArgs("void Network::BroadcastMessage(int msgID, bool reliable, bool inOrder, const VectorBuffer& msg, unsigned contentID=0)", "void BroadcastMessage(int, bool, bool, const VectorBuffer&in, uint = 0)", AS_METHODPR(Network, BroadcastMessage, (int, bool, bool, const VectorBuffer&, unsigned), void), AS_CALL_THISCALL));

    // void Network::BroadcastRemoteEvent(StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)
    methods.Push(RegisterObjectMethodArgs("void Network::BroadcastRemoteEvent(StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)", "void BroadcastRemoteEvent(StringHash, bool, const VariantMap&in = VariantMap())", AS_METHODPR(Network, BroadcastRemoteEvent, (StringHash, bool, const VariantMap&), void), AS_CALL_THISCALL));

    // void Network::BroadcastRemoteEvent(Scene* scene, StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)
    methods.Push(RegisterObjectMethodArgs("void Network::BroadcastRemoteEvent(Scene* scene, StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)", "void BroadcastRemoteEvent(Scene@+, StringHash, bool, const VariantMap&in = VariantMap())", AS_METHODPR(Network, BroadcastRemoteEvent, (Scene*, StringHash, bool, const VariantMap&), void), AS_CALL_THISCALL));

    // void Network::BroadcastRemoteEvent(Node* node, StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)
    methods.Push(RegisterObjectMethodArgs("void Network::BroadcastRemoteEvent(Node* node, StringHash eventType, bool inOrder, const VariantMap& eventData=Variant::emptyVariantMap)", "void BroadcastRemoteEvent(Node@+, StringHash, bool, const VariantMap&in = VariantMap())", AS_METHODPR(Network, BroadcastRemoteEvent, (Node*, StringHash, bool, const VariantMap&), void), AS_CALL_THISCALL));

    // void Network::SetUpdateFps(int fps)
    methods.Push(RegisterObjectMethodArgs("void Network::SetUpdateFps(int fps)", "void SetUpdateFps(int)", AS_METHODPR(Network, SetUpdateFps, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Network::SetUpdateFps(int fps)", "void set_updateFps(int)", AS_METHODPR(Network, SetUpdateFps, (int), void), AS_CALL_THISCALL));

    // void Network::SetSimulatedLatency(int ms)
    methods.Push(RegisterObjectMethodArgs("void Network::SetSimulatedLatency(int ms)", "void SetSimulatedLatency(int)", AS_METHODPR(Network, SetSimulatedLatency, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Network::SetSimulatedLatency(int ms)", "void set_simulatedLatency(int)", AS_METHODPR(Network, SetSimulatedLatency, (int), void), AS_CALL_THISCALL));

    // void Network::SetSimulatedPacketLoss(float probability)
    methods.Push(RegisterObjectMethodArgs("void Network::SetSimulatedPacketLoss(float probability)", "void SetSimulatedPacketLoss(float)", AS_METHODPR(Network, SetSimulatedPacketLoss, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Network::SetSimulatedPacketLoss(float probability)", "void set_simulatedPacketLoss(float)", AS_METHODPR(Network, SetSimulatedPacketLoss, (float), void), AS_CALL_THISCALL));

    // void Network::RegisterRemoteEvent(StringHash eventType)
    methods.Push(RegisterObjectMethodArgs("void Network::RegisterRemoteEvent(StringHash eventType)", "void RegisterRemoteEvent(StringHash)", AS_METHODPR(Network, RegisterRemoteEvent, (StringHash), void), AS_CALL_THISCALL));

    // void Network::UnregisterRemoteEvent(StringHash eventType)
    methods.Push(RegisterObjectMethodArgs("void Network::UnregisterRemoteEvent(StringHash eventType)", "void UnregisterRemoteEvent(StringHash)", AS_METHODPR(Network, UnregisterRemoteEvent, (StringHash), void), AS_CALL_THISCALL));

    // void Network::UnregisterAllRemoteEvents()
    methods.Push(RegisterObjectMethodArgs("void Network::UnregisterAllRemoteEvents()", "void UnregisterAllRemoteEvents()", AS_METHODPR(Network, UnregisterAllRemoteEvents, (), void), AS_CALL_THISCALL));

    // void Network::SetPackageCacheDir(const String& path)
    methods.Push(RegisterObjectMethodArgs("void Network::SetPackageCacheDir(const String& path)", "void SetPackageCacheDir(const String&in)", AS_METHODPR(Network, SetPackageCacheDir, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Network::SetPackageCacheDir(const String& path)", "void set_packageCacheDir(const String&in)", AS_METHODPR(Network, SetPackageCacheDir, (const String&), void), AS_CALL_THISCALL));

    // void Network::SendPackageToClients(Scene* scene, PackageFile* package)
    methods.Push(RegisterObjectMethodArgs("void Network::SendPackageToClients(Scene* scene, PackageFile* package)", "void SendPackageToClients(Scene@+, PackageFile@+)", AS_METHODPR(Network, SendPackageToClients, (Scene*, PackageFile*), void), AS_CALL_THISCALL));

    // SharedPtr<HttpRequest> Network::MakeHttpRequest(const String& url, const String& verb=String::EMPTY, const Vector<String>& headers=Vector<String>(), const String& postData=String::EMPTY)
    methods.Push(RegisterObjectMethodArgs("SharedPtr<HttpRequest> Network::MakeHttpRequest(const String& url, const String& verb=String::EMPTY, const Vector<String>& headers=Vector<String>(), const String& postData=String::EMPTY)", "HttpRequest@+ MakeHttpRequest(const String&in, const String&in = String::EMPTY, Array<String>@+ = null, const String&in = String::EMPTY)", AS_FUNCTION_OBJFIRST(Network_MakeHttpRequest_String_String_VectorString_String), AS_CALL_CDECL_OBJFIRST));

    // void Network::BanAddress(const String& address)
    methods.Push(RegisterObjectMethodArgs("void Network::BanAddress(const String& address)", "void BanAddress(const String&in)", AS_METHODPR(Network, BanAddress, (const String&), void), AS_CALL_THISCALL));

    // int Network::GetUpdateFps() const
    methods.Push(RegisterObjectMethodArgs("int Network::GetUpdateFps() const", "int GetUpdateFps() const", AS_METHODPR(Network, GetUpdateFps, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Network::GetUpdateFps() const", "int get_updateFps() const", AS_METHODPR(Network, GetUpdateFps, () const, int), AS_CALL_THISCALL));

    // int Network::GetSimulatedLatency() const
    methods.Push(RegisterObjectMethodArgs("int Network::GetSimulatedLatency() const", "int GetSimulatedLatency() const", AS_METHODPR(Network, GetSimulatedLatency, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Network::GetSimulatedLatency() const", "int get_simulatedLatency() const", AS_METHODPR(Network, GetSimulatedLatency, () const, int), AS_CALL_THISCALL));

    // float Network::GetSimulatedPacketLoss() const
    methods.Push(RegisterObjectMethodArgs("float Network::GetSimulatedPacketLoss() const", "float GetSimulatedPacketLoss() const", AS_METHODPR(Network, GetSimulatedPacketLoss, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Network::GetSimulatedPacketLoss() const", "float get_simulatedPacketLoss() const", AS_METHODPR(Network, GetSimulatedPacketLoss, () const, float), AS_CALL_THISCALL));

    // Connection* Network::GetServerConnection() const
    methods.Push(RegisterObjectMethodArgs("Connection* Network::GetServerConnection() const", "Connection@+ GetServerConnection() const", AS_METHODPR(Network, GetServerConnection, () const, Connection*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Connection* Network::GetServerConnection() const", "Connection@+ get_serverConnection() const", AS_METHODPR(Network, GetServerConnection, () const, Connection*), AS_CALL_THISCALL));

    // Vector<SharedPtr<Connection>> Network::GetClientConnections() const
    methods.Push(RegisterObjectMethodArgs("Vector<SharedPtr<Connection>> Network::GetClientConnections() const", "Array<Connection@>@ GetClientConnections() const", AS_FUNCTION_OBJFIRST(Network_GetClientConnections_void), AS_CALL_CDECL_OBJFIRST));
    methods.Push(RegisterObjectMethodArgs("Vector<SharedPtr<Connection>> Network::GetClientConnections() const", "Array<Connection@>@ get_clientConnections() const", AS_FUNCTION_OBJFIRST(Network_GetClientConnections_void), AS_CALL_CDECL_OBJFIRST));

    // bool Network::IsServerRunning() const
    methods.Push(RegisterObjectMethodArgs("bool Network::IsServerRunning() const", "bool IsServerRunning() const", AS_METHODPR(Network, IsServerRunning, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Network::IsServerRunning() const", "bool get_serverRunning() const", AS_METHODPR(Network, IsServerRunning, () const, bool), AS_CALL_THISCALL));

    // bool Network::CheckRemoteEvent(StringHash eventType) const
    methods.Push(RegisterObjectMethodArgs("bool Network::CheckRemoteEvent(StringHash eventType) const", "bool CheckRemoteEvent(StringHash) const", AS_METHODPR(Network, CheckRemoteEvent, (StringHash) const, bool), AS_CALL_THISCALL));

    // const String& Network::GetPackageCacheDir() const
    methods.Push(RegisterObjectMethodArgs("const String& Network::GetPackageCacheDir() const", "const String& GetPackageCacheDir() const", AS_METHODPR(Network, GetPackageCacheDir, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& Network::GetPackageCacheDir() const", "const String& get_packageCacheDir() const", AS_METHODPR(Network, GetPackageCacheDir, () const, const String&), AS_CALL_THISCALL));

    // void Network::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void Network::Update(float timeStep)", "void Update(float)", AS_METHODPR(Network, Update, (float), void), AS_CALL_THISCALL));

    // void Network::PostUpdate(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void Network::PostUpdate(float timeStep)", "void PostUpdate(float)", AS_METHODPR(Network, PostUpdate, (float), void), AS_CALL_THISCALL));
}

// class NetworkPriority | File: ../Network/NetworkPriority.h
void CollectMembers_NetworkPriority(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");

    // void NetworkPriority::SetBasePriority(float priority)
    methods.Push(RegisterObjectMethodArgs("void NetworkPriority::SetBasePriority(float priority)", "void SetBasePriority(float)", AS_METHODPR(NetworkPriority, SetBasePriority, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NetworkPriority::SetBasePriority(float priority)", "void set_basePriority(float)", AS_METHODPR(NetworkPriority, SetBasePriority, (float), void), AS_CALL_THISCALL));

    // void NetworkPriority::SetDistanceFactor(float factor)
    methods.Push(RegisterObjectMethodArgs("void NetworkPriority::SetDistanceFactor(float factor)", "void SetDistanceFactor(float)", AS_METHODPR(NetworkPriority, SetDistanceFactor, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NetworkPriority::SetDistanceFactor(float factor)", "void set_distanceFactor(float)", AS_METHODPR(NetworkPriority, SetDistanceFactor, (float), void), AS_CALL_THISCALL));

    // void NetworkPriority::SetMinPriority(float priority)
    methods.Push(RegisterObjectMethodArgs("void NetworkPriority::SetMinPriority(float priority)", "void SetMinPriority(float)", AS_METHODPR(NetworkPriority, SetMinPriority, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NetworkPriority::SetMinPriority(float priority)", "void set_minPriority(float)", AS_METHODPR(NetworkPriority, SetMinPriority, (float), void), AS_CALL_THISCALL));

    // void NetworkPriority::SetAlwaysUpdateOwner(bool enable)
    methods.Push(RegisterObjectMethodArgs("void NetworkPriority::SetAlwaysUpdateOwner(bool enable)", "void SetAlwaysUpdateOwner(bool)", AS_METHODPR(NetworkPriority, SetAlwaysUpdateOwner, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void NetworkPriority::SetAlwaysUpdateOwner(bool enable)", "void set_alwaysUpdateOwner(bool)", AS_METHODPR(NetworkPriority, SetAlwaysUpdateOwner, (bool), void), AS_CALL_THISCALL));

    // float NetworkPriority::GetBasePriority() const
    methods.Push(RegisterObjectMethodArgs("float NetworkPriority::GetBasePriority() const", "float GetBasePriority() const", AS_METHODPR(NetworkPriority, GetBasePriority, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NetworkPriority::GetBasePriority() const", "float get_basePriority() const", AS_METHODPR(NetworkPriority, GetBasePriority, () const, float), AS_CALL_THISCALL));

    // float NetworkPriority::GetDistanceFactor() const
    methods.Push(RegisterObjectMethodArgs("float NetworkPriority::GetDistanceFactor() const", "float GetDistanceFactor() const", AS_METHODPR(NetworkPriority, GetDistanceFactor, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NetworkPriority::GetDistanceFactor() const", "float get_distanceFactor() const", AS_METHODPR(NetworkPriority, GetDistanceFactor, () const, float), AS_CALL_THISCALL));

    // float NetworkPriority::GetMinPriority() const
    methods.Push(RegisterObjectMethodArgs("float NetworkPriority::GetMinPriority() const", "float GetMinPriority() const", AS_METHODPR(NetworkPriority, GetMinPriority, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float NetworkPriority::GetMinPriority() const", "float get_minPriority() const", AS_METHODPR(NetworkPriority, GetMinPriority, () const, float), AS_CALL_THISCALL));

    // bool NetworkPriority::GetAlwaysUpdateOwner() const
    methods.Push(RegisterObjectMethodArgs("bool NetworkPriority::GetAlwaysUpdateOwner() const", "bool GetAlwaysUpdateOwner() const", AS_METHODPR(NetworkPriority, GetAlwaysUpdateOwner, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool NetworkPriority::GetAlwaysUpdateOwner() const", "bool get_alwaysUpdateOwner() const", AS_METHODPR(NetworkPriority, GetAlwaysUpdateOwner, () const, bool), AS_CALL_THISCALL));

    // bool NetworkPriority::CheckUpdate(float distance, float& accumulator)
    methods.Push(RegisterObjectMethodArgs("bool NetworkPriority::CheckUpdate(float distance, float& accumulator)", "bool CheckUpdate(float, float&)", AS_METHODPR(NetworkPriority, CheckUpdate, (float, float&), bool), AS_CALL_THISCALL));
}

// struct PackageDownload | File: ../Network/Connection.h
void CollectMembers_PackageDownload(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct PackageUpload | File: ../Network/Connection.h
void CollectMembers_PackageUpload(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct RemoteEvent | File: ../Network/Connection.h
void CollectMembers_RemoteEvent(Vector<RegisterObjectMethodArgs>& methods)
{
}

#endif // def URHO3D_NETWORK

#ifdef URHO3D_PHYSICS

// struct CollisionGeometryData | File: ../Physics/CollisionShape.h
void CollectMembers_CollisionGeometryData(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);
}

// class CollisionShape | File: ../Physics/CollisionShape.h
void CollectMembers_CollisionShape(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Component::OnSetEnabled()");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // btCollisionShape* CollisionShape::GetCollisionShape() const
    // Error: type "btCollisionShape*" can not automatically bind

    // void CollisionShape::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(CollisionShape, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void CollisionShape::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(CollisionShape, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void CollisionShape::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(CollisionShape, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void CollisionShape::SetBox(const Vector3& size, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetBox(const Vector3& size, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetBox(const Vector3&in, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetBox, (const Vector3&, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetSphere(float diameter, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetSphere(float diameter, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetSphere(float, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetSphere, (float, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetStaticPlane(const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetStaticPlane(const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetStaticPlane(const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetStaticPlane, (const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetCylinder(float diameter, float height, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetCylinder(float diameter, float height, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetCylinder(float, float, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetCylinder, (float, float, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetCapsule(float diameter, float height, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetCapsule(float diameter, float height, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetCapsule(float, float, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetCapsule, (float, float, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetCone(float diameter, float height, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetCone(float diameter, float height, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetCone(float, float, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetCone, (float, float, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetTriangleMesh(Model* model, unsigned lodLevel=0, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetTriangleMesh(Model* model, unsigned lodLevel=0, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetTriangleMesh(Model@+, uint = 0, const Vector3&in = Vector3::ONE, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetTriangleMesh, (Model*, unsigned, const Vector3&, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetCustomTriangleMesh(CustomGeometry* custom, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetCustomTriangleMesh(CustomGeometry* custom, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetCustomTriangleMesh(CustomGeometry@+, const Vector3&in = Vector3::ONE, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetCustomTriangleMesh, (CustomGeometry*, const Vector3&, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetConvexHull(Model* model, unsigned lodLevel=0, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetConvexHull(Model* model, unsigned lodLevel=0, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetConvexHull(Model@+, uint = 0, const Vector3&in = Vector3::ONE, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetConvexHull, (Model*, unsigned, const Vector3&, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetCustomConvexHull(CustomGeometry* custom, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetCustomConvexHull(CustomGeometry* custom, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetCustomConvexHull(CustomGeometry@+, const Vector3&in = Vector3::ONE, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetCustomConvexHull, (CustomGeometry*, const Vector3&, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetGImpactMesh(Model* model, unsigned lodLevel=0, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetGImpactMesh(Model* model, unsigned lodLevel=0, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetGImpactMesh(Model@+, uint = 0, const Vector3&in = Vector3::ONE, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetGImpactMesh, (Model*, unsigned, const Vector3&, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetCustomGImpactMesh(CustomGeometry* custom, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetCustomGImpactMesh(CustomGeometry* custom, const Vector3& scale=Vector3::ONE, const Vector3& position=Vector3::ZERO, const Quaternion& rotation=Quaternion::IDENTITY)", "void SetCustomGImpactMesh(CustomGeometry@+, const Vector3&in = Vector3::ONE, const Vector3&in = Vector3::ZERO, const Quaternion&in = Quaternion::IDENTITY)", AS_METHODPR(CollisionShape, SetCustomGImpactMesh, (CustomGeometry*, const Vector3&, const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetTerrain(unsigned lodLevel=0)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetTerrain(unsigned lodLevel=0)", "void SetTerrain(uint = 0)", AS_METHODPR(CollisionShape, SetTerrain, (unsigned), void), AS_CALL_THISCALL));

    // void CollisionShape::SetShapeType(ShapeType type)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetShapeType(ShapeType type)", "void SetShapeType(ShapeType)", AS_METHODPR(CollisionShape, SetShapeType, (ShapeType), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetShapeType(ShapeType type)", "void set_shapeType(ShapeType)", AS_METHODPR(CollisionShape, SetShapeType, (ShapeType), void), AS_CALL_THISCALL));

    // void CollisionShape::SetSize(const Vector3& size)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetSize(const Vector3& size)", "void SetSize(const Vector3&in)", AS_METHODPR(CollisionShape, SetSize, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetSize(const Vector3& size)", "void set_size(const Vector3&in)", AS_METHODPR(CollisionShape, SetSize, (const Vector3&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetPosition(const Vector3& position)", "void SetPosition(const Vector3&in)", AS_METHODPR(CollisionShape, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetPosition(const Vector3& position)", "void set_position(const Vector3&in)", AS_METHODPR(CollisionShape, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetRotation(const Quaternion& rotation)", "void SetRotation(const Quaternion&in)", AS_METHODPR(CollisionShape, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetRotation(const Quaternion& rotation)", "void set_rotation(const Quaternion&in)", AS_METHODPR(CollisionShape, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetTransform(const Vector3& position, const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetTransform(const Vector3& position, const Quaternion& rotation)", "void SetTransform(const Vector3&in, const Quaternion&in)", AS_METHODPR(CollisionShape, SetTransform, (const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void CollisionShape::SetMargin(float margin)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetMargin(float margin)", "void SetMargin(float)", AS_METHODPR(CollisionShape, SetMargin, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetMargin(float margin)", "void set_margin(float)", AS_METHODPR(CollisionShape, SetMargin, (float), void), AS_CALL_THISCALL));

    // void CollisionShape::SetModel(Model* model)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetModel(Model* model)", "void SetModel(Model@+)", AS_METHODPR(CollisionShape, SetModel, (Model*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetModel(Model* model)", "void set_model(Model@+)", AS_METHODPR(CollisionShape, SetModel, (Model*), void), AS_CALL_THISCALL));

    // void CollisionShape::SetLodLevel(unsigned lodLevel)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetLodLevel(unsigned lodLevel)", "void SetLodLevel(uint)", AS_METHODPR(CollisionShape, SetLodLevel, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetLodLevel(unsigned lodLevel)", "void set_lodLevel(uint)", AS_METHODPR(CollisionShape, SetLodLevel, (unsigned), void), AS_CALL_THISCALL));

    // CollisionGeometryData* CollisionShape::GetGeometryData() const
    methods.Push(RegisterObjectMethodArgs("CollisionGeometryData* CollisionShape::GetGeometryData() const", "CollisionGeometryData@+ GetGeometryData() const", AS_METHODPR(CollisionShape, GetGeometryData, () const, CollisionGeometryData*), AS_CALL_THISCALL));

    // PhysicsWorld* CollisionShape::GetPhysicsWorld() const
    methods.Push(RegisterObjectMethodArgs("PhysicsWorld* CollisionShape::GetPhysicsWorld() const", "PhysicsWorld@+ GetPhysicsWorld() const", AS_METHODPR(CollisionShape, GetPhysicsWorld, () const, PhysicsWorld*), AS_CALL_THISCALL));

    // ShapeType CollisionShape::GetShapeType() const
    methods.Push(RegisterObjectMethodArgs("ShapeType CollisionShape::GetShapeType() const", "ShapeType GetShapeType() const", AS_METHODPR(CollisionShape, GetShapeType, () const, ShapeType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ShapeType CollisionShape::GetShapeType() const", "ShapeType get_shapeType() const", AS_METHODPR(CollisionShape, GetShapeType, () const, ShapeType), AS_CALL_THISCALL));

    // const Vector3& CollisionShape::GetSize() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& CollisionShape::GetSize() const", "const Vector3& GetSize() const", AS_METHODPR(CollisionShape, GetSize, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& CollisionShape::GetSize() const", "const Vector3& get_size() const", AS_METHODPR(CollisionShape, GetSize, () const, const Vector3&), AS_CALL_THISCALL));

    // const Vector3& CollisionShape::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& CollisionShape::GetPosition() const", "const Vector3& GetPosition() const", AS_METHODPR(CollisionShape, GetPosition, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& CollisionShape::GetPosition() const", "const Vector3& get_position() const", AS_METHODPR(CollisionShape, GetPosition, () const, const Vector3&), AS_CALL_THISCALL));

    // const Quaternion& CollisionShape::GetRotation() const
    methods.Push(RegisterObjectMethodArgs("const Quaternion& CollisionShape::GetRotation() const", "const Quaternion& GetRotation() const", AS_METHODPR(CollisionShape, GetRotation, () const, const Quaternion&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Quaternion& CollisionShape::GetRotation() const", "const Quaternion& get_rotation() const", AS_METHODPR(CollisionShape, GetRotation, () const, const Quaternion&), AS_CALL_THISCALL));

    // float CollisionShape::GetMargin() const
    methods.Push(RegisterObjectMethodArgs("float CollisionShape::GetMargin() const", "float GetMargin() const", AS_METHODPR(CollisionShape, GetMargin, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CollisionShape::GetMargin() const", "float get_margin() const", AS_METHODPR(CollisionShape, GetMargin, () const, float), AS_CALL_THISCALL));

    // Model* CollisionShape::GetModel() const
    methods.Push(RegisterObjectMethodArgs("Model* CollisionShape::GetModel() const", "Model@+ GetModel() const", AS_METHODPR(CollisionShape, GetModel, () const, Model*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Model* CollisionShape::GetModel() const", "Model@+ get_model() const", AS_METHODPR(CollisionShape, GetModel, () const, Model*), AS_CALL_THISCALL));

    // unsigned CollisionShape::GetLodLevel() const
    methods.Push(RegisterObjectMethodArgs("unsigned CollisionShape::GetLodLevel() const", "uint GetLodLevel() const", AS_METHODPR(CollisionShape, GetLodLevel, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CollisionShape::GetLodLevel() const", "uint get_lodLevel() const", AS_METHODPR(CollisionShape, GetLodLevel, () const, unsigned), AS_CALL_THISCALL));

    // BoundingBox CollisionShape::GetWorldBoundingBox() const
    methods.Push(RegisterObjectMethodArgs("BoundingBox CollisionShape::GetWorldBoundingBox() const", "BoundingBox GetWorldBoundingBox() const", AS_METHODPR(CollisionShape, GetWorldBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BoundingBox CollisionShape::GetWorldBoundingBox() const", "BoundingBox get_worldBoundingBox() const", AS_METHODPR(CollisionShape, GetWorldBoundingBox, () const, BoundingBox), AS_CALL_THISCALL));

    // void CollisionShape::NotifyRigidBody(bool updateMass=true)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::NotifyRigidBody(bool updateMass=true)", "void NotifyRigidBody(bool = true)", AS_METHODPR(CollisionShape, NotifyRigidBody, (bool), void), AS_CALL_THISCALL));

    // void CollisionShape::SetModelAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::SetModelAttr(const ResourceRef& value)", "void SetModelAttr(const ResourceRef&in)", AS_METHODPR(CollisionShape, SetModelAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef CollisionShape::GetModelAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef CollisionShape::GetModelAttr() const", "ResourceRef GetModelAttr() const", AS_METHODPR(CollisionShape, GetModelAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void CollisionShape::ReleaseShape()
    methods.Push(RegisterObjectMethodArgs("void CollisionShape::ReleaseShape()", "void ReleaseShape()", AS_METHODPR(CollisionShape, ReleaseShape, (), void), AS_CALL_THISCALL));
}

// class Constraint | File: ../Physics/Constraint.h
void CollectMembers_Constraint(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Component::GetDependencyNodes(PODVector<Node*>& dest)");
    Remove(methods, "virtual void Component::OnSetEnabled()");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // btTypedConstraint* Constraint::GetConstraint() const
    // Error: type "btTypedConstraint*" can not automatically bind

    // void Constraint::GetDependencyNodes(PODVector<Node*>& dest) override
    // Error: type "PODVector<Node*>&" can not automatically bind

    // void Constraint::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void Constraint::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(Constraint, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void Constraint::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void Constraint::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(Constraint, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void Constraint::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void Constraint::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(Constraint, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void Constraint::SetConstraintType(ConstraintType type)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetConstraintType(ConstraintType type)", "void SetConstraintType(ConstraintType)", AS_METHODPR(Constraint, SetConstraintType, (ConstraintType), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetConstraintType(ConstraintType type)", "void set_constraintType(ConstraintType)", AS_METHODPR(Constraint, SetConstraintType, (ConstraintType), void), AS_CALL_THISCALL));

    // void Constraint::SetOtherBody(RigidBody* body)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetOtherBody(RigidBody* body)", "void SetOtherBody(RigidBody@+)", AS_METHODPR(Constraint, SetOtherBody, (RigidBody*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetOtherBody(RigidBody* body)", "void set_otherBody(RigidBody@+)", AS_METHODPR(Constraint, SetOtherBody, (RigidBody*), void), AS_CALL_THISCALL));

    // void Constraint::SetPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetPosition(const Vector3& position)", "void SetPosition(const Vector3&in)", AS_METHODPR(Constraint, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetPosition(const Vector3& position)", "void set_position(const Vector3&in)", AS_METHODPR(Constraint, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void Constraint::SetRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetRotation(const Quaternion& rotation)", "void SetRotation(const Quaternion&in)", AS_METHODPR(Constraint, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetRotation(const Quaternion& rotation)", "void set_rotation(const Quaternion&in)", AS_METHODPR(Constraint, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // void Constraint::SetAxis(const Vector3& axis)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetAxis(const Vector3& axis)", "void SetAxis(const Vector3&in)", AS_METHODPR(Constraint, SetAxis, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetAxis(const Vector3& axis)", "void set_axis(const Vector3&in)", AS_METHODPR(Constraint, SetAxis, (const Vector3&), void), AS_CALL_THISCALL));

    // void Constraint::SetOtherPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetOtherPosition(const Vector3& position)", "void SetOtherPosition(const Vector3&in)", AS_METHODPR(Constraint, SetOtherPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetOtherPosition(const Vector3& position)", "void set_otherPosition(const Vector3&in)", AS_METHODPR(Constraint, SetOtherPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void Constraint::SetOtherRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetOtherRotation(const Quaternion& rotation)", "void SetOtherRotation(const Quaternion&in)", AS_METHODPR(Constraint, SetOtherRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetOtherRotation(const Quaternion& rotation)", "void set_otherRotation(const Quaternion&in)", AS_METHODPR(Constraint, SetOtherRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // void Constraint::SetOtherAxis(const Vector3& axis)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetOtherAxis(const Vector3& axis)", "void SetOtherAxis(const Vector3&in)", AS_METHODPR(Constraint, SetOtherAxis, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetOtherAxis(const Vector3& axis)", "void set_otherAxis(const Vector3&in)", AS_METHODPR(Constraint, SetOtherAxis, (const Vector3&), void), AS_CALL_THISCALL));

    // void Constraint::SetWorldPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetWorldPosition(const Vector3& position)", "void SetWorldPosition(const Vector3&in)", AS_METHODPR(Constraint, SetWorldPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetWorldPosition(const Vector3& position)", "void set_worldPosition(const Vector3&in)", AS_METHODPR(Constraint, SetWorldPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void Constraint::SetHighLimit(const Vector2& limit)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetHighLimit(const Vector2& limit)", "void SetHighLimit(const Vector2&in)", AS_METHODPR(Constraint, SetHighLimit, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetHighLimit(const Vector2& limit)", "void set_highLimit(const Vector2&in)", AS_METHODPR(Constraint, SetHighLimit, (const Vector2&), void), AS_CALL_THISCALL));

    // void Constraint::SetLowLimit(const Vector2& limit)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetLowLimit(const Vector2& limit)", "void SetLowLimit(const Vector2&in)", AS_METHODPR(Constraint, SetLowLimit, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetLowLimit(const Vector2& limit)", "void set_lowLimit(const Vector2&in)", AS_METHODPR(Constraint, SetLowLimit, (const Vector2&), void), AS_CALL_THISCALL));

    // void Constraint::SetERP(float erp)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetERP(float erp)", "void SetERP(float)", AS_METHODPR(Constraint, SetERP, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetERP(float erp)", "void set_erp(float)", AS_METHODPR(Constraint, SetERP, (float), void), AS_CALL_THISCALL));

    // void Constraint::SetCFM(float cfm)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetCFM(float cfm)", "void SetCFM(float)", AS_METHODPR(Constraint, SetCFM, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetCFM(float cfm)", "void set_cfm(float)", AS_METHODPR(Constraint, SetCFM, (float), void), AS_CALL_THISCALL));

    // void Constraint::SetDisableCollision(bool disable)
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetDisableCollision(bool disable)", "void SetDisableCollision(bool)", AS_METHODPR(Constraint, SetDisableCollision, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint::SetDisableCollision(bool disable)", "void set_disableCollision(bool)", AS_METHODPR(Constraint, SetDisableCollision, (bool), void), AS_CALL_THISCALL));

    // PhysicsWorld* Constraint::GetPhysicsWorld() const
    methods.Push(RegisterObjectMethodArgs("PhysicsWorld* Constraint::GetPhysicsWorld() const", "PhysicsWorld@+ GetPhysicsWorld() const", AS_METHODPR(Constraint, GetPhysicsWorld, () const, PhysicsWorld*), AS_CALL_THISCALL));

    // ConstraintType Constraint::GetConstraintType() const
    methods.Push(RegisterObjectMethodArgs("ConstraintType Constraint::GetConstraintType() const", "ConstraintType GetConstraintType() const", AS_METHODPR(Constraint, GetConstraintType, () const, ConstraintType), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ConstraintType Constraint::GetConstraintType() const", "ConstraintType get_constraintType() const", AS_METHODPR(Constraint, GetConstraintType, () const, ConstraintType), AS_CALL_THISCALL));

    // RigidBody* Constraint::GetOwnBody() const
    methods.Push(RegisterObjectMethodArgs("RigidBody* Constraint::GetOwnBody() const", "RigidBody@+ GetOwnBody() const", AS_METHODPR(Constraint, GetOwnBody, () const, RigidBody*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RigidBody* Constraint::GetOwnBody() const", "RigidBody@+ get_ownBody() const", AS_METHODPR(Constraint, GetOwnBody, () const, RigidBody*), AS_CALL_THISCALL));

    // RigidBody* Constraint::GetOtherBody() const
    methods.Push(RegisterObjectMethodArgs("RigidBody* Constraint::GetOtherBody() const", "RigidBody@+ GetOtherBody() const", AS_METHODPR(Constraint, GetOtherBody, () const, RigidBody*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RigidBody* Constraint::GetOtherBody() const", "RigidBody@+ get_otherBody() const", AS_METHODPR(Constraint, GetOtherBody, () const, RigidBody*), AS_CALL_THISCALL));

    // const Vector3& Constraint::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Constraint::GetPosition() const", "const Vector3& GetPosition() const", AS_METHODPR(Constraint, GetPosition, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& Constraint::GetPosition() const", "const Vector3& get_position() const", AS_METHODPR(Constraint, GetPosition, () const, const Vector3&), AS_CALL_THISCALL));

    // const Quaternion& Constraint::GetRotation() const
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Constraint::GetRotation() const", "const Quaternion& GetRotation() const", AS_METHODPR(Constraint, GetRotation, () const, const Quaternion&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Constraint::GetRotation() const", "const Quaternion& get_rotation() const", AS_METHODPR(Constraint, GetRotation, () const, const Quaternion&), AS_CALL_THISCALL));

    // const Vector3& Constraint::GetOtherPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& Constraint::GetOtherPosition() const", "const Vector3& GetOtherPosition() const", AS_METHODPR(Constraint, GetOtherPosition, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& Constraint::GetOtherPosition() const", "const Vector3& get_otherPosition() const", AS_METHODPR(Constraint, GetOtherPosition, () const, const Vector3&), AS_CALL_THISCALL));

    // const Quaternion& Constraint::GetOtherRotation() const
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Constraint::GetOtherRotation() const", "const Quaternion& GetOtherRotation() const", AS_METHODPR(Constraint, GetOtherRotation, () const, const Quaternion&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Quaternion& Constraint::GetOtherRotation() const", "const Quaternion& get_otherRotation() const", AS_METHODPR(Constraint, GetOtherRotation, () const, const Quaternion&), AS_CALL_THISCALL));

    // Vector3 Constraint::GetWorldPosition() const
    methods.Push(RegisterObjectMethodArgs("Vector3 Constraint::GetWorldPosition() const", "Vector3 GetWorldPosition() const", AS_METHODPR(Constraint, GetWorldPosition, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 Constraint::GetWorldPosition() const", "Vector3 get_worldPosition() const", AS_METHODPR(Constraint, GetWorldPosition, () const, Vector3), AS_CALL_THISCALL));

    // const Vector2& Constraint::GetHighLimit() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& Constraint::GetHighLimit() const", "const Vector2& GetHighLimit() const", AS_METHODPR(Constraint, GetHighLimit, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& Constraint::GetHighLimit() const", "const Vector2& get_highLimit() const", AS_METHODPR(Constraint, GetHighLimit, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& Constraint::GetLowLimit() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& Constraint::GetLowLimit() const", "const Vector2& GetLowLimit() const", AS_METHODPR(Constraint, GetLowLimit, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& Constraint::GetLowLimit() const", "const Vector2& get_lowLimit() const", AS_METHODPR(Constraint, GetLowLimit, () const, const Vector2&), AS_CALL_THISCALL));

    // float Constraint::GetERP() const
    methods.Push(RegisterObjectMethodArgs("float Constraint::GetERP() const", "float GetERP() const", AS_METHODPR(Constraint, GetERP, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Constraint::GetERP() const", "float get_erp() const", AS_METHODPR(Constraint, GetERP, () const, float), AS_CALL_THISCALL));

    // float Constraint::GetCFM() const
    methods.Push(RegisterObjectMethodArgs("float Constraint::GetCFM() const", "float GetCFM() const", AS_METHODPR(Constraint, GetCFM, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Constraint::GetCFM() const", "float get_cfm() const", AS_METHODPR(Constraint, GetCFM, () const, float), AS_CALL_THISCALL));

    // bool Constraint::GetDisableCollision() const
    methods.Push(RegisterObjectMethodArgs("bool Constraint::GetDisableCollision() const", "bool GetDisableCollision() const", AS_METHODPR(Constraint, GetDisableCollision, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Constraint::GetDisableCollision() const", "bool get_disableCollision() const", AS_METHODPR(Constraint, GetDisableCollision, () const, bool), AS_CALL_THISCALL));

    // void Constraint::ReleaseConstraint()
    methods.Push(RegisterObjectMethodArgs("void Constraint::ReleaseConstraint()", "void ReleaseConstraint()", AS_METHODPR(Constraint, ReleaseConstraint, (), void), AS_CALL_THISCALL));

    // void Constraint::ApplyFrames()
    methods.Push(RegisterObjectMethodArgs("void Constraint::ApplyFrames()", "void ApplyFrames()", AS_METHODPR(Constraint, ApplyFrames, (), void), AS_CALL_THISCALL));
}

// void ConvexData::BuildHull(const PODVector<Vector3>& vertices)
#ifdef URHO3D_PHYSICS
// void ConvexData::BuildHull(const PODVector<Vector3>& vertices) | File: ../Physics/CollisionShape.h
static void ConvexData_BuildHull_PODVectorVector3(ConvexData* ptr, CScriptArray* vertices_conv)
{
    PODVector<Vector3> vertices = ArrayToPODVector<Vector3>(vertices_conv);
    ptr->BuildHull(vertices);
}
#endif


// struct ConvexData | File: ../Physics/CollisionShape.h
void CollectMembers_ConvexData(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionGeometryData(methods);

    // void ConvexData::BuildHull(const PODVector<Vector3>& vertices)
    methods.Push(RegisterObjectMethodArgs("void ConvexData::BuildHull(const PODVector<Vector3>& vertices)", "void BuildHull(Array<Vector3>@+)", AS_FUNCTION_OBJFIRST(ConvexData_BuildHull_PODVectorVector3), AS_CALL_CDECL_OBJFIRST));
}

// struct DelayedWorldTransform | File: ../Physics/PhysicsWorld.h
void CollectMembers_DelayedWorldTransform(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct GImpactMeshData | File: ../Physics/CollisionShape.h
void CollectMembers_GImpactMeshData(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionGeometryData(methods);
}

// struct HeightfieldData | File: ../Physics/CollisionShape.h
void CollectMembers_HeightfieldData(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionGeometryData(methods);
}

// struct ManifoldPair | File: ../Physics/PhysicsWorld.h
void CollectMembers_ManifoldPair(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct PhysicsRaycastResult | File: ../Physics/PhysicsWorld.h
void CollectMembers_PhysicsRaycastResult(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool PhysicsRaycastResult::operator!=(const PhysicsRaycastResult& rhs) const
    // Only operator== is needed
}

// class PhysicsWorld | File: ../Physics/PhysicsWorld.h
void CollectMembers_PhysicsWorld(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // void PhysicsWorld::ConvexCast(PhysicsRaycastResult& result, btCollisionShape* shape, const Vector3& startPos, const Quaternion& startRot, const Vector3& endPos, const Quaternion& endRot, unsigned collisionMask=M_MAX_UNSIGNED)
    // Error: type "btCollisionShape*" can not automatically bind

    // void PhysicsWorld::GetCollidingBodies(PODVector<RigidBody*>& result, const RigidBody* body)
    // Error: type "PODVector<RigidBody*>&" can not automatically bind

    // CollisionGeometryDataCache& PhysicsWorld::GetConvexCache()
    // Error: type "CollisionGeometryDataCache&" can not automatically bind

    // CollisionGeometryDataCache& PhysicsWorld::GetGImpactTrimeshCache()
    // Error: type "CollisionGeometryDataCache&" can not automatically bind

    // void PhysicsWorld::GetRigidBodies(PODVector<RigidBody*>& result, const BoundingBox& box, unsigned collisionMask=M_MAX_UNSIGNED)
    // Error: type "PODVector<RigidBody*>&" can not automatically bind

    // void PhysicsWorld::GetRigidBodies(PODVector<RigidBody*>& result, const RigidBody* body)
    // Error: type "PODVector<RigidBody*>&" can not automatically bind

    // void PhysicsWorld::GetRigidBodies(PODVector<RigidBody*>& result, const Sphere& sphere, unsigned collisionMask=M_MAX_UNSIGNED)
    // Error: type "PODVector<RigidBody*>&" can not automatically bind

    // CollisionGeometryDataCache& PhysicsWorld::GetTriMeshCache()
    // Error: type "CollisionGeometryDataCache&" can not automatically bind

    // btDiscreteDynamicsWorld* PhysicsWorld::GetWorld()
    // Error: type "btDiscreteDynamicsWorld*" can not automatically bind

    // void PhysicsWorld::Raycast(PODVector<PhysicsRaycastResult>& result, const Ray& ray, float maxDistance, unsigned collisionMask=M_MAX_UNSIGNED)
    // Error: type "PODVector<PhysicsRaycastResult>&" can not automatically bind

    // void PhysicsWorld::draw3dText(const btVector3& location, const char* textString) override
    // Error: type "const btVector3&" can not automatically bind

    // void PhysicsWorld::drawContactPoint(const btVector3& pointOnB, const btVector3& normalOnB, btScalar distance, int lifeTime, const btVector3& color) override
    // Error: type "const btVector3&" can not automatically bind

    // void PhysicsWorld::drawLine(const btVector3& from, const btVector3& to, const btVector3& color) override
    // Error: type "const btVector3&" can not automatically bind

    // bool PhysicsWorld::isVisible(const btVector3& aabbMin, const btVector3& aabbMax) override
    // Error: type "const btVector3&" can not automatically bind

    // void PhysicsWorld::reportErrorWarning(const char* warningString) override
    // Error: type "const char*" can not automatically bind

    // void PhysicsWorld::setDebugMode(int debugMode) override
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::setDebugMode(int debugMode) override", "void setDebugMode(int)", AS_METHODPR(PhysicsWorld, setDebugMode, (int), void), AS_CALL_THISCALL));

    // int PhysicsWorld::getDebugMode() const override
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld::getDebugMode() const override", "int getDebugMode() const", AS_METHODPR(PhysicsWorld, getDebugMode, () const, int), AS_CALL_THISCALL));

    // void PhysicsWorld::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(PhysicsWorld, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::Update(float timeStep)", "void Update(float)", AS_METHODPR(PhysicsWorld, Update, (float), void), AS_CALL_THISCALL));

    // void PhysicsWorld::UpdateCollisions()
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::UpdateCollisions()", "void UpdateCollisions()", AS_METHODPR(PhysicsWorld, UpdateCollisions, (), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetFps(int fps)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetFps(int fps)", "void SetFps(int)", AS_METHODPR(PhysicsWorld, SetFps, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetFps(int fps)", "void set_fps(int)", AS_METHODPR(PhysicsWorld, SetFps, (int), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetGravity(const Vector3& gravity)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetGravity(const Vector3& gravity)", "void SetGravity(const Vector3&in)", AS_METHODPR(PhysicsWorld, SetGravity, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetGravity(const Vector3& gravity)", "void set_gravity(const Vector3&in)", AS_METHODPR(PhysicsWorld, SetGravity, (const Vector3&), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetMaxSubSteps(int num)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetMaxSubSteps(int num)", "void SetMaxSubSteps(int)", AS_METHODPR(PhysicsWorld, SetMaxSubSteps, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetMaxSubSteps(int num)", "void set_maxSubSteps(int)", AS_METHODPR(PhysicsWorld, SetMaxSubSteps, (int), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetNumIterations(int num)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetNumIterations(int num)", "void SetNumIterations(int)", AS_METHODPR(PhysicsWorld, SetNumIterations, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetNumIterations(int num)", "void set_numIterations(int)", AS_METHODPR(PhysicsWorld, SetNumIterations, (int), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetUpdateEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetUpdateEnabled(bool enable)", "void SetUpdateEnabled(bool)", AS_METHODPR(PhysicsWorld, SetUpdateEnabled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetUpdateEnabled(bool enable)", "void set_updateEnabled(bool)", AS_METHODPR(PhysicsWorld, SetUpdateEnabled, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetInterpolation(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetInterpolation(bool enable)", "void SetInterpolation(bool)", AS_METHODPR(PhysicsWorld, SetInterpolation, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetInterpolation(bool enable)", "void set_interpolation(bool)", AS_METHODPR(PhysicsWorld, SetInterpolation, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetInternalEdge(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetInternalEdge(bool enable)", "void SetInternalEdge(bool)", AS_METHODPR(PhysicsWorld, SetInternalEdge, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetInternalEdge(bool enable)", "void set_internalEdge(bool)", AS_METHODPR(PhysicsWorld, SetInternalEdge, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetSplitImpulse(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetSplitImpulse(bool enable)", "void SetSplitImpulse(bool)", AS_METHODPR(PhysicsWorld, SetSplitImpulse, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetSplitImpulse(bool enable)", "void set_splitImpulse(bool)", AS_METHODPR(PhysicsWorld, SetSplitImpulse, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetMaxNetworkAngularVelocity(float velocity)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetMaxNetworkAngularVelocity(float velocity)", "void SetMaxNetworkAngularVelocity(float)", AS_METHODPR(PhysicsWorld, SetMaxNetworkAngularVelocity, (float), void), AS_CALL_THISCALL));

    // void PhysicsWorld::RaycastSingle(PhysicsRaycastResult& result, const Ray& ray, float maxDistance, unsigned collisionMask=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::RaycastSingle(PhysicsRaycastResult& result, const Ray& ray, float maxDistance, unsigned collisionMask=M_MAX_UNSIGNED)", "void RaycastSingle(PhysicsRaycastResult&, const Ray&in, float, uint = M_MAX_UNSIGNED)", AS_METHODPR(PhysicsWorld, RaycastSingle, (PhysicsRaycastResult&, const Ray&, float, unsigned), void), AS_CALL_THISCALL));

    // void PhysicsWorld::RaycastSingleSegmented(PhysicsRaycastResult& result, const Ray& ray, float maxDistance, float segmentDistance, unsigned collisionMask=M_MAX_UNSIGNED, float overlapDistance=0.1f)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::RaycastSingleSegmented(PhysicsRaycastResult& result, const Ray& ray, float maxDistance, float segmentDistance, unsigned collisionMask=M_MAX_UNSIGNED, float overlapDistance=0.1f)", "void RaycastSingleSegmented(PhysicsRaycastResult&, const Ray&in, float, float, uint = M_MAX_UNSIGNED, float = 0.1f)", AS_METHODPR(PhysicsWorld, RaycastSingleSegmented, (PhysicsRaycastResult&, const Ray&, float, float, unsigned, float), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SphereCast(PhysicsRaycastResult& result, const Ray& ray, float radius, float maxDistance, unsigned collisionMask=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SphereCast(PhysicsRaycastResult& result, const Ray& ray, float radius, float maxDistance, unsigned collisionMask=M_MAX_UNSIGNED)", "void SphereCast(PhysicsRaycastResult&, const Ray&in, float, float, uint = M_MAX_UNSIGNED)", AS_METHODPR(PhysicsWorld, SphereCast, (PhysicsRaycastResult&, const Ray&, float, float, unsigned), void), AS_CALL_THISCALL));

    // void PhysicsWorld::ConvexCast(PhysicsRaycastResult& result, CollisionShape* shape, const Vector3& startPos, const Quaternion& startRot, const Vector3& endPos, const Quaternion& endRot, unsigned collisionMask=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::ConvexCast(PhysicsRaycastResult& result, CollisionShape* shape, const Vector3& startPos, const Quaternion& startRot, const Vector3& endPos, const Quaternion& endRot, unsigned collisionMask=M_MAX_UNSIGNED)", "void ConvexCast(PhysicsRaycastResult&, CollisionShape@+, const Vector3&in, const Quaternion&in, const Vector3&in, const Quaternion&in, uint = M_MAX_UNSIGNED)", AS_METHODPR(PhysicsWorld, ConvexCast, (PhysicsRaycastResult&, CollisionShape*, const Vector3&, const Quaternion&, const Vector3&, const Quaternion&, unsigned), void), AS_CALL_THISCALL));

    // void PhysicsWorld::RemoveCachedGeometry(Model* model)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::RemoveCachedGeometry(Model* model)", "void RemoveCachedGeometry(Model@+)", AS_METHODPR(PhysicsWorld, RemoveCachedGeometry, (Model*), void), AS_CALL_THISCALL));

    // Vector3 PhysicsWorld::GetGravity() const
    methods.Push(RegisterObjectMethodArgs("Vector3 PhysicsWorld::GetGravity() const", "Vector3 GetGravity() const", AS_METHODPR(PhysicsWorld, GetGravity, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 PhysicsWorld::GetGravity() const", "Vector3 get_gravity() const", AS_METHODPR(PhysicsWorld, GetGravity, () const, Vector3), AS_CALL_THISCALL));

    // int PhysicsWorld::GetMaxSubSteps() const
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld::GetMaxSubSteps() const", "int GetMaxSubSteps() const", AS_METHODPR(PhysicsWorld, GetMaxSubSteps, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld::GetMaxSubSteps() const", "int get_maxSubSteps() const", AS_METHODPR(PhysicsWorld, GetMaxSubSteps, () const, int), AS_CALL_THISCALL));

    // int PhysicsWorld::GetNumIterations() const
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld::GetNumIterations() const", "int GetNumIterations() const", AS_METHODPR(PhysicsWorld, GetNumIterations, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld::GetNumIterations() const", "int get_numIterations() const", AS_METHODPR(PhysicsWorld, GetNumIterations, () const, int), AS_CALL_THISCALL));

    // bool PhysicsWorld::IsUpdateEnabled() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::IsUpdateEnabled() const", "bool IsUpdateEnabled() const", AS_METHODPR(PhysicsWorld, IsUpdateEnabled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::IsUpdateEnabled() const", "bool get_updateEnabled() const", AS_METHODPR(PhysicsWorld, IsUpdateEnabled, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld::GetInterpolation() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::GetInterpolation() const", "bool GetInterpolation() const", AS_METHODPR(PhysicsWorld, GetInterpolation, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::GetInterpolation() const", "bool get_interpolation() const", AS_METHODPR(PhysicsWorld, GetInterpolation, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld::GetInternalEdge() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::GetInternalEdge() const", "bool GetInternalEdge() const", AS_METHODPR(PhysicsWorld, GetInternalEdge, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::GetInternalEdge() const", "bool get_internalEdge() const", AS_METHODPR(PhysicsWorld, GetInternalEdge, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld::GetSplitImpulse() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::GetSplitImpulse() const", "bool GetSplitImpulse() const", AS_METHODPR(PhysicsWorld, GetSplitImpulse, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::GetSplitImpulse() const", "bool get_splitImpulse() const", AS_METHODPR(PhysicsWorld, GetSplitImpulse, () const, bool), AS_CALL_THISCALL));

    // int PhysicsWorld::GetFps() const
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld::GetFps() const", "int GetFps() const", AS_METHODPR(PhysicsWorld, GetFps, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld::GetFps() const", "int get_fps() const", AS_METHODPR(PhysicsWorld, GetFps, () const, int), AS_CALL_THISCALL));

    // float PhysicsWorld::GetMaxNetworkAngularVelocity() const
    methods.Push(RegisterObjectMethodArgs("float PhysicsWorld::GetMaxNetworkAngularVelocity() const", "float GetMaxNetworkAngularVelocity() const", AS_METHODPR(PhysicsWorld, GetMaxNetworkAngularVelocity, () const, float), AS_CALL_THISCALL));

    // void PhysicsWorld::AddRigidBody(RigidBody* body)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::AddRigidBody(RigidBody* body)", "void AddRigidBody(RigidBody@+)", AS_METHODPR(PhysicsWorld, AddRigidBody, (RigidBody*), void), AS_CALL_THISCALL));

    // void PhysicsWorld::RemoveRigidBody(RigidBody* body)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::RemoveRigidBody(RigidBody* body)", "void RemoveRigidBody(RigidBody@+)", AS_METHODPR(PhysicsWorld, RemoveRigidBody, (RigidBody*), void), AS_CALL_THISCALL));

    // void PhysicsWorld::AddCollisionShape(CollisionShape* shape)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::AddCollisionShape(CollisionShape* shape)", "void AddCollisionShape(CollisionShape@+)", AS_METHODPR(PhysicsWorld, AddCollisionShape, (CollisionShape*), void), AS_CALL_THISCALL));

    // void PhysicsWorld::RemoveCollisionShape(CollisionShape* shape)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::RemoveCollisionShape(CollisionShape* shape)", "void RemoveCollisionShape(CollisionShape@+)", AS_METHODPR(PhysicsWorld, RemoveCollisionShape, (CollisionShape*), void), AS_CALL_THISCALL));

    // void PhysicsWorld::AddConstraint(Constraint* constraint)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::AddConstraint(Constraint* constraint)", "void AddConstraint(Constraint@+)", AS_METHODPR(PhysicsWorld, AddConstraint, (Constraint*), void), AS_CALL_THISCALL));

    // void PhysicsWorld::RemoveConstraint(Constraint* constraint)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::RemoveConstraint(Constraint* constraint)", "void RemoveConstraint(Constraint@+)", AS_METHODPR(PhysicsWorld, RemoveConstraint, (Constraint*), void), AS_CALL_THISCALL));

    // void PhysicsWorld::AddDelayedWorldTransform(const DelayedWorldTransform& transform)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::AddDelayedWorldTransform(const DelayedWorldTransform& transform)", "void AddDelayedWorldTransform(const DelayedWorldTransform&in)", AS_METHODPR(PhysicsWorld, AddDelayedWorldTransform, (const DelayedWorldTransform&), void), AS_CALL_THISCALL));

    // void PhysicsWorld::DrawDebugGeometry(bool depthTest)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::DrawDebugGeometry(bool depthTest)", "void DrawDebugGeometry(bool)", AS_METHODPR(PhysicsWorld, DrawDebugGeometry, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetDebugRenderer(DebugRenderer* debug)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetDebugRenderer(DebugRenderer* debug)", "void SetDebugRenderer(DebugRenderer@+)", AS_METHODPR(PhysicsWorld, SetDebugRenderer, (DebugRenderer*), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetDebugDepthTest(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetDebugDepthTest(bool enable)", "void SetDebugDepthTest(bool)", AS_METHODPR(PhysicsWorld, SetDebugDepthTest, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld::CleanupGeometryCache()
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::CleanupGeometryCache()", "void CleanupGeometryCache()", AS_METHODPR(PhysicsWorld, CleanupGeometryCache, (), void), AS_CALL_THISCALL));

    // void PhysicsWorld::SetApplyingTransforms(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld::SetApplyingTransforms(bool enable)", "void SetApplyingTransforms(bool)", AS_METHODPR(PhysicsWorld, SetApplyingTransforms, (bool), void), AS_CALL_THISCALL));

    // bool PhysicsWorld::IsApplyingTransforms() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::IsApplyingTransforms() const", "bool IsApplyingTransforms() const", AS_METHODPR(PhysicsWorld, IsApplyingTransforms, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld::IsSimulating() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld::IsSimulating() const", "bool IsSimulating() const", AS_METHODPR(PhysicsWorld, IsSimulating, () const, bool), AS_CALL_THISCALL));
}

// struct PhysicsWorldConfig | File: ../Physics/PhysicsWorld.h
void CollectMembers_PhysicsWorldConfig(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class RaycastVehicle | File: ../Physics/RaycastVehicle.h
void CollectMembers_RaycastVehicle(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_LogicComponent(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // VariantVector RaycastVehicle::GetWheelDataAttr() const
    // Error: type "VariantVector" can not automatically bind

    // void RaycastVehicle::SetWheelDataAttr(const VariantVector& value)
    // Error: type "const VariantVector&" can not automatically bind

    // void RaycastVehicle::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(RaycastVehicle, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void RaycastVehicle::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(RaycastVehicle, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void RaycastVehicle::AddWheel(Node* wheelNode, Vector3 wheelDirection, Vector3 wheelAxle, float restLength, float wheelRadius, bool frontWheel)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::AddWheel(Node* wheelNode, Vector3 wheelDirection, Vector3 wheelAxle, float restLength, float wheelRadius, bool frontWheel)", "void AddWheel(Node@+, Vector3, Vector3, float, float, bool)", AS_METHODPR(RaycastVehicle, AddWheel, (Node*, Vector3, Vector3, float, float, bool), void), AS_CALL_THISCALL));

    // void RaycastVehicle::ResetSuspension()
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::ResetSuspension()", "void ResetSuspension()", AS_METHODPR(RaycastVehicle, ResetSuspension, (), void), AS_CALL_THISCALL));

    // void RaycastVehicle::UpdateWheelTransform(int wheel, bool interpolated)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::UpdateWheelTransform(int wheel, bool interpolated)", "void UpdateWheelTransform(int, bool)", AS_METHODPR(RaycastVehicle, UpdateWheelTransform, (int, bool), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetSteeringValue(int wheel, float steeringValue)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetSteeringValue(int wheel, float steeringValue)", "void SetSteeringValue(int, float)", AS_METHODPR(RaycastVehicle, SetSteeringValue, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelSuspensionStiffness(int wheel, float stiffness)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelSuspensionStiffness(int wheel, float stiffness)", "void SetWheelSuspensionStiffness(int, float)", AS_METHODPR(RaycastVehicle, SetWheelSuspensionStiffness, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelMaxSuspensionForce(int wheel, float force)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelMaxSuspensionForce(int wheel, float force)", "void SetWheelMaxSuspensionForce(int, float)", AS_METHODPR(RaycastVehicle, SetWheelMaxSuspensionForce, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelDampingRelaxation(int wheel, float damping)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelDampingRelaxation(int wheel, float damping)", "void SetWheelDampingRelaxation(int, float)", AS_METHODPR(RaycastVehicle, SetWheelDampingRelaxation, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelDampingCompression(int wheel, float compression)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelDampingCompression(int wheel, float compression)", "void SetWheelDampingCompression(int, float)", AS_METHODPR(RaycastVehicle, SetWheelDampingCompression, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelFrictionSlip(int wheel, float slip)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelFrictionSlip(int wheel, float slip)", "void SetWheelFrictionSlip(int, float)", AS_METHODPR(RaycastVehicle, SetWheelFrictionSlip, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelRollInfluence(int wheel, float rollInfluence)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelRollInfluence(int wheel, float rollInfluence)", "void SetWheelRollInfluence(int, float)", AS_METHODPR(RaycastVehicle, SetWheelRollInfluence, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetEngineForce(int wheel, float force)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetEngineForce(int wheel, float force)", "void SetEngineForce(int, float)", AS_METHODPR(RaycastVehicle, SetEngineForce, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetBrake(int wheel, float force)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetBrake(int wheel, float force)", "void SetBrake(int, float)", AS_METHODPR(RaycastVehicle, SetBrake, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelRadius(int wheel, float wheelRadius)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelRadius(int wheel, float wheelRadius)", "void SetWheelRadius(int, float)", AS_METHODPR(RaycastVehicle, SetWheelRadius, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::ResetWheels()
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::ResetWheels()", "void ResetWheels()", AS_METHODPR(RaycastVehicle, ResetWheels, (), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelSkidInfo(int wheel, float factor)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelSkidInfo(int wheel, float factor)", "void SetWheelSkidInfo(int, float)", AS_METHODPR(RaycastVehicle, SetWheelSkidInfo, (int, float), void), AS_CALL_THISCALL));

    // bool RaycastVehicle::WheelIsGrounded(int wheel) const
    methods.Push(RegisterObjectMethodArgs("bool RaycastVehicle::WheelIsGrounded(int wheel) const", "bool WheelIsGrounded(int) const", AS_METHODPR(RaycastVehicle, WheelIsGrounded, (int) const, bool), AS_CALL_THISCALL));

    // void RaycastVehicle::SetMaxSuspensionTravel(int wheel, float maxSuspensionTravel)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetMaxSuspensionTravel(int wheel, float maxSuspensionTravel)", "void SetMaxSuspensionTravel(int, float)", AS_METHODPR(RaycastVehicle, SetMaxSuspensionTravel, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelDirection(int wheel, Vector3 direction)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelDirection(int wheel, Vector3 direction)", "void SetWheelDirection(int, Vector3)", AS_METHODPR(RaycastVehicle, SetWheelDirection, (int, Vector3), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelAxle(int wheel, Vector3 axle)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelAxle(int wheel, Vector3 axle)", "void SetWheelAxle(int, Vector3)", AS_METHODPR(RaycastVehicle, SetWheelAxle, (int, Vector3), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetMaxSideSlipSpeed(float speed)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetMaxSideSlipSpeed(float speed)", "void SetMaxSideSlipSpeed(float)", AS_METHODPR(RaycastVehicle, SetMaxSideSlipSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetMaxSideSlipSpeed(float speed)", "void set_maxSideSlipSpeed(float)", AS_METHODPR(RaycastVehicle, SetMaxSideSlipSpeed, (float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelSkidInfoCumulative(int wheel, float skid)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelSkidInfoCumulative(int wheel, float skid)", "void SetWheelSkidInfoCumulative(int, float)", AS_METHODPR(RaycastVehicle, SetWheelSkidInfoCumulative, (int, float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetInAirRPM(float rpm)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetInAirRPM(float rpm)", "void SetInAirRPM(float)", AS_METHODPR(RaycastVehicle, SetInAirRPM, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetInAirRPM(float rpm)", "void set_inAirRPM(float)", AS_METHODPR(RaycastVehicle, SetInAirRPM, (float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::SetCoordinateSystem(const IntVector3& coordinateSystem=RIGHT_FORWARD_UP)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetCoordinateSystem(const IntVector3& coordinateSystem=RIGHT_FORWARD_UP)", "void SetCoordinateSystem(const IntVector3&in = RIGHT_FORWARD_UP)", AS_METHODPR(RaycastVehicle, SetCoordinateSystem, (const IntVector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetCoordinateSystem(const IntVector3& coordinateSystem=RIGHT_FORWARD_UP)", "void set_coordinateSystem(const IntVector3&in = RIGHT_FORWARD_UP)", AS_METHODPR(RaycastVehicle, SetCoordinateSystem, (const IntVector3&), void), AS_CALL_THISCALL));

    // void RaycastVehicle::Init()
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::Init()", "void Init()", AS_METHODPR(RaycastVehicle, Init, (), void), AS_CALL_THISCALL));

    // void RaycastVehicle::FixedUpdate(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::FixedUpdate(float timeStep) override", "void FixedUpdate(float)", AS_METHODPR(RaycastVehicle, FixedUpdate, (float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::FixedPostUpdate(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::FixedPostUpdate(float timeStep) override", "void FixedPostUpdate(float)", AS_METHODPR(RaycastVehicle, FixedPostUpdate, (float), void), AS_CALL_THISCALL));

    // void RaycastVehicle::PostUpdate(float timeStep) override
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::PostUpdate(float timeStep) override", "void PostUpdate(float)", AS_METHODPR(RaycastVehicle, PostUpdate, (float), void), AS_CALL_THISCALL));

    // Vector3 RaycastVehicle::GetWheelPosition(int wheel)
    methods.Push(RegisterObjectMethodArgs("Vector3 RaycastVehicle::GetWheelPosition(int wheel)", "Vector3 GetWheelPosition(int)", AS_METHODPR(RaycastVehicle, GetWheelPosition, (int), Vector3), AS_CALL_THISCALL));

    // Quaternion RaycastVehicle::GetWheelRotation(int wheel)
    methods.Push(RegisterObjectMethodArgs("Quaternion RaycastVehicle::GetWheelRotation(int wheel)", "Quaternion GetWheelRotation(int)", AS_METHODPR(RaycastVehicle, GetWheelRotation, (int), Quaternion), AS_CALL_THISCALL));

    // Vector3 RaycastVehicle::GetWheelConnectionPoint(int wheel) const
    methods.Push(RegisterObjectMethodArgs("Vector3 RaycastVehicle::GetWheelConnectionPoint(int wheel) const", "Vector3 GetWheelConnectionPoint(int) const", AS_METHODPR(RaycastVehicle, GetWheelConnectionPoint, (int) const, Vector3), AS_CALL_THISCALL));

    // int RaycastVehicle::GetNumWheels() const
    methods.Push(RegisterObjectMethodArgs("int RaycastVehicle::GetNumWheels() const", "int GetNumWheels() const", AS_METHODPR(RaycastVehicle, GetNumWheels, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int RaycastVehicle::GetNumWheels() const", "int get_numWheels() const", AS_METHODPR(RaycastVehicle, GetNumWheels, () const, int), AS_CALL_THISCALL));

    // Node* RaycastVehicle::GetWheelNode(int wheel) const
    methods.Push(RegisterObjectMethodArgs("Node* RaycastVehicle::GetWheelNode(int wheel) const", "Node@+ GetWheelNode(int) const", AS_METHODPR(RaycastVehicle, GetWheelNode, (int) const, Node*), AS_CALL_THISCALL));

    // float RaycastVehicle::GetSteeringValue(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetSteeringValue(int wheel) const", "float GetSteeringValue(int) const", AS_METHODPR(RaycastVehicle, GetSteeringValue, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelSuspensionStiffness(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelSuspensionStiffness(int wheel) const", "float GetWheelSuspensionStiffness(int) const", AS_METHODPR(RaycastVehicle, GetWheelSuspensionStiffness, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelMaxSuspensionForce(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelMaxSuspensionForce(int wheel) const", "float GetWheelMaxSuspensionForce(int) const", AS_METHODPR(RaycastVehicle, GetWheelMaxSuspensionForce, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelDampingRelaxation(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelDampingRelaxation(int wheel) const", "float GetWheelDampingRelaxation(int) const", AS_METHODPR(RaycastVehicle, GetWheelDampingRelaxation, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelDampingCompression(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelDampingCompression(int wheel) const", "float GetWheelDampingCompression(int) const", AS_METHODPR(RaycastVehicle, GetWheelDampingCompression, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelFrictionSlip(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelFrictionSlip(int wheel) const", "float GetWheelFrictionSlip(int) const", AS_METHODPR(RaycastVehicle, GetWheelFrictionSlip, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelRollInfluence(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelRollInfluence(int wheel) const", "float GetWheelRollInfluence(int) const", AS_METHODPR(RaycastVehicle, GetWheelRollInfluence, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetEngineForce(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetEngineForce(int wheel) const", "float GetEngineForce(int) const", AS_METHODPR(RaycastVehicle, GetEngineForce, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetBrake(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetBrake(int wheel) const", "float GetBrake(int) const", AS_METHODPR(RaycastVehicle, GetBrake, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelRadius(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelRadius(int wheel) const", "float GetWheelRadius(int) const", AS_METHODPR(RaycastVehicle, GetWheelRadius, (int) const, float), AS_CALL_THISCALL));

    // void RaycastVehicle::SetWheelRestLength(int wheel, float length)
    methods.Push(RegisterObjectMethodArgs("void RaycastVehicle::SetWheelRestLength(int wheel, float length)", "void SetWheelRestLength(int, float)", AS_METHODPR(RaycastVehicle, SetWheelRestLength, (int, float), void), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelRestLength(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelRestLength(int wheel) const", "float GetWheelRestLength(int) const", AS_METHODPR(RaycastVehicle, GetWheelRestLength, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetMaxSuspensionTravel(int wheel)
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetMaxSuspensionTravel(int wheel)", "float GetMaxSuspensionTravel(int)", AS_METHODPR(RaycastVehicle, GetMaxSuspensionTravel, (int), float), AS_CALL_THISCALL));

    // Vector3 RaycastVehicle::GetWheelAxle(int wheel) const
    methods.Push(RegisterObjectMethodArgs("Vector3 RaycastVehicle::GetWheelAxle(int wheel) const", "Vector3 GetWheelAxle(int) const", AS_METHODPR(RaycastVehicle, GetWheelAxle, (int) const, Vector3), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelSideSlipSpeed(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelSideSlipSpeed(int wheel) const", "float GetWheelSideSlipSpeed(int) const", AS_METHODPR(RaycastVehicle, GetWheelSideSlipSpeed, (int) const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetMaxSideSlipSpeed() const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetMaxSideSlipSpeed() const", "float GetMaxSideSlipSpeed() const", AS_METHODPR(RaycastVehicle, GetMaxSideSlipSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetMaxSideSlipSpeed() const", "float get_maxSideSlipSpeed() const", AS_METHODPR(RaycastVehicle, GetMaxSideSlipSpeed, () const, float), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelSkidInfo(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelSkidInfo(int wheel) const", "float GetWheelSkidInfo(int) const", AS_METHODPR(RaycastVehicle, GetWheelSkidInfo, (int) const, float), AS_CALL_THISCALL));

    // Vector3 RaycastVehicle::GetWheelDirection(int wheel) const
    methods.Push(RegisterObjectMethodArgs("Vector3 RaycastVehicle::GetWheelDirection(int wheel) const", "Vector3 GetWheelDirection(int) const", AS_METHODPR(RaycastVehicle, GetWheelDirection, (int) const, Vector3), AS_CALL_THISCALL));

    // float RaycastVehicle::GetWheelSkidInfoCumulative(int wheel) const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetWheelSkidInfoCumulative(int wheel) const", "float GetWheelSkidInfoCumulative(int) const", AS_METHODPR(RaycastVehicle, GetWheelSkidInfoCumulative, (int) const, float), AS_CALL_THISCALL));

    // bool RaycastVehicle::IsFrontWheel(int wheel) const
    methods.Push(RegisterObjectMethodArgs("bool RaycastVehicle::IsFrontWheel(int wheel) const", "bool IsFrontWheel(int) const", AS_METHODPR(RaycastVehicle, IsFrontWheel, (int) const, bool), AS_CALL_THISCALL));

    // Vector3 RaycastVehicle::GetContactPosition(int wheel) const
    methods.Push(RegisterObjectMethodArgs("Vector3 RaycastVehicle::GetContactPosition(int wheel) const", "Vector3 GetContactPosition(int) const", AS_METHODPR(RaycastVehicle, GetContactPosition, (int) const, Vector3), AS_CALL_THISCALL));

    // Vector3 RaycastVehicle::GetContactNormal(int wheel) const
    methods.Push(RegisterObjectMethodArgs("Vector3 RaycastVehicle::GetContactNormal(int wheel) const", "Vector3 GetContactNormal(int) const", AS_METHODPR(RaycastVehicle, GetContactNormal, (int) const, Vector3), AS_CALL_THISCALL));

    // float RaycastVehicle::GetInAirRPM() const
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetInAirRPM() const", "float GetInAirRPM() const", AS_METHODPR(RaycastVehicle, GetInAirRPM, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RaycastVehicle::GetInAirRPM() const", "float get_inAirRPM() const", AS_METHODPR(RaycastVehicle, GetInAirRPM, () const, float), AS_CALL_THISCALL));

    // IntVector3 RaycastVehicle::GetCoordinateSystem() const
    methods.Push(RegisterObjectMethodArgs("IntVector3 RaycastVehicle::GetCoordinateSystem() const", "IntVector3 GetCoordinateSystem() const", AS_METHODPR(RaycastVehicle, GetCoordinateSystem, () const, IntVector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("IntVector3 RaycastVehicle::GetCoordinateSystem() const", "IntVector3 get_coordinateSystem() const", AS_METHODPR(RaycastVehicle, GetCoordinateSystem, () const, IntVector3), AS_CALL_THISCALL));
}

// class RigidBody | File: ../Physics/RigidBody.h
void CollectMembers_RigidBody(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");
    Remove(methods, "virtual void Component::OnSetEnabled()");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // btRigidBody* RigidBody::GetBody() const
    // Error: type "btRigidBody*" can not automatically bind

    // void RigidBody::GetCollidingBodies(PODVector<RigidBody*>& result) const
    // Error: type "PODVector<RigidBody*>&" can not automatically bind

    // btCompoundShape* RigidBody::GetCompoundShape() const
    // Error: type "btCompoundShape*" can not automatically bind

    // const PODVector<unsigned char>& RigidBody::GetNetAngularVelocityAttr() const
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void RigidBody::SetNetAngularVelocityAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void RigidBody::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(RigidBody, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void RigidBody::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void RigidBody::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(RigidBody, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void RigidBody::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void RigidBody::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(RigidBody, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void RigidBody::SetMass(float mass)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetMass(float mass)", "void SetMass(float)", AS_METHODPR(RigidBody, SetMass, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetMass(float mass)", "void set_mass(float)", AS_METHODPR(RigidBody, SetMass, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetPosition(const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetPosition(const Vector3& position)", "void SetPosition(const Vector3&in)", AS_METHODPR(RigidBody, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetPosition(const Vector3& position)", "void set_position(const Vector3&in)", AS_METHODPR(RigidBody, SetPosition, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::SetRotation(const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetRotation(const Quaternion& rotation)", "void SetRotation(const Quaternion&in)", AS_METHODPR(RigidBody, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetRotation(const Quaternion& rotation)", "void set_rotation(const Quaternion&in)", AS_METHODPR(RigidBody, SetRotation, (const Quaternion&), void), AS_CALL_THISCALL));

    // void RigidBody::SetTransform(const Vector3& position, const Quaternion& rotation)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetTransform(const Vector3& position, const Quaternion& rotation)", "void SetTransform(const Vector3&in, const Quaternion&in)", AS_METHODPR(RigidBody, SetTransform, (const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void RigidBody::SetLinearVelocity(const Vector3& velocity)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetLinearVelocity(const Vector3& velocity)", "void SetLinearVelocity(const Vector3&in)", AS_METHODPR(RigidBody, SetLinearVelocity, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetLinearVelocity(const Vector3& velocity)", "void set_linearVelocity(const Vector3&in)", AS_METHODPR(RigidBody, SetLinearVelocity, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::SetLinearFactor(const Vector3& factor)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetLinearFactor(const Vector3& factor)", "void SetLinearFactor(const Vector3&in)", AS_METHODPR(RigidBody, SetLinearFactor, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetLinearFactor(const Vector3& factor)", "void set_linearFactor(const Vector3&in)", AS_METHODPR(RigidBody, SetLinearFactor, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::SetLinearRestThreshold(float threshold)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetLinearRestThreshold(float threshold)", "void SetLinearRestThreshold(float)", AS_METHODPR(RigidBody, SetLinearRestThreshold, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetLinearRestThreshold(float threshold)", "void set_linearRestThreshold(float)", AS_METHODPR(RigidBody, SetLinearRestThreshold, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetLinearDamping(float damping)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetLinearDamping(float damping)", "void SetLinearDamping(float)", AS_METHODPR(RigidBody, SetLinearDamping, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetLinearDamping(float damping)", "void set_linearDamping(float)", AS_METHODPR(RigidBody, SetLinearDamping, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetAngularVelocity(const Vector3& velocity)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAngularVelocity(const Vector3& velocity)", "void SetAngularVelocity(const Vector3&in)", AS_METHODPR(RigidBody, SetAngularVelocity, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAngularVelocity(const Vector3& velocity)", "void set_angularVelocity(const Vector3&in)", AS_METHODPR(RigidBody, SetAngularVelocity, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::SetAngularFactor(const Vector3& factor)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAngularFactor(const Vector3& factor)", "void SetAngularFactor(const Vector3&in)", AS_METHODPR(RigidBody, SetAngularFactor, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAngularFactor(const Vector3& factor)", "void set_angularFactor(const Vector3&in)", AS_METHODPR(RigidBody, SetAngularFactor, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::SetAngularRestThreshold(float threshold)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAngularRestThreshold(float threshold)", "void SetAngularRestThreshold(float)", AS_METHODPR(RigidBody, SetAngularRestThreshold, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAngularRestThreshold(float threshold)", "void set_angularRestThreshold(float)", AS_METHODPR(RigidBody, SetAngularRestThreshold, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetAngularDamping(float damping)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAngularDamping(float damping)", "void SetAngularDamping(float)", AS_METHODPR(RigidBody, SetAngularDamping, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAngularDamping(float damping)", "void set_angularDamping(float)", AS_METHODPR(RigidBody, SetAngularDamping, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetFriction(float friction)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetFriction(float friction)", "void SetFriction(float)", AS_METHODPR(RigidBody, SetFriction, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetFriction(float friction)", "void set_friction(float)", AS_METHODPR(RigidBody, SetFriction, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetAnisotropicFriction(const Vector3& friction)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAnisotropicFriction(const Vector3& friction)", "void SetAnisotropicFriction(const Vector3&in)", AS_METHODPR(RigidBody, SetAnisotropicFriction, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetAnisotropicFriction(const Vector3& friction)", "void set_anisotropicFriction(const Vector3&in)", AS_METHODPR(RigidBody, SetAnisotropicFriction, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::SetRollingFriction(float friction)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetRollingFriction(float friction)", "void SetRollingFriction(float)", AS_METHODPR(RigidBody, SetRollingFriction, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetRollingFriction(float friction)", "void set_rollingFriction(float)", AS_METHODPR(RigidBody, SetRollingFriction, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetRestitution(float restitution)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetRestitution(float restitution)", "void SetRestitution(float)", AS_METHODPR(RigidBody, SetRestitution, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetRestitution(float restitution)", "void set_restitution(float)", AS_METHODPR(RigidBody, SetRestitution, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetContactProcessingThreshold(float threshold)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetContactProcessingThreshold(float threshold)", "void SetContactProcessingThreshold(float)", AS_METHODPR(RigidBody, SetContactProcessingThreshold, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetContactProcessingThreshold(float threshold)", "void set_contactProcessingThreshold(float)", AS_METHODPR(RigidBody, SetContactProcessingThreshold, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetCcdRadius(float radius)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCcdRadius(float radius)", "void SetCcdRadius(float)", AS_METHODPR(RigidBody, SetCcdRadius, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCcdRadius(float radius)", "void set_ccdRadius(float)", AS_METHODPR(RigidBody, SetCcdRadius, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetCcdMotionThreshold(float threshold)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCcdMotionThreshold(float threshold)", "void SetCcdMotionThreshold(float)", AS_METHODPR(RigidBody, SetCcdMotionThreshold, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCcdMotionThreshold(float threshold)", "void set_ccdMotionThreshold(float)", AS_METHODPR(RigidBody, SetCcdMotionThreshold, (float), void), AS_CALL_THISCALL));

    // void RigidBody::SetUseGravity(bool enable)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetUseGravity(bool enable)", "void SetUseGravity(bool)", AS_METHODPR(RigidBody, SetUseGravity, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetUseGravity(bool enable)", "void set_useGravity(bool)", AS_METHODPR(RigidBody, SetUseGravity, (bool), void), AS_CALL_THISCALL));

    // void RigidBody::SetGravityOverride(const Vector3& gravity)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetGravityOverride(const Vector3& gravity)", "void SetGravityOverride(const Vector3&in)", AS_METHODPR(RigidBody, SetGravityOverride, (const Vector3&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetGravityOverride(const Vector3& gravity)", "void set_gravityOverride(const Vector3&in)", AS_METHODPR(RigidBody, SetGravityOverride, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::SetKinematic(bool enable)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetKinematic(bool enable)", "void SetKinematic(bool)", AS_METHODPR(RigidBody, SetKinematic, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetKinematic(bool enable)", "void set_kinematic(bool)", AS_METHODPR(RigidBody, SetKinematic, (bool), void), AS_CALL_THISCALL));

    // void RigidBody::SetTrigger(bool enable)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetTrigger(bool enable)", "void SetTrigger(bool)", AS_METHODPR(RigidBody, SetTrigger, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetTrigger(bool enable)", "void set_trigger(bool)", AS_METHODPR(RigidBody, SetTrigger, (bool), void), AS_CALL_THISCALL));

    // void RigidBody::SetCollisionLayer(unsigned layer)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCollisionLayer(unsigned layer)", "void SetCollisionLayer(uint)", AS_METHODPR(RigidBody, SetCollisionLayer, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCollisionLayer(unsigned layer)", "void set_collisionLayer(uint)", AS_METHODPR(RigidBody, SetCollisionLayer, (unsigned), void), AS_CALL_THISCALL));

    // void RigidBody::SetCollisionMask(unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCollisionMask(unsigned mask)", "void SetCollisionMask(uint)", AS_METHODPR(RigidBody, SetCollisionMask, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCollisionMask(unsigned mask)", "void set_collisionMask(uint)", AS_METHODPR(RigidBody, SetCollisionMask, (unsigned), void), AS_CALL_THISCALL));

    // void RigidBody::SetCollisionLayerAndMask(unsigned layer, unsigned mask)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCollisionLayerAndMask(unsigned layer, unsigned mask)", "void SetCollisionLayerAndMask(uint, uint)", AS_METHODPR(RigidBody, SetCollisionLayerAndMask, (unsigned, unsigned), void), AS_CALL_THISCALL));

    // void RigidBody::SetCollisionEventMode(CollisionEventMode mode)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCollisionEventMode(CollisionEventMode mode)", "void SetCollisionEventMode(CollisionEventMode)", AS_METHODPR(RigidBody, SetCollisionEventMode, (CollisionEventMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody::SetCollisionEventMode(CollisionEventMode mode)", "void set_collisionEventMode(CollisionEventMode)", AS_METHODPR(RigidBody, SetCollisionEventMode, (CollisionEventMode), void), AS_CALL_THISCALL));

    // void RigidBody::ApplyForce(const Vector3& force)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ApplyForce(const Vector3& force)", "void ApplyForce(const Vector3&in)", AS_METHODPR(RigidBody, ApplyForce, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::ApplyForce(const Vector3& force, const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ApplyForce(const Vector3& force, const Vector3& position)", "void ApplyForce(const Vector3&in, const Vector3&in)", AS_METHODPR(RigidBody, ApplyForce, (const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::ApplyTorque(const Vector3& torque)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ApplyTorque(const Vector3& torque)", "void ApplyTorque(const Vector3&in)", AS_METHODPR(RigidBody, ApplyTorque, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::ApplyImpulse(const Vector3& impulse)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ApplyImpulse(const Vector3& impulse)", "void ApplyImpulse(const Vector3&in)", AS_METHODPR(RigidBody, ApplyImpulse, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::ApplyImpulse(const Vector3& impulse, const Vector3& position)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ApplyImpulse(const Vector3& impulse, const Vector3& position)", "void ApplyImpulse(const Vector3&in, const Vector3&in)", AS_METHODPR(RigidBody, ApplyImpulse, (const Vector3&, const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::ApplyTorqueImpulse(const Vector3& torque)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ApplyTorqueImpulse(const Vector3& torque)", "void ApplyTorqueImpulse(const Vector3&in)", AS_METHODPR(RigidBody, ApplyTorqueImpulse, (const Vector3&), void), AS_CALL_THISCALL));

    // void RigidBody::ResetForces()
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ResetForces()", "void ResetForces()", AS_METHODPR(RigidBody, ResetForces, (), void), AS_CALL_THISCALL));

    // void RigidBody::Activate()
    methods.Push(RegisterObjectMethodArgs("void RigidBody::Activate()", "void Activate()", AS_METHODPR(RigidBody, Activate, (), void), AS_CALL_THISCALL));

    // void RigidBody::ReAddBodyToWorld()
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ReAddBodyToWorld()", "void ReAddBodyToWorld()", AS_METHODPR(RigidBody, ReAddBodyToWorld, (), void), AS_CALL_THISCALL));

    // void RigidBody::DisableMassUpdate()
    methods.Push(RegisterObjectMethodArgs("void RigidBody::DisableMassUpdate()", "void DisableMassUpdate()", AS_METHODPR(RigidBody, DisableMassUpdate, (), void), AS_CALL_THISCALL));

    // void RigidBody::EnableMassUpdate()
    methods.Push(RegisterObjectMethodArgs("void RigidBody::EnableMassUpdate()", "void EnableMassUpdate()", AS_METHODPR(RigidBody, EnableMassUpdate, (), void), AS_CALL_THISCALL));

    // PhysicsWorld* RigidBody::GetPhysicsWorld() const
    methods.Push(RegisterObjectMethodArgs("PhysicsWorld* RigidBody::GetPhysicsWorld() const", "PhysicsWorld@+ GetPhysicsWorld() const", AS_METHODPR(RigidBody, GetPhysicsWorld, () const, PhysicsWorld*), AS_CALL_THISCALL));

    // float RigidBody::GetMass() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetMass() const", "float GetMass() const", AS_METHODPR(RigidBody, GetMass, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetMass() const", "float get_mass() const", AS_METHODPR(RigidBody, GetMass, () const, float), AS_CALL_THISCALL));

    // Vector3 RigidBody::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetPosition() const", "Vector3 GetPosition() const", AS_METHODPR(RigidBody, GetPosition, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetPosition() const", "Vector3 get_position() const", AS_METHODPR(RigidBody, GetPosition, () const, Vector3), AS_CALL_THISCALL));

    // Quaternion RigidBody::GetRotation() const
    methods.Push(RegisterObjectMethodArgs("Quaternion RigidBody::GetRotation() const", "Quaternion GetRotation() const", AS_METHODPR(RigidBody, GetRotation, () const, Quaternion), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Quaternion RigidBody::GetRotation() const", "Quaternion get_rotation() const", AS_METHODPR(RigidBody, GetRotation, () const, Quaternion), AS_CALL_THISCALL));

    // Vector3 RigidBody::GetLinearVelocity() const
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetLinearVelocity() const", "Vector3 GetLinearVelocity() const", AS_METHODPR(RigidBody, GetLinearVelocity, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetLinearVelocity() const", "Vector3 get_linearVelocity() const", AS_METHODPR(RigidBody, GetLinearVelocity, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 RigidBody::GetLinearFactor() const
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetLinearFactor() const", "Vector3 GetLinearFactor() const", AS_METHODPR(RigidBody, GetLinearFactor, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetLinearFactor() const", "Vector3 get_linearFactor() const", AS_METHODPR(RigidBody, GetLinearFactor, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 RigidBody::GetVelocityAtPoint(const Vector3& position) const
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetVelocityAtPoint(const Vector3& position) const", "Vector3 GetVelocityAtPoint(const Vector3&in) const", AS_METHODPR(RigidBody, GetVelocityAtPoint, (const Vector3&) const, Vector3), AS_CALL_THISCALL));

    // float RigidBody::GetLinearRestThreshold() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetLinearRestThreshold() const", "float GetLinearRestThreshold() const", AS_METHODPR(RigidBody, GetLinearRestThreshold, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetLinearRestThreshold() const", "float get_linearRestThreshold() const", AS_METHODPR(RigidBody, GetLinearRestThreshold, () const, float), AS_CALL_THISCALL));

    // float RigidBody::GetLinearDamping() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetLinearDamping() const", "float GetLinearDamping() const", AS_METHODPR(RigidBody, GetLinearDamping, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetLinearDamping() const", "float get_linearDamping() const", AS_METHODPR(RigidBody, GetLinearDamping, () const, float), AS_CALL_THISCALL));

    // Vector3 RigidBody::GetAngularVelocity() const
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetAngularVelocity() const", "Vector3 GetAngularVelocity() const", AS_METHODPR(RigidBody, GetAngularVelocity, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetAngularVelocity() const", "Vector3 get_angularVelocity() const", AS_METHODPR(RigidBody, GetAngularVelocity, () const, Vector3), AS_CALL_THISCALL));

    // Vector3 RigidBody::GetAngularFactor() const
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetAngularFactor() const", "Vector3 GetAngularFactor() const", AS_METHODPR(RigidBody, GetAngularFactor, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetAngularFactor() const", "Vector3 get_angularFactor() const", AS_METHODPR(RigidBody, GetAngularFactor, () const, Vector3), AS_CALL_THISCALL));

    // float RigidBody::GetAngularRestThreshold() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetAngularRestThreshold() const", "float GetAngularRestThreshold() const", AS_METHODPR(RigidBody, GetAngularRestThreshold, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetAngularRestThreshold() const", "float get_angularRestThreshold() const", AS_METHODPR(RigidBody, GetAngularRestThreshold, () const, float), AS_CALL_THISCALL));

    // float RigidBody::GetAngularDamping() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetAngularDamping() const", "float GetAngularDamping() const", AS_METHODPR(RigidBody, GetAngularDamping, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetAngularDamping() const", "float get_angularDamping() const", AS_METHODPR(RigidBody, GetAngularDamping, () const, float), AS_CALL_THISCALL));

    // float RigidBody::GetFriction() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetFriction() const", "float GetFriction() const", AS_METHODPR(RigidBody, GetFriction, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetFriction() const", "float get_friction() const", AS_METHODPR(RigidBody, GetFriction, () const, float), AS_CALL_THISCALL));

    // Vector3 RigidBody::GetAnisotropicFriction() const
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetAnisotropicFriction() const", "Vector3 GetAnisotropicFriction() const", AS_METHODPR(RigidBody, GetAnisotropicFriction, () const, Vector3), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector3 RigidBody::GetAnisotropicFriction() const", "Vector3 get_anisotropicFriction() const", AS_METHODPR(RigidBody, GetAnisotropicFriction, () const, Vector3), AS_CALL_THISCALL));

    // float RigidBody::GetRollingFriction() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetRollingFriction() const", "float GetRollingFriction() const", AS_METHODPR(RigidBody, GetRollingFriction, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetRollingFriction() const", "float get_rollingFriction() const", AS_METHODPR(RigidBody, GetRollingFriction, () const, float), AS_CALL_THISCALL));

    // float RigidBody::GetRestitution() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetRestitution() const", "float GetRestitution() const", AS_METHODPR(RigidBody, GetRestitution, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetRestitution() const", "float get_restitution() const", AS_METHODPR(RigidBody, GetRestitution, () const, float), AS_CALL_THISCALL));

    // float RigidBody::GetContactProcessingThreshold() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetContactProcessingThreshold() const", "float GetContactProcessingThreshold() const", AS_METHODPR(RigidBody, GetContactProcessingThreshold, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetContactProcessingThreshold() const", "float get_contactProcessingThreshold() const", AS_METHODPR(RigidBody, GetContactProcessingThreshold, () const, float), AS_CALL_THISCALL));

    // float RigidBody::GetCcdRadius() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetCcdRadius() const", "float GetCcdRadius() const", AS_METHODPR(RigidBody, GetCcdRadius, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetCcdRadius() const", "float get_ccdRadius() const", AS_METHODPR(RigidBody, GetCcdRadius, () const, float), AS_CALL_THISCALL));

    // float RigidBody::GetCcdMotionThreshold() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetCcdMotionThreshold() const", "float GetCcdMotionThreshold() const", AS_METHODPR(RigidBody, GetCcdMotionThreshold, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody::GetCcdMotionThreshold() const", "float get_ccdMotionThreshold() const", AS_METHODPR(RigidBody, GetCcdMotionThreshold, () const, float), AS_CALL_THISCALL));

    // bool RigidBody::GetUseGravity() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody::GetUseGravity() const", "bool GetUseGravity() const", AS_METHODPR(RigidBody, GetUseGravity, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody::GetUseGravity() const", "bool get_useGravity() const", AS_METHODPR(RigidBody, GetUseGravity, () const, bool), AS_CALL_THISCALL));

    // const Vector3& RigidBody::GetGravityOverride() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& RigidBody::GetGravityOverride() const", "const Vector3& GetGravityOverride() const", AS_METHODPR(RigidBody, GetGravityOverride, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& RigidBody::GetGravityOverride() const", "const Vector3& get_gravityOverride() const", AS_METHODPR(RigidBody, GetGravityOverride, () const, const Vector3&), AS_CALL_THISCALL));

    // const Vector3& RigidBody::GetCenterOfMass() const
    methods.Push(RegisterObjectMethodArgs("const Vector3& RigidBody::GetCenterOfMass() const", "const Vector3& GetCenterOfMass() const", AS_METHODPR(RigidBody, GetCenterOfMass, () const, const Vector3&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector3& RigidBody::GetCenterOfMass() const", "const Vector3& get_centerOfMass() const", AS_METHODPR(RigidBody, GetCenterOfMass, () const, const Vector3&), AS_CALL_THISCALL));

    // bool RigidBody::IsKinematic() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody::IsKinematic() const", "bool IsKinematic() const", AS_METHODPR(RigidBody, IsKinematic, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody::IsKinematic() const", "bool get_kinematic() const", AS_METHODPR(RigidBody, IsKinematic, () const, bool), AS_CALL_THISCALL));

    // bool RigidBody::IsTrigger() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody::IsTrigger() const", "bool IsTrigger() const", AS_METHODPR(RigidBody, IsTrigger, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody::IsTrigger() const", "bool get_trigger() const", AS_METHODPR(RigidBody, IsTrigger, () const, bool), AS_CALL_THISCALL));

    // bool RigidBody::IsActive() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody::IsActive() const", "bool IsActive() const", AS_METHODPR(RigidBody, IsActive, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody::IsActive() const", "bool get_active() const", AS_METHODPR(RigidBody, IsActive, () const, bool), AS_CALL_THISCALL));

    // unsigned RigidBody::GetCollisionLayer() const
    methods.Push(RegisterObjectMethodArgs("unsigned RigidBody::GetCollisionLayer() const", "uint GetCollisionLayer() const", AS_METHODPR(RigidBody, GetCollisionLayer, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned RigidBody::GetCollisionLayer() const", "uint get_collisionLayer() const", AS_METHODPR(RigidBody, GetCollisionLayer, () const, unsigned), AS_CALL_THISCALL));

    // unsigned RigidBody::GetCollisionMask() const
    methods.Push(RegisterObjectMethodArgs("unsigned RigidBody::GetCollisionMask() const", "uint GetCollisionMask() const", AS_METHODPR(RigidBody, GetCollisionMask, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned RigidBody::GetCollisionMask() const", "uint get_collisionMask() const", AS_METHODPR(RigidBody, GetCollisionMask, () const, unsigned), AS_CALL_THISCALL));

    // CollisionEventMode RigidBody::GetCollisionEventMode() const
    methods.Push(RegisterObjectMethodArgs("CollisionEventMode RigidBody::GetCollisionEventMode() const", "CollisionEventMode GetCollisionEventMode() const", AS_METHODPR(RigidBody, GetCollisionEventMode, () const, CollisionEventMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("CollisionEventMode RigidBody::GetCollisionEventMode() const", "CollisionEventMode get_collisionEventMode() const", AS_METHODPR(RigidBody, GetCollisionEventMode, () const, CollisionEventMode), AS_CALL_THISCALL));

    // void RigidBody::ApplyWorldTransform(const Vector3& newWorldPosition, const Quaternion& newWorldRotation)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ApplyWorldTransform(const Vector3& newWorldPosition, const Quaternion& newWorldRotation)", "void ApplyWorldTransform(const Vector3&in, const Quaternion&in)", AS_METHODPR(RigidBody, ApplyWorldTransform, (const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void RigidBody::UpdateMass()
    methods.Push(RegisterObjectMethodArgs("void RigidBody::UpdateMass()", "void UpdateMass()", AS_METHODPR(RigidBody, UpdateMass, (), void), AS_CALL_THISCALL));

    // void RigidBody::UpdateGravity()
    methods.Push(RegisterObjectMethodArgs("void RigidBody::UpdateGravity()", "void UpdateGravity()", AS_METHODPR(RigidBody, UpdateGravity, (), void), AS_CALL_THISCALL));

    // void RigidBody::AddConstraint(Constraint* constraint)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::AddConstraint(Constraint* constraint)", "void AddConstraint(Constraint@+)", AS_METHODPR(RigidBody, AddConstraint, (Constraint*), void), AS_CALL_THISCALL));

    // void RigidBody::RemoveConstraint(Constraint* constraint)
    methods.Push(RegisterObjectMethodArgs("void RigidBody::RemoveConstraint(Constraint* constraint)", "void RemoveConstraint(Constraint@+)", AS_METHODPR(RigidBody, RemoveConstraint, (Constraint*), void), AS_CALL_THISCALL));

    // void RigidBody::ReleaseBody()
    methods.Push(RegisterObjectMethodArgs("void RigidBody::ReleaseBody()", "void ReleaseBody()", AS_METHODPR(RigidBody, ReleaseBody, (), void), AS_CALL_THISCALL));
}

// struct TriangleMeshData | File: ../Physics/CollisionShape.h
void CollectMembers_TriangleMeshData(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionGeometryData(methods);
}

#endif // def URHO3D_PHYSICS

#ifdef URHO3D_URHO2D

// class AnimatedSprite2D | File: ../Urho2D/AnimatedSprite2D.h
void CollectMembers_AnimatedSprite2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_StaticSprite2D(methods);

    Remove(methods, "static void StaticSprite2D::RegisterObject(Context* context)");
    Remove(methods, "void Drawable2D::OnSetEnabled() override");

    // void AnimatedSprite2D::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(AnimatedSprite2D, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void AnimatedSprite2D::SetAnimationSet(AnimationSet2D* animationSet)
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetAnimationSet(AnimationSet2D* animationSet)", "void SetAnimationSet(AnimationSet2D@+)", AS_METHODPR(AnimatedSprite2D, SetAnimationSet, (AnimationSet2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetAnimationSet(AnimationSet2D* animationSet)", "void set_animationSet(AnimationSet2D@+)", AS_METHODPR(AnimatedSprite2D, SetAnimationSet, (AnimationSet2D*), void), AS_CALL_THISCALL));

    // void AnimatedSprite2D::SetEntity(const String& entity)
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetEntity(const String& entity)", "void SetEntity(const String&in)", AS_METHODPR(AnimatedSprite2D, SetEntity, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetEntity(const String& entity)", "void set_entity(const String&in)", AS_METHODPR(AnimatedSprite2D, SetEntity, (const String&), void), AS_CALL_THISCALL));

    // void AnimatedSprite2D::SetAnimation(const String& name, LoopMode2D loopMode=LM_DEFAULT)
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetAnimation(const String& name, LoopMode2D loopMode=LM_DEFAULT)", "void SetAnimation(const String&in, LoopMode2D = LM_DEFAULT)", AS_METHODPR(AnimatedSprite2D, SetAnimation, (const String&, LoopMode2D), void), AS_CALL_THISCALL));

    // void AnimatedSprite2D::SetLoopMode(LoopMode2D loopMode)
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetLoopMode(LoopMode2D loopMode)", "void SetLoopMode(LoopMode2D)", AS_METHODPR(AnimatedSprite2D, SetLoopMode, (LoopMode2D), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetLoopMode(LoopMode2D loopMode)", "void set_loopMode(LoopMode2D)", AS_METHODPR(AnimatedSprite2D, SetLoopMode, (LoopMode2D), void), AS_CALL_THISCALL));

    // void AnimatedSprite2D::SetSpeed(float speed)
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetSpeed(float speed)", "void SetSpeed(float)", AS_METHODPR(AnimatedSprite2D, SetSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetSpeed(float speed)", "void set_speed(float)", AS_METHODPR(AnimatedSprite2D, SetSpeed, (float), void), AS_CALL_THISCALL));

    // AnimationSet2D* AnimatedSprite2D::GetAnimationSet() const
    methods.Push(RegisterObjectMethodArgs("AnimationSet2D* AnimatedSprite2D::GetAnimationSet() const", "AnimationSet2D@+ GetAnimationSet() const", AS_METHODPR(AnimatedSprite2D, GetAnimationSet, () const, AnimationSet2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("AnimationSet2D* AnimatedSprite2D::GetAnimationSet() const", "AnimationSet2D@+ get_animationSet() const", AS_METHODPR(AnimatedSprite2D, GetAnimationSet, () const, AnimationSet2D*), AS_CALL_THISCALL));

    // const String& AnimatedSprite2D::GetEntity() const
    methods.Push(RegisterObjectMethodArgs("const String& AnimatedSprite2D::GetEntity() const", "const String& GetEntity() const", AS_METHODPR(AnimatedSprite2D, GetEntity, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& AnimatedSprite2D::GetEntity() const", "const String& get_entity() const", AS_METHODPR(AnimatedSprite2D, GetEntity, () const, const String&), AS_CALL_THISCALL));

    // const String& AnimatedSprite2D::GetAnimation() const
    methods.Push(RegisterObjectMethodArgs("const String& AnimatedSprite2D::GetAnimation() const", "const String& GetAnimation() const", AS_METHODPR(AnimatedSprite2D, GetAnimation, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& AnimatedSprite2D::GetAnimation() const", "const String& get_animation() const", AS_METHODPR(AnimatedSprite2D, GetAnimation, () const, const String&), AS_CALL_THISCALL));

    // LoopMode2D AnimatedSprite2D::GetLoopMode() const
    methods.Push(RegisterObjectMethodArgs("LoopMode2D AnimatedSprite2D::GetLoopMode() const", "LoopMode2D GetLoopMode() const", AS_METHODPR(AnimatedSprite2D, GetLoopMode, () const, LoopMode2D), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("LoopMode2D AnimatedSprite2D::GetLoopMode() const", "LoopMode2D get_loopMode() const", AS_METHODPR(AnimatedSprite2D, GetLoopMode, () const, LoopMode2D), AS_CALL_THISCALL));

    // float AnimatedSprite2D::GetSpeed() const
    methods.Push(RegisterObjectMethodArgs("float AnimatedSprite2D::GetSpeed() const", "float GetSpeed() const", AS_METHODPR(AnimatedSprite2D, GetSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float AnimatedSprite2D::GetSpeed() const", "float get_speed() const", AS_METHODPR(AnimatedSprite2D, GetSpeed, () const, float), AS_CALL_THISCALL));

    // void AnimatedSprite2D::SetAnimationSetAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetAnimationSetAttr(const ResourceRef& value)", "void SetAnimationSetAttr(const ResourceRef&in)", AS_METHODPR(AnimatedSprite2D, SetAnimationSetAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef AnimatedSprite2D::GetAnimationSetAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef AnimatedSprite2D::GetAnimationSetAttr() const", "ResourceRef GetAnimationSetAttr() const", AS_METHODPR(AnimatedSprite2D, GetAnimationSetAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void AnimatedSprite2D::SetAnimationAttr(const String& name)
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetAnimationAttr(const String& name)", "void SetAnimationAttr(const String&in)", AS_METHODPR(AnimatedSprite2D, SetAnimationAttr, (const String&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void AnimatedSprite2D::SetAnimationAttr(const String& name)", "void set_animation(const String&in)", AS_METHODPR(AnimatedSprite2D, SetAnimationAttr, (const String&), void), AS_CALL_THISCALL));
}

// class AnimationSet2D | File: ../Urho2D/AnimationSet2D.h
void CollectMembers_AnimationSet2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");

    // Spriter::SpriterData* AnimationSet2D::GetSpriterData() const
    // Error: type "Spriter::SpriterData*" can not automatically bind

    // bool AnimationSet2D::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool AnimationSet2D::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(AnimationSet2D, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool AnimationSet2D::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool AnimationSet2D::EndLoad() override", "bool EndLoad()", AS_METHODPR(AnimationSet2D, EndLoad, (), bool), AS_CALL_THISCALL));

    // unsigned AnimationSet2D::GetNumAnimations() const
    methods.Push(RegisterObjectMethodArgs("unsigned AnimationSet2D::GetNumAnimations() const", "uint GetNumAnimations() const", AS_METHODPR(AnimationSet2D, GetNumAnimations, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned AnimationSet2D::GetNumAnimations() const", "uint get_numAnimations() const", AS_METHODPR(AnimationSet2D, GetNumAnimations, () const, unsigned), AS_CALL_THISCALL));

    // String AnimationSet2D::GetAnimation(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("String AnimationSet2D::GetAnimation(unsigned index) const", "String GetAnimation(uint) const", AS_METHODPR(AnimationSet2D, GetAnimation, (unsigned) const, String), AS_CALL_THISCALL));

    // bool AnimationSet2D::HasAnimation(const String& animationName) const
    methods.Push(RegisterObjectMethodArgs("bool AnimationSet2D::HasAnimation(const String& animationName) const", "bool HasAnimation(const String&in) const", AS_METHODPR(AnimationSet2D, HasAnimation, (const String&) const, bool), AS_CALL_THISCALL));

    // Sprite2D* AnimationSet2D::GetSprite() const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* AnimationSet2D::GetSprite() const", "Sprite2D@+ GetSprite() const", AS_METHODPR(AnimationSet2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));

    // Sprite2D* AnimationSet2D::GetSpriterFileSprite(int folderId, int fileId) const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* AnimationSet2D::GetSpriterFileSprite(int folderId, int fileId) const", "Sprite2D@+ GetSpriterFileSprite(int, int) const", AS_METHODPR(AnimationSet2D, GetSpriterFileSprite, (int, int) const, Sprite2D*), AS_CALL_THISCALL));
}

// class CollisionBox2D | File: ../Urho2D/CollisionBox2D.h
void CollectMembers_CollisionBox2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionShape2D(methods);

    Remove(methods, "static void CollisionShape2D::RegisterObject(Context* context)");

    // void CollisionBox2D::SetSize(const Vector2& size)
    methods.Push(RegisterObjectMethodArgs("void CollisionBox2D::SetSize(const Vector2& size)", "void SetSize(const Vector2&in)", AS_METHODPR(CollisionBox2D, SetSize, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionBox2D::SetSize(const Vector2& size)", "void set_size(const Vector2&in)", AS_METHODPR(CollisionBox2D, SetSize, (const Vector2&), void), AS_CALL_THISCALL));

    // void CollisionBox2D::SetSize(float width, float height)
    methods.Push(RegisterObjectMethodArgs("void CollisionBox2D::SetSize(float width, float height)", "void SetSize(float, float)", AS_METHODPR(CollisionBox2D, SetSize, (float, float), void), AS_CALL_THISCALL));

    // void CollisionBox2D::SetCenter(const Vector2& center)
    methods.Push(RegisterObjectMethodArgs("void CollisionBox2D::SetCenter(const Vector2& center)", "void SetCenter(const Vector2&in)", AS_METHODPR(CollisionBox2D, SetCenter, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionBox2D::SetCenter(const Vector2& center)", "void set_center(const Vector2&in)", AS_METHODPR(CollisionBox2D, SetCenter, (const Vector2&), void), AS_CALL_THISCALL));

    // void CollisionBox2D::SetCenter(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void CollisionBox2D::SetCenter(float x, float y)", "void SetCenter(float, float)", AS_METHODPR(CollisionBox2D, SetCenter, (float, float), void), AS_CALL_THISCALL));

    // void CollisionBox2D::SetAngle(float angle)
    methods.Push(RegisterObjectMethodArgs("void CollisionBox2D::SetAngle(float angle)", "void SetAngle(float)", AS_METHODPR(CollisionBox2D, SetAngle, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionBox2D::SetAngle(float angle)", "void set_angle(float)", AS_METHODPR(CollisionBox2D, SetAngle, (float), void), AS_CALL_THISCALL));

    // const Vector2& CollisionBox2D::GetSize() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionBox2D::GetSize() const", "const Vector2& GetSize() const", AS_METHODPR(CollisionBox2D, GetSize, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionBox2D::GetSize() const", "const Vector2& get_size() const", AS_METHODPR(CollisionBox2D, GetSize, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& CollisionBox2D::GetCenter() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionBox2D::GetCenter() const", "const Vector2& GetCenter() const", AS_METHODPR(CollisionBox2D, GetCenter, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionBox2D::GetCenter() const", "const Vector2& get_center() const", AS_METHODPR(CollisionBox2D, GetCenter, () const, const Vector2&), AS_CALL_THISCALL));

    // float CollisionBox2D::GetAngle() const
    methods.Push(RegisterObjectMethodArgs("float CollisionBox2D::GetAngle() const", "float GetAngle() const", AS_METHODPR(CollisionBox2D, GetAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CollisionBox2D::GetAngle() const", "float get_angle() const", AS_METHODPR(CollisionBox2D, GetAngle, () const, float), AS_CALL_THISCALL));
}

// void CollisionChain2D::SetVertices(const PODVector<Vector2>& vertices)
#ifdef URHO3D_URHO2D
// void CollisionChain2D::SetVertices(const PODVector<Vector2>& vertices) | File: ../Urho2D/CollisionChain2D.h
static void CollisionChain2D_SetVertices_PODVectorVector2(CollisionChain2D* ptr, CScriptArray* vertices_conv)
{
    PODVector<Vector2> vertices = ArrayToPODVector<Vector2>(vertices_conv);
    ptr->SetVertices(vertices);
}
#endif


// const PODVector<Vector2>& CollisionChain2D::GetVertices() const
#ifdef URHO3D_URHO2D
// const PODVector<Vector2>& CollisionChain2D::GetVertices() const | File: ../Urho2D/CollisionChain2D.h
static CScriptArray* CollisionChain2D_GetVertices_void(CollisionChain2D* ptr)
{
    const PODVector<Vector2>& result = ptr->GetVertices();
    return VectorToArray(result, "Array<Vector2>");
}
#endif


// class CollisionChain2D | File: ../Urho2D/CollisionChain2D.h
void CollectMembers_CollisionChain2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionShape2D(methods);

    Remove(methods, "static void CollisionShape2D::RegisterObject(Context* context)");

    // PODVector<unsigned char> CollisionChain2D::GetVerticesAttr() const
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // void CollisionChain2D::SetVerticesAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void CollisionChain2D::SetLoop(bool loop)
    methods.Push(RegisterObjectMethodArgs("void CollisionChain2D::SetLoop(bool loop)", "void SetLoop(bool)", AS_METHODPR(CollisionChain2D, SetLoop, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionChain2D::SetLoop(bool loop)", "void set_loop(bool)", AS_METHODPR(CollisionChain2D, SetLoop, (bool), void), AS_CALL_THISCALL));

    // void CollisionChain2D::SetVertexCount(unsigned count)
    methods.Push(RegisterObjectMethodArgs("void CollisionChain2D::SetVertexCount(unsigned count)", "void SetVertexCount(uint)", AS_METHODPR(CollisionChain2D, SetVertexCount, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionChain2D::SetVertexCount(unsigned count)", "void set_vertexCount(uint)", AS_METHODPR(CollisionChain2D, SetVertexCount, (unsigned), void), AS_CALL_THISCALL));

    // void CollisionChain2D::SetVertex(unsigned index, const Vector2& vertex)
    methods.Push(RegisterObjectMethodArgs("void CollisionChain2D::SetVertex(unsigned index, const Vector2& vertex)", "void SetVertex(uint, const Vector2&in)", AS_METHODPR(CollisionChain2D, SetVertex, (unsigned, const Vector2&), void), AS_CALL_THISCALL));

    // void CollisionChain2D::SetVertices(const PODVector<Vector2>& vertices)
    methods.Push(RegisterObjectMethodArgs("void CollisionChain2D::SetVertices(const PODVector<Vector2>& vertices)", "void SetVertices(Array<Vector2>@+)", AS_FUNCTION_OBJFIRST(CollisionChain2D_SetVertices_PODVectorVector2), AS_CALL_CDECL_OBJFIRST));

    // bool CollisionChain2D::GetLoop() const
    methods.Push(RegisterObjectMethodArgs("bool CollisionChain2D::GetLoop() const", "bool GetLoop() const", AS_METHODPR(CollisionChain2D, GetLoop, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CollisionChain2D::GetLoop() const", "bool get_loop() const", AS_METHODPR(CollisionChain2D, GetLoop, () const, bool), AS_CALL_THISCALL));

    // unsigned CollisionChain2D::GetVertexCount() const
    methods.Push(RegisterObjectMethodArgs("unsigned CollisionChain2D::GetVertexCount() const", "uint GetVertexCount() const", AS_METHODPR(CollisionChain2D, GetVertexCount, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CollisionChain2D::GetVertexCount() const", "uint get_vertexCount() const", AS_METHODPR(CollisionChain2D, GetVertexCount, () const, unsigned), AS_CALL_THISCALL));

    // const Vector2& CollisionChain2D::GetVertex(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionChain2D::GetVertex(unsigned index) const", "const Vector2& GetVertex(uint) const", AS_METHODPR(CollisionChain2D, GetVertex, (unsigned) const, const Vector2&), AS_CALL_THISCALL));

    // const PODVector<Vector2>& CollisionChain2D::GetVertices() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Vector2>& CollisionChain2D::GetVertices() const", "Array<Vector2>@ GetVertices() const", AS_FUNCTION_OBJFIRST(CollisionChain2D_GetVertices_void), AS_CALL_CDECL_OBJFIRST));
}

// class CollisionCircle2D | File: ../Urho2D/CollisionCircle2D.h
void CollectMembers_CollisionCircle2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionShape2D(methods);

    Remove(methods, "static void CollisionShape2D::RegisterObject(Context* context)");

    // void CollisionCircle2D::SetRadius(float radius)
    methods.Push(RegisterObjectMethodArgs("void CollisionCircle2D::SetRadius(float radius)", "void SetRadius(float)", AS_METHODPR(CollisionCircle2D, SetRadius, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionCircle2D::SetRadius(float radius)", "void set_radius(float)", AS_METHODPR(CollisionCircle2D, SetRadius, (float), void), AS_CALL_THISCALL));

    // void CollisionCircle2D::SetCenter(const Vector2& center)
    methods.Push(RegisterObjectMethodArgs("void CollisionCircle2D::SetCenter(const Vector2& center)", "void SetCenter(const Vector2&in)", AS_METHODPR(CollisionCircle2D, SetCenter, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionCircle2D::SetCenter(const Vector2& center)", "void set_center(const Vector2&in)", AS_METHODPR(CollisionCircle2D, SetCenter, (const Vector2&), void), AS_CALL_THISCALL));

    // void CollisionCircle2D::SetCenter(float x, float y)
    methods.Push(RegisterObjectMethodArgs("void CollisionCircle2D::SetCenter(float x, float y)", "void SetCenter(float, float)", AS_METHODPR(CollisionCircle2D, SetCenter, (float, float), void), AS_CALL_THISCALL));

    // float CollisionCircle2D::GetRadius() const
    methods.Push(RegisterObjectMethodArgs("float CollisionCircle2D::GetRadius() const", "float GetRadius() const", AS_METHODPR(CollisionCircle2D, GetRadius, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CollisionCircle2D::GetRadius() const", "float get_radius() const", AS_METHODPR(CollisionCircle2D, GetRadius, () const, float), AS_CALL_THISCALL));

    // const Vector2& CollisionCircle2D::GetCenter() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionCircle2D::GetCenter() const", "const Vector2& GetCenter() const", AS_METHODPR(CollisionCircle2D, GetCenter, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionCircle2D::GetCenter() const", "const Vector2& get_center() const", AS_METHODPR(CollisionCircle2D, GetCenter, () const, const Vector2&), AS_CALL_THISCALL));
}

// class CollisionEdge2D | File: ../Urho2D/CollisionEdge2D.h
void CollectMembers_CollisionEdge2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionShape2D(methods);

    Remove(methods, "static void CollisionShape2D::RegisterObject(Context* context)");

    // void CollisionEdge2D::SetVertex1(const Vector2& vertex)
    methods.Push(RegisterObjectMethodArgs("void CollisionEdge2D::SetVertex1(const Vector2& vertex)", "void SetVertex1(const Vector2&in)", AS_METHODPR(CollisionEdge2D, SetVertex1, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionEdge2D::SetVertex1(const Vector2& vertex)", "void set_vertex1(const Vector2&in)", AS_METHODPR(CollisionEdge2D, SetVertex1, (const Vector2&), void), AS_CALL_THISCALL));

    // void CollisionEdge2D::SetVertex2(const Vector2& vertex)
    methods.Push(RegisterObjectMethodArgs("void CollisionEdge2D::SetVertex2(const Vector2& vertex)", "void SetVertex2(const Vector2&in)", AS_METHODPR(CollisionEdge2D, SetVertex2, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionEdge2D::SetVertex2(const Vector2& vertex)", "void set_vertex2(const Vector2&in)", AS_METHODPR(CollisionEdge2D, SetVertex2, (const Vector2&), void), AS_CALL_THISCALL));

    // void CollisionEdge2D::SetVertices(const Vector2& vertex1, const Vector2& vertex2)
    methods.Push(RegisterObjectMethodArgs("void CollisionEdge2D::SetVertices(const Vector2& vertex1, const Vector2& vertex2)", "void SetVertices(const Vector2&in, const Vector2&in)", AS_METHODPR(CollisionEdge2D, SetVertices, (const Vector2&, const Vector2&), void), AS_CALL_THISCALL));

    // const Vector2& CollisionEdge2D::GetVertex1() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionEdge2D::GetVertex1() const", "const Vector2& GetVertex1() const", AS_METHODPR(CollisionEdge2D, GetVertex1, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionEdge2D::GetVertex1() const", "const Vector2& get_vertex1() const", AS_METHODPR(CollisionEdge2D, GetVertex1, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& CollisionEdge2D::GetVertex2() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionEdge2D::GetVertex2() const", "const Vector2& GetVertex2() const", AS_METHODPR(CollisionEdge2D, GetVertex2, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionEdge2D::GetVertex2() const", "const Vector2& get_vertex2() const", AS_METHODPR(CollisionEdge2D, GetVertex2, () const, const Vector2&), AS_CALL_THISCALL));
}

// void CollisionPolygon2D::SetVertices(const PODVector<Vector2>& vertices)
#ifdef URHO3D_URHO2D
// void CollisionPolygon2D::SetVertices(const PODVector<Vector2>& vertices) | File: ../Urho2D/CollisionPolygon2D.h
static void CollisionPolygon2D_SetVertices_PODVectorVector2(CollisionPolygon2D* ptr, CScriptArray* vertices_conv)
{
    PODVector<Vector2> vertices = ArrayToPODVector<Vector2>(vertices_conv);
    ptr->SetVertices(vertices);
}
#endif


// const PODVector<Vector2>& CollisionPolygon2D::GetVertices() const
#ifdef URHO3D_URHO2D
// const PODVector<Vector2>& CollisionPolygon2D::GetVertices() const | File: ../Urho2D/CollisionPolygon2D.h
static CScriptArray* CollisionPolygon2D_GetVertices_void(CollisionPolygon2D* ptr)
{
    const PODVector<Vector2>& result = ptr->GetVertices();
    return VectorToArray(result, "Array<Vector2>");
}
#endif


// class CollisionPolygon2D | File: ../Urho2D/CollisionPolygon2D.h
void CollectMembers_CollisionPolygon2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_CollisionShape2D(methods);

    Remove(methods, "static void CollisionShape2D::RegisterObject(Context* context)");

    // PODVector<unsigned char> CollisionPolygon2D::GetVerticesAttr() const
    // Error: type "PODVector<unsigned char>" can not automatically bind

    // void CollisionPolygon2D::SetVerticesAttr(const PODVector<unsigned char>& value)
    // Error: type "const PODVector<unsigned char>&" can not automatically bind

    // void CollisionPolygon2D::SetVertexCount(unsigned count)
    methods.Push(RegisterObjectMethodArgs("void CollisionPolygon2D::SetVertexCount(unsigned count)", "void SetVertexCount(uint)", AS_METHODPR(CollisionPolygon2D, SetVertexCount, (unsigned), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionPolygon2D::SetVertexCount(unsigned count)", "void set_vertexCount(uint)", AS_METHODPR(CollisionPolygon2D, SetVertexCount, (unsigned), void), AS_CALL_THISCALL));

    // void CollisionPolygon2D::SetVertex(unsigned index, const Vector2& vertex)
    methods.Push(RegisterObjectMethodArgs("void CollisionPolygon2D::SetVertex(unsigned index, const Vector2& vertex)", "void SetVertex(uint, const Vector2&in)", AS_METHODPR(CollisionPolygon2D, SetVertex, (unsigned, const Vector2&), void), AS_CALL_THISCALL));

    // void CollisionPolygon2D::SetVertices(const PODVector<Vector2>& vertices)
    methods.Push(RegisterObjectMethodArgs("void CollisionPolygon2D::SetVertices(const PODVector<Vector2>& vertices)", "void SetVertices(Array<Vector2>@+)", AS_FUNCTION_OBJFIRST(CollisionPolygon2D_SetVertices_PODVectorVector2), AS_CALL_CDECL_OBJFIRST));

    // unsigned CollisionPolygon2D::GetVertexCount() const
    methods.Push(RegisterObjectMethodArgs("unsigned CollisionPolygon2D::GetVertexCount() const", "uint GetVertexCount() const", AS_METHODPR(CollisionPolygon2D, GetVertexCount, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned CollisionPolygon2D::GetVertexCount() const", "uint get_vertexCount() const", AS_METHODPR(CollisionPolygon2D, GetVertexCount, () const, unsigned), AS_CALL_THISCALL));

    // const Vector2& CollisionPolygon2D::GetVertex(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const Vector2& CollisionPolygon2D::GetVertex(unsigned index) const", "const Vector2& GetVertex(uint) const", AS_METHODPR(CollisionPolygon2D, GetVertex, (unsigned) const, const Vector2&), AS_CALL_THISCALL));

    // const PODVector<Vector2>& CollisionPolygon2D::GetVertices() const
    methods.Push(RegisterObjectMethodArgs("const PODVector<Vector2>& CollisionPolygon2D::GetVertices() const", "Array<Vector2>@ GetVertices() const", AS_FUNCTION_OBJFIRST(CollisionPolygon2D_GetVertices_void), AS_CALL_CDECL_OBJFIRST));
}

// class CollisionShape2D | File: ../Urho2D/CollisionShape2D.h
void CollectMembers_CollisionShape2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::OnSetEnabled()");

    // b2Fixture* CollisionShape2D::GetFixture() const
    // Error: type "b2Fixture*" can not automatically bind

    // void CollisionShape2D::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(CollisionShape2D, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void CollisionShape2D::SetTrigger(bool trigger)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetTrigger(bool trigger)", "void SetTrigger(bool)", AS_METHODPR(CollisionShape2D, SetTrigger, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetTrigger(bool trigger)", "void set_trigger(bool)", AS_METHODPR(CollisionShape2D, SetTrigger, (bool), void), AS_CALL_THISCALL));

    // void CollisionShape2D::SetCategoryBits(int categoryBits)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetCategoryBits(int categoryBits)", "void SetCategoryBits(int)", AS_METHODPR(CollisionShape2D, SetCategoryBits, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetCategoryBits(int categoryBits)", "void set_categoryBits(int)", AS_METHODPR(CollisionShape2D, SetCategoryBits, (int), void), AS_CALL_THISCALL));

    // void CollisionShape2D::SetMaskBits(int maskBits)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetMaskBits(int maskBits)", "void SetMaskBits(int)", AS_METHODPR(CollisionShape2D, SetMaskBits, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetMaskBits(int maskBits)", "void set_maskBits(int)", AS_METHODPR(CollisionShape2D, SetMaskBits, (int), void), AS_CALL_THISCALL));

    // void CollisionShape2D::SetGroupIndex(int groupIndex)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetGroupIndex(int groupIndex)", "void SetGroupIndex(int)", AS_METHODPR(CollisionShape2D, SetGroupIndex, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetGroupIndex(int groupIndex)", "void set_groupIndex(int)", AS_METHODPR(CollisionShape2D, SetGroupIndex, (int), void), AS_CALL_THISCALL));

    // void CollisionShape2D::SetDensity(float density)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetDensity(float density)", "void SetDensity(float)", AS_METHODPR(CollisionShape2D, SetDensity, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetDensity(float density)", "void set_density(float)", AS_METHODPR(CollisionShape2D, SetDensity, (float), void), AS_CALL_THISCALL));

    // void CollisionShape2D::SetFriction(float friction)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetFriction(float friction)", "void SetFriction(float)", AS_METHODPR(CollisionShape2D, SetFriction, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetFriction(float friction)", "void set_friction(float)", AS_METHODPR(CollisionShape2D, SetFriction, (float), void), AS_CALL_THISCALL));

    // void CollisionShape2D::SetRestitution(float restitution)
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetRestitution(float restitution)", "void SetRestitution(float)", AS_METHODPR(CollisionShape2D, SetRestitution, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::SetRestitution(float restitution)", "void set_restitution(float)", AS_METHODPR(CollisionShape2D, SetRestitution, (float), void), AS_CALL_THISCALL));

    // void CollisionShape2D::CreateFixture()
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::CreateFixture()", "void CreateFixture()", AS_METHODPR(CollisionShape2D, CreateFixture, (), void), AS_CALL_THISCALL));

    // void CollisionShape2D::ReleaseFixture()
    methods.Push(RegisterObjectMethodArgs("void CollisionShape2D::ReleaseFixture()", "void ReleaseFixture()", AS_METHODPR(CollisionShape2D, ReleaseFixture, (), void), AS_CALL_THISCALL));

    // bool CollisionShape2D::IsTrigger() const
    methods.Push(RegisterObjectMethodArgs("bool CollisionShape2D::IsTrigger() const", "bool IsTrigger() const", AS_METHODPR(CollisionShape2D, IsTrigger, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool CollisionShape2D::IsTrigger() const", "bool get_trigger() const", AS_METHODPR(CollisionShape2D, IsTrigger, () const, bool), AS_CALL_THISCALL));

    // int CollisionShape2D::GetCategoryBits() const
    methods.Push(RegisterObjectMethodArgs("int CollisionShape2D::GetCategoryBits() const", "int GetCategoryBits() const", AS_METHODPR(CollisionShape2D, GetCategoryBits, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int CollisionShape2D::GetCategoryBits() const", "int get_categoryBits() const", AS_METHODPR(CollisionShape2D, GetCategoryBits, () const, int), AS_CALL_THISCALL));

    // int CollisionShape2D::GetMaskBits() const
    methods.Push(RegisterObjectMethodArgs("int CollisionShape2D::GetMaskBits() const", "int GetMaskBits() const", AS_METHODPR(CollisionShape2D, GetMaskBits, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int CollisionShape2D::GetMaskBits() const", "int get_maskBits() const", AS_METHODPR(CollisionShape2D, GetMaskBits, () const, int), AS_CALL_THISCALL));

    // int CollisionShape2D::GetGroupIndex() const
    methods.Push(RegisterObjectMethodArgs("int CollisionShape2D::GetGroupIndex() const", "int GetGroupIndex() const", AS_METHODPR(CollisionShape2D, GetGroupIndex, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int CollisionShape2D::GetGroupIndex() const", "int get_groupIndex() const", AS_METHODPR(CollisionShape2D, GetGroupIndex, () const, int), AS_CALL_THISCALL));

    // float CollisionShape2D::GetDensity() const
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetDensity() const", "float GetDensity() const", AS_METHODPR(CollisionShape2D, GetDensity, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetDensity() const", "float get_density() const", AS_METHODPR(CollisionShape2D, GetDensity, () const, float), AS_CALL_THISCALL));

    // float CollisionShape2D::GetFriction() const
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetFriction() const", "float GetFriction() const", AS_METHODPR(CollisionShape2D, GetFriction, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetFriction() const", "float get_friction() const", AS_METHODPR(CollisionShape2D, GetFriction, () const, float), AS_CALL_THISCALL));

    // float CollisionShape2D::GetRestitution() const
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetRestitution() const", "float GetRestitution() const", AS_METHODPR(CollisionShape2D, GetRestitution, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetRestitution() const", "float get_restitution() const", AS_METHODPR(CollisionShape2D, GetRestitution, () const, float), AS_CALL_THISCALL));

    // float CollisionShape2D::GetMass() const
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetMass() const", "float GetMass() const", AS_METHODPR(CollisionShape2D, GetMass, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetMass() const", "float get_mass() const", AS_METHODPR(CollisionShape2D, GetMass, () const, float), AS_CALL_THISCALL));

    // float CollisionShape2D::GetInertia() const
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetInertia() const", "float GetInertia() const", AS_METHODPR(CollisionShape2D, GetInertia, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float CollisionShape2D::GetInertia() const", "float get_inertia() const", AS_METHODPR(CollisionShape2D, GetInertia, () const, float), AS_CALL_THISCALL));

    // Vector2 CollisionShape2D::GetMassCenter() const
    methods.Push(RegisterObjectMethodArgs("Vector2 CollisionShape2D::GetMassCenter() const", "Vector2 GetMassCenter() const", AS_METHODPR(CollisionShape2D, GetMassCenter, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 CollisionShape2D::GetMassCenter() const", "Vector2 get_massCenter() const", AS_METHODPR(CollisionShape2D, GetMassCenter, () const, Vector2), AS_CALL_THISCALL));
}

// class Constraint2D | File: ../Urho2D/Constraint2D.h
void CollectMembers_Constraint2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::OnSetEnabled()");
    Remove(methods, "virtual void Serializable::ApplyAttributes()");

    // b2Joint* Constraint2D::GetJoint() const
    // Error: type "b2Joint*" can not automatically bind

    // void Constraint2D::ApplyAttributes() override
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::ApplyAttributes() override", "void ApplyAttributes()", AS_METHODPR(Constraint2D, ApplyAttributes, (), void), AS_CALL_THISCALL));

    // void Constraint2D::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(Constraint2D, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void Constraint2D::CreateJoint()
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::CreateJoint()", "void CreateJoint()", AS_METHODPR(Constraint2D, CreateJoint, (), void), AS_CALL_THISCALL));

    // void Constraint2D::ReleaseJoint()
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::ReleaseJoint()", "void ReleaseJoint()", AS_METHODPR(Constraint2D, ReleaseJoint, (), void), AS_CALL_THISCALL));

    // void Constraint2D::SetOtherBody(RigidBody2D* body)
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::SetOtherBody(RigidBody2D* body)", "void SetOtherBody(RigidBody2D@+)", AS_METHODPR(Constraint2D, SetOtherBody, (RigidBody2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::SetOtherBody(RigidBody2D* body)", "void set_otherBody(RigidBody2D@+)", AS_METHODPR(Constraint2D, SetOtherBody, (RigidBody2D*), void), AS_CALL_THISCALL));

    // void Constraint2D::SetCollideConnected(bool collideConnected)
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::SetCollideConnected(bool collideConnected)", "void SetCollideConnected(bool)", AS_METHODPR(Constraint2D, SetCollideConnected, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::SetCollideConnected(bool collideConnected)", "void set_collideConnected(bool)", AS_METHODPR(Constraint2D, SetCollideConnected, (bool), void), AS_CALL_THISCALL));

    // void Constraint2D::SetAttachedConstraint(Constraint2D* constraint)
    methods.Push(RegisterObjectMethodArgs("void Constraint2D::SetAttachedConstraint(Constraint2D* constraint)", "void SetAttachedConstraint(Constraint2D@+)", AS_METHODPR(Constraint2D, SetAttachedConstraint, (Constraint2D*), void), AS_CALL_THISCALL));

    // RigidBody2D* Constraint2D::GetOwnerBody() const
    methods.Push(RegisterObjectMethodArgs("RigidBody2D* Constraint2D::GetOwnerBody() const", "RigidBody2D@+ GetOwnerBody() const", AS_METHODPR(Constraint2D, GetOwnerBody, () const, RigidBody2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RigidBody2D* Constraint2D::GetOwnerBody() const", "RigidBody2D@+ get_ownerBody() const", AS_METHODPR(Constraint2D, GetOwnerBody, () const, RigidBody2D*), AS_CALL_THISCALL));

    // RigidBody2D* Constraint2D::GetOtherBody() const
    methods.Push(RegisterObjectMethodArgs("RigidBody2D* Constraint2D::GetOtherBody() const", "RigidBody2D@+ GetOtherBody() const", AS_METHODPR(Constraint2D, GetOtherBody, () const, RigidBody2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("RigidBody2D* Constraint2D::GetOtherBody() const", "RigidBody2D@+ get_otherBody() const", AS_METHODPR(Constraint2D, GetOtherBody, () const, RigidBody2D*), AS_CALL_THISCALL));

    // bool Constraint2D::GetCollideConnected() const
    methods.Push(RegisterObjectMethodArgs("bool Constraint2D::GetCollideConnected() const", "bool GetCollideConnected() const", AS_METHODPR(Constraint2D, GetCollideConnected, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Constraint2D::GetCollideConnected() const", "bool get_collideConnected() const", AS_METHODPR(Constraint2D, GetCollideConnected, () const, bool), AS_CALL_THISCALL));

    // Constraint2D* Constraint2D::GetAttachedConstraint() const
    methods.Push(RegisterObjectMethodArgs("Constraint2D* Constraint2D::GetAttachedConstraint() const", "Constraint2D@+ GetAttachedConstraint() const", AS_METHODPR(Constraint2D, GetAttachedConstraint, () const, Constraint2D*), AS_CALL_THISCALL));
}

// class ConstraintDistance2D | File: ../Urho2D/ConstraintDistance2D.h
void CollectMembers_ConstraintDistance2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintDistance2D::SetOwnerBodyAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetOwnerBodyAnchor(const Vector2& anchor)", "void SetOwnerBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintDistance2D, SetOwnerBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetOwnerBodyAnchor(const Vector2& anchor)", "void set_ownerBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintDistance2D, SetOwnerBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintDistance2D::SetOtherBodyAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetOtherBodyAnchor(const Vector2& anchor)", "void SetOtherBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintDistance2D, SetOtherBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetOtherBodyAnchor(const Vector2& anchor)", "void set_otherBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintDistance2D, SetOtherBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintDistance2D::SetFrequencyHz(float frequencyHz)
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetFrequencyHz(float frequencyHz)", "void SetFrequencyHz(float)", AS_METHODPR(ConstraintDistance2D, SetFrequencyHz, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetFrequencyHz(float frequencyHz)", "void set_frequencyHz(float)", AS_METHODPR(ConstraintDistance2D, SetFrequencyHz, (float), void), AS_CALL_THISCALL));

    // void ConstraintDistance2D::SetDampingRatio(float dampingRatio)
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetDampingRatio(float dampingRatio)", "void SetDampingRatio(float)", AS_METHODPR(ConstraintDistance2D, SetDampingRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetDampingRatio(float dampingRatio)", "void set_dampingRatio(float)", AS_METHODPR(ConstraintDistance2D, SetDampingRatio, (float), void), AS_CALL_THISCALL));

    // void ConstraintDistance2D::SetLength(float length)
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetLength(float length)", "void SetLength(float)", AS_METHODPR(ConstraintDistance2D, SetLength, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintDistance2D::SetLength(float length)", "void set_length(float)", AS_METHODPR(ConstraintDistance2D, SetLength, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintDistance2D::GetOwnerBodyAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintDistance2D::GetOwnerBodyAnchor() const", "const Vector2& GetOwnerBodyAnchor() const", AS_METHODPR(ConstraintDistance2D, GetOwnerBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintDistance2D::GetOwnerBodyAnchor() const", "const Vector2& get_ownerBodyAnchor() const", AS_METHODPR(ConstraintDistance2D, GetOwnerBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& ConstraintDistance2D::GetOtherBodyAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintDistance2D::GetOtherBodyAnchor() const", "const Vector2& GetOtherBodyAnchor() const", AS_METHODPR(ConstraintDistance2D, GetOtherBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintDistance2D::GetOtherBodyAnchor() const", "const Vector2& get_otherBodyAnchor() const", AS_METHODPR(ConstraintDistance2D, GetOtherBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // float ConstraintDistance2D::GetFrequencyHz() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintDistance2D::GetFrequencyHz() const", "float GetFrequencyHz() const", AS_METHODPR(ConstraintDistance2D, GetFrequencyHz, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintDistance2D::GetFrequencyHz() const", "float get_frequencyHz() const", AS_METHODPR(ConstraintDistance2D, GetFrequencyHz, () const, float), AS_CALL_THISCALL));

    // float ConstraintDistance2D::GetDampingRatio() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintDistance2D::GetDampingRatio() const", "float GetDampingRatio() const", AS_METHODPR(ConstraintDistance2D, GetDampingRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintDistance2D::GetDampingRatio() const", "float get_dampingRatio() const", AS_METHODPR(ConstraintDistance2D, GetDampingRatio, () const, float), AS_CALL_THISCALL));

    // float ConstraintDistance2D::GetLength() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintDistance2D::GetLength() const", "float GetLength() const", AS_METHODPR(ConstraintDistance2D, GetLength, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintDistance2D::GetLength() const", "float get_length() const", AS_METHODPR(ConstraintDistance2D, GetLength, () const, float), AS_CALL_THISCALL));
}

// class ConstraintFriction2D | File: ../Urho2D/ConstraintFriction2D.h
void CollectMembers_ConstraintFriction2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintFriction2D::SetAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintFriction2D::SetAnchor(const Vector2& anchor)", "void SetAnchor(const Vector2&in)", AS_METHODPR(ConstraintFriction2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintFriction2D::SetAnchor(const Vector2& anchor)", "void set_anchor(const Vector2&in)", AS_METHODPR(ConstraintFriction2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintFriction2D::SetMaxForce(float maxForce)
    methods.Push(RegisterObjectMethodArgs("void ConstraintFriction2D::SetMaxForce(float maxForce)", "void SetMaxForce(float)", AS_METHODPR(ConstraintFriction2D, SetMaxForce, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintFriction2D::SetMaxForce(float maxForce)", "void set_maxForce(float)", AS_METHODPR(ConstraintFriction2D, SetMaxForce, (float), void), AS_CALL_THISCALL));

    // void ConstraintFriction2D::SetMaxTorque(float maxTorque)
    methods.Push(RegisterObjectMethodArgs("void ConstraintFriction2D::SetMaxTorque(float maxTorque)", "void SetMaxTorque(float)", AS_METHODPR(ConstraintFriction2D, SetMaxTorque, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintFriction2D::SetMaxTorque(float maxTorque)", "void set_maxTorque(float)", AS_METHODPR(ConstraintFriction2D, SetMaxTorque, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintFriction2D::GetAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintFriction2D::GetAnchor() const", "const Vector2& GetAnchor() const", AS_METHODPR(ConstraintFriction2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintFriction2D::GetAnchor() const", "const Vector2& get_anchor() const", AS_METHODPR(ConstraintFriction2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // float ConstraintFriction2D::GetMaxForce() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintFriction2D::GetMaxForce() const", "float GetMaxForce() const", AS_METHODPR(ConstraintFriction2D, GetMaxForce, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintFriction2D::GetMaxForce() const", "float get_maxForce() const", AS_METHODPR(ConstraintFriction2D, GetMaxForce, () const, float), AS_CALL_THISCALL));

    // float ConstraintFriction2D::GetMaxTorque() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintFriction2D::GetMaxTorque() const", "float GetMaxTorque() const", AS_METHODPR(ConstraintFriction2D, GetMaxTorque, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintFriction2D::GetMaxTorque() const", "float get_maxTorque() const", AS_METHODPR(ConstraintFriction2D, GetMaxTorque, () const, float), AS_CALL_THISCALL));
}

// class ConstraintGear2D | File: ../Urho2D/ConstraintGear2D.h
void CollectMembers_ConstraintGear2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintGear2D::SetOwnerConstraint(Constraint2D* constraint)
    methods.Push(RegisterObjectMethodArgs("void ConstraintGear2D::SetOwnerConstraint(Constraint2D* constraint)", "void SetOwnerConstraint(Constraint2D@+)", AS_METHODPR(ConstraintGear2D, SetOwnerConstraint, (Constraint2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintGear2D::SetOwnerConstraint(Constraint2D* constraint)", "void set_ownerConstraint(Constraint2D@+)", AS_METHODPR(ConstraintGear2D, SetOwnerConstraint, (Constraint2D*), void), AS_CALL_THISCALL));

    // void ConstraintGear2D::SetOtherConstraint(Constraint2D* constraint)
    methods.Push(RegisterObjectMethodArgs("void ConstraintGear2D::SetOtherConstraint(Constraint2D* constraint)", "void SetOtherConstraint(Constraint2D@+)", AS_METHODPR(ConstraintGear2D, SetOtherConstraint, (Constraint2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintGear2D::SetOtherConstraint(Constraint2D* constraint)", "void set_otherConstraint(Constraint2D@+)", AS_METHODPR(ConstraintGear2D, SetOtherConstraint, (Constraint2D*), void), AS_CALL_THISCALL));

    // void ConstraintGear2D::SetRatio(float ratio)
    methods.Push(RegisterObjectMethodArgs("void ConstraintGear2D::SetRatio(float ratio)", "void SetRatio(float)", AS_METHODPR(ConstraintGear2D, SetRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintGear2D::SetRatio(float ratio)", "void set_ratio(float)", AS_METHODPR(ConstraintGear2D, SetRatio, (float), void), AS_CALL_THISCALL));

    // Constraint2D* ConstraintGear2D::GetOwnerConstraint() const
    methods.Push(RegisterObjectMethodArgs("Constraint2D* ConstraintGear2D::GetOwnerConstraint() const", "Constraint2D@+ GetOwnerConstraint() const", AS_METHODPR(ConstraintGear2D, GetOwnerConstraint, () const, Constraint2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Constraint2D* ConstraintGear2D::GetOwnerConstraint() const", "Constraint2D@+ get_ownerConstraint() const", AS_METHODPR(ConstraintGear2D, GetOwnerConstraint, () const, Constraint2D*), AS_CALL_THISCALL));

    // Constraint2D* ConstraintGear2D::GetOtherConstraint() const
    methods.Push(RegisterObjectMethodArgs("Constraint2D* ConstraintGear2D::GetOtherConstraint() const", "Constraint2D@+ GetOtherConstraint() const", AS_METHODPR(ConstraintGear2D, GetOtherConstraint, () const, Constraint2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Constraint2D* ConstraintGear2D::GetOtherConstraint() const", "Constraint2D@+ get_otherConstraint() const", AS_METHODPR(ConstraintGear2D, GetOtherConstraint, () const, Constraint2D*), AS_CALL_THISCALL));

    // float ConstraintGear2D::GetRatio() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintGear2D::GetRatio() const", "float GetRatio() const", AS_METHODPR(ConstraintGear2D, GetRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintGear2D::GetRatio() const", "float get_ratio() const", AS_METHODPR(ConstraintGear2D, GetRatio, () const, float), AS_CALL_THISCALL));
}

// class ConstraintMotor2D | File: ../Urho2D/ConstraintMotor2D.h
void CollectMembers_ConstraintMotor2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintMotor2D::SetLinearOffset(const Vector2& linearOffset)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetLinearOffset(const Vector2& linearOffset)", "void SetLinearOffset(const Vector2&in)", AS_METHODPR(ConstraintMotor2D, SetLinearOffset, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetLinearOffset(const Vector2& linearOffset)", "void set_linearOffset(const Vector2&in)", AS_METHODPR(ConstraintMotor2D, SetLinearOffset, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintMotor2D::SetAngularOffset(float angularOffset)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetAngularOffset(float angularOffset)", "void SetAngularOffset(float)", AS_METHODPR(ConstraintMotor2D, SetAngularOffset, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetAngularOffset(float angularOffset)", "void set_angularOffset(float)", AS_METHODPR(ConstraintMotor2D, SetAngularOffset, (float), void), AS_CALL_THISCALL));

    // void ConstraintMotor2D::SetMaxForce(float maxForce)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetMaxForce(float maxForce)", "void SetMaxForce(float)", AS_METHODPR(ConstraintMotor2D, SetMaxForce, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetMaxForce(float maxForce)", "void set_maxForce(float)", AS_METHODPR(ConstraintMotor2D, SetMaxForce, (float), void), AS_CALL_THISCALL));

    // void ConstraintMotor2D::SetMaxTorque(float maxTorque)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetMaxTorque(float maxTorque)", "void SetMaxTorque(float)", AS_METHODPR(ConstraintMotor2D, SetMaxTorque, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetMaxTorque(float maxTorque)", "void set_maxTorque(float)", AS_METHODPR(ConstraintMotor2D, SetMaxTorque, (float), void), AS_CALL_THISCALL));

    // void ConstraintMotor2D::SetCorrectionFactor(float correctionFactor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetCorrectionFactor(float correctionFactor)", "void SetCorrectionFactor(float)", AS_METHODPR(ConstraintMotor2D, SetCorrectionFactor, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMotor2D::SetCorrectionFactor(float correctionFactor)", "void set_correctionFactor(float)", AS_METHODPR(ConstraintMotor2D, SetCorrectionFactor, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintMotor2D::GetLinearOffset() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintMotor2D::GetLinearOffset() const", "const Vector2& GetLinearOffset() const", AS_METHODPR(ConstraintMotor2D, GetLinearOffset, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintMotor2D::GetLinearOffset() const", "const Vector2& get_linearOffset() const", AS_METHODPR(ConstraintMotor2D, GetLinearOffset, () const, const Vector2&), AS_CALL_THISCALL));

    // float ConstraintMotor2D::GetAngularOffset() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintMotor2D::GetAngularOffset() const", "float GetAngularOffset() const", AS_METHODPR(ConstraintMotor2D, GetAngularOffset, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintMotor2D::GetAngularOffset() const", "float get_angularOffset() const", AS_METHODPR(ConstraintMotor2D, GetAngularOffset, () const, float), AS_CALL_THISCALL));

    // float ConstraintMotor2D::GetMaxForce() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintMotor2D::GetMaxForce() const", "float GetMaxForce() const", AS_METHODPR(ConstraintMotor2D, GetMaxForce, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintMotor2D::GetMaxForce() const", "float get_maxForce() const", AS_METHODPR(ConstraintMotor2D, GetMaxForce, () const, float), AS_CALL_THISCALL));

    // float ConstraintMotor2D::GetMaxTorque() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintMotor2D::GetMaxTorque() const", "float GetMaxTorque() const", AS_METHODPR(ConstraintMotor2D, GetMaxTorque, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintMotor2D::GetMaxTorque() const", "float get_maxTorque() const", AS_METHODPR(ConstraintMotor2D, GetMaxTorque, () const, float), AS_CALL_THISCALL));

    // float ConstraintMotor2D::GetCorrectionFactor() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintMotor2D::GetCorrectionFactor() const", "float GetCorrectionFactor() const", AS_METHODPR(ConstraintMotor2D, GetCorrectionFactor, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintMotor2D::GetCorrectionFactor() const", "float get_correctionFactor() const", AS_METHODPR(ConstraintMotor2D, GetCorrectionFactor, () const, float), AS_CALL_THISCALL));
}

// class ConstraintMouse2D | File: ../Urho2D/ConstraintMouse2D.h
void CollectMembers_ConstraintMouse2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintMouse2D::SetTarget(const Vector2& target)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMouse2D::SetTarget(const Vector2& target)", "void SetTarget(const Vector2&in)", AS_METHODPR(ConstraintMouse2D, SetTarget, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMouse2D::SetTarget(const Vector2& target)", "void set_target(const Vector2&in)", AS_METHODPR(ConstraintMouse2D, SetTarget, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintMouse2D::SetMaxForce(float maxForce)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMouse2D::SetMaxForce(float maxForce)", "void SetMaxForce(float)", AS_METHODPR(ConstraintMouse2D, SetMaxForce, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMouse2D::SetMaxForce(float maxForce)", "void set_maxForce(float)", AS_METHODPR(ConstraintMouse2D, SetMaxForce, (float), void), AS_CALL_THISCALL));

    // void ConstraintMouse2D::SetFrequencyHz(float frequencyHz)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMouse2D::SetFrequencyHz(float frequencyHz)", "void SetFrequencyHz(float)", AS_METHODPR(ConstraintMouse2D, SetFrequencyHz, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMouse2D::SetFrequencyHz(float frequencyHz)", "void set_frequencyHz(float)", AS_METHODPR(ConstraintMouse2D, SetFrequencyHz, (float), void), AS_CALL_THISCALL));

    // void ConstraintMouse2D::SetDampingRatio(float dampingRatio)
    methods.Push(RegisterObjectMethodArgs("void ConstraintMouse2D::SetDampingRatio(float dampingRatio)", "void SetDampingRatio(float)", AS_METHODPR(ConstraintMouse2D, SetDampingRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintMouse2D::SetDampingRatio(float dampingRatio)", "void set_dampingRatio(float)", AS_METHODPR(ConstraintMouse2D, SetDampingRatio, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintMouse2D::GetTarget() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintMouse2D::GetTarget() const", "const Vector2& GetTarget() const", AS_METHODPR(ConstraintMouse2D, GetTarget, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintMouse2D::GetTarget() const", "const Vector2& get_target() const", AS_METHODPR(ConstraintMouse2D, GetTarget, () const, const Vector2&), AS_CALL_THISCALL));

    // float ConstraintMouse2D::GetMaxForce() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintMouse2D::GetMaxForce() const", "float GetMaxForce() const", AS_METHODPR(ConstraintMouse2D, GetMaxForce, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintMouse2D::GetMaxForce() const", "float get_maxForce() const", AS_METHODPR(ConstraintMouse2D, GetMaxForce, () const, float), AS_CALL_THISCALL));

    // float ConstraintMouse2D::GetFrequencyHz() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintMouse2D::GetFrequencyHz() const", "float GetFrequencyHz() const", AS_METHODPR(ConstraintMouse2D, GetFrequencyHz, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintMouse2D::GetFrequencyHz() const", "float get_frequencyHz() const", AS_METHODPR(ConstraintMouse2D, GetFrequencyHz, () const, float), AS_CALL_THISCALL));

    // float ConstraintMouse2D::GetDampingRatio() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintMouse2D::GetDampingRatio() const", "float GetDampingRatio() const", AS_METHODPR(ConstraintMouse2D, GetDampingRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintMouse2D::GetDampingRatio() const", "float get_dampingRatio() const", AS_METHODPR(ConstraintMouse2D, GetDampingRatio, () const, float), AS_CALL_THISCALL));
}

// class ConstraintPrismatic2D | File: ../Urho2D/ConstraintPrismatic2D.h
void CollectMembers_ConstraintPrismatic2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintPrismatic2D::SetAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetAnchor(const Vector2& anchor)", "void SetAnchor(const Vector2&in)", AS_METHODPR(ConstraintPrismatic2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetAnchor(const Vector2& anchor)", "void set_anchor(const Vector2&in)", AS_METHODPR(ConstraintPrismatic2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintPrismatic2D::SetAxis(const Vector2& axis)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetAxis(const Vector2& axis)", "void SetAxis(const Vector2&in)", AS_METHODPR(ConstraintPrismatic2D, SetAxis, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetAxis(const Vector2& axis)", "void set_axis(const Vector2&in)", AS_METHODPR(ConstraintPrismatic2D, SetAxis, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintPrismatic2D::SetEnableLimit(bool enableLimit)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetEnableLimit(bool enableLimit)", "void SetEnableLimit(bool)", AS_METHODPR(ConstraintPrismatic2D, SetEnableLimit, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetEnableLimit(bool enableLimit)", "void set_enableLimit(bool)", AS_METHODPR(ConstraintPrismatic2D, SetEnableLimit, (bool), void), AS_CALL_THISCALL));

    // void ConstraintPrismatic2D::SetLowerTranslation(float lowerTranslation)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetLowerTranslation(float lowerTranslation)", "void SetLowerTranslation(float)", AS_METHODPR(ConstraintPrismatic2D, SetLowerTranslation, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetLowerTranslation(float lowerTranslation)", "void set_lowerTranslation(float)", AS_METHODPR(ConstraintPrismatic2D, SetLowerTranslation, (float), void), AS_CALL_THISCALL));

    // void ConstraintPrismatic2D::SetUpperTranslation(float upperTranslation)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetUpperTranslation(float upperTranslation)", "void SetUpperTranslation(float)", AS_METHODPR(ConstraintPrismatic2D, SetUpperTranslation, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetUpperTranslation(float upperTranslation)", "void set_upperTranslation(float)", AS_METHODPR(ConstraintPrismatic2D, SetUpperTranslation, (float), void), AS_CALL_THISCALL));

    // void ConstraintPrismatic2D::SetEnableMotor(bool enableMotor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetEnableMotor(bool enableMotor)", "void SetEnableMotor(bool)", AS_METHODPR(ConstraintPrismatic2D, SetEnableMotor, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetEnableMotor(bool enableMotor)", "void set_enableMotor(bool)", AS_METHODPR(ConstraintPrismatic2D, SetEnableMotor, (bool), void), AS_CALL_THISCALL));

    // void ConstraintPrismatic2D::SetMaxMotorForce(float maxMotorForce)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetMaxMotorForce(float maxMotorForce)", "void SetMaxMotorForce(float)", AS_METHODPR(ConstraintPrismatic2D, SetMaxMotorForce, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetMaxMotorForce(float maxMotorForce)", "void set_maxMotorForce(float)", AS_METHODPR(ConstraintPrismatic2D, SetMaxMotorForce, (float), void), AS_CALL_THISCALL));

    // void ConstraintPrismatic2D::SetMotorSpeed(float motorSpeed)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetMotorSpeed(float motorSpeed)", "void SetMotorSpeed(float)", AS_METHODPR(ConstraintPrismatic2D, SetMotorSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPrismatic2D::SetMotorSpeed(float motorSpeed)", "void set_motorSpeed(float)", AS_METHODPR(ConstraintPrismatic2D, SetMotorSpeed, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintPrismatic2D::GetAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPrismatic2D::GetAnchor() const", "const Vector2& GetAnchor() const", AS_METHODPR(ConstraintPrismatic2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPrismatic2D::GetAnchor() const", "const Vector2& get_anchor() const", AS_METHODPR(ConstraintPrismatic2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& ConstraintPrismatic2D::GetAxis() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPrismatic2D::GetAxis() const", "const Vector2& GetAxis() const", AS_METHODPR(ConstraintPrismatic2D, GetAxis, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPrismatic2D::GetAxis() const", "const Vector2& get_axis() const", AS_METHODPR(ConstraintPrismatic2D, GetAxis, () const, const Vector2&), AS_CALL_THISCALL));

    // bool ConstraintPrismatic2D::GetEnableLimit() const
    methods.Push(RegisterObjectMethodArgs("bool ConstraintPrismatic2D::GetEnableLimit() const", "bool GetEnableLimit() const", AS_METHODPR(ConstraintPrismatic2D, GetEnableLimit, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ConstraintPrismatic2D::GetEnableLimit() const", "bool get_enableLimit() const", AS_METHODPR(ConstraintPrismatic2D, GetEnableLimit, () const, bool), AS_CALL_THISCALL));

    // float ConstraintPrismatic2D::GetLowerTranslation() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintPrismatic2D::GetLowerTranslation() const", "float GetLowerTranslation() const", AS_METHODPR(ConstraintPrismatic2D, GetLowerTranslation, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintPrismatic2D::GetLowerTranslation() const", "float get_lowerTranslation() const", AS_METHODPR(ConstraintPrismatic2D, GetLowerTranslation, () const, float), AS_CALL_THISCALL));

    // float ConstraintPrismatic2D::GetUpperTranslation() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintPrismatic2D::GetUpperTranslation() const", "float GetUpperTranslation() const", AS_METHODPR(ConstraintPrismatic2D, GetUpperTranslation, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintPrismatic2D::GetUpperTranslation() const", "float get_upperTranslation() const", AS_METHODPR(ConstraintPrismatic2D, GetUpperTranslation, () const, float), AS_CALL_THISCALL));

    // bool ConstraintPrismatic2D::GetEnableMotor() const
    methods.Push(RegisterObjectMethodArgs("bool ConstraintPrismatic2D::GetEnableMotor() const", "bool GetEnableMotor() const", AS_METHODPR(ConstraintPrismatic2D, GetEnableMotor, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ConstraintPrismatic2D::GetEnableMotor() const", "bool get_enableMotor() const", AS_METHODPR(ConstraintPrismatic2D, GetEnableMotor, () const, bool), AS_CALL_THISCALL));

    // float ConstraintPrismatic2D::GetMaxMotorForce() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintPrismatic2D::GetMaxMotorForce() const", "float GetMaxMotorForce() const", AS_METHODPR(ConstraintPrismatic2D, GetMaxMotorForce, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintPrismatic2D::GetMaxMotorForce() const", "float get_maxMotorForce() const", AS_METHODPR(ConstraintPrismatic2D, GetMaxMotorForce, () const, float), AS_CALL_THISCALL));

    // float ConstraintPrismatic2D::GetMotorSpeed() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintPrismatic2D::GetMotorSpeed() const", "float GetMotorSpeed() const", AS_METHODPR(ConstraintPrismatic2D, GetMotorSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintPrismatic2D::GetMotorSpeed() const", "float get_motorSpeed() const", AS_METHODPR(ConstraintPrismatic2D, GetMotorSpeed, () const, float), AS_CALL_THISCALL));
}

// class ConstraintPulley2D | File: ../Urho2D/ConstraintPulley2D.h
void CollectMembers_ConstraintPulley2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintPulley2D::SetOwnerBodyGroundAnchor(const Vector2& groundAnchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetOwnerBodyGroundAnchor(const Vector2& groundAnchor)", "void SetOwnerBodyGroundAnchor(const Vector2&in)", AS_METHODPR(ConstraintPulley2D, SetOwnerBodyGroundAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetOwnerBodyGroundAnchor(const Vector2& groundAnchor)", "void set_ownerBodyGroundAnchor(const Vector2&in)", AS_METHODPR(ConstraintPulley2D, SetOwnerBodyGroundAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintPulley2D::SetOtherBodyGroundAnchor(const Vector2& groundAnchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetOtherBodyGroundAnchor(const Vector2& groundAnchor)", "void SetOtherBodyGroundAnchor(const Vector2&in)", AS_METHODPR(ConstraintPulley2D, SetOtherBodyGroundAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetOtherBodyGroundAnchor(const Vector2& groundAnchor)", "void set_otherBodyGroundAnchor(const Vector2&in)", AS_METHODPR(ConstraintPulley2D, SetOtherBodyGroundAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintPulley2D::SetOwnerBodyAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetOwnerBodyAnchor(const Vector2& anchor)", "void SetOwnerBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintPulley2D, SetOwnerBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetOwnerBodyAnchor(const Vector2& anchor)", "void set_ownerBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintPulley2D, SetOwnerBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintPulley2D::SetOtherBodyAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetOtherBodyAnchor(const Vector2& anchor)", "void SetOtherBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintPulley2D, SetOtherBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetOtherBodyAnchor(const Vector2& anchor)", "void set_otherBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintPulley2D, SetOtherBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintPulley2D::SetRatio(float ratio)
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetRatio(float ratio)", "void SetRatio(float)", AS_METHODPR(ConstraintPulley2D, SetRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintPulley2D::SetRatio(float ratio)", "void set_ratio(float)", AS_METHODPR(ConstraintPulley2D, SetRatio, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintPulley2D::GetOwnerBodyGroundAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPulley2D::GetOwnerBodyGroundAnchor() const", "const Vector2& GetOwnerBodyGroundAnchor() const", AS_METHODPR(ConstraintPulley2D, GetOwnerBodyGroundAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPulley2D::GetOwnerBodyGroundAnchor() const", "const Vector2& get_ownerBodyGroundAnchor() const", AS_METHODPR(ConstraintPulley2D, GetOwnerBodyGroundAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& ConstraintPulley2D::GetOtherBodyGroundAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPulley2D::GetOtherBodyGroundAnchor() const", "const Vector2& GetOtherBodyGroundAnchor() const", AS_METHODPR(ConstraintPulley2D, GetOtherBodyGroundAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPulley2D::GetOtherBodyGroundAnchor() const", "const Vector2& get_otherBodyGroundAnchor() const", AS_METHODPR(ConstraintPulley2D, GetOtherBodyGroundAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& ConstraintPulley2D::GetOwnerBodyAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPulley2D::GetOwnerBodyAnchor() const", "const Vector2& GetOwnerBodyAnchor() const", AS_METHODPR(ConstraintPulley2D, GetOwnerBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPulley2D::GetOwnerBodyAnchor() const", "const Vector2& get_ownerBodyAnchor() const", AS_METHODPR(ConstraintPulley2D, GetOwnerBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& ConstraintPulley2D::GetOtherBodyAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPulley2D::GetOtherBodyAnchor() const", "const Vector2& GetOtherBodyAnchor() const", AS_METHODPR(ConstraintPulley2D, GetOtherBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintPulley2D::GetOtherBodyAnchor() const", "const Vector2& get_otherBodyAnchor() const", AS_METHODPR(ConstraintPulley2D, GetOtherBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // float ConstraintPulley2D::GetRatio() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintPulley2D::GetRatio() const", "float GetRatio() const", AS_METHODPR(ConstraintPulley2D, GetRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintPulley2D::GetRatio() const", "float get_ratio() const", AS_METHODPR(ConstraintPulley2D, GetRatio, () const, float), AS_CALL_THISCALL));
}

// class ConstraintRevolute2D | File: ../Urho2D/ConstraintRevolute2D.h
void CollectMembers_ConstraintRevolute2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintRevolute2D::SetAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetAnchor(const Vector2& anchor)", "void SetAnchor(const Vector2&in)", AS_METHODPR(ConstraintRevolute2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetAnchor(const Vector2& anchor)", "void set_anchor(const Vector2&in)", AS_METHODPR(ConstraintRevolute2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintRevolute2D::SetEnableLimit(bool enableLimit)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetEnableLimit(bool enableLimit)", "void SetEnableLimit(bool)", AS_METHODPR(ConstraintRevolute2D, SetEnableLimit, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetEnableLimit(bool enableLimit)", "void set_enableLimit(bool)", AS_METHODPR(ConstraintRevolute2D, SetEnableLimit, (bool), void), AS_CALL_THISCALL));

    // void ConstraintRevolute2D::SetLowerAngle(float lowerAngle)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetLowerAngle(float lowerAngle)", "void SetLowerAngle(float)", AS_METHODPR(ConstraintRevolute2D, SetLowerAngle, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetLowerAngle(float lowerAngle)", "void set_lowerAngle(float)", AS_METHODPR(ConstraintRevolute2D, SetLowerAngle, (float), void), AS_CALL_THISCALL));

    // void ConstraintRevolute2D::SetUpperAngle(float upperAngle)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetUpperAngle(float upperAngle)", "void SetUpperAngle(float)", AS_METHODPR(ConstraintRevolute2D, SetUpperAngle, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetUpperAngle(float upperAngle)", "void set_upperAngle(float)", AS_METHODPR(ConstraintRevolute2D, SetUpperAngle, (float), void), AS_CALL_THISCALL));

    // void ConstraintRevolute2D::SetEnableMotor(bool enableMotor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetEnableMotor(bool enableMotor)", "void SetEnableMotor(bool)", AS_METHODPR(ConstraintRevolute2D, SetEnableMotor, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetEnableMotor(bool enableMotor)", "void set_enableMotor(bool)", AS_METHODPR(ConstraintRevolute2D, SetEnableMotor, (bool), void), AS_CALL_THISCALL));

    // void ConstraintRevolute2D::SetMotorSpeed(float motorSpeed)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetMotorSpeed(float motorSpeed)", "void SetMotorSpeed(float)", AS_METHODPR(ConstraintRevolute2D, SetMotorSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetMotorSpeed(float motorSpeed)", "void set_motorSpeed(float)", AS_METHODPR(ConstraintRevolute2D, SetMotorSpeed, (float), void), AS_CALL_THISCALL));

    // void ConstraintRevolute2D::SetMaxMotorTorque(float maxMotorTorque)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetMaxMotorTorque(float maxMotorTorque)", "void SetMaxMotorTorque(float)", AS_METHODPR(ConstraintRevolute2D, SetMaxMotorTorque, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRevolute2D::SetMaxMotorTorque(float maxMotorTorque)", "void set_maxMotorTorque(float)", AS_METHODPR(ConstraintRevolute2D, SetMaxMotorTorque, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintRevolute2D::GetAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintRevolute2D::GetAnchor() const", "const Vector2& GetAnchor() const", AS_METHODPR(ConstraintRevolute2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintRevolute2D::GetAnchor() const", "const Vector2& get_anchor() const", AS_METHODPR(ConstraintRevolute2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // bool ConstraintRevolute2D::GetEnableLimit() const
    methods.Push(RegisterObjectMethodArgs("bool ConstraintRevolute2D::GetEnableLimit() const", "bool GetEnableLimit() const", AS_METHODPR(ConstraintRevolute2D, GetEnableLimit, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ConstraintRevolute2D::GetEnableLimit() const", "bool get_enableLimit() const", AS_METHODPR(ConstraintRevolute2D, GetEnableLimit, () const, bool), AS_CALL_THISCALL));

    // float ConstraintRevolute2D::GetLowerAngle() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintRevolute2D::GetLowerAngle() const", "float GetLowerAngle() const", AS_METHODPR(ConstraintRevolute2D, GetLowerAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintRevolute2D::GetLowerAngle() const", "float get_lowerAngle() const", AS_METHODPR(ConstraintRevolute2D, GetLowerAngle, () const, float), AS_CALL_THISCALL));

    // float ConstraintRevolute2D::GetUpperAngle() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintRevolute2D::GetUpperAngle() const", "float GetUpperAngle() const", AS_METHODPR(ConstraintRevolute2D, GetUpperAngle, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintRevolute2D::GetUpperAngle() const", "float get_upperAngle() const", AS_METHODPR(ConstraintRevolute2D, GetUpperAngle, () const, float), AS_CALL_THISCALL));

    // bool ConstraintRevolute2D::GetEnableMotor() const
    methods.Push(RegisterObjectMethodArgs("bool ConstraintRevolute2D::GetEnableMotor() const", "bool GetEnableMotor() const", AS_METHODPR(ConstraintRevolute2D, GetEnableMotor, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ConstraintRevolute2D::GetEnableMotor() const", "bool get_enableMotor() const", AS_METHODPR(ConstraintRevolute2D, GetEnableMotor, () const, bool), AS_CALL_THISCALL));

    // float ConstraintRevolute2D::GetMotorSpeed() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintRevolute2D::GetMotorSpeed() const", "float GetMotorSpeed() const", AS_METHODPR(ConstraintRevolute2D, GetMotorSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintRevolute2D::GetMotorSpeed() const", "float get_motorSpeed() const", AS_METHODPR(ConstraintRevolute2D, GetMotorSpeed, () const, float), AS_CALL_THISCALL));

    // float ConstraintRevolute2D::GetMaxMotorTorque() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintRevolute2D::GetMaxMotorTorque() const", "float GetMaxMotorTorque() const", AS_METHODPR(ConstraintRevolute2D, GetMaxMotorTorque, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintRevolute2D::GetMaxMotorTorque() const", "float get_maxMotorTorque() const", AS_METHODPR(ConstraintRevolute2D, GetMaxMotorTorque, () const, float), AS_CALL_THISCALL));
}

// class ConstraintRope2D | File: ../Urho2D/ConstraintRope2D.h
void CollectMembers_ConstraintRope2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintRope2D::SetOwnerBodyAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRope2D::SetOwnerBodyAnchor(const Vector2& anchor)", "void SetOwnerBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintRope2D, SetOwnerBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRope2D::SetOwnerBodyAnchor(const Vector2& anchor)", "void set_ownerBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintRope2D, SetOwnerBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintRope2D::SetOtherBodyAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRope2D::SetOtherBodyAnchor(const Vector2& anchor)", "void SetOtherBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintRope2D, SetOtherBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRope2D::SetOtherBodyAnchor(const Vector2& anchor)", "void set_otherBodyAnchor(const Vector2&in)", AS_METHODPR(ConstraintRope2D, SetOtherBodyAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintRope2D::SetMaxLength(float maxLength)
    methods.Push(RegisterObjectMethodArgs("void ConstraintRope2D::SetMaxLength(float maxLength)", "void SetMaxLength(float)", AS_METHODPR(ConstraintRope2D, SetMaxLength, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintRope2D::SetMaxLength(float maxLength)", "void set_maxLength(float)", AS_METHODPR(ConstraintRope2D, SetMaxLength, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintRope2D::GetOwnerBodyAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintRope2D::GetOwnerBodyAnchor() const", "const Vector2& GetOwnerBodyAnchor() const", AS_METHODPR(ConstraintRope2D, GetOwnerBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintRope2D::GetOwnerBodyAnchor() const", "const Vector2& get_ownerBodyAnchor() const", AS_METHODPR(ConstraintRope2D, GetOwnerBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& ConstraintRope2D::GetOtherBodyAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintRope2D::GetOtherBodyAnchor() const", "const Vector2& GetOtherBodyAnchor() const", AS_METHODPR(ConstraintRope2D, GetOtherBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintRope2D::GetOtherBodyAnchor() const", "const Vector2& get_otherBodyAnchor() const", AS_METHODPR(ConstraintRope2D, GetOtherBodyAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // float ConstraintRope2D::GetMaxLength() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintRope2D::GetMaxLength() const", "float GetMaxLength() const", AS_METHODPR(ConstraintRope2D, GetMaxLength, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintRope2D::GetMaxLength() const", "float get_maxLength() const", AS_METHODPR(ConstraintRope2D, GetMaxLength, () const, float), AS_CALL_THISCALL));
}

// class ConstraintWeld2D | File: ../Urho2D/ConstraintWeld2D.h
void CollectMembers_ConstraintWeld2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintWeld2D::SetAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWeld2D::SetAnchor(const Vector2& anchor)", "void SetAnchor(const Vector2&in)", AS_METHODPR(ConstraintWeld2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWeld2D::SetAnchor(const Vector2& anchor)", "void set_anchor(const Vector2&in)", AS_METHODPR(ConstraintWeld2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintWeld2D::SetFrequencyHz(float frequencyHz)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWeld2D::SetFrequencyHz(float frequencyHz)", "void SetFrequencyHz(float)", AS_METHODPR(ConstraintWeld2D, SetFrequencyHz, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWeld2D::SetFrequencyHz(float frequencyHz)", "void set_frequencyHz(float)", AS_METHODPR(ConstraintWeld2D, SetFrequencyHz, (float), void), AS_CALL_THISCALL));

    // void ConstraintWeld2D::SetDampingRatio(float dampingRatio)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWeld2D::SetDampingRatio(float dampingRatio)", "void SetDampingRatio(float)", AS_METHODPR(ConstraintWeld2D, SetDampingRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWeld2D::SetDampingRatio(float dampingRatio)", "void set_dampingRatio(float)", AS_METHODPR(ConstraintWeld2D, SetDampingRatio, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintWeld2D::GetAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintWeld2D::GetAnchor() const", "const Vector2& GetAnchor() const", AS_METHODPR(ConstraintWeld2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintWeld2D::GetAnchor() const", "const Vector2& get_anchor() const", AS_METHODPR(ConstraintWeld2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // float ConstraintWeld2D::GetFrequencyHz() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintWeld2D::GetFrequencyHz() const", "float GetFrequencyHz() const", AS_METHODPR(ConstraintWeld2D, GetFrequencyHz, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintWeld2D::GetFrequencyHz() const", "float get_frequencyHz() const", AS_METHODPR(ConstraintWeld2D, GetFrequencyHz, () const, float), AS_CALL_THISCALL));

    // float ConstraintWeld2D::GetDampingRatio() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintWeld2D::GetDampingRatio() const", "float GetDampingRatio() const", AS_METHODPR(ConstraintWeld2D, GetDampingRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintWeld2D::GetDampingRatio() const", "float get_dampingRatio() const", AS_METHODPR(ConstraintWeld2D, GetDampingRatio, () const, float), AS_CALL_THISCALL));
}

// class ConstraintWheel2D | File: ../Urho2D/ConstraintWheel2D.h
void CollectMembers_ConstraintWheel2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Constraint2D(methods);

    Remove(methods, "static void Constraint2D::RegisterObject(Context* context)");

    // void ConstraintWheel2D::SetAnchor(const Vector2& anchor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetAnchor(const Vector2& anchor)", "void SetAnchor(const Vector2&in)", AS_METHODPR(ConstraintWheel2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetAnchor(const Vector2& anchor)", "void set_anchor(const Vector2&in)", AS_METHODPR(ConstraintWheel2D, SetAnchor, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintWheel2D::SetAxis(const Vector2& axis)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetAxis(const Vector2& axis)", "void SetAxis(const Vector2&in)", AS_METHODPR(ConstraintWheel2D, SetAxis, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetAxis(const Vector2& axis)", "void set_axis(const Vector2&in)", AS_METHODPR(ConstraintWheel2D, SetAxis, (const Vector2&), void), AS_CALL_THISCALL));

    // void ConstraintWheel2D::SetEnableMotor(bool enableMotor)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetEnableMotor(bool enableMotor)", "void SetEnableMotor(bool)", AS_METHODPR(ConstraintWheel2D, SetEnableMotor, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetEnableMotor(bool enableMotor)", "void set_enableMotor(bool)", AS_METHODPR(ConstraintWheel2D, SetEnableMotor, (bool), void), AS_CALL_THISCALL));

    // void ConstraintWheel2D::SetMaxMotorTorque(float maxMotorTorque)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetMaxMotorTorque(float maxMotorTorque)", "void SetMaxMotorTorque(float)", AS_METHODPR(ConstraintWheel2D, SetMaxMotorTorque, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetMaxMotorTorque(float maxMotorTorque)", "void set_maxMotorTorque(float)", AS_METHODPR(ConstraintWheel2D, SetMaxMotorTorque, (float), void), AS_CALL_THISCALL));

    // void ConstraintWheel2D::SetMotorSpeed(float motorSpeed)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetMotorSpeed(float motorSpeed)", "void SetMotorSpeed(float)", AS_METHODPR(ConstraintWheel2D, SetMotorSpeed, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetMotorSpeed(float motorSpeed)", "void set_motorSpeed(float)", AS_METHODPR(ConstraintWheel2D, SetMotorSpeed, (float), void), AS_CALL_THISCALL));

    // void ConstraintWheel2D::SetFrequencyHz(float frequencyHz)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetFrequencyHz(float frequencyHz)", "void SetFrequencyHz(float)", AS_METHODPR(ConstraintWheel2D, SetFrequencyHz, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetFrequencyHz(float frequencyHz)", "void set_frequencyHz(float)", AS_METHODPR(ConstraintWheel2D, SetFrequencyHz, (float), void), AS_CALL_THISCALL));

    // void ConstraintWheel2D::SetDampingRatio(float dampingRatio)
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetDampingRatio(float dampingRatio)", "void SetDampingRatio(float)", AS_METHODPR(ConstraintWheel2D, SetDampingRatio, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ConstraintWheel2D::SetDampingRatio(float dampingRatio)", "void set_dampingRatio(float)", AS_METHODPR(ConstraintWheel2D, SetDampingRatio, (float), void), AS_CALL_THISCALL));

    // const Vector2& ConstraintWheel2D::GetAnchor() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintWheel2D::GetAnchor() const", "const Vector2& GetAnchor() const", AS_METHODPR(ConstraintWheel2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintWheel2D::GetAnchor() const", "const Vector2& get_anchor() const", AS_METHODPR(ConstraintWheel2D, GetAnchor, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& ConstraintWheel2D::GetAxis() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintWheel2D::GetAxis() const", "const Vector2& GetAxis() const", AS_METHODPR(ConstraintWheel2D, GetAxis, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& ConstraintWheel2D::GetAxis() const", "const Vector2& get_axis() const", AS_METHODPR(ConstraintWheel2D, GetAxis, () const, const Vector2&), AS_CALL_THISCALL));

    // bool ConstraintWheel2D::GetEnableMotor() const
    methods.Push(RegisterObjectMethodArgs("bool ConstraintWheel2D::GetEnableMotor() const", "bool GetEnableMotor() const", AS_METHODPR(ConstraintWheel2D, GetEnableMotor, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ConstraintWheel2D::GetEnableMotor() const", "bool get_enableMotor() const", AS_METHODPR(ConstraintWheel2D, GetEnableMotor, () const, bool), AS_CALL_THISCALL));

    // float ConstraintWheel2D::GetMaxMotorTorque() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintWheel2D::GetMaxMotorTorque() const", "float GetMaxMotorTorque() const", AS_METHODPR(ConstraintWheel2D, GetMaxMotorTorque, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintWheel2D::GetMaxMotorTorque() const", "float get_maxMotorTorque() const", AS_METHODPR(ConstraintWheel2D, GetMaxMotorTorque, () const, float), AS_CALL_THISCALL));

    // float ConstraintWheel2D::GetMotorSpeed() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintWheel2D::GetMotorSpeed() const", "float GetMotorSpeed() const", AS_METHODPR(ConstraintWheel2D, GetMotorSpeed, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintWheel2D::GetMotorSpeed() const", "float get_motorSpeed() const", AS_METHODPR(ConstraintWheel2D, GetMotorSpeed, () const, float), AS_CALL_THISCALL));

    // float ConstraintWheel2D::GetFrequencyHz() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintWheel2D::GetFrequencyHz() const", "float GetFrequencyHz() const", AS_METHODPR(ConstraintWheel2D, GetFrequencyHz, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintWheel2D::GetFrequencyHz() const", "float get_frequencyHz() const", AS_METHODPR(ConstraintWheel2D, GetFrequencyHz, () const, float), AS_CALL_THISCALL));

    // float ConstraintWheel2D::GetDampingRatio() const
    methods.Push(RegisterObjectMethodArgs("float ConstraintWheel2D::GetDampingRatio() const", "float GetDampingRatio() const", AS_METHODPR(ConstraintWheel2D, GetDampingRatio, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float ConstraintWheel2D::GetDampingRatio() const", "float get_dampingRatio() const", AS_METHODPR(ConstraintWheel2D, GetDampingRatio, () const, float), AS_CALL_THISCALL));
}

// struct DelayedWorldTransform2D | File: ../Urho2D/PhysicsWorld2D.h
void CollectMembers_DelayedWorldTransform2D(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Drawable2D | File: ../Urho2D/Drawable2D.h
void CollectMembers_Drawable2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "void Drawable::OnSetEnabled() override");

    // const Vector<SourceBatch2D>& Drawable2D::GetSourceBatches()
    // Error: type "const Vector<SourceBatch2D>&" can not automatically bind

    // void Drawable2D::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void Drawable2D::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(Drawable2D, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void Drawable2D::SetLayer(int layer)
    methods.Push(RegisterObjectMethodArgs("void Drawable2D::SetLayer(int layer)", "void SetLayer(int)", AS_METHODPR(Drawable2D, SetLayer, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable2D::SetLayer(int layer)", "void set_layer(int)", AS_METHODPR(Drawable2D, SetLayer, (int), void), AS_CALL_THISCALL));

    // void Drawable2D::SetOrderInLayer(int orderInLayer)
    methods.Push(RegisterObjectMethodArgs("void Drawable2D::SetOrderInLayer(int orderInLayer)", "void SetOrderInLayer(int)", AS_METHODPR(Drawable2D, SetOrderInLayer, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Drawable2D::SetOrderInLayer(int orderInLayer)", "void set_orderInLayer(int)", AS_METHODPR(Drawable2D, SetOrderInLayer, (int), void), AS_CALL_THISCALL));

    // int Drawable2D::GetLayer() const
    methods.Push(RegisterObjectMethodArgs("int Drawable2D::GetLayer() const", "int GetLayer() const", AS_METHODPR(Drawable2D, GetLayer, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Drawable2D::GetLayer() const", "int get_layer() const", AS_METHODPR(Drawable2D, GetLayer, () const, int), AS_CALL_THISCALL));

    // int Drawable2D::GetOrderInLayer() const
    methods.Push(RegisterObjectMethodArgs("int Drawable2D::GetOrderInLayer() const", "int GetOrderInLayer() const", AS_METHODPR(Drawable2D, GetOrderInLayer, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int Drawable2D::GetOrderInLayer() const", "int get_orderInLayer() const", AS_METHODPR(Drawable2D, GetOrderInLayer, () const, int), AS_CALL_THISCALL));
}

// struct Particle2D | File: ../Urho2D/ParticleEmitter2D.h
void CollectMembers_Particle2D(Vector<RegisterObjectMethodArgs>& methods)
{
}

// SharedPtr<ParticleEffect2D> ParticleEffect2D::Clone(const String& cloneName=String::EMPTY) const
#ifdef URHO3D_URHO2D
// SharedPtr<ParticleEffect2D> ParticleEffect2D::Clone(const String& cloneName=String::EMPTY) const | File: ../Urho2D/ParticleEffect2D.h
static ParticleEffect2D* ParticleEffect2D_Clone_String(ParticleEffect2D* ptr, const String& cloneName)
{
    SharedPtr<ParticleEffect2D> result = ptr->Clone(cloneName);
    return result.Detach();
}
#endif


// class ParticleEffect2D | File: ../Urho2D/ParticleEffect2D.h
void CollectMembers_ParticleEffect2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");
    Remove(methods, "virtual bool Resource::Save(Serializer& dest) const");

    // bool ParticleEffect2D::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect2D::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(ParticleEffect2D, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool ParticleEffect2D::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect2D::EndLoad() override", "bool EndLoad()", AS_METHODPR(ParticleEffect2D, EndLoad, (), bool), AS_CALL_THISCALL));

    // bool ParticleEffect2D::Save(Serializer& dest) const override
    methods.Push(RegisterObjectMethodArgs("bool ParticleEffect2D::Save(Serializer& dest) const override", "bool Save(Serializer&) const", AS_METHODPR(ParticleEffect2D, Save, (Serializer&) const, bool), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetSprite(Sprite2D* sprite)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetSprite(Sprite2D* sprite)", "void SetSprite(Sprite2D@+)", AS_METHODPR(ParticleEffect2D, SetSprite, (Sprite2D*), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetSourcePositionVariance(const Vector2& sourcePositionVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetSourcePositionVariance(const Vector2& sourcePositionVariance)", "void SetSourcePositionVariance(const Vector2&in)", AS_METHODPR(ParticleEffect2D, SetSourcePositionVariance, (const Vector2&), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetSpeed(float speed)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetSpeed(float speed)", "void SetSpeed(float)", AS_METHODPR(ParticleEffect2D, SetSpeed, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetSpeedVariance(float speedVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetSpeedVariance(float speedVariance)", "void SetSpeedVariance(float)", AS_METHODPR(ParticleEffect2D, SetSpeedVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetParticleLifeSpan(float particleLifeSpan)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetParticleLifeSpan(float particleLifeSpan)", "void SetParticleLifeSpan(float)", AS_METHODPR(ParticleEffect2D, SetParticleLifeSpan, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetParticleLifespanVariance(float particleLifespanVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetParticleLifespanVariance(float particleLifespanVariance)", "void SetParticleLifespanVariance(float)", AS_METHODPR(ParticleEffect2D, SetParticleLifespanVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetAngle(float angle)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetAngle(float angle)", "void SetAngle(float)", AS_METHODPR(ParticleEffect2D, SetAngle, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetAngleVariance(float angleVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetAngleVariance(float angleVariance)", "void SetAngleVariance(float)", AS_METHODPR(ParticleEffect2D, SetAngleVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetGravity(const Vector2& gravity)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetGravity(const Vector2& gravity)", "void SetGravity(const Vector2&in)", AS_METHODPR(ParticleEffect2D, SetGravity, (const Vector2&), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetRadialAcceleration(float radialAcceleration)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetRadialAcceleration(float radialAcceleration)", "void SetRadialAcceleration(float)", AS_METHODPR(ParticleEffect2D, SetRadialAcceleration, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetTangentialAcceleration(float tangentialAcceleration)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetTangentialAcceleration(float tangentialAcceleration)", "void SetTangentialAcceleration(float)", AS_METHODPR(ParticleEffect2D, SetTangentialAcceleration, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetRadialAccelVariance(float radialAccelVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetRadialAccelVariance(float radialAccelVariance)", "void SetRadialAccelVariance(float)", AS_METHODPR(ParticleEffect2D, SetRadialAccelVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetTangentialAccelVariance(float tangentialAccelVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetTangentialAccelVariance(float tangentialAccelVariance)", "void SetTangentialAccelVariance(float)", AS_METHODPR(ParticleEffect2D, SetTangentialAccelVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetStartColor(const Color& startColor)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetStartColor(const Color& startColor)", "void SetStartColor(const Color&in)", AS_METHODPR(ParticleEffect2D, SetStartColor, (const Color&), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetStartColorVariance(const Color& startColorVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetStartColorVariance(const Color& startColorVariance)", "void SetStartColorVariance(const Color&in)", AS_METHODPR(ParticleEffect2D, SetStartColorVariance, (const Color&), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetFinishColor(const Color& finishColor)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetFinishColor(const Color& finishColor)", "void SetFinishColor(const Color&in)", AS_METHODPR(ParticleEffect2D, SetFinishColor, (const Color&), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetFinishColorVariance(const Color& finishColorVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetFinishColorVariance(const Color& finishColorVariance)", "void SetFinishColorVariance(const Color&in)", AS_METHODPR(ParticleEffect2D, SetFinishColorVariance, (const Color&), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetMaxParticles(int maxParticles)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetMaxParticles(int maxParticles)", "void SetMaxParticles(int)", AS_METHODPR(ParticleEffect2D, SetMaxParticles, (int), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetStartParticleSize(float startParticleSize)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetStartParticleSize(float startParticleSize)", "void SetStartParticleSize(float)", AS_METHODPR(ParticleEffect2D, SetStartParticleSize, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetStartParticleSizeVariance(float startParticleSizeVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetStartParticleSizeVariance(float startParticleSizeVariance)", "void SetStartParticleSizeVariance(float)", AS_METHODPR(ParticleEffect2D, SetStartParticleSizeVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetFinishParticleSize(float finishParticleSize)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetFinishParticleSize(float finishParticleSize)", "void SetFinishParticleSize(float)", AS_METHODPR(ParticleEffect2D, SetFinishParticleSize, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetFinishParticleSizeVariance(float finishParticleSizeVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetFinishParticleSizeVariance(float finishParticleSizeVariance)", "void SetFinishParticleSizeVariance(float)", AS_METHODPR(ParticleEffect2D, SetFinishParticleSizeVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetDuration(float duration)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetDuration(float duration)", "void SetDuration(float)", AS_METHODPR(ParticleEffect2D, SetDuration, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetEmitterType(EmitterType2D emitterType)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetEmitterType(EmitterType2D emitterType)", "void SetEmitterType(EmitterType2D)", AS_METHODPR(ParticleEffect2D, SetEmitterType, (EmitterType2D), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetMaxRadius(float maxRadius)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetMaxRadius(float maxRadius)", "void SetMaxRadius(float)", AS_METHODPR(ParticleEffect2D, SetMaxRadius, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetMaxRadiusVariance(float maxRadiusVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetMaxRadiusVariance(float maxRadiusVariance)", "void SetMaxRadiusVariance(float)", AS_METHODPR(ParticleEffect2D, SetMaxRadiusVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetMinRadius(float minRadius)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetMinRadius(float minRadius)", "void SetMinRadius(float)", AS_METHODPR(ParticleEffect2D, SetMinRadius, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetMinRadiusVariance(float minRadiusVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetMinRadiusVariance(float minRadiusVariance)", "void SetMinRadiusVariance(float)", AS_METHODPR(ParticleEffect2D, SetMinRadiusVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetRotatePerSecond(float rotatePerSecond)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetRotatePerSecond(float rotatePerSecond)", "void SetRotatePerSecond(float)", AS_METHODPR(ParticleEffect2D, SetRotatePerSecond, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetRotatePerSecondVariance(float rotatePerSecondVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetRotatePerSecondVariance(float rotatePerSecondVariance)", "void SetRotatePerSecondVariance(float)", AS_METHODPR(ParticleEffect2D, SetRotatePerSecondVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetBlendMode(BlendMode blendMode)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetBlendMode(BlendMode blendMode)", "void SetBlendMode(BlendMode)", AS_METHODPR(ParticleEffect2D, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetRotationStart(float rotationStart)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetRotationStart(float rotationStart)", "void SetRotationStart(float)", AS_METHODPR(ParticleEffect2D, SetRotationStart, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetRotationStartVariance(float rotationStartVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetRotationStartVariance(float rotationStartVariance)", "void SetRotationStartVariance(float)", AS_METHODPR(ParticleEffect2D, SetRotationStartVariance, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetRotationEnd(float rotationEnd)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetRotationEnd(float rotationEnd)", "void SetRotationEnd(float)", AS_METHODPR(ParticleEffect2D, SetRotationEnd, (float), void), AS_CALL_THISCALL));

    // void ParticleEffect2D::SetRotationEndVariance(float rotationEndVariance)
    methods.Push(RegisterObjectMethodArgs("void ParticleEffect2D::SetRotationEndVariance(float rotationEndVariance)", "void SetRotationEndVariance(float)", AS_METHODPR(ParticleEffect2D, SetRotationEndVariance, (float), void), AS_CALL_THISCALL));

    // SharedPtr<ParticleEffect2D> ParticleEffect2D::Clone(const String& cloneName=String::EMPTY) const
    methods.Push(RegisterObjectMethodArgs("SharedPtr<ParticleEffect2D> ParticleEffect2D::Clone(const String& cloneName=String::EMPTY) const", "ParticleEffect2D@+ Clone(const String&in = String::EMPTY) const", AS_FUNCTION_OBJFIRST(ParticleEffect2D_Clone_String), AS_CALL_CDECL_OBJFIRST));

    // Sprite2D* ParticleEffect2D::GetSprite() const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* ParticleEffect2D::GetSprite() const", "Sprite2D@+ GetSprite() const", AS_METHODPR(ParticleEffect2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));

    // const Vector2& ParticleEffect2D::GetSourcePositionVariance() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ParticleEffect2D::GetSourcePositionVariance() const", "const Vector2& GetSourcePositionVariance() const", AS_METHODPR(ParticleEffect2D, GetSourcePositionVariance, () const, const Vector2&), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetSpeed() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetSpeed() const", "float GetSpeed() const", AS_METHODPR(ParticleEffect2D, GetSpeed, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetSpeedVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetSpeedVariance() const", "float GetSpeedVariance() const", AS_METHODPR(ParticleEffect2D, GetSpeedVariance, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetParticleLifeSpan() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetParticleLifeSpan() const", "float GetParticleLifeSpan() const", AS_METHODPR(ParticleEffect2D, GetParticleLifeSpan, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetParticleLifespanVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetParticleLifespanVariance() const", "float GetParticleLifespanVariance() const", AS_METHODPR(ParticleEffect2D, GetParticleLifespanVariance, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetAngle() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetAngle() const", "float GetAngle() const", AS_METHODPR(ParticleEffect2D, GetAngle, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetAngleVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetAngleVariance() const", "float GetAngleVariance() const", AS_METHODPR(ParticleEffect2D, GetAngleVariance, () const, float), AS_CALL_THISCALL));

    // const Vector2& ParticleEffect2D::GetGravity() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& ParticleEffect2D::GetGravity() const", "const Vector2& GetGravity() const", AS_METHODPR(ParticleEffect2D, GetGravity, () const, const Vector2&), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetRadialAcceleration() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetRadialAcceleration() const", "float GetRadialAcceleration() const", AS_METHODPR(ParticleEffect2D, GetRadialAcceleration, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetTangentialAcceleration() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetTangentialAcceleration() const", "float GetTangentialAcceleration() const", AS_METHODPR(ParticleEffect2D, GetTangentialAcceleration, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetRadialAccelVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetRadialAccelVariance() const", "float GetRadialAccelVariance() const", AS_METHODPR(ParticleEffect2D, GetRadialAccelVariance, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetTangentialAccelVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetTangentialAccelVariance() const", "float GetTangentialAccelVariance() const", AS_METHODPR(ParticleEffect2D, GetTangentialAccelVariance, () const, float), AS_CALL_THISCALL));

    // const Color& ParticleEffect2D::GetStartColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& ParticleEffect2D::GetStartColor() const", "const Color& GetStartColor() const", AS_METHODPR(ParticleEffect2D, GetStartColor, () const, const Color&), AS_CALL_THISCALL));

    // const Color& ParticleEffect2D::GetStartColorVariance() const
    methods.Push(RegisterObjectMethodArgs("const Color& ParticleEffect2D::GetStartColorVariance() const", "const Color& GetStartColorVariance() const", AS_METHODPR(ParticleEffect2D, GetStartColorVariance, () const, const Color&), AS_CALL_THISCALL));

    // const Color& ParticleEffect2D::GetFinishColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& ParticleEffect2D::GetFinishColor() const", "const Color& GetFinishColor() const", AS_METHODPR(ParticleEffect2D, GetFinishColor, () const, const Color&), AS_CALL_THISCALL));

    // const Color& ParticleEffect2D::GetFinishColorVariance() const
    methods.Push(RegisterObjectMethodArgs("const Color& ParticleEffect2D::GetFinishColorVariance() const", "const Color& GetFinishColorVariance() const", AS_METHODPR(ParticleEffect2D, GetFinishColorVariance, () const, const Color&), AS_CALL_THISCALL));

    // int ParticleEffect2D::GetMaxParticles() const
    methods.Push(RegisterObjectMethodArgs("int ParticleEffect2D::GetMaxParticles() const", "int GetMaxParticles() const", AS_METHODPR(ParticleEffect2D, GetMaxParticles, () const, int), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetStartParticleSize() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetStartParticleSize() const", "float GetStartParticleSize() const", AS_METHODPR(ParticleEffect2D, GetStartParticleSize, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetStartParticleSizeVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetStartParticleSizeVariance() const", "float GetStartParticleSizeVariance() const", AS_METHODPR(ParticleEffect2D, GetStartParticleSizeVariance, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetFinishParticleSize() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetFinishParticleSize() const", "float GetFinishParticleSize() const", AS_METHODPR(ParticleEffect2D, GetFinishParticleSize, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetFinishParticleSizeVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetFinishParticleSizeVariance() const", "float GetFinishParticleSizeVariance() const", AS_METHODPR(ParticleEffect2D, GetFinishParticleSizeVariance, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetDuration() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetDuration() const", "float GetDuration() const", AS_METHODPR(ParticleEffect2D, GetDuration, () const, float), AS_CALL_THISCALL));

    // EmitterType2D ParticleEffect2D::GetEmitterType() const
    methods.Push(RegisterObjectMethodArgs("EmitterType2D ParticleEffect2D::GetEmitterType() const", "EmitterType2D GetEmitterType() const", AS_METHODPR(ParticleEffect2D, GetEmitterType, () const, EmitterType2D), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetMaxRadius() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetMaxRadius() const", "float GetMaxRadius() const", AS_METHODPR(ParticleEffect2D, GetMaxRadius, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetMaxRadiusVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetMaxRadiusVariance() const", "float GetMaxRadiusVariance() const", AS_METHODPR(ParticleEffect2D, GetMaxRadiusVariance, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetMinRadius() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetMinRadius() const", "float GetMinRadius() const", AS_METHODPR(ParticleEffect2D, GetMinRadius, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetMinRadiusVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetMinRadiusVariance() const", "float GetMinRadiusVariance() const", AS_METHODPR(ParticleEffect2D, GetMinRadiusVariance, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetRotatePerSecond() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetRotatePerSecond() const", "float GetRotatePerSecond() const", AS_METHODPR(ParticleEffect2D, GetRotatePerSecond, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetRotatePerSecondVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetRotatePerSecondVariance() const", "float GetRotatePerSecondVariance() const", AS_METHODPR(ParticleEffect2D, GetRotatePerSecondVariance, () const, float), AS_CALL_THISCALL));

    // BlendMode ParticleEffect2D::GetBlendMode() const
    methods.Push(RegisterObjectMethodArgs("BlendMode ParticleEffect2D::GetBlendMode() const", "BlendMode GetBlendMode() const", AS_METHODPR(ParticleEffect2D, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetRotationStart() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetRotationStart() const", "float GetRotationStart() const", AS_METHODPR(ParticleEffect2D, GetRotationStart, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetRotationStartVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetRotationStartVariance() const", "float GetRotationStartVariance() const", AS_METHODPR(ParticleEffect2D, GetRotationStartVariance, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetRotationEnd() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetRotationEnd() const", "float GetRotationEnd() const", AS_METHODPR(ParticleEffect2D, GetRotationEnd, () const, float), AS_CALL_THISCALL));

    // float ParticleEffect2D::GetRotationEndVariance() const
    methods.Push(RegisterObjectMethodArgs("float ParticleEffect2D::GetRotationEndVariance() const", "float GetRotationEndVariance() const", AS_METHODPR(ParticleEffect2D, GetRotationEndVariance, () const, float), AS_CALL_THISCALL));
}

// class ParticleEmitter2D | File: ../Urho2D/ParticleEmitter2D.h
void CollectMembers_ParticleEmitter2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable2D(methods);

    Remove(methods, "static void Drawable2D::RegisterObject(Context* context)");
    Remove(methods, "virtual void Drawable::Update(const FrameInfo& frame)");
    Remove(methods, "void Drawable2D::OnSetEnabled() override");

    // void ParticleEmitter2D::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(ParticleEmitter2D, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void ParticleEmitter2D::SetEffect(ParticleEffect2D* effect)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetEffect(ParticleEffect2D* effect)", "void SetEffect(ParticleEffect2D@+)", AS_METHODPR(ParticleEmitter2D, SetEffect, (ParticleEffect2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetEffect(ParticleEffect2D* effect)", "void set_effect(ParticleEffect2D@+)", AS_METHODPR(ParticleEmitter2D, SetEffect, (ParticleEffect2D*), void), AS_CALL_THISCALL));

    // void ParticleEmitter2D::SetSprite(Sprite2D* sprite)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetSprite(Sprite2D* sprite)", "void SetSprite(Sprite2D@+)", AS_METHODPR(ParticleEmitter2D, SetSprite, (Sprite2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetSprite(Sprite2D* sprite)", "void set_sprite(Sprite2D@+)", AS_METHODPR(ParticleEmitter2D, SetSprite, (Sprite2D*), void), AS_CALL_THISCALL));

    // void ParticleEmitter2D::SetBlendMode(BlendMode blendMode)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetBlendMode(BlendMode blendMode)", "void SetBlendMode(BlendMode)", AS_METHODPR(ParticleEmitter2D, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetBlendMode(BlendMode blendMode)", "void set_blendMode(BlendMode)", AS_METHODPR(ParticleEmitter2D, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));

    // void ParticleEmitter2D::SetMaxParticles(unsigned maxParticles)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetMaxParticles(unsigned maxParticles)", "void SetMaxParticles(uint)", AS_METHODPR(ParticleEmitter2D, SetMaxParticles, (unsigned), void), AS_CALL_THISCALL));

    // void ParticleEmitter2D::SetEmitting(bool enable)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetEmitting(bool enable)", "void SetEmitting(bool)", AS_METHODPR(ParticleEmitter2D, SetEmitting, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetEmitting(bool enable)", "void set_emitting(bool)", AS_METHODPR(ParticleEmitter2D, SetEmitting, (bool), void), AS_CALL_THISCALL));

    // ParticleEffect2D* ParticleEmitter2D::GetEffect() const
    methods.Push(RegisterObjectMethodArgs("ParticleEffect2D* ParticleEmitter2D::GetEffect() const", "ParticleEffect2D@+ GetEffect() const", AS_METHODPR(ParticleEmitter2D, GetEffect, () const, ParticleEffect2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("ParticleEffect2D* ParticleEmitter2D::GetEffect() const", "ParticleEffect2D@+ get_effect() const", AS_METHODPR(ParticleEmitter2D, GetEffect, () const, ParticleEffect2D*), AS_CALL_THISCALL));

    // Sprite2D* ParticleEmitter2D::GetSprite() const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* ParticleEmitter2D::GetSprite() const", "Sprite2D@+ GetSprite() const", AS_METHODPR(ParticleEmitter2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Sprite2D* ParticleEmitter2D::GetSprite() const", "Sprite2D@+ get_sprite() const", AS_METHODPR(ParticleEmitter2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));

    // BlendMode ParticleEmitter2D::GetBlendMode() const
    methods.Push(RegisterObjectMethodArgs("BlendMode ParticleEmitter2D::GetBlendMode() const", "BlendMode GetBlendMode() const", AS_METHODPR(ParticleEmitter2D, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BlendMode ParticleEmitter2D::GetBlendMode() const", "BlendMode get_blendMode() const", AS_METHODPR(ParticleEmitter2D, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));

    // unsigned ParticleEmitter2D::GetMaxParticles() const
    methods.Push(RegisterObjectMethodArgs("unsigned ParticleEmitter2D::GetMaxParticles() const", "uint GetMaxParticles() const", AS_METHODPR(ParticleEmitter2D, GetMaxParticles, () const, unsigned), AS_CALL_THISCALL));

    // void ParticleEmitter2D::SetParticleEffectAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetParticleEffectAttr(const ResourceRef& value)", "void SetParticleEffectAttr(const ResourceRef&in)", AS_METHODPR(ParticleEmitter2D, SetParticleEffectAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef ParticleEmitter2D::GetParticleEffectAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef ParticleEmitter2D::GetParticleEffectAttr() const", "ResourceRef GetParticleEffectAttr() const", AS_METHODPR(ParticleEmitter2D, GetParticleEffectAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void ParticleEmitter2D::SetSpriteAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void ParticleEmitter2D::SetSpriteAttr(const ResourceRef& value)", "void SetSpriteAttr(const ResourceRef&in)", AS_METHODPR(ParticleEmitter2D, SetSpriteAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef ParticleEmitter2D::GetSpriteAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef ParticleEmitter2D::GetSpriteAttr() const", "ResourceRef GetSpriteAttr() const", AS_METHODPR(ParticleEmitter2D, GetSpriteAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // bool ParticleEmitter2D::IsEmitting() const
    methods.Push(RegisterObjectMethodArgs("bool ParticleEmitter2D::IsEmitting() const", "bool IsEmitting() const", AS_METHODPR(ParticleEmitter2D, IsEmitting, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool ParticleEmitter2D::IsEmitting() const", "bool get_emitting() const", AS_METHODPR(ParticleEmitter2D, IsEmitting, () const, bool), AS_CALL_THISCALL));
}

// struct PhysicsRaycastResult2D | File: ../Urho2D/PhysicsWorld2D.h
void CollectMembers_PhysicsRaycastResult2D(Vector<RegisterObjectMethodArgs>& methods)
{
    // bool PhysicsRaycastResult2D::operator!=(const PhysicsRaycastResult2D& rhs) const
    // Only operator== is needed
}

// class PhysicsWorld2D | File: ../Urho2D/PhysicsWorld2D.h
void CollectMembers_PhysicsWorld2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // void PhysicsWorld2D::BeginContact(b2Contact* contact) override
    // Error: type "b2Contact*" can not automatically bind

    // void PhysicsWorld2D::DrawCircle(const b2Vec2& center, float32 radius, const b2Color& color) override
    // Error: type "const b2Vec2&" can not automatically bind

    // void PhysicsWorld2D::DrawPoint(const b2Vec2& p, float32 size, const b2Color& color) override
    // Error: type "const b2Vec2&" can not automatically bind

    // void PhysicsWorld2D::DrawPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) override
    // Error: type "const b2Vec2*" can not automatically bind

    // void PhysicsWorld2D::DrawSegment(const b2Vec2& p1, const b2Vec2& p2, const b2Color& color) override
    // Error: type "const b2Vec2&" can not automatically bind

    // void PhysicsWorld2D::DrawSolidCircle(const b2Vec2& center, float32 radius, const b2Vec2& axis, const b2Color& color) override
    // Error: type "const b2Vec2&" can not automatically bind

    // void PhysicsWorld2D::DrawSolidPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) override
    // Error: type "const b2Vec2*" can not automatically bind

    // void PhysicsWorld2D::DrawTransform(const b2Transform& xf) override
    // Error: type "const b2Transform&" can not automatically bind

    // void PhysicsWorld2D::EndContact(b2Contact* contact) override
    // Error: type "b2Contact*" can not automatically bind

    // void PhysicsWorld2D::GetRigidBodies(PODVector<RigidBody2D*>& results, const Rect& aabb, unsigned collisionMask=M_MAX_UNSIGNED)
    // Error: type "PODVector<RigidBody2D*>&" can not automatically bind

    // b2World* PhysicsWorld2D::GetWorld()
    // Error: type "b2World*" can not automatically bind

    // void PhysicsWorld2D::PreSolve(b2Contact* contact, const b2Manifold* oldManifold) override
    // Error: type "b2Contact*" can not automatically bind

    // void PhysicsWorld2D::Raycast(PODVector<PhysicsRaycastResult2D>& results, const Vector2& startPoint, const Vector2& endPoint, unsigned collisionMask=M_MAX_UNSIGNED)
    // Error: type "PODVector<PhysicsRaycastResult2D>&" can not automatically bind

    // void PhysicsWorld2D::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(PhysicsWorld2D, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::Update(float timeStep)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::Update(float timeStep)", "void Update(float)", AS_METHODPR(PhysicsWorld2D, Update, (float), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::DrawDebugGeometry()
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::DrawDebugGeometry()", "void DrawDebugGeometry()", AS_METHODPR(PhysicsWorld2D, DrawDebugGeometry, (), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetUpdateEnabled(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetUpdateEnabled(bool enable)", "void SetUpdateEnabled(bool)", AS_METHODPR(PhysicsWorld2D, SetUpdateEnabled, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetUpdateEnabled(bool enable)", "void set_updateEnabled(bool)", AS_METHODPR(PhysicsWorld2D, SetUpdateEnabled, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetDrawShape(bool drawShape)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawShape(bool drawShape)", "void SetDrawShape(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawShape, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawShape(bool drawShape)", "void set_drawShape(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawShape, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetDrawJoint(bool drawJoint)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawJoint(bool drawJoint)", "void SetDrawJoint(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawJoint, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawJoint(bool drawJoint)", "void set_drawJoint(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawJoint, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetDrawAabb(bool drawAabb)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawAabb(bool drawAabb)", "void SetDrawAabb(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawAabb, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawAabb(bool drawAabb)", "void set_drawAabb(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawAabb, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetDrawPair(bool drawPair)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawPair(bool drawPair)", "void SetDrawPair(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawPair, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawPair(bool drawPair)", "void set_drawPair(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawPair, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetDrawCenterOfMass(bool drawCenterOfMass)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawCenterOfMass(bool drawCenterOfMass)", "void SetDrawCenterOfMass(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawCenterOfMass, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetDrawCenterOfMass(bool drawCenterOfMass)", "void set_drawCenterOfMass(bool)", AS_METHODPR(PhysicsWorld2D, SetDrawCenterOfMass, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetAllowSleeping(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetAllowSleeping(bool enable)", "void SetAllowSleeping(bool)", AS_METHODPR(PhysicsWorld2D, SetAllowSleeping, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetAllowSleeping(bool enable)", "void set_allowSleeping(bool)", AS_METHODPR(PhysicsWorld2D, SetAllowSleeping, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetWarmStarting(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetWarmStarting(bool enable)", "void SetWarmStarting(bool)", AS_METHODPR(PhysicsWorld2D, SetWarmStarting, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetWarmStarting(bool enable)", "void set_warmStarting(bool)", AS_METHODPR(PhysicsWorld2D, SetWarmStarting, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetContinuousPhysics(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetContinuousPhysics(bool enable)", "void SetContinuousPhysics(bool)", AS_METHODPR(PhysicsWorld2D, SetContinuousPhysics, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetContinuousPhysics(bool enable)", "void set_continuousPhysics(bool)", AS_METHODPR(PhysicsWorld2D, SetContinuousPhysics, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetSubStepping(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetSubStepping(bool enable)", "void SetSubStepping(bool)", AS_METHODPR(PhysicsWorld2D, SetSubStepping, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetSubStepping(bool enable)", "void set_subStepping(bool)", AS_METHODPR(PhysicsWorld2D, SetSubStepping, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetGravity(const Vector2& gravity)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetGravity(const Vector2& gravity)", "void SetGravity(const Vector2&in)", AS_METHODPR(PhysicsWorld2D, SetGravity, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetGravity(const Vector2& gravity)", "void set_gravity(const Vector2&in)", AS_METHODPR(PhysicsWorld2D, SetGravity, (const Vector2&), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetAutoClearForces(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetAutoClearForces(bool enable)", "void SetAutoClearForces(bool)", AS_METHODPR(PhysicsWorld2D, SetAutoClearForces, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetAutoClearForces(bool enable)", "void set_autoClearForces(bool)", AS_METHODPR(PhysicsWorld2D, SetAutoClearForces, (bool), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetVelocityIterations(int velocityIterations)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetVelocityIterations(int velocityIterations)", "void SetVelocityIterations(int)", AS_METHODPR(PhysicsWorld2D, SetVelocityIterations, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetVelocityIterations(int velocityIterations)", "void set_velocityIterations(int)", AS_METHODPR(PhysicsWorld2D, SetVelocityIterations, (int), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetPositionIterations(int positionIterations)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetPositionIterations(int positionIterations)", "void SetPositionIterations(int)", AS_METHODPR(PhysicsWorld2D, SetPositionIterations, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetPositionIterations(int positionIterations)", "void set_positionIterations(int)", AS_METHODPR(PhysicsWorld2D, SetPositionIterations, (int), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::AddRigidBody(RigidBody2D* rigidBody)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::AddRigidBody(RigidBody2D* rigidBody)", "void AddRigidBody(RigidBody2D@+)", AS_METHODPR(PhysicsWorld2D, AddRigidBody, (RigidBody2D*), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::RemoveRigidBody(RigidBody2D* rigidBody)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::RemoveRigidBody(RigidBody2D* rigidBody)", "void RemoveRigidBody(RigidBody2D@+)", AS_METHODPR(PhysicsWorld2D, RemoveRigidBody, (RigidBody2D*), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::AddDelayedWorldTransform(const DelayedWorldTransform2D& transform)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::AddDelayedWorldTransform(const DelayedWorldTransform2D& transform)", "void AddDelayedWorldTransform(const DelayedWorldTransform2D&in)", AS_METHODPR(PhysicsWorld2D, AddDelayedWorldTransform, (const DelayedWorldTransform2D&), void), AS_CALL_THISCALL));

    // void PhysicsWorld2D::RaycastSingle(PhysicsRaycastResult2D& result, const Vector2& startPoint, const Vector2& endPoint, unsigned collisionMask=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::RaycastSingle(PhysicsRaycastResult2D& result, const Vector2& startPoint, const Vector2& endPoint, unsigned collisionMask=M_MAX_UNSIGNED)", "void RaycastSingle(PhysicsRaycastResult2D&, const Vector2&in, const Vector2&in, uint = M_MAX_UNSIGNED)", AS_METHODPR(PhysicsWorld2D, RaycastSingle, (PhysicsRaycastResult2D&, const Vector2&, const Vector2&, unsigned), void), AS_CALL_THISCALL));

    // RigidBody2D* PhysicsWorld2D::GetRigidBody(const Vector2& point, unsigned collisionMask=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("RigidBody2D* PhysicsWorld2D::GetRigidBody(const Vector2& point, unsigned collisionMask=M_MAX_UNSIGNED)", "RigidBody2D@+ GetRigidBody(const Vector2&in, uint = M_MAX_UNSIGNED)", AS_METHODPR(PhysicsWorld2D, GetRigidBody, (const Vector2&, unsigned), RigidBody2D*), AS_CALL_THISCALL));

    // RigidBody2D* PhysicsWorld2D::GetRigidBody(int screenX, int screenY, unsigned collisionMask=M_MAX_UNSIGNED)
    methods.Push(RegisterObjectMethodArgs("RigidBody2D* PhysicsWorld2D::GetRigidBody(int screenX, int screenY, unsigned collisionMask=M_MAX_UNSIGNED)", "RigidBody2D@+ GetRigidBody(int, int, uint = M_MAX_UNSIGNED)", AS_METHODPR(PhysicsWorld2D, GetRigidBody, (int, int, unsigned), RigidBody2D*), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::IsUpdateEnabled() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::IsUpdateEnabled() const", "bool IsUpdateEnabled() const", AS_METHODPR(PhysicsWorld2D, IsUpdateEnabled, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::IsUpdateEnabled() const", "bool get_updateEnabled() const", AS_METHODPR(PhysicsWorld2D, IsUpdateEnabled, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetDrawShape() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawShape() const", "bool GetDrawShape() const", AS_METHODPR(PhysicsWorld2D, GetDrawShape, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawShape() const", "bool get_drawShape() const", AS_METHODPR(PhysicsWorld2D, GetDrawShape, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetDrawJoint() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawJoint() const", "bool GetDrawJoint() const", AS_METHODPR(PhysicsWorld2D, GetDrawJoint, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawJoint() const", "bool get_drawJoint() const", AS_METHODPR(PhysicsWorld2D, GetDrawJoint, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetDrawAabb() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawAabb() const", "bool GetDrawAabb() const", AS_METHODPR(PhysicsWorld2D, GetDrawAabb, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawAabb() const", "bool get_drawAabb() const", AS_METHODPR(PhysicsWorld2D, GetDrawAabb, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetDrawPair() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawPair() const", "bool GetDrawPair() const", AS_METHODPR(PhysicsWorld2D, GetDrawPair, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawPair() const", "bool get_drawPair() const", AS_METHODPR(PhysicsWorld2D, GetDrawPair, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetDrawCenterOfMass() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawCenterOfMass() const", "bool GetDrawCenterOfMass() const", AS_METHODPR(PhysicsWorld2D, GetDrawCenterOfMass, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetDrawCenterOfMass() const", "bool get_drawCenterOfMass() const", AS_METHODPR(PhysicsWorld2D, GetDrawCenterOfMass, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetAllowSleeping() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetAllowSleeping() const", "bool GetAllowSleeping() const", AS_METHODPR(PhysicsWorld2D, GetAllowSleeping, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetAllowSleeping() const", "bool get_allowSleeping() const", AS_METHODPR(PhysicsWorld2D, GetAllowSleeping, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetWarmStarting() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetWarmStarting() const", "bool GetWarmStarting() const", AS_METHODPR(PhysicsWorld2D, GetWarmStarting, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetWarmStarting() const", "bool get_warmStarting() const", AS_METHODPR(PhysicsWorld2D, GetWarmStarting, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetContinuousPhysics() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetContinuousPhysics() const", "bool GetContinuousPhysics() const", AS_METHODPR(PhysicsWorld2D, GetContinuousPhysics, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetContinuousPhysics() const", "bool get_continuousPhysics() const", AS_METHODPR(PhysicsWorld2D, GetContinuousPhysics, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetSubStepping() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetSubStepping() const", "bool GetSubStepping() const", AS_METHODPR(PhysicsWorld2D, GetSubStepping, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetSubStepping() const", "bool get_subStepping() const", AS_METHODPR(PhysicsWorld2D, GetSubStepping, () const, bool), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::GetAutoClearForces() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetAutoClearForces() const", "bool GetAutoClearForces() const", AS_METHODPR(PhysicsWorld2D, GetAutoClearForces, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::GetAutoClearForces() const", "bool get_autoClearForces() const", AS_METHODPR(PhysicsWorld2D, GetAutoClearForces, () const, bool), AS_CALL_THISCALL));

    // const Vector2& PhysicsWorld2D::GetGravity() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& PhysicsWorld2D::GetGravity() const", "const Vector2& GetGravity() const", AS_METHODPR(PhysicsWorld2D, GetGravity, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& PhysicsWorld2D::GetGravity() const", "const Vector2& get_gravity() const", AS_METHODPR(PhysicsWorld2D, GetGravity, () const, const Vector2&), AS_CALL_THISCALL));

    // int PhysicsWorld2D::GetVelocityIterations() const
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld2D::GetVelocityIterations() const", "int GetVelocityIterations() const", AS_METHODPR(PhysicsWorld2D, GetVelocityIterations, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld2D::GetVelocityIterations() const", "int get_velocityIterations() const", AS_METHODPR(PhysicsWorld2D, GetVelocityIterations, () const, int), AS_CALL_THISCALL));

    // int PhysicsWorld2D::GetPositionIterations() const
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld2D::GetPositionIterations() const", "int GetPositionIterations() const", AS_METHODPR(PhysicsWorld2D, GetPositionIterations, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int PhysicsWorld2D::GetPositionIterations() const", "int get_positionIterations() const", AS_METHODPR(PhysicsWorld2D, GetPositionIterations, () const, int), AS_CALL_THISCALL));

    // void PhysicsWorld2D::SetApplyingTransforms(bool enable)
    methods.Push(RegisterObjectMethodArgs("void PhysicsWorld2D::SetApplyingTransforms(bool enable)", "void SetApplyingTransforms(bool)", AS_METHODPR(PhysicsWorld2D, SetApplyingTransforms, (bool), void), AS_CALL_THISCALL));

    // bool PhysicsWorld2D::IsApplyingTransforms() const
    methods.Push(RegisterObjectMethodArgs("bool PhysicsWorld2D::IsApplyingTransforms() const", "bool IsApplyingTransforms() const", AS_METHODPR(PhysicsWorld2D, IsApplyingTransforms, () const, bool), AS_CALL_THISCALL));
}

// class PropertySet2D | File: ../Urho2D/TileMapDefs2D.h
void CollectMembers_PropertySet2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // void PropertySet2D::Load(const XMLElement& element)
    methods.Push(RegisterObjectMethodArgs("void PropertySet2D::Load(const XMLElement& element)", "void Load(const XMLElement&in)", AS_METHODPR(PropertySet2D, Load, (const XMLElement&), void), AS_CALL_THISCALL));

    // bool PropertySet2D::HasProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool PropertySet2D::HasProperty(const String& name) const", "bool HasProperty(const String&in) const", AS_METHODPR(PropertySet2D, HasProperty, (const String&) const, bool), AS_CALL_THISCALL));

    // const String& PropertySet2D::GetProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const String& PropertySet2D::GetProperty(const String& name) const", "const String& GetProperty(const String&in) const", AS_METHODPR(PropertySet2D, GetProperty, (const String&) const, const String&), AS_CALL_THISCALL));
}

// class Renderer2D | File: ../Urho2D/Renderer2D.h
void CollectMembers_Renderer2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable(methods);

    Remove(methods, "static void Drawable::RegisterObject(Context* context)");
    Remove(methods, "virtual UpdateGeometryType Drawable::GetUpdateGeometryType()");
    Remove(methods, "virtual void Drawable::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results)");
    Remove(methods, "virtual void Drawable::UpdateBatches(const FrameInfo& frame)");
    Remove(methods, "virtual void Drawable::UpdateGeometry(const FrameInfo& frame)");

    // void Renderer2D::ProcessRayQuery(const RayOctreeQuery& query, PODVector<RayQueryResult>& results) override
    // Error: type "RayOctreeQuery" can not automatically bind bacause have @nobind mark

    // void Renderer2D::UpdateBatches(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void Renderer2D::UpdateBatches(const FrameInfo& frame) override", "void UpdateBatches(const FrameInfo&in)", AS_METHODPR(Renderer2D, UpdateBatches, (const FrameInfo&), void), AS_CALL_THISCALL));

    // void Renderer2D::UpdateGeometry(const FrameInfo& frame) override
    methods.Push(RegisterObjectMethodArgs("void Renderer2D::UpdateGeometry(const FrameInfo& frame) override", "void UpdateGeometry(const FrameInfo&in)", AS_METHODPR(Renderer2D, UpdateGeometry, (const FrameInfo&), void), AS_CALL_THISCALL));

    // UpdateGeometryType Renderer2D::GetUpdateGeometryType() override
    methods.Push(RegisterObjectMethodArgs("UpdateGeometryType Renderer2D::GetUpdateGeometryType() override", "UpdateGeometryType GetUpdateGeometryType()", AS_METHODPR(Renderer2D, GetUpdateGeometryType, (), UpdateGeometryType), AS_CALL_THISCALL));

    // void Renderer2D::AddDrawable(Drawable2D* drawable)
    methods.Push(RegisterObjectMethodArgs("void Renderer2D::AddDrawable(Drawable2D* drawable)", "void AddDrawable(Drawable2D@+)", AS_METHODPR(Renderer2D, AddDrawable, (Drawable2D*), void), AS_CALL_THISCALL));

    // void Renderer2D::RemoveDrawable(Drawable2D* drawable)
    methods.Push(RegisterObjectMethodArgs("void Renderer2D::RemoveDrawable(Drawable2D* drawable)", "void RemoveDrawable(Drawable2D@+)", AS_METHODPR(Renderer2D, RemoveDrawable, (Drawable2D*), void), AS_CALL_THISCALL));

    // Material* Renderer2D::GetMaterial(Texture2D* texture, BlendMode blendMode)
    methods.Push(RegisterObjectMethodArgs("Material* Renderer2D::GetMaterial(Texture2D* texture, BlendMode blendMode)", "Material@+ GetMaterial(Texture2D@+, BlendMode)", AS_METHODPR(Renderer2D, GetMaterial, (Texture2D*, BlendMode), Material*), AS_CALL_THISCALL));

    // bool Renderer2D::CheckVisibility(Drawable2D* drawable) const
    methods.Push(RegisterObjectMethodArgs("bool Renderer2D::CheckVisibility(Drawable2D* drawable) const", "bool CheckVisibility(Drawable2D@+) const", AS_METHODPR(Renderer2D, CheckVisibility, (Drawable2D*) const, bool), AS_CALL_THISCALL));
}

// class RigidBody2D | File: ../Urho2D/RigidBody2D.h
void CollectMembers_RigidBody2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::OnSetEnabled()");

    // b2Body* RigidBody2D::GetBody() const
    // Error: type "b2Body*" can not automatically bind

    // void RigidBody2D::OnSetEnabled() override
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::OnSetEnabled() override", "void OnSetEnabled()", AS_METHODPR(RigidBody2D, OnSetEnabled, (), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetBodyType(BodyType2D type)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetBodyType(BodyType2D type)", "void SetBodyType(BodyType2D)", AS_METHODPR(RigidBody2D, SetBodyType, (BodyType2D), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetBodyType(BodyType2D type)", "void set_bodyType(BodyType2D)", AS_METHODPR(RigidBody2D, SetBodyType, (BodyType2D), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetMass(float mass)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetMass(float mass)", "void SetMass(float)", AS_METHODPR(RigidBody2D, SetMass, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetMass(float mass)", "void set_mass(float)", AS_METHODPR(RigidBody2D, SetMass, (float), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetInertia(float inertia)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetInertia(float inertia)", "void SetInertia(float)", AS_METHODPR(RigidBody2D, SetInertia, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetInertia(float inertia)", "void set_inertia(float)", AS_METHODPR(RigidBody2D, SetInertia, (float), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetMassCenter(const Vector2& center)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetMassCenter(const Vector2& center)", "void SetMassCenter(const Vector2&in)", AS_METHODPR(RigidBody2D, SetMassCenter, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetMassCenter(const Vector2& center)", "void set_massCenter(const Vector2&in)", AS_METHODPR(RigidBody2D, SetMassCenter, (const Vector2&), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetUseFixtureMass(bool useFixtureMass)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetUseFixtureMass(bool useFixtureMass)", "void SetUseFixtureMass(bool)", AS_METHODPR(RigidBody2D, SetUseFixtureMass, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetUseFixtureMass(bool useFixtureMass)", "void set_useFixtureMass(bool)", AS_METHODPR(RigidBody2D, SetUseFixtureMass, (bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetLinearDamping(float linearDamping)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetLinearDamping(float linearDamping)", "void SetLinearDamping(float)", AS_METHODPR(RigidBody2D, SetLinearDamping, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetLinearDamping(float linearDamping)", "void set_linearDamping(float)", AS_METHODPR(RigidBody2D, SetLinearDamping, (float), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetAngularDamping(float angularDamping)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetAngularDamping(float angularDamping)", "void SetAngularDamping(float)", AS_METHODPR(RigidBody2D, SetAngularDamping, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetAngularDamping(float angularDamping)", "void set_angularDamping(float)", AS_METHODPR(RigidBody2D, SetAngularDamping, (float), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetAllowSleep(bool allowSleep)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetAllowSleep(bool allowSleep)", "void SetAllowSleep(bool)", AS_METHODPR(RigidBody2D, SetAllowSleep, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetAllowSleep(bool allowSleep)", "void set_allowSleep(bool)", AS_METHODPR(RigidBody2D, SetAllowSleep, (bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetFixedRotation(bool fixedRotation)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetFixedRotation(bool fixedRotation)", "void SetFixedRotation(bool)", AS_METHODPR(RigidBody2D, SetFixedRotation, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetFixedRotation(bool fixedRotation)", "void set_fixedRotation(bool)", AS_METHODPR(RigidBody2D, SetFixedRotation, (bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetBullet(bool bullet)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetBullet(bool bullet)", "void SetBullet(bool)", AS_METHODPR(RigidBody2D, SetBullet, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetBullet(bool bullet)", "void set_bullet(bool)", AS_METHODPR(RigidBody2D, SetBullet, (bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetGravityScale(float gravityScale)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetGravityScale(float gravityScale)", "void SetGravityScale(float)", AS_METHODPR(RigidBody2D, SetGravityScale, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetGravityScale(float gravityScale)", "void set_gravityScale(float)", AS_METHODPR(RigidBody2D, SetGravityScale, (float), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetAwake(bool awake)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetAwake(bool awake)", "void SetAwake(bool)", AS_METHODPR(RigidBody2D, SetAwake, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetAwake(bool awake)", "void set_awake(bool)", AS_METHODPR(RigidBody2D, SetAwake, (bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetLinearVelocity(const Vector2& linearVelocity)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetLinearVelocity(const Vector2& linearVelocity)", "void SetLinearVelocity(const Vector2&in)", AS_METHODPR(RigidBody2D, SetLinearVelocity, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetLinearVelocity(const Vector2& linearVelocity)", "void set_linearVelocity(const Vector2&in)", AS_METHODPR(RigidBody2D, SetLinearVelocity, (const Vector2&), void), AS_CALL_THISCALL));

    // void RigidBody2D::SetAngularVelocity(float angularVelocity)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::SetAngularVelocity(float angularVelocity)", "void SetAngularVelocity(float)", AS_METHODPR(RigidBody2D, SetAngularVelocity, (float), void), AS_CALL_THISCALL));

    // void RigidBody2D::ApplyForce(const Vector2& force, const Vector2& point, bool wake)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ApplyForce(const Vector2& force, const Vector2& point, bool wake)", "void ApplyForce(const Vector2&in, const Vector2&in, bool)", AS_METHODPR(RigidBody2D, ApplyForce, (const Vector2&, const Vector2&, bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::ApplyForceToCenter(const Vector2& force, bool wake)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ApplyForceToCenter(const Vector2& force, bool wake)", "void ApplyForceToCenter(const Vector2&in, bool)", AS_METHODPR(RigidBody2D, ApplyForceToCenter, (const Vector2&, bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::ApplyTorque(float torque, bool wake)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ApplyTorque(float torque, bool wake)", "void ApplyTorque(float, bool)", AS_METHODPR(RigidBody2D, ApplyTorque, (float, bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::ApplyLinearImpulse(const Vector2& impulse, const Vector2& point, bool wake)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ApplyLinearImpulse(const Vector2& impulse, const Vector2& point, bool wake)", "void ApplyLinearImpulse(const Vector2&in, const Vector2&in, bool)", AS_METHODPR(RigidBody2D, ApplyLinearImpulse, (const Vector2&, const Vector2&, bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::ApplyLinearImpulseToCenter(const Vector2& impulse, bool wake)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ApplyLinearImpulseToCenter(const Vector2& impulse, bool wake)", "void ApplyLinearImpulseToCenter(const Vector2&in, bool)", AS_METHODPR(RigidBody2D, ApplyLinearImpulseToCenter, (const Vector2&, bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::ApplyAngularImpulse(float impulse, bool wake)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ApplyAngularImpulse(float impulse, bool wake)", "void ApplyAngularImpulse(float, bool)", AS_METHODPR(RigidBody2D, ApplyAngularImpulse, (float, bool), void), AS_CALL_THISCALL));

    // void RigidBody2D::CreateBody()
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::CreateBody()", "void CreateBody()", AS_METHODPR(RigidBody2D, CreateBody, (), void), AS_CALL_THISCALL));

    // void RigidBody2D::ReleaseBody()
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ReleaseBody()", "void ReleaseBody()", AS_METHODPR(RigidBody2D, ReleaseBody, (), void), AS_CALL_THISCALL));

    // void RigidBody2D::ApplyWorldTransform()
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ApplyWorldTransform()", "void ApplyWorldTransform()", AS_METHODPR(RigidBody2D, ApplyWorldTransform, (), void), AS_CALL_THISCALL));

    // void RigidBody2D::ApplyWorldTransform(const Vector3& newWorldPosition, const Quaternion& newWorldRotation)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::ApplyWorldTransform(const Vector3& newWorldPosition, const Quaternion& newWorldRotation)", "void ApplyWorldTransform(const Vector3&in, const Quaternion&in)", AS_METHODPR(RigidBody2D, ApplyWorldTransform, (const Vector3&, const Quaternion&), void), AS_CALL_THISCALL));

    // void RigidBody2D::AddCollisionShape2D(CollisionShape2D* collisionShape)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::AddCollisionShape2D(CollisionShape2D* collisionShape)", "void AddCollisionShape2D(CollisionShape2D@+)", AS_METHODPR(RigidBody2D, AddCollisionShape2D, (CollisionShape2D*), void), AS_CALL_THISCALL));

    // void RigidBody2D::RemoveCollisionShape2D(CollisionShape2D* collisionShape)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::RemoveCollisionShape2D(CollisionShape2D* collisionShape)", "void RemoveCollisionShape2D(CollisionShape2D@+)", AS_METHODPR(RigidBody2D, RemoveCollisionShape2D, (CollisionShape2D*), void), AS_CALL_THISCALL));

    // void RigidBody2D::AddConstraint2D(Constraint2D* constraint)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::AddConstraint2D(Constraint2D* constraint)", "void AddConstraint2D(Constraint2D@+)", AS_METHODPR(RigidBody2D, AddConstraint2D, (Constraint2D*), void), AS_CALL_THISCALL));

    // void RigidBody2D::RemoveConstraint2D(Constraint2D* constraint)
    methods.Push(RegisterObjectMethodArgs("void RigidBody2D::RemoveConstraint2D(Constraint2D* constraint)", "void RemoveConstraint2D(Constraint2D@+)", AS_METHODPR(RigidBody2D, RemoveConstraint2D, (Constraint2D*), void), AS_CALL_THISCALL));

    // BodyType2D RigidBody2D::GetBodyType() const
    methods.Push(RegisterObjectMethodArgs("BodyType2D RigidBody2D::GetBodyType() const", "BodyType2D GetBodyType() const", AS_METHODPR(RigidBody2D, GetBodyType, () const, BodyType2D), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BodyType2D RigidBody2D::GetBodyType() const", "BodyType2D get_bodyType() const", AS_METHODPR(RigidBody2D, GetBodyType, () const, BodyType2D), AS_CALL_THISCALL));

    // float RigidBody2D::GetMass() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetMass() const", "float GetMass() const", AS_METHODPR(RigidBody2D, GetMass, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetMass() const", "float get_mass() const", AS_METHODPR(RigidBody2D, GetMass, () const, float), AS_CALL_THISCALL));

    // float RigidBody2D::GetInertia() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetInertia() const", "float GetInertia() const", AS_METHODPR(RigidBody2D, GetInertia, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetInertia() const", "float get_inertia() const", AS_METHODPR(RigidBody2D, GetInertia, () const, float), AS_CALL_THISCALL));

    // Vector2 RigidBody2D::GetMassCenter() const
    methods.Push(RegisterObjectMethodArgs("Vector2 RigidBody2D::GetMassCenter() const", "Vector2 GetMassCenter() const", AS_METHODPR(RigidBody2D, GetMassCenter, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 RigidBody2D::GetMassCenter() const", "Vector2 get_massCenter() const", AS_METHODPR(RigidBody2D, GetMassCenter, () const, Vector2), AS_CALL_THISCALL));

    // bool RigidBody2D::GetUseFixtureMass() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::GetUseFixtureMass() const", "bool GetUseFixtureMass() const", AS_METHODPR(RigidBody2D, GetUseFixtureMass, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::GetUseFixtureMass() const", "bool get_useFixtureMass() const", AS_METHODPR(RigidBody2D, GetUseFixtureMass, () const, bool), AS_CALL_THISCALL));

    // float RigidBody2D::GetLinearDamping() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetLinearDamping() const", "float GetLinearDamping() const", AS_METHODPR(RigidBody2D, GetLinearDamping, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetLinearDamping() const", "float get_linearDamping() const", AS_METHODPR(RigidBody2D, GetLinearDamping, () const, float), AS_CALL_THISCALL));

    // float RigidBody2D::GetAngularDamping() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetAngularDamping() const", "float GetAngularDamping() const", AS_METHODPR(RigidBody2D, GetAngularDamping, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetAngularDamping() const", "float get_angularDamping() const", AS_METHODPR(RigidBody2D, GetAngularDamping, () const, float), AS_CALL_THISCALL));

    // bool RigidBody2D::IsAllowSleep() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::IsAllowSleep() const", "bool IsAllowSleep() const", AS_METHODPR(RigidBody2D, IsAllowSleep, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::IsAllowSleep() const", "bool get_allowSleep() const", AS_METHODPR(RigidBody2D, IsAllowSleep, () const, bool), AS_CALL_THISCALL));

    // bool RigidBody2D::IsFixedRotation() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::IsFixedRotation() const", "bool IsFixedRotation() const", AS_METHODPR(RigidBody2D, IsFixedRotation, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::IsFixedRotation() const", "bool get_fixedRotation() const", AS_METHODPR(RigidBody2D, IsFixedRotation, () const, bool), AS_CALL_THISCALL));

    // bool RigidBody2D::IsBullet() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::IsBullet() const", "bool IsBullet() const", AS_METHODPR(RigidBody2D, IsBullet, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::IsBullet() const", "bool get_bullet() const", AS_METHODPR(RigidBody2D, IsBullet, () const, bool), AS_CALL_THISCALL));

    // float RigidBody2D::GetGravityScale() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetGravityScale() const", "float GetGravityScale() const", AS_METHODPR(RigidBody2D, GetGravityScale, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetGravityScale() const", "float get_gravityScale() const", AS_METHODPR(RigidBody2D, GetGravityScale, () const, float), AS_CALL_THISCALL));

    // bool RigidBody2D::IsAwake() const
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::IsAwake() const", "bool IsAwake() const", AS_METHODPR(RigidBody2D, IsAwake, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool RigidBody2D::IsAwake() const", "bool get_awake() const", AS_METHODPR(RigidBody2D, IsAwake, () const, bool), AS_CALL_THISCALL));

    // Vector2 RigidBody2D::GetLinearVelocity() const
    methods.Push(RegisterObjectMethodArgs("Vector2 RigidBody2D::GetLinearVelocity() const", "Vector2 GetLinearVelocity() const", AS_METHODPR(RigidBody2D, GetLinearVelocity, () const, Vector2), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Vector2 RigidBody2D::GetLinearVelocity() const", "Vector2 get_linearVelocity() const", AS_METHODPR(RigidBody2D, GetLinearVelocity, () const, Vector2), AS_CALL_THISCALL));

    // float RigidBody2D::GetAngularVelocity() const
    methods.Push(RegisterObjectMethodArgs("float RigidBody2D::GetAngularVelocity() const", "float GetAngularVelocity() const", AS_METHODPR(RigidBody2D, GetAngularVelocity, () const, float), AS_CALL_THISCALL));
}

// struct SourceBatch2D | File: ../Urho2D/Drawable2D.h
void CollectMembers_SourceBatch2D(Vector<RegisterObjectMethodArgs>& methods)
{
}

// class Sprite2D | File: ../Urho2D/Sprite2D.h
void CollectMembers_Sprite2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");

    // bool Sprite2D::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool Sprite2D::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(Sprite2D, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool Sprite2D::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool Sprite2D::EndLoad() override", "bool EndLoad()", AS_METHODPR(Sprite2D, EndLoad, (), bool), AS_CALL_THISCALL));

    // void Sprite2D::SetTexture(Texture2D* texture)
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetTexture(Texture2D* texture)", "void SetTexture(Texture2D@+)", AS_METHODPR(Sprite2D, SetTexture, (Texture2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetTexture(Texture2D* texture)", "void set_texture(Texture2D@+)", AS_METHODPR(Sprite2D, SetTexture, (Texture2D*), void), AS_CALL_THISCALL));

    // void Sprite2D::SetRectangle(const IntRect& rectangle)
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetRectangle(const IntRect& rectangle)", "void SetRectangle(const IntRect&in)", AS_METHODPR(Sprite2D, SetRectangle, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetRectangle(const IntRect& rectangle)", "void set_rectangle(const IntRect&in)", AS_METHODPR(Sprite2D, SetRectangle, (const IntRect&), void), AS_CALL_THISCALL));

    // void Sprite2D::SetHotSpot(const Vector2& hotSpot)
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetHotSpot(const Vector2& hotSpot)", "void SetHotSpot(const Vector2&in)", AS_METHODPR(Sprite2D, SetHotSpot, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetHotSpot(const Vector2& hotSpot)", "void set_hotSpot(const Vector2&in)", AS_METHODPR(Sprite2D, SetHotSpot, (const Vector2&), void), AS_CALL_THISCALL));

    // void Sprite2D::SetOffset(const IntVector2& offset)
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetOffset(const IntVector2& offset)", "void SetOffset(const IntVector2&in)", AS_METHODPR(Sprite2D, SetOffset, (const IntVector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetOffset(const IntVector2& offset)", "void set_offset(const IntVector2&in)", AS_METHODPR(Sprite2D, SetOffset, (const IntVector2&), void), AS_CALL_THISCALL));

    // void Sprite2D::SetTextureEdgeOffset(float offset)
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetTextureEdgeOffset(float offset)", "void SetTextureEdgeOffset(float)", AS_METHODPR(Sprite2D, SetTextureEdgeOffset, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetTextureEdgeOffset(float offset)", "void set_textureEdgeOffset(float)", AS_METHODPR(Sprite2D, SetTextureEdgeOffset, (float), void), AS_CALL_THISCALL));

    // void Sprite2D::SetSpriteSheet(SpriteSheet2D* spriteSheet)
    methods.Push(RegisterObjectMethodArgs("void Sprite2D::SetSpriteSheet(SpriteSheet2D* spriteSheet)", "void SetSpriteSheet(SpriteSheet2D@+)", AS_METHODPR(Sprite2D, SetSpriteSheet, (SpriteSheet2D*), void), AS_CALL_THISCALL));

    // Texture2D* Sprite2D::GetTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture2D* Sprite2D::GetTexture() const", "Texture2D@+ GetTexture() const", AS_METHODPR(Sprite2D, GetTexture, () const, Texture2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture2D* Sprite2D::GetTexture() const", "Texture2D@+ get_texture() const", AS_METHODPR(Sprite2D, GetTexture, () const, Texture2D*), AS_CALL_THISCALL));

    // const IntRect& Sprite2D::GetRectangle() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& Sprite2D::GetRectangle() const", "const IntRect& GetRectangle() const", AS_METHODPR(Sprite2D, GetRectangle, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& Sprite2D::GetRectangle() const", "const IntRect& get_rectangle() const", AS_METHODPR(Sprite2D, GetRectangle, () const, const IntRect&), AS_CALL_THISCALL));

    // const Vector2& Sprite2D::GetHotSpot() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& Sprite2D::GetHotSpot() const", "const Vector2& GetHotSpot() const", AS_METHODPR(Sprite2D, GetHotSpot, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& Sprite2D::GetHotSpot() const", "const Vector2& get_hotSpot() const", AS_METHODPR(Sprite2D, GetHotSpot, () const, const Vector2&), AS_CALL_THISCALL));

    // const IntVector2& Sprite2D::GetOffset() const
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Sprite2D::GetOffset() const", "const IntVector2& GetOffset() const", AS_METHODPR(Sprite2D, GetOffset, () const, const IntVector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntVector2& Sprite2D::GetOffset() const", "const IntVector2& get_offset() const", AS_METHODPR(Sprite2D, GetOffset, () const, const IntVector2&), AS_CALL_THISCALL));

    // float Sprite2D::GetTextureEdgeOffset() const
    methods.Push(RegisterObjectMethodArgs("float Sprite2D::GetTextureEdgeOffset() const", "float GetTextureEdgeOffset() const", AS_METHODPR(Sprite2D, GetTextureEdgeOffset, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float Sprite2D::GetTextureEdgeOffset() const", "float get_textureEdgeOffset() const", AS_METHODPR(Sprite2D, GetTextureEdgeOffset, () const, float), AS_CALL_THISCALL));

    // SpriteSheet2D* Sprite2D::GetSpriteSheet() const
    methods.Push(RegisterObjectMethodArgs("SpriteSheet2D* Sprite2D::GetSpriteSheet() const", "SpriteSheet2D@+ GetSpriteSheet() const", AS_METHODPR(Sprite2D, GetSpriteSheet, () const, SpriteSheet2D*), AS_CALL_THISCALL));

    // bool Sprite2D::GetDrawRectangle(Rect& rect, bool flipX=false, bool flipY=false) const
    methods.Push(RegisterObjectMethodArgs("bool Sprite2D::GetDrawRectangle(Rect& rect, bool flipX=false, bool flipY=false) const", "bool GetDrawRectangle(Rect&, bool = false, bool = false) const", AS_METHODPR(Sprite2D, GetDrawRectangle, (Rect&, bool, bool) const, bool), AS_CALL_THISCALL));

    // bool Sprite2D::GetDrawRectangle(Rect& rect, const Vector2& hotSpot, bool flipX=false, bool flipY=false) const
    methods.Push(RegisterObjectMethodArgs("bool Sprite2D::GetDrawRectangle(Rect& rect, const Vector2& hotSpot, bool flipX=false, bool flipY=false) const", "bool GetDrawRectangle(Rect&, const Vector2&in, bool = false, bool = false) const", AS_METHODPR(Sprite2D, GetDrawRectangle, (Rect&, const Vector2&, bool, bool) const, bool), AS_CALL_THISCALL));

    // bool Sprite2D::GetTextureRectangle(Rect& rect, bool flipX=false, bool flipY=false) const
    methods.Push(RegisterObjectMethodArgs("bool Sprite2D::GetTextureRectangle(Rect& rect, bool flipX=false, bool flipY=false) const", "bool GetTextureRectangle(Rect&, bool = false, bool = false) const", AS_METHODPR(Sprite2D, GetTextureRectangle, (Rect&, bool, bool) const, bool), AS_CALL_THISCALL));
}

// class SpriteSheet2D | File: ../Urho2D/SpriteSheet2D.h
void CollectMembers_SpriteSheet2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");

    // const HashMap<String, SharedPtr<Sprite2D>>& SpriteSheet2D::GetSpriteMapping() const
    // Error: type "const HashMap<String, SharedPtr<Sprite2D>>&" can not automatically bind

    // bool SpriteSheet2D::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool SpriteSheet2D::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(SpriteSheet2D, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool SpriteSheet2D::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool SpriteSheet2D::EndLoad() override", "bool EndLoad()", AS_METHODPR(SpriteSheet2D, EndLoad, (), bool), AS_CALL_THISCALL));

    // void SpriteSheet2D::SetTexture(Texture2D* texture)
    methods.Push(RegisterObjectMethodArgs("void SpriteSheet2D::SetTexture(Texture2D* texture)", "void SetTexture(Texture2D@+)", AS_METHODPR(SpriteSheet2D, SetTexture, (Texture2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void SpriteSheet2D::SetTexture(Texture2D* texture)", "void set_texture(Texture2D@+)", AS_METHODPR(SpriteSheet2D, SetTexture, (Texture2D*), void), AS_CALL_THISCALL));

    // void SpriteSheet2D::DefineSprite(const String& name, const IntRect& rectangle, const Vector2& hotSpot=Vector2(0.5f, 0.5f), const IntVector2& offset=IntVector2::ZERO)
    methods.Push(RegisterObjectMethodArgs("void SpriteSheet2D::DefineSprite(const String& name, const IntRect& rectangle, const Vector2& hotSpot=Vector2(0.5f, 0.5f), const IntVector2& offset=IntVector2::ZERO)", "void DefineSprite(const String&in, const IntRect&in, const Vector2&in = Vector2(0.5f, 0.5f), const IntVector2&in = IntVector2::ZERO)", AS_METHODPR(SpriteSheet2D, DefineSprite, (const String&, const IntRect&, const Vector2&, const IntVector2&), void), AS_CALL_THISCALL));

    // Texture2D* SpriteSheet2D::GetTexture() const
    methods.Push(RegisterObjectMethodArgs("Texture2D* SpriteSheet2D::GetTexture() const", "Texture2D@+ GetTexture() const", AS_METHODPR(SpriteSheet2D, GetTexture, () const, Texture2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Texture2D* SpriteSheet2D::GetTexture() const", "Texture2D@+ get_texture() const", AS_METHODPR(SpriteSheet2D, GetTexture, () const, Texture2D*), AS_CALL_THISCALL));

    // Sprite2D* SpriteSheet2D::GetSprite(const String& name) const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* SpriteSheet2D::GetSprite(const String& name) const", "Sprite2D@+ GetSprite(const String&in) const", AS_METHODPR(SpriteSheet2D, GetSprite, (const String&) const, Sprite2D*), AS_CALL_THISCALL));
}

// class StaticSprite2D | File: ../Urho2D/StaticSprite2D.h
void CollectMembers_StaticSprite2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Drawable2D(methods);

    Remove(methods, "static void Drawable2D::RegisterObject(Context* context)");

    // void StaticSprite2D::SetSprite(Sprite2D* sprite)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetSprite(Sprite2D* sprite)", "void SetSprite(Sprite2D@+)", AS_METHODPR(StaticSprite2D, SetSprite, (Sprite2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetSprite(Sprite2D* sprite)", "void set_sprite(Sprite2D@+)", AS_METHODPR(StaticSprite2D, SetSprite, (Sprite2D*), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetDrawRect(const Rect& rect)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetDrawRect(const Rect& rect)", "void SetDrawRect(const Rect&in)", AS_METHODPR(StaticSprite2D, SetDrawRect, (const Rect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetDrawRect(const Rect& rect)", "void set_drawRect(const Rect&in)", AS_METHODPR(StaticSprite2D, SetDrawRect, (const Rect&), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetTextureRect(const Rect& rect)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetTextureRect(const Rect& rect)", "void SetTextureRect(const Rect&in)", AS_METHODPR(StaticSprite2D, SetTextureRect, (const Rect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetTextureRect(const Rect& rect)", "void set_textureRect(const Rect&in)", AS_METHODPR(StaticSprite2D, SetTextureRect, (const Rect&), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetBlendMode(BlendMode blendMode)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetBlendMode(BlendMode blendMode)", "void SetBlendMode(BlendMode)", AS_METHODPR(StaticSprite2D, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetBlendMode(BlendMode blendMode)", "void set_blendMode(BlendMode)", AS_METHODPR(StaticSprite2D, SetBlendMode, (BlendMode), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetFlip(bool flipX, bool flipY, bool swapXY=false)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetFlip(bool flipX, bool flipY, bool swapXY=false)", "void SetFlip(bool, bool, bool = false)", AS_METHODPR(StaticSprite2D, SetFlip, (bool, bool, bool), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetFlipX(bool flipX)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetFlipX(bool flipX)", "void SetFlipX(bool)", AS_METHODPR(StaticSprite2D, SetFlipX, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetFlipX(bool flipX)", "void set_flipX(bool)", AS_METHODPR(StaticSprite2D, SetFlipX, (bool), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetFlipY(bool flipY)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetFlipY(bool flipY)", "void SetFlipY(bool)", AS_METHODPR(StaticSprite2D, SetFlipY, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetFlipY(bool flipY)", "void set_flipY(bool)", AS_METHODPR(StaticSprite2D, SetFlipY, (bool), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetSwapXY(bool swapXY)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetSwapXY(bool swapXY)", "void SetSwapXY(bool)", AS_METHODPR(StaticSprite2D, SetSwapXY, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetSwapXY(bool swapXY)", "void set_swapXY(bool)", AS_METHODPR(StaticSprite2D, SetSwapXY, (bool), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetColor(const Color& color)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetColor(const Color& color)", "void SetColor(const Color&in)", AS_METHODPR(StaticSprite2D, SetColor, (const Color&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetColor(const Color& color)", "void set_color(const Color&in)", AS_METHODPR(StaticSprite2D, SetColor, (const Color&), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetAlpha(float alpha)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetAlpha(float alpha)", "void SetAlpha(float)", AS_METHODPR(StaticSprite2D, SetAlpha, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetAlpha(float alpha)", "void set_alpha(float)", AS_METHODPR(StaticSprite2D, SetAlpha, (float), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetUseHotSpot(bool useHotSpot)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetUseHotSpot(bool useHotSpot)", "void SetUseHotSpot(bool)", AS_METHODPR(StaticSprite2D, SetUseHotSpot, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetUseHotSpot(bool useHotSpot)", "void set_useHotSpot(bool)", AS_METHODPR(StaticSprite2D, SetUseHotSpot, (bool), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetUseDrawRect(bool useDrawRect)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetUseDrawRect(bool useDrawRect)", "void SetUseDrawRect(bool)", AS_METHODPR(StaticSprite2D, SetUseDrawRect, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetUseDrawRect(bool useDrawRect)", "void set_useDrawRect(bool)", AS_METHODPR(StaticSprite2D, SetUseDrawRect, (bool), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetUseTextureRect(bool useTextureRect)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetUseTextureRect(bool useTextureRect)", "void SetUseTextureRect(bool)", AS_METHODPR(StaticSprite2D, SetUseTextureRect, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetUseTextureRect(bool useTextureRect)", "void set_useTextureRect(bool)", AS_METHODPR(StaticSprite2D, SetUseTextureRect, (bool), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetHotSpot(const Vector2& hotspot)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetHotSpot(const Vector2& hotspot)", "void SetHotSpot(const Vector2&in)", AS_METHODPR(StaticSprite2D, SetHotSpot, (const Vector2&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetHotSpot(const Vector2& hotspot)", "void set_hotSpot(const Vector2&in)", AS_METHODPR(StaticSprite2D, SetHotSpot, (const Vector2&), void), AS_CALL_THISCALL));

    // void StaticSprite2D::SetCustomMaterial(Material* customMaterial)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetCustomMaterial(Material* customMaterial)", "void SetCustomMaterial(Material@+)", AS_METHODPR(StaticSprite2D, SetCustomMaterial, (Material*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetCustomMaterial(Material* customMaterial)", "void set_customMaterial(Material@+)", AS_METHODPR(StaticSprite2D, SetCustomMaterial, (Material*), void), AS_CALL_THISCALL));

    // Sprite2D* StaticSprite2D::GetSprite() const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* StaticSprite2D::GetSprite() const", "Sprite2D@+ GetSprite() const", AS_METHODPR(StaticSprite2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Sprite2D* StaticSprite2D::GetSprite() const", "Sprite2D@+ get_sprite() const", AS_METHODPR(StaticSprite2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));

    // const Rect& StaticSprite2D::GetDrawRect() const
    methods.Push(RegisterObjectMethodArgs("const Rect& StaticSprite2D::GetDrawRect() const", "const Rect& GetDrawRect() const", AS_METHODPR(StaticSprite2D, GetDrawRect, () const, const Rect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Rect& StaticSprite2D::GetDrawRect() const", "const Rect& get_drawRect() const", AS_METHODPR(StaticSprite2D, GetDrawRect, () const, const Rect&), AS_CALL_THISCALL));

    // const Rect& StaticSprite2D::GetTextureRect() const
    methods.Push(RegisterObjectMethodArgs("const Rect& StaticSprite2D::GetTextureRect() const", "const Rect& GetTextureRect() const", AS_METHODPR(StaticSprite2D, GetTextureRect, () const, const Rect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Rect& StaticSprite2D::GetTextureRect() const", "const Rect& get_textureRect() const", AS_METHODPR(StaticSprite2D, GetTextureRect, () const, const Rect&), AS_CALL_THISCALL));

    // BlendMode StaticSprite2D::GetBlendMode() const
    methods.Push(RegisterObjectMethodArgs("BlendMode StaticSprite2D::GetBlendMode() const", "BlendMode GetBlendMode() const", AS_METHODPR(StaticSprite2D, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("BlendMode StaticSprite2D::GetBlendMode() const", "BlendMode get_blendMode() const", AS_METHODPR(StaticSprite2D, GetBlendMode, () const, BlendMode), AS_CALL_THISCALL));

    // bool StaticSprite2D::GetFlipX() const
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetFlipX() const", "bool GetFlipX() const", AS_METHODPR(StaticSprite2D, GetFlipX, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetFlipX() const", "bool get_flipX() const", AS_METHODPR(StaticSprite2D, GetFlipX, () const, bool), AS_CALL_THISCALL));

    // bool StaticSprite2D::GetFlipY() const
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetFlipY() const", "bool GetFlipY() const", AS_METHODPR(StaticSprite2D, GetFlipY, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetFlipY() const", "bool get_flipY() const", AS_METHODPR(StaticSprite2D, GetFlipY, () const, bool), AS_CALL_THISCALL));

    // bool StaticSprite2D::GetSwapXY() const
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetSwapXY() const", "bool GetSwapXY() const", AS_METHODPR(StaticSprite2D, GetSwapXY, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetSwapXY() const", "bool get_swapXY() const", AS_METHODPR(StaticSprite2D, GetSwapXY, () const, bool), AS_CALL_THISCALL));

    // const Color& StaticSprite2D::GetColor() const
    methods.Push(RegisterObjectMethodArgs("const Color& StaticSprite2D::GetColor() const", "const Color& GetColor() const", AS_METHODPR(StaticSprite2D, GetColor, () const, const Color&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Color& StaticSprite2D::GetColor() const", "const Color& get_color() const", AS_METHODPR(StaticSprite2D, GetColor, () const, const Color&), AS_CALL_THISCALL));

    // float StaticSprite2D::GetAlpha() const
    methods.Push(RegisterObjectMethodArgs("float StaticSprite2D::GetAlpha() const", "float GetAlpha() const", AS_METHODPR(StaticSprite2D, GetAlpha, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float StaticSprite2D::GetAlpha() const", "float get_alpha() const", AS_METHODPR(StaticSprite2D, GetAlpha, () const, float), AS_CALL_THISCALL));

    // bool StaticSprite2D::GetUseHotSpot() const
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetUseHotSpot() const", "bool GetUseHotSpot() const", AS_METHODPR(StaticSprite2D, GetUseHotSpot, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetUseHotSpot() const", "bool get_useHotSpot() const", AS_METHODPR(StaticSprite2D, GetUseHotSpot, () const, bool), AS_CALL_THISCALL));

    // bool StaticSprite2D::GetUseDrawRect() const
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetUseDrawRect() const", "bool GetUseDrawRect() const", AS_METHODPR(StaticSprite2D, GetUseDrawRect, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetUseDrawRect() const", "bool get_useDrawRect() const", AS_METHODPR(StaticSprite2D, GetUseDrawRect, () const, bool), AS_CALL_THISCALL));

    // bool StaticSprite2D::GetUseTextureRect() const
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetUseTextureRect() const", "bool GetUseTextureRect() const", AS_METHODPR(StaticSprite2D, GetUseTextureRect, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool StaticSprite2D::GetUseTextureRect() const", "bool get_useTextureRect() const", AS_METHODPR(StaticSprite2D, GetUseTextureRect, () const, bool), AS_CALL_THISCALL));

    // const Vector2& StaticSprite2D::GetHotSpot() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& StaticSprite2D::GetHotSpot() const", "const Vector2& GetHotSpot() const", AS_METHODPR(StaticSprite2D, GetHotSpot, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& StaticSprite2D::GetHotSpot() const", "const Vector2& get_hotSpot() const", AS_METHODPR(StaticSprite2D, GetHotSpot, () const, const Vector2&), AS_CALL_THISCALL));

    // Material* StaticSprite2D::GetCustomMaterial() const
    methods.Push(RegisterObjectMethodArgs("Material* StaticSprite2D::GetCustomMaterial() const", "Material@+ GetCustomMaterial() const", AS_METHODPR(StaticSprite2D, GetCustomMaterial, () const, Material*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Material* StaticSprite2D::GetCustomMaterial() const", "Material@+ get_customMaterial() const", AS_METHODPR(StaticSprite2D, GetCustomMaterial, () const, Material*), AS_CALL_THISCALL));

    // void StaticSprite2D::SetSpriteAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetSpriteAttr(const ResourceRef& value)", "void SetSpriteAttr(const ResourceRef&in)", AS_METHODPR(StaticSprite2D, SetSpriteAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef StaticSprite2D::GetSpriteAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef StaticSprite2D::GetSpriteAttr() const", "ResourceRef GetSpriteAttr() const", AS_METHODPR(StaticSprite2D, GetSpriteAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // void StaticSprite2D::SetCustomMaterialAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void StaticSprite2D::SetCustomMaterialAttr(const ResourceRef& value)", "void SetCustomMaterialAttr(const ResourceRef&in)", AS_METHODPR(StaticSprite2D, SetCustomMaterialAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef StaticSprite2D::GetCustomMaterialAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef StaticSprite2D::GetCustomMaterialAttr() const", "ResourceRef GetCustomMaterialAttr() const", AS_METHODPR(StaticSprite2D, GetCustomMaterialAttr, () const, ResourceRef), AS_CALL_THISCALL));
}

// class StretchableSprite2D | File: ../Urho2D/StretchableSprite2D.h
void CollectMembers_StretchableSprite2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_StaticSprite2D(methods);

    Remove(methods, "static void StaticSprite2D::RegisterObject(Context* context)");

    // void StretchableSprite2D::SetBorder(const IntRect& border)
    methods.Push(RegisterObjectMethodArgs("void StretchableSprite2D::SetBorder(const IntRect& border)", "void SetBorder(const IntRect&in)", AS_METHODPR(StretchableSprite2D, SetBorder, (const IntRect&), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void StretchableSprite2D::SetBorder(const IntRect& border)", "void set_border(const IntRect&in)", AS_METHODPR(StretchableSprite2D, SetBorder, (const IntRect&), void), AS_CALL_THISCALL));

    // const IntRect& StretchableSprite2D::GetBorder() const
    methods.Push(RegisterObjectMethodArgs("const IntRect& StretchableSprite2D::GetBorder() const", "const IntRect& GetBorder() const", AS_METHODPR(StretchableSprite2D, GetBorder, () const, const IntRect&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const IntRect& StretchableSprite2D::GetBorder() const", "const IntRect& get_border() const", AS_METHODPR(StretchableSprite2D, GetBorder, () const, const IntRect&), AS_CALL_THISCALL));
}

// class Tile2D | File: ../Urho2D/TileMapDefs2D.h
void CollectMembers_Tile2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // unsigned Tile2D::GetGid() const
    methods.Push(RegisterObjectMethodArgs("unsigned Tile2D::GetGid() const", "uint GetGid() const", AS_METHODPR(Tile2D, GetGid, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned Tile2D::GetGid() const", "uint get_gid() const", AS_METHODPR(Tile2D, GetGid, () const, unsigned), AS_CALL_THISCALL));

    // bool Tile2D::GetFlipX() const
    methods.Push(RegisterObjectMethodArgs("bool Tile2D::GetFlipX() const", "bool GetFlipX() const", AS_METHODPR(Tile2D, GetFlipX, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Tile2D::GetFlipX() const", "bool get_flipX() const", AS_METHODPR(Tile2D, GetFlipX, () const, bool), AS_CALL_THISCALL));

    // bool Tile2D::GetFlipY() const
    methods.Push(RegisterObjectMethodArgs("bool Tile2D::GetFlipY() const", "bool GetFlipY() const", AS_METHODPR(Tile2D, GetFlipY, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Tile2D::GetFlipY() const", "bool get_flipY() const", AS_METHODPR(Tile2D, GetFlipY, () const, bool), AS_CALL_THISCALL));

    // bool Tile2D::GetSwapXY() const
    methods.Push(RegisterObjectMethodArgs("bool Tile2D::GetSwapXY() const", "bool GetSwapXY() const", AS_METHODPR(Tile2D, GetSwapXY, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool Tile2D::GetSwapXY() const", "bool get_swapXY() const", AS_METHODPR(Tile2D, GetSwapXY, () const, bool), AS_CALL_THISCALL));

    // Sprite2D* Tile2D::GetSprite() const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* Tile2D::GetSprite() const", "Sprite2D@+ GetSprite() const", AS_METHODPR(Tile2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Sprite2D* Tile2D::GetSprite() const", "Sprite2D@+ get_sprite() const", AS_METHODPR(Tile2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));

    // bool Tile2D::HasProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool Tile2D::HasProperty(const String& name) const", "bool HasProperty(const String&in) const", AS_METHODPR(Tile2D, HasProperty, (const String&) const, bool), AS_CALL_THISCALL));

    // const String& Tile2D::GetProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const String& Tile2D::GetProperty(const String& name) const", "const String& GetProperty(const String&in) const", AS_METHODPR(Tile2D, GetProperty, (const String&) const, const String&), AS_CALL_THISCALL));
}

// Vector<SharedPtr<TileMapObject2D>> TileMap2D::GetTileCollisionShapes(unsigned gid) const
#ifdef URHO3D_URHO2D
// Vector<SharedPtr<TileMapObject2D>> TileMap2D::GetTileCollisionShapes(unsigned gid) const | File: ../Urho2D/TileMap2D.h
static CScriptArray* TileMap2D_GetTileCollisionShapes_unsigned(TileMap2D* ptr, unsigned gid)
{
    Vector<SharedPtr<TileMapObject2D>> result = ptr->GetTileCollisionShapes(gid);
    return VectorToHandleArray(result, "Array<TileMapObject2D@>");
}
#endif


// class TileMap2D | File: ../Urho2D/TileMap2D.h
void CollectMembers_TileMap2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // void TileMap2D::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void TileMap2D::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(TileMap2D, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void TileMap2D::SetTmxFile(TmxFile2D* tmxFile)
    methods.Push(RegisterObjectMethodArgs("void TileMap2D::SetTmxFile(TmxFile2D* tmxFile)", "void SetTmxFile(TmxFile2D@+)", AS_METHODPR(TileMap2D, SetTmxFile, (TmxFile2D*), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void TileMap2D::SetTmxFile(TmxFile2D* tmxFile)", "void set_tmxFile(TmxFile2D@+)", AS_METHODPR(TileMap2D, SetTmxFile, (TmxFile2D*), void), AS_CALL_THISCALL));

    // void TileMap2D::DrawDebugGeometry()
    methods.Push(RegisterObjectMethodArgs("void TileMap2D::DrawDebugGeometry()", "void DrawDebugGeometry()", AS_METHODPR(TileMap2D, DrawDebugGeometry, (), void), AS_CALL_THISCALL));

    // TmxFile2D* TileMap2D::GetTmxFile() const
    methods.Push(RegisterObjectMethodArgs("TmxFile2D* TileMap2D::GetTmxFile() const", "TmxFile2D@+ GetTmxFile() const", AS_METHODPR(TileMap2D, GetTmxFile, () const, TmxFile2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TmxFile2D* TileMap2D::GetTmxFile() const", "TmxFile2D@+ get_tmxFile() const", AS_METHODPR(TileMap2D, GetTmxFile, () const, TmxFile2D*), AS_CALL_THISCALL));

    // const TileMapInfo2D& TileMap2D::GetInfo() const
    methods.Push(RegisterObjectMethodArgs("const TileMapInfo2D& TileMap2D::GetInfo() const", "const TileMapInfo2D& GetInfo() const", AS_METHODPR(TileMap2D, GetInfo, () const, const TileMapInfo2D&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const TileMapInfo2D& TileMap2D::GetInfo() const", "const TileMapInfo2D& get_info() const", AS_METHODPR(TileMap2D, GetInfo, () const, const TileMapInfo2D&), AS_CALL_THISCALL));

    // unsigned TileMap2D::GetNumLayers() const
    methods.Push(RegisterObjectMethodArgs("unsigned TileMap2D::GetNumLayers() const", "uint GetNumLayers() const", AS_METHODPR(TileMap2D, GetNumLayers, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned TileMap2D::GetNumLayers() const", "uint get_numLayers() const", AS_METHODPR(TileMap2D, GetNumLayers, () const, unsigned), AS_CALL_THISCALL));

    // TileMapLayer2D* TileMap2D::GetLayer(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("TileMapLayer2D* TileMap2D::GetLayer(unsigned index) const", "TileMapLayer2D@+ GetLayer(uint) const", AS_METHODPR(TileMap2D, GetLayer, (unsigned) const, TileMapLayer2D*), AS_CALL_THISCALL));

    // Vector2 TileMap2D::TileIndexToPosition(int x, int y) const
    methods.Push(RegisterObjectMethodArgs("Vector2 TileMap2D::TileIndexToPosition(int x, int y) const", "Vector2 TileIndexToPosition(int, int) const", AS_METHODPR(TileMap2D, TileIndexToPosition, (int, int) const, Vector2), AS_CALL_THISCALL));

    // bool TileMap2D::PositionToTileIndex(int& x, int& y, const Vector2& position) const
    methods.Push(RegisterObjectMethodArgs("bool TileMap2D::PositionToTileIndex(int& x, int& y, const Vector2& position) const", "bool PositionToTileIndex(int&, int&, const Vector2&in) const", AS_METHODPR(TileMap2D, PositionToTileIndex, (int&, int&, const Vector2&) const, bool), AS_CALL_THISCALL));

    // void TileMap2D::SetTmxFileAttr(const ResourceRef& value)
    methods.Push(RegisterObjectMethodArgs("void TileMap2D::SetTmxFileAttr(const ResourceRef& value)", "void SetTmxFileAttr(const ResourceRef&in)", AS_METHODPR(TileMap2D, SetTmxFileAttr, (const ResourceRef&), void), AS_CALL_THISCALL));

    // ResourceRef TileMap2D::GetTmxFileAttr() const
    methods.Push(RegisterObjectMethodArgs("ResourceRef TileMap2D::GetTmxFileAttr() const", "ResourceRef GetTmxFileAttr() const", AS_METHODPR(TileMap2D, GetTmxFileAttr, () const, ResourceRef), AS_CALL_THISCALL));

    // Vector<SharedPtr<TileMapObject2D>> TileMap2D::GetTileCollisionShapes(unsigned gid) const
    methods.Push(RegisterObjectMethodArgs("Vector<SharedPtr<TileMapObject2D>> TileMap2D::GetTileCollisionShapes(unsigned gid) const", "Array<TileMapObject2D@>@ GetTileCollisionShapes(uint) const", AS_FUNCTION_OBJFIRST(TileMap2D_GetTileCollisionShapes_unsigned), AS_CALL_CDECL_OBJFIRST));
}

// struct TileMapInfo2D | File: ../Urho2D/TileMapDefs2D.h
void CollectMembers_TileMapInfo2D(Vector<RegisterObjectMethodArgs>& methods)
{
    // float TileMapInfo2D::GetMapWidth() const
    methods.Push(RegisterObjectMethodArgs("float TileMapInfo2D::GetMapWidth() const", "float GetMapWidth() const", AS_METHODPR(TileMapInfo2D, GetMapWidth, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float TileMapInfo2D::GetMapWidth() const", "float get_mapWidth() const", AS_METHODPR(TileMapInfo2D, GetMapWidth, () const, float), AS_CALL_THISCALL));

    // float TileMapInfo2D::GetMapHeight() const
    methods.Push(RegisterObjectMethodArgs("float TileMapInfo2D::GetMapHeight() const", "float GetMapHeight() const", AS_METHODPR(TileMapInfo2D, GetMapHeight, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float TileMapInfo2D::GetMapHeight() const", "float get_mapHeight() const", AS_METHODPR(TileMapInfo2D, GetMapHeight, () const, float), AS_CALL_THISCALL));

    // Vector2 TileMapInfo2D::ConvertPosition(const Vector2& position) const
    methods.Push(RegisterObjectMethodArgs("Vector2 TileMapInfo2D::ConvertPosition(const Vector2& position) const", "Vector2 ConvertPosition(const Vector2&in) const", AS_METHODPR(TileMapInfo2D, ConvertPosition, (const Vector2&) const, Vector2), AS_CALL_THISCALL));

    // Vector2 TileMapInfo2D::TileIndexToPosition(int x, int y) const
    methods.Push(RegisterObjectMethodArgs("Vector2 TileMapInfo2D::TileIndexToPosition(int x, int y) const", "Vector2 TileIndexToPosition(int, int) const", AS_METHODPR(TileMapInfo2D, TileIndexToPosition, (int, int) const, Vector2), AS_CALL_THISCALL));

    // bool TileMapInfo2D::PositionToTileIndex(int& x, int& y, const Vector2& position) const
    methods.Push(RegisterObjectMethodArgs("bool TileMapInfo2D::PositionToTileIndex(int& x, int& y, const Vector2& position) const", "bool PositionToTileIndex(int&, int&, const Vector2&in) const", AS_METHODPR(TileMapInfo2D, PositionToTileIndex, (int&, int&, const Vector2&) const, bool), AS_CALL_THISCALL));
}

// class TileMapLayer2D | File: ../Urho2D/TileMapLayer2D.h
void CollectMembers_TileMapLayer2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Component(methods);

    Remove(methods, "static void Animatable::RegisterObject(Context* context)");
    Remove(methods, "virtual void Component::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)");

    // void TileMapLayer2D::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override
    methods.Push(RegisterObjectMethodArgs("void TileMapLayer2D::DrawDebugGeometry(DebugRenderer* debug, bool depthTest) override", "void DrawDebugGeometry(DebugRenderer@+, bool)", AS_METHODPR(TileMapLayer2D, DrawDebugGeometry, (DebugRenderer*, bool), void), AS_CALL_THISCALL));

    // void TileMapLayer2D::Initialize(TileMap2D* tileMap, const TmxLayer2D* tmxLayer)
    methods.Push(RegisterObjectMethodArgs("void TileMapLayer2D::Initialize(TileMap2D* tileMap, const TmxLayer2D* tmxLayer)", "void Initialize(TileMap2D@+, TmxLayer2D@+)", AS_METHODPR(TileMapLayer2D, Initialize, (TileMap2D*, const TmxLayer2D*), void), AS_CALL_THISCALL));

    // void TileMapLayer2D::SetDrawOrder(int drawOrder)
    methods.Push(RegisterObjectMethodArgs("void TileMapLayer2D::SetDrawOrder(int drawOrder)", "void SetDrawOrder(int)", AS_METHODPR(TileMapLayer2D, SetDrawOrder, (int), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void TileMapLayer2D::SetDrawOrder(int drawOrder)", "void set_drawOrder(int)", AS_METHODPR(TileMapLayer2D, SetDrawOrder, (int), void), AS_CALL_THISCALL));

    // void TileMapLayer2D::SetVisible(bool visible)
    methods.Push(RegisterObjectMethodArgs("void TileMapLayer2D::SetVisible(bool visible)", "void SetVisible(bool)", AS_METHODPR(TileMapLayer2D, SetVisible, (bool), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void TileMapLayer2D::SetVisible(bool visible)", "void set_visible(bool)", AS_METHODPR(TileMapLayer2D, SetVisible, (bool), void), AS_CALL_THISCALL));

    // TileMap2D* TileMapLayer2D::GetTileMap() const
    methods.Push(RegisterObjectMethodArgs("TileMap2D* TileMapLayer2D::GetTileMap() const", "TileMap2D@+ GetTileMap() const", AS_METHODPR(TileMapLayer2D, GetTileMap, () const, TileMap2D*), AS_CALL_THISCALL));

    // const TmxLayer2D* TileMapLayer2D::GetTmxLayer() const
    methods.Push(RegisterObjectMethodArgs("const TmxLayer2D* TileMapLayer2D::GetTmxLayer() const", "TmxLayer2D@+ GetTmxLayer() const", AS_METHODPR(TileMapLayer2D, GetTmxLayer, () const, const TmxLayer2D*), AS_CALL_THISCALL));

    // int TileMapLayer2D::GetDrawOrder() const
    methods.Push(RegisterObjectMethodArgs("int TileMapLayer2D::GetDrawOrder() const", "int GetDrawOrder() const", AS_METHODPR(TileMapLayer2D, GetDrawOrder, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int TileMapLayer2D::GetDrawOrder() const", "int get_drawOrder() const", AS_METHODPR(TileMapLayer2D, GetDrawOrder, () const, int), AS_CALL_THISCALL));

    // bool TileMapLayer2D::IsVisible() const
    methods.Push(RegisterObjectMethodArgs("bool TileMapLayer2D::IsVisible() const", "bool IsVisible() const", AS_METHODPR(TileMapLayer2D, IsVisible, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool TileMapLayer2D::IsVisible() const", "bool get_visible() const", AS_METHODPR(TileMapLayer2D, IsVisible, () const, bool), AS_CALL_THISCALL));

    // bool TileMapLayer2D::HasProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool TileMapLayer2D::HasProperty(const String& name) const", "bool HasProperty(const String&in) const", AS_METHODPR(TileMapLayer2D, HasProperty, (const String&) const, bool), AS_CALL_THISCALL));

    // const String& TileMapLayer2D::GetProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const String& TileMapLayer2D::GetProperty(const String& name) const", "const String& GetProperty(const String&in) const", AS_METHODPR(TileMapLayer2D, GetProperty, (const String&) const, const String&), AS_CALL_THISCALL));

    // TileMapLayerType2D TileMapLayer2D::GetLayerType() const
    methods.Push(RegisterObjectMethodArgs("TileMapLayerType2D TileMapLayer2D::GetLayerType() const", "TileMapLayerType2D GetLayerType() const", AS_METHODPR(TileMapLayer2D, GetLayerType, () const, TileMapLayerType2D), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TileMapLayerType2D TileMapLayer2D::GetLayerType() const", "TileMapLayerType2D get_layerType() const", AS_METHODPR(TileMapLayer2D, GetLayerType, () const, TileMapLayerType2D), AS_CALL_THISCALL));

    // int TileMapLayer2D::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int TileMapLayer2D::GetWidth() const", "int GetWidth() const", AS_METHODPR(TileMapLayer2D, GetWidth, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int TileMapLayer2D::GetWidth() const", "int get_width() const", AS_METHODPR(TileMapLayer2D, GetWidth, () const, int), AS_CALL_THISCALL));

    // int TileMapLayer2D::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int TileMapLayer2D::GetHeight() const", "int GetHeight() const", AS_METHODPR(TileMapLayer2D, GetHeight, () const, int), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("int TileMapLayer2D::GetHeight() const", "int get_height() const", AS_METHODPR(TileMapLayer2D, GetHeight, () const, int), AS_CALL_THISCALL));

    // Node* TileMapLayer2D::GetTileNode(int x, int y) const
    methods.Push(RegisterObjectMethodArgs("Node* TileMapLayer2D::GetTileNode(int x, int y) const", "Node@+ GetTileNode(int, int) const", AS_METHODPR(TileMapLayer2D, GetTileNode, (int, int) const, Node*), AS_CALL_THISCALL));

    // Tile2D* TileMapLayer2D::GetTile(int x, int y) const
    methods.Push(RegisterObjectMethodArgs("Tile2D* TileMapLayer2D::GetTile(int x, int y) const", "Tile2D@+ GetTile(int, int) const", AS_METHODPR(TileMapLayer2D, GetTile, (int, int) const, Tile2D*), AS_CALL_THISCALL));

    // unsigned TileMapLayer2D::GetNumObjects() const
    methods.Push(RegisterObjectMethodArgs("unsigned TileMapLayer2D::GetNumObjects() const", "uint GetNumObjects() const", AS_METHODPR(TileMapLayer2D, GetNumObjects, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned TileMapLayer2D::GetNumObjects() const", "uint get_numObjects() const", AS_METHODPR(TileMapLayer2D, GetNumObjects, () const, unsigned), AS_CALL_THISCALL));

    // TileMapObject2D* TileMapLayer2D::GetObject(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("TileMapObject2D* TileMapLayer2D::GetObject(unsigned index) const", "TileMapObject2D@+ GetObject(uint) const", AS_METHODPR(TileMapLayer2D, GetObject, (unsigned) const, TileMapObject2D*), AS_CALL_THISCALL));

    // Node* TileMapLayer2D::GetObjectNode(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("Node* TileMapLayer2D::GetObjectNode(unsigned index) const", "Node@+ GetObjectNode(uint) const", AS_METHODPR(TileMapLayer2D, GetObjectNode, (unsigned) const, Node*), AS_CALL_THISCALL));

    // Node* TileMapLayer2D::GetImageNode() const
    methods.Push(RegisterObjectMethodArgs("Node* TileMapLayer2D::GetImageNode() const", "Node@+ GetImageNode() const", AS_METHODPR(TileMapLayer2D, GetImageNode, () const, Node*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Node* TileMapLayer2D::GetImageNode() const", "Node@+ get_imageNode() const", AS_METHODPR(TileMapLayer2D, GetImageNode, () const, Node*), AS_CALL_THISCALL));
}

// class TileMapObject2D | File: ../Urho2D/TileMapDefs2D.h
void CollectMembers_TileMapObject2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // TileMapObjectType2D TileMapObject2D::GetObjectType() const
    methods.Push(RegisterObjectMethodArgs("TileMapObjectType2D TileMapObject2D::GetObjectType() const", "TileMapObjectType2D GetObjectType() const", AS_METHODPR(TileMapObject2D, GetObjectType, () const, TileMapObjectType2D), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("TileMapObjectType2D TileMapObject2D::GetObjectType() const", "TileMapObjectType2D get_objectType() const", AS_METHODPR(TileMapObject2D, GetObjectType, () const, TileMapObjectType2D), AS_CALL_THISCALL));

    // const String& TileMapObject2D::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& TileMapObject2D::GetName() const", "const String& GetName() const", AS_METHODPR(TileMapObject2D, GetName, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& TileMapObject2D::GetName() const", "const String& get_name() const", AS_METHODPR(TileMapObject2D, GetName, () const, const String&), AS_CALL_THISCALL));

    // const String& TileMapObject2D::GetType() const
    methods.Push(RegisterObjectMethodArgs("const String& TileMapObject2D::GetType() const", "const String& GetType() const", AS_METHODPR(TileMapObject2D, GetType, () const, const String&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const String& TileMapObject2D::GetType() const", "const String& get_type() const", AS_METHODPR(TileMapObject2D, GetType, () const, const String&), AS_CALL_THISCALL));

    // const Vector2& TileMapObject2D::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& TileMapObject2D::GetPosition() const", "const Vector2& GetPosition() const", AS_METHODPR(TileMapObject2D, GetPosition, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& TileMapObject2D::GetPosition() const", "const Vector2& get_position() const", AS_METHODPR(TileMapObject2D, GetPosition, () const, const Vector2&), AS_CALL_THISCALL));

    // const Vector2& TileMapObject2D::GetSize() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& TileMapObject2D::GetSize() const", "const Vector2& GetSize() const", AS_METHODPR(TileMapObject2D, GetSize, () const, const Vector2&), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("const Vector2& TileMapObject2D::GetSize() const", "const Vector2& get_size() const", AS_METHODPR(TileMapObject2D, GetSize, () const, const Vector2&), AS_CALL_THISCALL));

    // unsigned TileMapObject2D::GetNumPoints() const
    methods.Push(RegisterObjectMethodArgs("unsigned TileMapObject2D::GetNumPoints() const", "uint GetNumPoints() const", AS_METHODPR(TileMapObject2D, GetNumPoints, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned TileMapObject2D::GetNumPoints() const", "uint get_numPoints() const", AS_METHODPR(TileMapObject2D, GetNumPoints, () const, unsigned), AS_CALL_THISCALL));

    // const Vector2& TileMapObject2D::GetPoint(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const Vector2& TileMapObject2D::GetPoint(unsigned index) const", "const Vector2& GetPoint(uint) const", AS_METHODPR(TileMapObject2D, GetPoint, (unsigned) const, const Vector2&), AS_CALL_THISCALL));

    // unsigned TileMapObject2D::GetTileGid() const
    methods.Push(RegisterObjectMethodArgs("unsigned TileMapObject2D::GetTileGid() const", "uint GetTileGid() const", AS_METHODPR(TileMapObject2D, GetTileGid, () const, unsigned), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("unsigned TileMapObject2D::GetTileGid() const", "uint get_tileGid() const", AS_METHODPR(TileMapObject2D, GetTileGid, () const, unsigned), AS_CALL_THISCALL));

    // bool TileMapObject2D::GetTileFlipX() const
    methods.Push(RegisterObjectMethodArgs("bool TileMapObject2D::GetTileFlipX() const", "bool GetTileFlipX() const", AS_METHODPR(TileMapObject2D, GetTileFlipX, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool TileMapObject2D::GetTileFlipX() const", "bool get_tileFlipX() const", AS_METHODPR(TileMapObject2D, GetTileFlipX, () const, bool), AS_CALL_THISCALL));

    // bool TileMapObject2D::GetTileFlipY() const
    methods.Push(RegisterObjectMethodArgs("bool TileMapObject2D::GetTileFlipY() const", "bool GetTileFlipY() const", AS_METHODPR(TileMapObject2D, GetTileFlipY, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool TileMapObject2D::GetTileFlipY() const", "bool get_tileFlipY() const", AS_METHODPR(TileMapObject2D, GetTileFlipY, () const, bool), AS_CALL_THISCALL));

    // bool TileMapObject2D::GetTileSwapXY() const
    methods.Push(RegisterObjectMethodArgs("bool TileMapObject2D::GetTileSwapXY() const", "bool GetTileSwapXY() const", AS_METHODPR(TileMapObject2D, GetTileSwapXY, () const, bool), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("bool TileMapObject2D::GetTileSwapXY() const", "bool get_tileSwapXY() const", AS_METHODPR(TileMapObject2D, GetTileSwapXY, () const, bool), AS_CALL_THISCALL));

    // Sprite2D* TileMapObject2D::GetTileSprite() const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* TileMapObject2D::GetTileSprite() const", "Sprite2D@+ GetTileSprite() const", AS_METHODPR(TileMapObject2D, GetTileSprite, () const, Sprite2D*), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("Sprite2D* TileMapObject2D::GetTileSprite() const", "Sprite2D@+ get_tileSprite() const", AS_METHODPR(TileMapObject2D, GetTileSprite, () const, Sprite2D*), AS_CALL_THISCALL));

    // bool TileMapObject2D::HasProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool TileMapObject2D::HasProperty(const String& name) const", "bool HasProperty(const String&in) const", AS_METHODPR(TileMapObject2D, HasProperty, (const String&) const, bool), AS_CALL_THISCALL));

    // const String& TileMapObject2D::GetProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const String& TileMapObject2D::GetProperty(const String& name) const", "const String& GetProperty(const String&in) const", AS_METHODPR(TileMapObject2D, GetProperty, (const String&) const, const String&), AS_CALL_THISCALL));
}

// Vector<SharedPtr<TileMapObject2D>> TmxFile2D::GetTileCollisionShapes(unsigned gid) const
#ifdef URHO3D_URHO2D
// Vector<SharedPtr<TileMapObject2D>> TmxFile2D::GetTileCollisionShapes(unsigned gid) const | File: ../Urho2D/TmxFile2D.h
static CScriptArray* TmxFile2D_GetTileCollisionShapes_unsigned(TmxFile2D* ptr, unsigned gid)
{
    Vector<SharedPtr<TileMapObject2D>> result = ptr->GetTileCollisionShapes(gid);
    return VectorToHandleArray(result, "Array<TileMapObject2D@>");
}
#endif


// class TmxFile2D | File: ../Urho2D/TmxFile2D.h
void CollectMembers_TmxFile2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_Resource(methods);

    Remove(methods, "virtual bool Resource::BeginLoad(Deserializer& source)");
    Remove(methods, "virtual bool Resource::EndLoad()");

    // void TmxFile2D::AddLayer(Urho3D::TmxLayer2D* layer)
    // Error: type "Urho3D::TmxLayer2D*" can not automatically bind

    // bool TmxFile2D::BeginLoad(Deserializer& source) override
    methods.Push(RegisterObjectMethodArgs("bool TmxFile2D::BeginLoad(Deserializer& source) override", "bool BeginLoad(Deserializer&)", AS_METHODPR(TmxFile2D, BeginLoad, (Deserializer&), bool), AS_CALL_THISCALL));

    // bool TmxFile2D::EndLoad() override
    methods.Push(RegisterObjectMethodArgs("bool TmxFile2D::EndLoad() override", "bool EndLoad()", AS_METHODPR(TmxFile2D, EndLoad, (), bool), AS_CALL_THISCALL));

    // bool TmxFile2D::SetInfo(Orientation2D orientation, int width, int height, float tileWidth, float tileHeight)
    methods.Push(RegisterObjectMethodArgs("bool TmxFile2D::SetInfo(Orientation2D orientation, int width, int height, float tileWidth, float tileHeight)", "bool SetInfo(Orientation2D, int, int, float, float)", AS_METHODPR(TmxFile2D, SetInfo, (Orientation2D, int, int, float, float), bool), AS_CALL_THISCALL));

    // void TmxFile2D::AddLayer(unsigned index, TmxLayer2D* layer)
    methods.Push(RegisterObjectMethodArgs("void TmxFile2D::AddLayer(unsigned index, TmxLayer2D* layer)", "void AddLayer(uint, TmxLayer2D@+)", AS_METHODPR(TmxFile2D, AddLayer, (unsigned, TmxLayer2D*), void), AS_CALL_THISCALL));

    // const TileMapInfo2D& TmxFile2D::GetInfo() const
    methods.Push(RegisterObjectMethodArgs("const TileMapInfo2D& TmxFile2D::GetInfo() const", "const TileMapInfo2D& GetInfo() const", AS_METHODPR(TmxFile2D, GetInfo, () const, const TileMapInfo2D&), AS_CALL_THISCALL));

    // Sprite2D* TmxFile2D::GetTileSprite(unsigned gid) const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* TmxFile2D::GetTileSprite(unsigned gid) const", "Sprite2D@+ GetTileSprite(uint) const", AS_METHODPR(TmxFile2D, GetTileSprite, (unsigned) const, Sprite2D*), AS_CALL_THISCALL));

    // Vector<SharedPtr<TileMapObject2D>> TmxFile2D::GetTileCollisionShapes(unsigned gid) const
    methods.Push(RegisterObjectMethodArgs("Vector<SharedPtr<TileMapObject2D>> TmxFile2D::GetTileCollisionShapes(unsigned gid) const", "Array<TileMapObject2D@>@ GetTileCollisionShapes(uint) const", AS_FUNCTION_OBJFIRST(TmxFile2D_GetTileCollisionShapes_unsigned), AS_CALL_CDECL_OBJFIRST));

    // PropertySet2D* TmxFile2D::GetTilePropertySet(unsigned gid) const
    methods.Push(RegisterObjectMethodArgs("PropertySet2D* TmxFile2D::GetTilePropertySet(unsigned gid) const", "PropertySet2D@+ GetTilePropertySet(uint) const", AS_METHODPR(TmxFile2D, GetTilePropertySet, (unsigned) const, PropertySet2D*), AS_CALL_THISCALL));

    // unsigned TmxFile2D::GetNumLayers() const
    methods.Push(RegisterObjectMethodArgs("unsigned TmxFile2D::GetNumLayers() const", "uint GetNumLayers() const", AS_METHODPR(TmxFile2D, GetNumLayers, () const, unsigned), AS_CALL_THISCALL));

    // const TmxLayer2D* TmxFile2D::GetLayer(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("const TmxLayer2D* TmxFile2D::GetLayer(unsigned index) const", "TmxLayer2D@+ GetLayer(uint) const", AS_METHODPR(TmxFile2D, GetLayer, (unsigned) const, const TmxLayer2D*), AS_CALL_THISCALL));

    // void TmxFile2D::SetSpriteTextureEdgeOffset(float offset)
    methods.Push(RegisterObjectMethodArgs("void TmxFile2D::SetSpriteTextureEdgeOffset(float offset)", "void SetSpriteTextureEdgeOffset(float)", AS_METHODPR(TmxFile2D, SetSpriteTextureEdgeOffset, (float), void), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("void TmxFile2D::SetSpriteTextureEdgeOffset(float offset)", "void set_edgeOffset(float)", AS_METHODPR(TmxFile2D, SetSpriteTextureEdgeOffset, (float), void), AS_CALL_THISCALL));

    // float TmxFile2D::GetSpriteTextureEdgeOffset() const
    methods.Push(RegisterObjectMethodArgs("float TmxFile2D::GetSpriteTextureEdgeOffset() const", "float GetSpriteTextureEdgeOffset() const", AS_METHODPR(TmxFile2D, GetSpriteTextureEdgeOffset, () const, float), AS_CALL_THISCALL));
    methods.Push(RegisterObjectMethodArgs("float TmxFile2D::GetSpriteTextureEdgeOffset() const", "float get_edgeOffset() const", AS_METHODPR(TmxFile2D, GetSpriteTextureEdgeOffset, () const, float), AS_CALL_THISCALL));
}

// class TmxImageLayer2D | File: ../Urho2D/TmxFile2D.h
void CollectMembers_TmxImageLayer2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_TmxLayer2D(methods);

    // bool TmxImageLayer2D::Load(const XMLElement& element, const TileMapInfo2D& info)
    methods.Push(RegisterObjectMethodArgs("bool TmxImageLayer2D::Load(const XMLElement& element, const TileMapInfo2D& info)", "bool Load(const XMLElement&in, const TileMapInfo2D&in)", AS_METHODPR(TmxImageLayer2D, Load, (const XMLElement&, const TileMapInfo2D&), bool), AS_CALL_THISCALL));

    // const Vector2& TmxImageLayer2D::GetPosition() const
    methods.Push(RegisterObjectMethodArgs("const Vector2& TmxImageLayer2D::GetPosition() const", "const Vector2& GetPosition() const", AS_METHODPR(TmxImageLayer2D, GetPosition, () const, const Vector2&), AS_CALL_THISCALL));

    // const String& TmxImageLayer2D::GetSource() const
    methods.Push(RegisterObjectMethodArgs("const String& TmxImageLayer2D::GetSource() const", "const String& GetSource() const", AS_METHODPR(TmxImageLayer2D, GetSource, () const, const String&), AS_CALL_THISCALL));

    // Sprite2D* TmxImageLayer2D::GetSprite() const
    methods.Push(RegisterObjectMethodArgs("Sprite2D* TmxImageLayer2D::GetSprite() const", "Sprite2D@+ GetSprite() const", AS_METHODPR(TmxImageLayer2D, GetSprite, () const, Sprite2D*), AS_CALL_THISCALL));
}

// class TmxLayer2D | File: ../Urho2D/TmxFile2D.h
void CollectMembers_TmxLayer2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_RefCounted(methods);

    // TmxFile2D* TmxLayer2D::GetTmxFile() const
    methods.Push(RegisterObjectMethodArgs("TmxFile2D* TmxLayer2D::GetTmxFile() const", "TmxFile2D@+ GetTmxFile() const", AS_METHODPR(TmxLayer2D, GetTmxFile, () const, TmxFile2D*), AS_CALL_THISCALL));

    // TileMapLayerType2D TmxLayer2D::GetType() const
    methods.Push(RegisterObjectMethodArgs("TileMapLayerType2D TmxLayer2D::GetType() const", "TileMapLayerType2D GetType() const", AS_METHODPR(TmxLayer2D, GetType, () const, TileMapLayerType2D), AS_CALL_THISCALL));

    // const String& TmxLayer2D::GetName() const
    methods.Push(RegisterObjectMethodArgs("const String& TmxLayer2D::GetName() const", "const String& GetName() const", AS_METHODPR(TmxLayer2D, GetName, () const, const String&), AS_CALL_THISCALL));

    // int TmxLayer2D::GetWidth() const
    methods.Push(RegisterObjectMethodArgs("int TmxLayer2D::GetWidth() const", "int GetWidth() const", AS_METHODPR(TmxLayer2D, GetWidth, () const, int), AS_CALL_THISCALL));

    // int TmxLayer2D::GetHeight() const
    methods.Push(RegisterObjectMethodArgs("int TmxLayer2D::GetHeight() const", "int GetHeight() const", AS_METHODPR(TmxLayer2D, GetHeight, () const, int), AS_CALL_THISCALL));

    // bool TmxLayer2D::IsVisible() const
    methods.Push(RegisterObjectMethodArgs("bool TmxLayer2D::IsVisible() const", "bool IsVisible() const", AS_METHODPR(TmxLayer2D, IsVisible, () const, bool), AS_CALL_THISCALL));

    // bool TmxLayer2D::HasProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("bool TmxLayer2D::HasProperty(const String& name) const", "bool HasProperty(const String&in) const", AS_METHODPR(TmxLayer2D, HasProperty, (const String&) const, bool), AS_CALL_THISCALL));

    // const String& TmxLayer2D::GetProperty(const String& name) const
    methods.Push(RegisterObjectMethodArgs("const String& TmxLayer2D::GetProperty(const String& name) const", "const String& GetProperty(const String&in) const", AS_METHODPR(TmxLayer2D, GetProperty, (const String&) const, const String&), AS_CALL_THISCALL));
}

// class TmxObjectGroup2D | File: ../Urho2D/TmxFile2D.h
void CollectMembers_TmxObjectGroup2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_TmxLayer2D(methods);

    // void TmxObjectGroup2D::StoreObject(const XMLElement& objectElem, const SharedPtr<TileMapObject2D>& object, const TileMapInfo2D& info, bool isTile=false)
    // Error: type "const SharedPtr<TileMapObject2D>&" can not automatically bind

    // bool TmxObjectGroup2D::Load(const XMLElement& element, const TileMapInfo2D& info)
    methods.Push(RegisterObjectMethodArgs("bool TmxObjectGroup2D::Load(const XMLElement& element, const TileMapInfo2D& info)", "bool Load(const XMLElement&in, const TileMapInfo2D&in)", AS_METHODPR(TmxObjectGroup2D, Load, (const XMLElement&, const TileMapInfo2D&), bool), AS_CALL_THISCALL));

    // unsigned TmxObjectGroup2D::GetNumObjects() const
    methods.Push(RegisterObjectMethodArgs("unsigned TmxObjectGroup2D::GetNumObjects() const", "uint GetNumObjects() const", AS_METHODPR(TmxObjectGroup2D, GetNumObjects, () const, unsigned), AS_CALL_THISCALL));

    // TileMapObject2D* TmxObjectGroup2D::GetObject(unsigned index) const
    methods.Push(RegisterObjectMethodArgs("TileMapObject2D* TmxObjectGroup2D::GetObject(unsigned index) const", "TileMapObject2D@+ GetObject(uint) const", AS_METHODPR(TmxObjectGroup2D, GetObject, (unsigned) const, TileMapObject2D*), AS_CALL_THISCALL));
}

// class TmxTileLayer2D | File: ../Urho2D/TmxFile2D.h
void CollectMembers_TmxTileLayer2D(Vector<RegisterObjectMethodArgs>& methods)
{
    CollectMembers_TmxLayer2D(methods);

    // bool TmxTileLayer2D::Load(const XMLElement& element, const TileMapInfo2D& info)
    methods.Push(RegisterObjectMethodArgs("bool TmxTileLayer2D::Load(const XMLElement& element, const TileMapInfo2D& info)", "bool Load(const XMLElement&in, const TileMapInfo2D&in)", AS_METHODPR(TmxTileLayer2D, Load, (const XMLElement&, const TileMapInfo2D&), bool), AS_CALL_THISCALL));

    // Tile2D* TmxTileLayer2D::GetTile(int x, int y) const
    methods.Push(RegisterObjectMethodArgs("Tile2D* TmxTileLayer2D::GetTile(int x, int y) const", "Tile2D@+ GetTile(int, int) const", AS_METHODPR(TmxTileLayer2D, GetTile, (int, int) const, Tile2D*), AS_CALL_THISCALL));
}

// struct Vertex2D | File: ../Urho2D/Drawable2D.h
void CollectMembers_Vertex2D(Vector<RegisterObjectMethodArgs>& methods)
{
}

// struct ViewBatchInfo2D | File: ../Urho2D/Renderer2D.h
void CollectMembers_ViewBatchInfo2D(Vector<RegisterObjectMethodArgs>& methods)
{
}

#endif // def URHO3D_URHO2D

} // namespace Urho3D
